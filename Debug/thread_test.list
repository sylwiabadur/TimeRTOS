
thread_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b240  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  0800b3e0  0800b3e0  0001b3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b63c  0800b63c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b63c  0800b63c  0001b63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b644  0800b644  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b644  0800b644  0001b644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b648  0800b648  0001b648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b64c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004764  20000094  0800b6e0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200047f8  0800b6e0  000247f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023ac4  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004bdb  00000000  00000000  00043b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018b8  00000000  00000000  00048768  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001690  00000000  00000000  0004a020  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001caf9  00000000  00000000  0004b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019f36  00000000  00000000  000681a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f52a  00000000  00000000  000820df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121609  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067c4  00000000  00000000  00121684  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  00127e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00127e6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b3c8 	.word	0x0800b3c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	0800b3c8 	.word	0x0800b3c8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004e6:	463b      	mov	r3, r7
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <MX_ADC1_Init+0x98>)
 80004f4:	4a21      	ldr	r2, [pc, #132]	; (800057c <MX_ADC1_Init+0x9c>)
 80004f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <MX_ADC1_Init+0x98>)
 80004fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000500:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <MX_ADC1_Init+0x98>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000506:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <MX_ADC1_Init+0x98>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <MX_ADC1_Init+0x98>)
 800050e:	2200      	movs	r2, #0
 8000510:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_ADC1_Init+0x98>)
 8000514:	2200      	movs	r2, #0
 8000516:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <MX_ADC1_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <MX_ADC1_Init+0x98>)
 8000522:	4a17      	ldr	r2, [pc, #92]	; (8000580 <MX_ADC1_Init+0xa0>)
 8000524:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_ADC1_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_ADC1_Init+0x98>)
 800052e:	2201      	movs	r2, #1
 8000530:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_ADC1_Init+0x98>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_ADC1_Init+0x98>)
 800053c:	2201      	movs	r2, #1
 800053e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <MX_ADC1_Init+0x98>)
 8000542:	f000 fd9d 	bl	8001080 <HAL_ADC_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800054c:	f000 fb72 	bl	8000c34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000550:	2301      	movs	r3, #1
 8000552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055c:	463b      	mov	r3, r7
 800055e:	4619      	mov	r1, r3
 8000560:	4805      	ldr	r0, [pc, #20]	; (8000578 <MX_ADC1_Init+0x98>)
 8000562:	f000 feeb 	bl	800133c <HAL_ADC_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800056c:	f000 fb62 	bl	8000c34 <Error_Handler>
  }

}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20004064 	.word	0x20004064
 800057c:	40012000 	.word	0x40012000
 8000580:	0f000001 	.word	0x0f000001

08000584 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a17      	ldr	r2, [pc, #92]	; (8000600 <HAL_ADC_MspInit+0x7c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d127      	bne.n	80005f6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b4:	6453      	str	r3, [r2, #68]	; 0x44
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_ADC_MspInit+0x80>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005de:	2302      	movs	r3, #2
 80005e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e2:	2303      	movs	r3, #3
 80005e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <HAL_ADC_MspInit+0x84>)
 80005f2:	f001 fa2d 	bl	8001a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005f6:	bf00      	nop
 80005f8:	3728      	adds	r7, #40	; 0x28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40012000 	.word	0x40012000
 8000604:	40023800 	.word	0x40023800
 8000608:	40020000 	.word	0x40020000

0800060c <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	4a07      	ldr	r2, [pc, #28]	; (8000650 <vApplicationGetIdleTaskMemory+0x2c>)
 8000634:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	4a06      	ldr	r2, [pc, #24]	; (8000654 <vApplicationGetIdleTaskMemory+0x30>)
 800063a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200000b0 	.word	0x200000b0
 8000654:	20000104 	.word	0x20000104

08000658 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b096      	sub	sp, #88	; 0x58
 800065c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of blink01 */
  osThreadDef(blink01, StartBlink01, osPriorityNormal, 0, 128);
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_FREERTOS_Init+0x7c>)
 8000660:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000664:	461d      	mov	r5, r3
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink01Handle = osThreadCreate(osThread(blink01), NULL);
 8000672:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f007 ffec 	bl	8008656 <osThreadCreate>
 800067e:	4602      	mov	r2, r0
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_FREERTOS_Init+0x80>)
 8000682:	601a      	str	r2, [r3, #0]

  /* definition and creation of blink02 */
  osThreadDef(blink02, StartBlink02, osPriorityBelowNormal, 0, 128);
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_FREERTOS_Init+0x84>)
 8000686:	f107 0420 	add.w	r4, r7, #32
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink02Handle = osThreadCreate(osThread(blink02), NULL);
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f007 ffd9 	bl	8008656 <osThreadCreate>
 80006a4:	4602      	mov	r2, r0
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_FREERTOS_Init+0x88>)
 80006a8:	601a      	str	r2, [r3, #0]

  /* definition and creation of blink03 */
  osThreadDef(blink03, StartBlink03, osPriorityNormal, 0, 128);
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_FREERTOS_Init+0x8c>)
 80006ac:	1d3c      	adds	r4, r7, #4
 80006ae:	461d      	mov	r5, r3
 80006b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink03Handle = osThreadCreate(osThread(blink03), NULL);
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f007 ffc8 	bl	8008656 <osThreadCreate>
 80006c6:	4602      	mov	r2, r0
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_FREERTOS_Init+0x90>)
 80006ca:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006cc:	bf00      	nop
 80006ce:	3758      	adds	r7, #88	; 0x58
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bdb0      	pop	{r4, r5, r7, pc}
 80006d4:	0800b3e8 	.word	0x0800b3e8
 80006d8:	20004100 	.word	0x20004100
 80006dc:	0800b40c 	.word	0x0800b40c
 80006e0:	20004104 	.word	0x20004104
 80006e4:	0800b430 	.word	0x0800b430
 80006e8:	200040fc 	.word	0x200040fc

080006ec <StartBlink01>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void const * argument)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80006f4:	f00a f9d2 	bl	800aa9c <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartBlink01 */
  /* Infinite loop */
  for(;;)
  {
	srand(time(0));
 80006f8:	2000      	movs	r0, #0
 80006fa:	f00a fe2f 	bl	800b35c <time>
 80006fe:	4603      	mov	r3, r0
 8000700:	460c      	mov	r4, r1
 8000702:	4618      	mov	r0, r3
 8000704:	f00a fdc2 	bl	800b28c <srand>
	int num = (rand() % (10000 - 100 + 1)) + 100;
 8000708:	f00a fde4 	bl	800b2d4 <rand>
 800070c:	4602      	mov	r2, r0
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <StartBlink01+0x50>)
 8000710:	fb83 1302 	smull	r1, r3, r3, r2
 8000714:	12d9      	asrs	r1, r3, #11
 8000716:	17d3      	asrs	r3, r2, #31
 8000718:	1acb      	subs	r3, r1, r3
 800071a:	f242 61ad 	movw	r1, #9901	; 0x26ad
 800071e:	fb01 f303 	mul.w	r3, r1, r3
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	3364      	adds	r3, #100	; 0x64
 8000726:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8000728:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <StartBlink01+0x54>)
 800072e:	f001 fc69 	bl	8002004 <HAL_GPIO_TogglePin>
	osDelay(num);
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	4618      	mov	r0, r3
 8000736:	f007 ffda 	bl	80086ee <osDelay>
  {
 800073a:	e7dd      	b.n	80006f8 <StartBlink01+0xc>
 800073c:	34f3fa1b 	.word	0x34f3fa1b
 8000740:	40020c00 	.word	0x40020c00

08000744 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void const * argument)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
//
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
//
//	  printf("ADC PIN SET %u \n",raw);
	 // HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	  srand(time(0));
 800074c:	2000      	movs	r0, #0
 800074e:	f00a fe05 	bl	800b35c <time>
 8000752:	4603      	mov	r3, r0
 8000754:	460c      	mov	r4, r1
 8000756:	4618      	mov	r0, r3
 8000758:	f00a fd98 	bl	800b28c <srand>
	  int num = (rand() % (10000 - 100 + 1)) + 100;
 800075c:	f00a fdba 	bl	800b2d4 <rand>
 8000760:	4602      	mov	r2, r0
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <StartBlink02+0x4c>)
 8000764:	fb83 1302 	smull	r1, r3, r3, r2
 8000768:	12d9      	asrs	r1, r3, #11
 800076a:	17d3      	asrs	r3, r2, #31
 800076c:	1acb      	subs	r3, r1, r3
 800076e:	f242 61ad 	movw	r1, #9901	; 0x26ad
 8000772:	fb01 f303 	mul.w	r3, r1, r3
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	3364      	adds	r3, #100	; 0x64
 800077a:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 800077c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <StartBlink02+0x50>)
 8000782:	f001 fc3f 	bl	8002004 <HAL_GPIO_TogglePin>
	  osDelay(num);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4618      	mov	r0, r3
 800078a:	f007 ffb0 	bl	80086ee <osDelay>
  {
 800078e:	e7dd      	b.n	800074c <StartBlink02+0x8>
 8000790:	34f3fa1b 	.word	0x34f3fa1b
 8000794:	40020c00 	.word	0x40020c00

08000798 <StartBlink03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink03 */
void StartBlink03(void const * argument)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink03 */
  /* Infinite loop */
  for(;;)
  {
	  srand(time(0));
 80007a0:	2000      	movs	r0, #0
 80007a2:	f00a fddb 	bl	800b35c <time>
 80007a6:	4603      	mov	r3, r0
 80007a8:	460c      	mov	r4, r1
 80007aa:	4618      	mov	r0, r3
 80007ac:	f00a fd6e 	bl	800b28c <srand>
	  int num = (rand() % (10000 - 100 + 1)) + 100;
 80007b0:	f00a fd90 	bl	800b2d4 <rand>
 80007b4:	4602      	mov	r2, r0
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <StartBlink03+0x4c>)
 80007b8:	fb83 1302 	smull	r1, r3, r3, r2
 80007bc:	12d9      	asrs	r1, r3, #11
 80007be:	17d3      	asrs	r3, r2, #31
 80007c0:	1acb      	subs	r3, r1, r3
 80007c2:	f242 61ad 	movw	r1, #9901	; 0x26ad
 80007c6:	fb01 f303 	mul.w	r3, r1, r3
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	3364      	adds	r3, #100	; 0x64
 80007ce:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_14);
 80007d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <StartBlink03+0x50>)
 80007d6:	f001 fc15 	bl	8002004 <HAL_GPIO_TogglePin>
	  osDelay(num);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	4618      	mov	r0, r3
 80007de:	f007 ff86 	bl	80086ee <osDelay>
  {
 80007e2:	e7dd      	b.n	80007a0 <StartBlink03+0x8>
 80007e4:	34f3fa1b 	.word	0x34f3fa1b
 80007e8:	40020c00 	.word	0x40020c00

080007ec <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	; 0x30
 80007f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	4bb5      	ldr	r3, [pc, #724]	; (8000adc <MX_GPIO_Init+0x2f0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4ab4      	ldr	r2, [pc, #720]	; (8000adc <MX_GPIO_Init+0x2f0>)
 800080c:	f043 0310 	orr.w	r3, r3, #16
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4bb2      	ldr	r3, [pc, #712]	; (8000adc <MX_GPIO_Init+0x2f0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0310 	and.w	r3, r3, #16
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	4bae      	ldr	r3, [pc, #696]	; (8000adc <MX_GPIO_Init+0x2f0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4aad      	ldr	r2, [pc, #692]	; (8000adc <MX_GPIO_Init+0x2f0>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4bab      	ldr	r3, [pc, #684]	; (8000adc <MX_GPIO_Init+0x2f0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4ba7      	ldr	r3, [pc, #668]	; (8000adc <MX_GPIO_Init+0x2f0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4aa6      	ldr	r2, [pc, #664]	; (8000adc <MX_GPIO_Init+0x2f0>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4ba4      	ldr	r3, [pc, #656]	; (8000adc <MX_GPIO_Init+0x2f0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4ba0      	ldr	r3, [pc, #640]	; (8000adc <MX_GPIO_Init+0x2f0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a9f      	ldr	r2, [pc, #636]	; (8000adc <MX_GPIO_Init+0x2f0>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b9d      	ldr	r3, [pc, #628]	; (8000adc <MX_GPIO_Init+0x2f0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b99      	ldr	r3, [pc, #612]	; (8000adc <MX_GPIO_Init+0x2f0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a98      	ldr	r2, [pc, #608]	; (8000adc <MX_GPIO_Init+0x2f0>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b96      	ldr	r3, [pc, #600]	; (8000adc <MX_GPIO_Init+0x2f0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b92      	ldr	r3, [pc, #584]	; (8000adc <MX_GPIO_Init+0x2f0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a91      	ldr	r2, [pc, #580]	; (8000adc <MX_GPIO_Init+0x2f0>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b8f      	ldr	r3, [pc, #572]	; (8000adc <MX_GPIO_Init+0x2f0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2108      	movs	r1, #8
 80008ae:	488c      	ldr	r0, [pc, #560]	; (8000ae0 <MX_GPIO_Init+0x2f4>)
 80008b0:	f001 fb76 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2101      	movs	r1, #1
 80008b8:	488a      	ldr	r0, [pc, #552]	; (8000ae4 <MX_GPIO_Init+0x2f8>)
 80008ba:	f001 fb71 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80008be:	2200      	movs	r2, #0
 80008c0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008c4:	4888      	ldr	r0, [pc, #544]	; (8000ae8 <MX_GPIO_Init+0x2fc>)
 80008c6:	f001 fb6b 	bl	8001fa0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d0:	4886      	ldr	r0, [pc, #536]	; (8000aec <MX_GPIO_Init+0x300>)
 80008d2:	f001 fb65 	bl	8001fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80008d6:	2304      	movs	r3, #4
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	487d      	ldr	r0, [pc, #500]	; (8000ae0 <MX_GPIO_Init+0x2f4>)
 80008ea:	f001 f8b1 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ee:	2308      	movs	r3, #8
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4876      	ldr	r0, [pc, #472]	; (8000ae0 <MX_GPIO_Init+0x2f4>)
 8000906:	f001 f8a3 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800090a:	2332      	movs	r3, #50	; 0x32
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800090e:	4b78      	ldr	r3, [pc, #480]	; (8000af0 <MX_GPIO_Init+0x304>)
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4870      	ldr	r0, [pc, #448]	; (8000ae0 <MX_GPIO_Init+0x2f4>)
 800091e:	f001 f897 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 8000922:	f64f 73c1 	movw	r3, #65473	; 0xffc1
 8000926:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000928:	2303      	movs	r3, #3
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	486a      	ldr	r0, [pc, #424]	; (8000ae0 <MX_GPIO_Init+0x2f4>)
 8000938:	f001 f88a 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC1 PC2 PC4 
                           PC5 PC6 PC8 PC9 
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 800093c:	f642 3376 	movw	r3, #11126	; 0x2b76
 8000940:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000942:	2303      	movs	r3, #3
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4864      	ldr	r0, [pc, #400]	; (8000ae4 <MX_GPIO_Init+0x2f8>)
 8000952:	f001 f87d 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000956:	2301      	movs	r3, #1
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	485d      	ldr	r0, [pc, #372]	; (8000ae4 <MX_GPIO_Init+0x2f8>)
 800096e:	f001 f86f 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000972:	2308      	movs	r3, #8
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000982:	2305      	movs	r3, #5
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4855      	ldr	r0, [pc, #340]	; (8000ae4 <MX_GPIO_Init+0x2f8>)
 800098e:	f001 f85f 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000992:	2301      	movs	r3, #1
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000996:	4b56      	ldr	r3, [pc, #344]	; (8000af0 <MX_GPIO_Init+0x304>)
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4851      	ldr	r0, [pc, #324]	; (8000aec <MX_GPIO_Init+0x300>)
 80009a6:	f001 f853 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009aa:	230c      	movs	r3, #12
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ae:	2303      	movs	r3, #3
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	484b      	ldr	r0, [pc, #300]	; (8000aec <MX_GPIO_Init+0x300>)
 80009be:	f001 f847 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009c2:	2310      	movs	r3, #16
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009d2:	2306      	movs	r3, #6
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4843      	ldr	r0, [pc, #268]	; (8000aec <MX_GPIO_Init+0x300>)
 80009de:	f001 f837 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80009e2:	23e0      	movs	r3, #224	; 0xe0
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009f2:	2305      	movs	r3, #5
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	483b      	ldr	r0, [pc, #236]	; (8000aec <MX_GPIO_Init+0x300>)
 80009fe:	f001 f827 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13 
                           PB14 PB15 PB4 PB5 
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 8000a02:	f24e 1337 	movw	r3, #57655	; 0xe137
 8000a06:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4837      	ldr	r0, [pc, #220]	; (8000af4 <MX_GPIO_Init+0x308>)
 8000a18:	f001 f81a 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000a1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2e:	2305      	movs	r3, #5
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	482e      	ldr	r0, [pc, #184]	; (8000af4 <MX_GPIO_Init+0x308>)
 8000a3a:	f001 f809 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD0 PD1 PD2 PD3 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000a3e:	f640 73cf 	movw	r3, #4047	; 0xfcf
 8000a42:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a44:	2303      	movs	r3, #3
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4825      	ldr	r0, [pc, #148]	; (8000ae8 <MX_GPIO_Init+0x2fc>)
 8000a54:	f000 fffc 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000a58:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a5c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	481d      	ldr	r0, [pc, #116]	; (8000ae8 <MX_GPIO_Init+0x2fc>)
 8000a72:	f000 ffed 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a76:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a88:	2306      	movs	r3, #6
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <MX_GPIO_Init+0x2f8>)
 8000a94:	f000 ffdc 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480e      	ldr	r0, [pc, #56]	; (8000aec <MX_GPIO_Init+0x300>)
 8000ab2:	f000 ffcd 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ab6:	2320      	movs	r3, #32
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <MX_GPIO_Init+0x2fc>)
 8000aca:	f000 ffc1 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ace:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad4:	2312      	movs	r3, #18
 8000ad6:	623b      	str	r3, [r7, #32]
 8000ad8:	e00e      	b.n	8000af8 <MX_GPIO_Init+0x30c>
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	40020c00 	.word	0x40020c00
 8000aec:	40020000 	.word	0x40020000
 8000af0:	10120000 	.word	0x10120000
 8000af4:	40020400 	.word	0x40020400
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b00:	2304      	movs	r3, #4
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4803      	ldr	r0, [pc, #12]	; (8000b18 <MX_GPIO_Init+0x32c>)
 8000b0c:	f000 ffa0 	bl	8001a50 <HAL_GPIO_Init>

}
 8000b10:	bf00      	nop
 8000b12:	3730      	adds	r7, #48	; 0x30
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40020400 	.word	0x40020400

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b20:	f000 fa4a 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b24:	f000 f80c 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b28:	f7ff fe60 	bl	80007ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b2c:	f7ff fcd8 	bl	80004e0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000b30:	f000 f986 	bl	8000e40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000b34:	f7ff fd90 	bl	8000658 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000b38:	f007 fd86 	bl	8008648 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <main+0x20>
	...

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	; 0x50
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	2230      	movs	r2, #48	; 0x30
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f00a faeb 	bl	800b12a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	4b27      	ldr	r3, [pc, #156]	; (8000c08 <SystemClock_Config+0xc8>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a26      	ldr	r2, [pc, #152]	; (8000c08 <SystemClock_Config+0xc8>)
 8000b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <SystemClock_Config+0xc8>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <SystemClock_Config+0xcc>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a20      	ldr	r2, [pc, #128]	; (8000c0c <SystemClock_Config+0xcc>)
 8000b8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <SystemClock_Config+0xcc>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000baa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000bb4:	23c0      	movs	r3, #192	; 0xc0
 8000bb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc0:	f107 0320 	add.w	r3, r7, #32
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f002 ff43 	bl	8003a50 <HAL_RCC_OscConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bd0:	f000 f830 	bl	8000c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	2103      	movs	r1, #3
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 fa4d 	bl	8004090 <HAL_RCC_ClockConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bfc:	f000 f81a 	bl	8000c34 <Error_Handler>
  }
}
 8000c00:	bf00      	nop
 8000c02:	3750      	adds	r7, #80	; 0x50
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40007000 	.word	0x40007000

08000c10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d101      	bne.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c22:	f000 f9eb 	bl	8000ffc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40014400 	.word	0x40014400

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
 8000c4a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_MspInit+0x54>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a11      	ldr	r2, [pc, #68]	; (8000cac <HAL_MspInit+0x54>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <HAL_MspInit+0x54>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_MspInit+0x54>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_MspInit+0x54>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <HAL_MspInit+0x54>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	210f      	movs	r1, #15
 8000c9a:	f06f 0001 	mvn.w	r0, #1
 8000c9e:	f000 fe93 	bl	80019c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	2019      	movs	r0, #25
 8000cc6:	f000 fe7f 	bl	80019c8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000cca:	2019      	movs	r0, #25
 8000ccc:	f000 fea8 	bl	8001a20 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <HAL_InitTick+0xa0>)
 8000cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd8:	4a1d      	ldr	r2, [pc, #116]	; (8000d50 <HAL_InitTick+0xa0>)
 8000cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cde:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_InitTick+0xa0>)
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cec:	f107 0210 	add.w	r2, r7, #16
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f003 fc64 	bl	80045c4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cfc:	f003 fc4e 	bl	800459c <HAL_RCC_GetPCLK2Freq>
 8000d00:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d04:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d06:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0a:	0c9b      	lsrs	r3, r3, #18
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_InitTick+0xa8>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <HAL_InitTick+0xac>)
 8000d14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_InitTick+0xa8>)
 8000d18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_InitTick+0xa8>)
 8000d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d22:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_InitTick+0xa8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_InitTick+0xa8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000d30:	4809      	ldr	r0, [pc, #36]	; (8000d58 <HAL_InitTick+0xa8>)
 8000d32:	f003 fc79 	bl	8004628 <HAL_TIM_Base_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d104      	bne.n	8000d46 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000d3c:	4806      	ldr	r0, [pc, #24]	; (8000d58 <HAL_InitTick+0xa8>)
 8000d3e:	f003 fd1f 	bl	8004780 <HAL_TIM_Base_Start_IT>
 8000d42:	4603      	mov	r3, r0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3730      	adds	r7, #48	; 0x30
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	431bde83 	.word	0x431bde83
 8000d58:	20004108 	.word	0x20004108
 8000d5c:	40014400 	.word	0x40014400

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d9a:	f003 fd51 	bl	8004840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20004108 	.word	0x20004108

08000da8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <OTG_FS_IRQHandler+0x10>)
 8000dae:	f001 fbed 	bl	800258c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20004530 	.word	0x20004530

08000dbc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <_sbrk+0x50>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x16>
		heap_end = &end;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <_sbrk+0x50>)
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <_sbrk+0x54>)
 8000dd0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <_sbrk+0x50>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <_sbrk+0x50>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4413      	add	r3, r2
 8000de0:	466a      	mov	r2, sp
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d907      	bls.n	8000df6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000de6:	f00a f95b 	bl	800b0a0 <__errno>
 8000dea:	4602      	mov	r2, r0
 8000dec:	230c      	movs	r3, #12
 8000dee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	e006      	b.n	8000e04 <_sbrk+0x48>
	}

	heap_end += incr;
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <_sbrk+0x50>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a03      	ldr	r2, [pc, #12]	; (8000e0c <_sbrk+0x50>)
 8000e00:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000304 	.word	0x20000304
 8000e10:	200047f8 	.word	0x200047f8

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <SystemInit+0x28>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <SystemInit+0x28>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <SystemInit+0x28>)
 8000e2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e2e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <MX_USART1_UART_Init+0x50>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e78:	f003 fea6 	bl	8004bc8 <HAL_UART_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e82:	f7ff fed7 	bl	8000c34 <Error_Handler>
  }

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200040b8 	.word	0x200040b8
 8000e90:	40011000 	.word	0x40011000

08000e94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a28      	ldr	r2, [pc, #160]	; (8000f54 <HAL_UART_MspInit+0xc0>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d14a      	bne.n	8000f4c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a26      	ldr	r2, [pc, #152]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000ec0:	f043 0310 	orr.w	r3, r3, #16
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f003 0310 	and.w	r3, r3, #16
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a1f      	ldr	r2, [pc, #124]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_UART_MspInit+0xc4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	480d      	ldr	r0, [pc, #52]	; (8000f5c <HAL_UART_MspInit+0xc8>)
 8000f28:	f000 fd92 	bl	8001a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <HAL_UART_MspInit+0xcc>)
 8000f48:	f000 fd82 	bl	8001a50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40011000 	.word	0x40011000
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020400 	.word	0x40020400

08000f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f6a:	e003      	b.n	8000f74 <LoopCopyDataInit>

08000f6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f72:	3104      	adds	r1, #4

08000f74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f74:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f7c:	d3f6      	bcc.n	8000f6c <CopyDataInit>
  ldr  r2, =_sbss
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f80:	e002      	b.n	8000f88 <LoopFillZerobss>

08000f82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f84:	f842 3b04 	str.w	r3, [r2], #4

08000f88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f8c:	d3f9      	bcc.n	8000f82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f8e:	f7ff ff41 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f00a f88b 	bl	800b0ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f96:	f7ff fdc1 	bl	8000b1c <main>
  bx  lr    
 8000f9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fa0:	0800b64c 	.word	0x0800b64c
  ldr  r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fa8:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8000fac:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8000fb0:	200047f8 	.word	0x200047f8

08000fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <HAL_Init+0x40>)
 8000fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_Init+0x40>)
 8000fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_Init+0x40>)
 8000fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 fcd1 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f7ff fe62 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fec:	f7ff fe34 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023c00 	.word	0x40023c00

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008
 8001020:	20004148 	.word	0x20004148

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20004148 	.word	0x20004148

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_Delay+0x40>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffde 	bl	8001024 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000008 	.word	0x20000008

08001080 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e147      	b.n	8001326 <HAL_ADC_Init+0x2a6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4aa5      	ldr	r2, [pc, #660]	; (8001330 <HAL_ADC_Init+0x2b0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d004      	beq.n	80010aa <HAL_ADC_Init+0x2a>
 80010a0:	f240 1143 	movw	r1, #323	; 0x143
 80010a4:	48a3      	ldr	r0, [pc, #652]	; (8001334 <HAL_ADC_Init+0x2b4>)
 80010a6:	f7ff fdcc 	bl	8000c42 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d013      	beq.n	80010da <HAL_ADC_Init+0x5a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ba:	d00e      	beq.n	80010da <HAL_ADC_Init+0x5a>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010c4:	d009      	beq.n	80010da <HAL_ADC_Init+0x5a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80010ce:	d004      	beq.n	80010da <HAL_ADC_Init+0x5a>
 80010d0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80010d4:	4897      	ldr	r0, [pc, #604]	; (8001334 <HAL_ADC_Init+0x2b4>)
 80010d6:	f7ff fdb4 	bl	8000c42 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d013      	beq.n	800110a <HAL_ADC_Init+0x8a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ea:	d00e      	beq.n	800110a <HAL_ADC_Init+0x8a>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80010f4:	d009      	beq.n	800110a <HAL_ADC_Init+0x8a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80010fe:	d004      	beq.n	800110a <HAL_ADC_Init+0x8a>
 8001100:	f240 1145 	movw	r1, #325	; 0x145
 8001104:	488b      	ldr	r0, [pc, #556]	; (8001334 <HAL_ADC_Init+0x2b4>)
 8001106:	f7ff fd9c 	bl	8000c42 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d008      	beq.n	8001124 <HAL_ADC_Init+0xa4>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d004      	beq.n	8001124 <HAL_ADC_Init+0xa4>
 800111a:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800111e:	4885      	ldr	r0, [pc, #532]	; (8001334 <HAL_ADC_Init+0x2b4>)
 8001120:	f7ff fd8f 	bl	8000c42 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7e1b      	ldrb	r3, [r3, #24]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d008      	beq.n	800113e <HAL_ADC_Init+0xbe>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e1b      	ldrb	r3, [r3, #24]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d004      	beq.n	800113e <HAL_ADC_Init+0xbe>
 8001134:	f240 1147 	movw	r1, #327	; 0x147
 8001138:	487e      	ldr	r0, [pc, #504]	; (8001334 <HAL_ADC_Init+0x2b4>)
 800113a:	f7ff fd82 	bl	8000c42 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001142:	2b00      	cmp	r3, #0
 8001144:	d054      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800114e:	d04f      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001158:	d04a      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001162:	d045      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800116c:	d040      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001172:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001176:	d03b      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001180:	d036      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001186:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800118a:	d031      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001194:	d02c      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119a:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800119e:	d027      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80011a8:	d022      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 80011b2:	d01d      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80011bc:	d018      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c2:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80011c6:	d013      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011cc:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80011d0:	d00e      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80011da:	d009      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e0:	4a55      	ldr	r2, [pc, #340]	; (8001338 <HAL_ADC_Init+0x2b8>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d004      	beq.n	80011f0 <HAL_ADC_Init+0x170>
 80011e6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80011ea:	4852      	ldr	r0, [pc, #328]	; (8001334 <HAL_ADC_Init+0x2b4>)
 80011ec:	f7ff fd29 	bl	8000c42 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d009      	beq.n	800120c <HAL_ADC_Init+0x18c>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001200:	d004      	beq.n	800120c <HAL_ADC_Init+0x18c>
 8001202:	f240 1149 	movw	r1, #329	; 0x149
 8001206:	484b      	ldr	r0, [pc, #300]	; (8001334 <HAL_ADC_Init+0x2b4>)
 8001208:	f7ff fd1b 	bl	8000c42 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_ADC_Init+0x19c>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	2b10      	cmp	r3, #16
 800121a:	d904      	bls.n	8001226 <HAL_ADC_Init+0x1a6>
 800121c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001220:	4844      	ldr	r0, [pc, #272]	; (8001334 <HAL_ADC_Init+0x2b4>)
 8001222:	f7ff fd0e 	bl	8000c42 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800122c:	2b00      	cmp	r3, #0
 800122e:	d009      	beq.n	8001244 <HAL_ADC_Init+0x1c4>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001236:	2b01      	cmp	r3, #1
 8001238:	d004      	beq.n	8001244 <HAL_ADC_Init+0x1c4>
 800123a:	f240 114b 	movw	r1, #331	; 0x14b
 800123e:	483d      	ldr	r0, [pc, #244]	; (8001334 <HAL_ADC_Init+0x2b4>)
 8001240:	f7ff fcff 	bl	8000c42 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d00c      	beq.n	8001266 <HAL_ADC_Init+0x1e6>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d008      	beq.n	8001266 <HAL_ADC_Init+0x1e6>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d004      	beq.n	8001266 <HAL_ADC_Init+0x1e6>
 800125c:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8001260:	4834      	ldr	r0, [pc, #208]	; (8001334 <HAL_ADC_Init+0x2b4>)
 8001262:	f7ff fcee 	bl	8000c42 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d009      	beq.n	8001284 <HAL_ADC_Init+0x204>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d004      	beq.n	8001284 <HAL_ADC_Init+0x204>
 800127a:	f240 114d 	movw	r1, #333	; 0x14d
 800127e:	482d      	ldr	r0, [pc, #180]	; (8001334 <HAL_ADC_Init+0x2b4>)
 8001280:	f7ff fcdf 	bl	8000c42 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	4a2b      	ldr	r2, [pc, #172]	; (8001338 <HAL_ADC_Init+0x2b8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d017      	beq.n	80012be <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001292:	2b00      	cmp	r3, #0
 8001294:	d013      	beq.n	80012be <HAL_ADC_Init+0x23e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800129e:	d00e      	beq.n	80012be <HAL_ADC_Init+0x23e>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012a8:	d009      	beq.n	80012be <HAL_ADC_Init+0x23e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80012b2:	d004      	beq.n	80012be <HAL_ADC_Init+0x23e>
 80012b4:	f240 1151 	movw	r1, #337	; 0x151
 80012b8:	481e      	ldr	r0, [pc, #120]	; (8001334 <HAL_ADC_Init+0x2b4>)
 80012ba:	f7ff fcc2 	bl	8000c42 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d109      	bne.n	80012da <HAL_ADC_Init+0x25a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff f95c 	bl	8000584 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d118      	bne.n	8001318 <HAL_ADC_Init+0x298>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012ee:	f023 0302 	bic.w	r3, r3, #2
 80012f2:	f043 0202 	orr.w	r2, r3, #2
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f98c 	bl	8001618 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f023 0303 	bic.w	r3, r3, #3
 800130e:	f043 0201 	orr.w	r2, r3, #1
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	641a      	str	r2, [r3, #64]	; 0x40
 8001316:	e001      	b.n	800131c <HAL_ADC_Init+0x29c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40012000 	.word	0x40012000
 8001334:	0800b44c 	.word	0x0800b44c
 8001338:	0f000001 	.word	0x0f000001

0800133c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b12      	cmp	r3, #18
 8001350:	d904      	bls.n	800135c <HAL_ADC_ConfigChannel+0x20>
 8001352:	f44f 61cb 	mov.w	r1, #1624	; 0x658
 8001356:	486f      	ldr	r0, [pc, #444]	; (8001514 <HAL_ADC_ConfigChannel+0x1d8>)
 8001358:	f7ff fc73 	bl	8000c42 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_ADC_ConfigChannel+0x30>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b10      	cmp	r3, #16
 800136a:	d904      	bls.n	8001376 <HAL_ADC_ConfigChannel+0x3a>
 800136c:	f240 6159 	movw	r1, #1625	; 0x659
 8001370:	4868      	ldr	r0, [pc, #416]	; (8001514 <HAL_ADC_ConfigChannel+0x1d8>)
 8001372:	f7ff fc66 	bl	8000c42 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d020      	beq.n	80013c0 <HAL_ADC_ConfigChannel+0x84>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d01c      	beq.n	80013c0 <HAL_ADC_ConfigChannel+0x84>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d018      	beq.n	80013c0 <HAL_ADC_ConfigChannel+0x84>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d014      	beq.n	80013c0 <HAL_ADC_ConfigChannel+0x84>
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b04      	cmp	r3, #4
 800139c:	d010      	beq.n	80013c0 <HAL_ADC_ConfigChannel+0x84>
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b05      	cmp	r3, #5
 80013a4:	d00c      	beq.n	80013c0 <HAL_ADC_ConfigChannel+0x84>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d008      	beq.n	80013c0 <HAL_ADC_ConfigChannel+0x84>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b07      	cmp	r3, #7
 80013b4:	d004      	beq.n	80013c0 <HAL_ADC_ConfigChannel+0x84>
 80013b6:	f240 615a 	movw	r1, #1626	; 0x65a
 80013ba:	4856      	ldr	r0, [pc, #344]	; (8001514 <HAL_ADC_ConfigChannel+0x1d8>)
 80013bc:	f7ff fc41 	bl	8000c42 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x92>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e115      	b.n	80015fa <HAL_ADC_ConfigChannel+0x2be>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b09      	cmp	r3, #9
 80013dc:	d925      	bls.n	800142a <HAL_ADC_ConfigChannel+0xee>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68d9      	ldr	r1, [r3, #12]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	461a      	mov	r2, r3
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	3b1e      	subs	r3, #30
 80013f4:	2207      	movs	r2, #7
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	400a      	ands	r2, r1
 8001402:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68d9      	ldr	r1, [r3, #12]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	4603      	mov	r3, r0
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4403      	add	r3, r0
 800141c:	3b1e      	subs	r3, #30
 800141e:	409a      	lsls	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	e022      	b.n	8001470 <HAL_ADC_ConfigChannel+0x134>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6919      	ldr	r1, [r3, #16]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	b29b      	uxth	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	2207      	movs	r2, #7
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43da      	mvns	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	400a      	ands	r2, r1
 800144c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6919      	ldr	r1, [r3, #16]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	b29b      	uxth	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	4603      	mov	r3, r0
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4403      	add	r3, r0
 8001466:	409a      	lsls	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b06      	cmp	r3, #6
 8001476:	d824      	bhi.n	80014c2 <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	3b05      	subs	r3, #5
 800148a:	221f      	movs	r2, #31
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43da      	mvns	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	400a      	ands	r2, r1
 8001498:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	3b05      	subs	r3, #5
 80014b4:	fa00 f203 	lsl.w	r2, r0, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	635a      	str	r2, [r3, #52]	; 0x34
 80014c0:	e04e      	b.n	8001560 <HAL_ADC_ConfigChannel+0x224>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b0c      	cmp	r3, #12
 80014c8:	d826      	bhi.n	8001518 <HAL_ADC_ConfigChannel+0x1dc>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	3b23      	subs	r3, #35	; 0x23
 80014dc:	221f      	movs	r2, #31
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	400a      	ands	r2, r1
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	3b23      	subs	r3, #35	; 0x23
 8001506:	fa00 f203 	lsl.w	r2, r0, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	631a      	str	r2, [r3, #48]	; 0x30
 8001512:	e025      	b.n	8001560 <HAL_ADC_ConfigChannel+0x224>
 8001514:	0800b44c 	.word	0x0800b44c
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	3b41      	subs	r3, #65	; 0x41
 800152a:	221f      	movs	r2, #31
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43da      	mvns	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	400a      	ands	r2, r1
 8001538:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	b29b      	uxth	r3, r3
 8001546:	4618      	mov	r0, r3
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	3b41      	subs	r3, #65	; 0x41
 8001554:	fa00 f203 	lsl.w	r2, r0, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001560:	4b28      	ldr	r3, [pc, #160]	; (8001604 <HAL_ADC_ConfigChannel+0x2c8>)
 8001562:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a27      	ldr	r2, [pc, #156]	; (8001608 <HAL_ADC_ConfigChannel+0x2cc>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d10f      	bne.n	800158e <HAL_ADC_ConfigChannel+0x252>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b12      	cmp	r3, #18
 8001574:	d10b      	bne.n	800158e <HAL_ADC_ConfigChannel+0x252>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <HAL_ADC_ConfigChannel+0x2cc>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d12b      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x2b4>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <HAL_ADC_ConfigChannel+0x2d0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d003      	beq.n	80015aa <HAL_ADC_ConfigChannel+0x26e>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b11      	cmp	r3, #17
 80015a8:	d122      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x2b4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a11      	ldr	r2, [pc, #68]	; (800160c <HAL_ADC_ConfigChannel+0x2d0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d111      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x2b4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <HAL_ADC_ConfigChannel+0x2d4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a10      	ldr	r2, [pc, #64]	; (8001614 <HAL_ADC_ConfigChannel+0x2d8>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	0c9a      	lsrs	r2, r3, #18
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015e2:	e002      	b.n	80015ea <HAL_ADC_ConfigChannel+0x2ae>
      {
        counter--;
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f9      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x2a8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40012300 	.word	0x40012300
 8001608:	40012000 	.word	0x40012000
 800160c:	10000012 	.word	0x10000012
 8001610:	20000000 	.word	0x20000000
 8001614:	431bde83 	.word	0x431bde83

08001618 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001620:	4b7f      	ldr	r3, [pc, #508]	; (8001820 <ADC_Init+0x208>)
 8001622:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	431a      	orrs	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800164c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6859      	ldr	r1, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	021a      	lsls	r2, r3, #8
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001670:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6859      	ldr	r1, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001692:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6899      	ldr	r1, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	4a5e      	ldr	r2, [pc, #376]	; (8001824 <ADC_Init+0x20c>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d022      	beq.n	80016f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6899      	ldr	r1, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6899      	ldr	r1, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	e00f      	b.n	8001716 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001704:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001714:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0202 	bic.w	r2, r2, #2
 8001724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6899      	ldr	r1, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7e1b      	ldrb	r3, [r3, #24]
 8001730:	005a      	lsls	r2, r3, #1
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d028      	beq.n	8001796 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <ADC_Init+0x13c>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	2b08      	cmp	r3, #8
 8001752:	d904      	bls.n	800175e <ADC_Init+0x146>
 8001754:	f240 7175 	movw	r1, #1909	; 0x775
 8001758:	4833      	ldr	r0, [pc, #204]	; (8001828 <ADC_Init+0x210>)
 800175a:	f7ff fa72 	bl	8000c42 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800176c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800177c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	3b01      	subs	r3, #1
 800178a:	035a      	lsls	r2, r3, #13
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	e007      	b.n	80017a6 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017a4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	051a      	lsls	r2, r3, #20
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6899      	ldr	r1, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017e8:	025a      	lsls	r2, r3, #9
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001800:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6899      	ldr	r1, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	029a      	lsls	r2, r3, #10
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	609a      	str	r2, [r3, #8]
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40012300 	.word	0x40012300
 8001824:	0f000001 	.word	0x0f000001
 8001828:	0800b44c 	.word	0x0800b44c

0800182c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <__NVIC_GetPriorityGrouping+0x18>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	f003 0307 	and.w	r3, r3, #7
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db0b      	blt.n	80018ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f003 021f 	and.w	r2, r3, #31
 80018a8:	4907      	ldr	r1, [pc, #28]	; (80018c8 <__NVIC_EnableIRQ+0x38>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	2001      	movs	r0, #1
 80018b2:	fa00 f202 	lsl.w	r2, r0, r2
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000e100 	.word	0xe000e100

080018cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0a      	blt.n	80018f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	; (8001918 <__NVIC_SetPriority+0x4c>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f4:	e00a      	b.n	800190c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4908      	ldr	r1, [pc, #32]	; (800191c <__NVIC_SetPriority+0x50>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3b04      	subs	r3, #4
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	440b      	add	r3, r1
 800190a:	761a      	strb	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f1c3 0307 	rsb	r3, r3, #7
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf28      	it	cs
 800193e:	2304      	movcs	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	2b06      	cmp	r3, #6
 8001948:	d902      	bls.n	8001950 <NVIC_EncodePriority+0x30>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3b03      	subs	r3, #3
 800194e:	e000      	b.n	8001952 <NVIC_EncodePriority+0x32>
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001968:	f04f 31ff 	mov.w	r1, #4294967295
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43d9      	mvns	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	4313      	orrs	r3, r2
         );
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	; 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b07      	cmp	r3, #7
 8001994:	d00f      	beq.n	80019b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b06      	cmp	r3, #6
 800199a:	d00c      	beq.n	80019b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b05      	cmp	r3, #5
 80019a0:	d009      	beq.n	80019b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d006      	beq.n	80019b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d003      	beq.n	80019b6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80019ae:	2192      	movs	r1, #146	; 0x92
 80019b0:	4804      	ldr	r0, [pc, #16]	; (80019c4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80019b2:	f7ff f946 	bl	8000c42 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ff38 	bl	800182c <__NVIC_SetPriorityGrouping>
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	0800b484 	.word	0x0800b484

080019c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d903      	bls.n	80019e8 <HAL_NVIC_SetPriority+0x20>
 80019e0:	21aa      	movs	r1, #170	; 0xaa
 80019e2:	480e      	ldr	r0, [pc, #56]	; (8001a1c <HAL_NVIC_SetPriority+0x54>)
 80019e4:	f7ff f92d 	bl	8000c42 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b0f      	cmp	r3, #15
 80019ec:	d903      	bls.n	80019f6 <HAL_NVIC_SetPriority+0x2e>
 80019ee:	21ab      	movs	r1, #171	; 0xab
 80019f0:	480a      	ldr	r0, [pc, #40]	; (8001a1c <HAL_NVIC_SetPriority+0x54>)
 80019f2:	f7ff f926 	bl	8000c42 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f6:	f7ff ff3d 	bl	8001874 <__NVIC_GetPriorityGrouping>
 80019fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	68b9      	ldr	r1, [r7, #8]
 8001a00:	6978      	ldr	r0, [r7, #20]
 8001a02:	f7ff ff8d 	bl	8001920 <NVIC_EncodePriority>
 8001a06:	4602      	mov	r2, r0
 8001a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ff5c 	bl	80018cc <__NVIC_SetPriority>
}
 8001a14:	bf00      	nop
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	0800b484 	.word	0x0800b484

08001a20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	da03      	bge.n	8001a3a <HAL_NVIC_EnableIRQ+0x1a>
 8001a32:	21be      	movs	r1, #190	; 0xbe
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <HAL_NVIC_EnableIRQ+0x2c>)
 8001a36:	f7ff f904 	bl	8000c42 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ff26 	bl	8001890 <__NVIC_EnableIRQ>
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	0800b484 	.word	0x0800b484

08001a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a3b      	ldr	r2, [pc, #236]	; (8001b58 <HAL_GPIO_Init+0x108>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d017      	beq.n	8001a9e <HAL_GPIO_Init+0x4e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a3a      	ldr	r2, [pc, #232]	; (8001b5c <HAL_GPIO_Init+0x10c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_GPIO_Init+0x4e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a39      	ldr	r2, [pc, #228]	; (8001b60 <HAL_GPIO_Init+0x110>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00f      	beq.n	8001a9e <HAL_GPIO_Init+0x4e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a38      	ldr	r2, [pc, #224]	; (8001b64 <HAL_GPIO_Init+0x114>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00b      	beq.n	8001a9e <HAL_GPIO_Init+0x4e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a37      	ldr	r2, [pc, #220]	; (8001b68 <HAL_GPIO_Init+0x118>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x4e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a36      	ldr	r2, [pc, #216]	; (8001b6c <HAL_GPIO_Init+0x11c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x4e>
 8001a96:	21b3      	movs	r1, #179	; 0xb3
 8001a98:	4835      	ldr	r0, [pc, #212]	; (8001b70 <HAL_GPIO_Init+0x120>)
 8001a9a:	f7ff f8d2 	bl	8000c42 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_GPIO_Init+0x64>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	0c1b      	lsrs	r3, r3, #16
 8001aae:	041b      	lsls	r3, r3, #16
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x6c>
 8001ab4:	21b4      	movs	r1, #180	; 0xb4
 8001ab6:	482e      	ldr	r0, [pc, #184]	; (8001b70 <HAL_GPIO_Init+0x120>)
 8001ab8:	f7ff f8c3 	bl	8000c42 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d035      	beq.n	8001b30 <HAL_GPIO_Init+0xe0>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d031      	beq.n	8001b30 <HAL_GPIO_Init+0xe0>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b11      	cmp	r3, #17
 8001ad2:	d02d      	beq.n	8001b30 <HAL_GPIO_Init+0xe0>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d029      	beq.n	8001b30 <HAL_GPIO_Init+0xe0>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b12      	cmp	r3, #18
 8001ae2:	d025      	beq.n	8001b30 <HAL_GPIO_Init+0xe0>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a22      	ldr	r2, [pc, #136]	; (8001b74 <HAL_GPIO_Init+0x124>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d020      	beq.n	8001b30 <HAL_GPIO_Init+0xe0>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4a21      	ldr	r2, [pc, #132]	; (8001b78 <HAL_GPIO_Init+0x128>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d01b      	beq.n	8001b30 <HAL_GPIO_Init+0xe0>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <HAL_GPIO_Init+0x12c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d016      	beq.n	8001b30 <HAL_GPIO_Init+0xe0>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <HAL_GPIO_Init+0x130>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d011      	beq.n	8001b30 <HAL_GPIO_Init+0xe0>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <HAL_GPIO_Init+0x134>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00c      	beq.n	8001b30 <HAL_GPIO_Init+0xe0>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <HAL_GPIO_Init+0x138>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d007      	beq.n	8001b30 <HAL_GPIO_Init+0xe0>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0xe0>
 8001b28:	21b5      	movs	r1, #181	; 0xb5
 8001b2a:	4811      	ldr	r0, [pc, #68]	; (8001b70 <HAL_GPIO_Init+0x120>)
 8001b2c:	f7ff f889 	bl	8000c42 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00b      	beq.n	8001b50 <HAL_GPIO_Init+0x100>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d007      	beq.n	8001b50 <HAL_GPIO_Init+0x100>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x100>
 8001b48:	21b6      	movs	r1, #182	; 0xb6
 8001b4a:	4809      	ldr	r0, [pc, #36]	; (8001b70 <HAL_GPIO_Init+0x120>)
 8001b4c:	f7ff f879 	bl	8000c42 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	e211      	b.n	8001f7a <HAL_GPIO_Init+0x52a>
 8001b56:	bf00      	nop
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	40020800 	.word	0x40020800
 8001b64:	40020c00 	.word	0x40020c00
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40021c00 	.word	0x40021c00
 8001b70:	0800b4c0 	.word	0x0800b4c0
 8001b74:	10110000 	.word	0x10110000
 8001b78:	10210000 	.word	0x10210000
 8001b7c:	10310000 	.word	0x10310000
 8001b80:	10120000 	.word	0x10120000
 8001b84:	10220000 	.word	0x10220000
 8001b88:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	f040 81e5 	bne.w	8001f74 <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d00b      	beq.n	8001bca <HAL_GPIO_Init+0x17a>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d007      	beq.n	8001bca <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bbe:	2b11      	cmp	r3, #17
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b12      	cmp	r3, #18
 8001bc8:	d144      	bne.n	8001c54 <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00f      	beq.n	8001bf2 <HAL_GPIO_Init+0x1a2>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_GPIO_Init+0x1a2>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d007      	beq.n	8001bf2 <HAL_GPIO_Init+0x1a2>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x1a2>
 8001bea:	21c8      	movs	r1, #200	; 0xc8
 8001bec:	489f      	ldr	r0, [pc, #636]	; (8001e6c <HAL_GPIO_Init+0x41c>)
 8001bee:	f7ff f828 	bl	8000c42 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 0201 	and.w	r2, r3, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d004      	beq.n	8001c96 <HAL_GPIO_Init+0x246>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b12      	cmp	r3, #18
 8001c92:	f040 80a0 	bne.w	8001dd6 <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d077      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b09      	cmp	r3, #9
 8001ca4:	d073      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d06f      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d06b      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d067      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d063      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d05f      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d05b      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d057      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d053      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d04f      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d04b      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d047      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d043      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b05      	cmp	r3, #5
 8001d0c:	d03f      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	2b05      	cmp	r3, #5
 8001d14:	d03b      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	d037      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d033      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d02f      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b05      	cmp	r3, #5
 8001d34:	d02b      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d027      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	2b07      	cmp	r3, #7
 8001d44:	d023      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2b07      	cmp	r3, #7
 8001d4c:	d01f      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	2b07      	cmp	r3, #7
 8001d54:	d01b      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d017      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	2b0a      	cmp	r3, #10
 8001d64:	d013      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	2b09      	cmp	r3, #9
 8001d6c:	d00f      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b09      	cmp	r3, #9
 8001d74:	d00b      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	d007      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x33e>
 8001d86:	21e0      	movs	r1, #224	; 0xe0
 8001d88:	4838      	ldr	r0, [pc, #224]	; (8001e6c <HAL_GPIO_Init+0x41c>)
 8001d8a:	f7fe ff5a 	bl	8000c42 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	08da      	lsrs	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3208      	adds	r2, #8
 8001d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	220f      	movs	r2, #15
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	69b9      	ldr	r1, [r7, #24]
 8001dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	2203      	movs	r2, #3
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0203 	and.w	r2, r3, #3
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80ae 	beq.w	8001f74 <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_GPIO_Init+0x420>)
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e20:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <HAL_GPIO_Init+0x420>)
 8001e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e26:	6453      	str	r3, [r2, #68]	; 0x44
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_GPIO_Init+0x420>)
 8001e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e34:	4a0f      	ldr	r2, [pc, #60]	; (8001e74 <HAL_GPIO_Init+0x424>)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <HAL_GPIO_Init+0x428>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d025      	beq.n	8001eac <HAL_GPIO_Init+0x45c>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a06      	ldr	r2, [pc, #24]	; (8001e7c <HAL_GPIO_Init+0x42c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d01f      	beq.n	8001ea8 <HAL_GPIO_Init+0x458>
 8001e68:	e00a      	b.n	8001e80 <HAL_GPIO_Init+0x430>
 8001e6a:	bf00      	nop
 8001e6c:	0800b4c0 	.word	0x0800b4c0
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40013800 	.word	0x40013800
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a42      	ldr	r2, [pc, #264]	; (8001f8c <HAL_GPIO_Init+0x53c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d00d      	beq.n	8001ea4 <HAL_GPIO_Init+0x454>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a41      	ldr	r2, [pc, #260]	; (8001f90 <HAL_GPIO_Init+0x540>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d007      	beq.n	8001ea0 <HAL_GPIO_Init+0x450>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a40      	ldr	r2, [pc, #256]	; (8001f94 <HAL_GPIO_Init+0x544>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d101      	bne.n	8001e9c <HAL_GPIO_Init+0x44c>
 8001e98:	2304      	movs	r3, #4
 8001e9a:	e008      	b.n	8001eae <HAL_GPIO_Init+0x45e>
 8001e9c:	2307      	movs	r3, #7
 8001e9e:	e006      	b.n	8001eae <HAL_GPIO_Init+0x45e>
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e004      	b.n	8001eae <HAL_GPIO_Init+0x45e>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e002      	b.n	8001eae <HAL_GPIO_Init+0x45e>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_GPIO_Init+0x45e>
 8001eac:	2300      	movs	r3, #0
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	f002 0203 	and.w	r2, r2, #3
 8001eb4:	0092      	lsls	r2, r2, #2
 8001eb6:	4093      	lsls	r3, r2
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ebe:	4936      	ldr	r1, [pc, #216]	; (8001f98 <HAL_GPIO_Init+0x548>)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ecc:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <HAL_GPIO_Init+0x54c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef0:	4a2a      	ldr	r2, [pc, #168]	; (8001f9c <HAL_GPIO_Init+0x54c>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ef6:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <HAL_GPIO_Init+0x54c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f1a:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <HAL_GPIO_Init+0x54c>)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_GPIO_Init+0x54c>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f44:	4a15      	ldr	r2, [pc, #84]	; (8001f9c <HAL_GPIO_Init+0x54c>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_GPIO_Init+0x54c>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <HAL_GPIO_Init+0x54c>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	3301      	adds	r3, #1
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	2b0f      	cmp	r3, #15
 8001f7e:	f67f ae05 	bls.w	8001b8c <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8001f82:	bf00      	nop
 8001f84:	3720      	adds	r7, #32
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40020c00 	.word	0x40020c00
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40013800 	.word	0x40013800
 8001f9c:	40013c00 	.word	0x40013c00

08001fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
 8001fac:	4613      	mov	r3, r2
 8001fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d004      	beq.n	8001fc0 <HAL_GPIO_WritePin+0x20>
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	0c1b      	lsrs	r3, r3, #16
 8001fba:	041b      	lsls	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d004      	beq.n	8001fca <HAL_GPIO_WritePin+0x2a>
 8001fc0:	f240 119f 	movw	r1, #415	; 0x19f
 8001fc4:	480e      	ldr	r0, [pc, #56]	; (8002000 <HAL_GPIO_WritePin+0x60>)
 8001fc6:	f7fe fe3c 	bl	8000c42 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001fca:	787b      	ldrb	r3, [r7, #1]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <HAL_GPIO_WritePin+0x40>
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d004      	beq.n	8001fe0 <HAL_GPIO_WritePin+0x40>
 8001fd6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001fda:	4809      	ldr	r0, [pc, #36]	; (8002000 <HAL_GPIO_WritePin+0x60>)
 8001fdc:	f7fe fe31 	bl	8000c42 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fec:	e003      	b.n	8001ff6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fee:	887b      	ldrh	r3, [r7, #2]
 8001ff0:	041a      	lsls	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	619a      	str	r2, [r3, #24]
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	0800b4c0 	.word	0x0800b4c0

08002004 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002010:	887b      	ldrh	r3, [r7, #2]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d004      	beq.n	8002020 <HAL_GPIO_TogglePin+0x1c>
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	0c1b      	lsrs	r3, r3, #16
 800201a:	041b      	lsls	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	d004      	beq.n	800202a <HAL_GPIO_TogglePin+0x26>
 8002020:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002024:	480a      	ldr	r0, [pc, #40]	; (8002050 <HAL_GPIO_TogglePin+0x4c>)
 8002026:	f7fe fe0c 	bl	8000c42 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	887b      	ldrh	r3, [r7, #2]
 8002030:	401a      	ands	r2, r3
 8002032:	887b      	ldrh	r3, [r7, #2]
 8002034:	429a      	cmp	r2, r3
 8002036:	d104      	bne.n	8002042 <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	041a      	lsls	r2, r3, #16
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002040:	e002      	b.n	8002048 <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8002042:	887a      	ldrh	r2, [r7, #2]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	619a      	str	r2, [r3, #24]
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	0800b4c0 	.word	0x0800b4c0

08002054 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002056:	b08f      	sub	sp, #60	; 0x3c
 8002058:	af0a      	add	r7, sp, #40	; 0x28
 800205a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e05d      	b.n	8002122 <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800206e:	d003      	beq.n	8002078 <HAL_HCD_Init+0x24>
 8002070:	217a      	movs	r1, #122	; 0x7a
 8002072:	482e      	ldr	r0, [pc, #184]	; (800212c <HAL_HCD_Init+0xd8>)
 8002074:	f7fe fde5 	bl	8000c42 <assert_failed>

  USBx = hhcd->Instance;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f008 fd56 	bl	800ab44 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2203      	movs	r2, #3
 800209c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 fa6c 	bl	8005594 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	603b      	str	r3, [r7, #0]
 80020c2:	687e      	ldr	r6, [r7, #4]
 80020c4:	466d      	mov	r5, sp
 80020c6:	f106 0410 	add.w	r4, r6, #16
 80020ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020da:	1d33      	adds	r3, r6, #4
 80020dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020de:	6838      	ldr	r0, [r7, #0]
 80020e0:	f003 f9e6 	bl	80054b0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2101      	movs	r1, #1
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fa63 	bl	80055b6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	603b      	str	r3, [r7, #0]
 80020f6:	687e      	ldr	r6, [r7, #4]
 80020f8:	466d      	mov	r5, sp
 80020fa:	f106 0410 	add.w	r4, r6, #16
 80020fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002106:	e894 0003 	ldmia.w	r4, {r0, r1}
 800210a:	e885 0003 	stmia.w	r5, {r0, r1}
 800210e:	1d33      	adds	r3, r6, #4
 8002110:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002112:	6838      	ldr	r0, [r7, #0]
 8002114:	f003 fb76 	bl	8005804 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800212a:	bf00      	nop
 800212c:	0800b4fc 	.word	0x0800b4fc

08002130 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af04      	add	r7, sp, #16
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	4608      	mov	r0, r1
 800213a:	4611      	mov	r1, r2
 800213c:	461a      	mov	r2, r3
 800213e:	4603      	mov	r3, r0
 8002140:	70fb      	strb	r3, [r7, #3]
 8002142:	460b      	mov	r3, r1
 8002144:	70bb      	strb	r3, [r7, #2]
 8002146:	4613      	mov	r3, r2
 8002148:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_HCD_HC_Init+0x28>
 8002154:	2302      	movs	r3, #2
 8002156:	e07f      	b.n	8002258 <HAL_HCD_HC_Init+0x128>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002160:	78fa      	ldrb	r2, [r7, #3]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	333d      	adds	r3, #61	; 0x3d
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	3338      	adds	r3, #56	; 0x38
 8002184:	787a      	ldrb	r2, [r7, #1]
 8002186:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	3340      	adds	r3, #64	; 0x40
 8002198:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800219a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	440b      	add	r3, r1
 80021aa:	3339      	adds	r3, #57	; 0x39
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	440b      	add	r3, r1
 80021be:	333f      	adds	r3, #63	; 0x3f
 80021c0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80021c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	78bb      	ldrb	r3, [r7, #2]
 80021ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ce:	b2d8      	uxtb	r0, r3
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	333a      	adds	r3, #58	; 0x3a
 80021de:	4602      	mov	r2, r0
 80021e0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80021e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	da0a      	bge.n	8002200 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	333b      	adds	r3, #59	; 0x3b
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	e009      	b.n	8002214 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	333b      	adds	r3, #59	; 0x3b
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	333c      	adds	r3, #60	; 0x3c
 8002224:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002228:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	787c      	ldrb	r4, [r7, #1]
 8002230:	78ba      	ldrb	r2, [r7, #2]
 8002232:	78f9      	ldrb	r1, [r7, #3]
 8002234:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002236:	9302      	str	r3, [sp, #8]
 8002238:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	4623      	mov	r3, r4
 8002246:	f003 fc5f 	bl	8005b08 <USB_HC_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	bd90      	pop	{r4, r7, pc}

08002260 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_HCD_HC_Halt+0x1e>
 800227a:	2302      	movs	r3, #2
 800227c:	e00f      	b.n	800229e <HAL_HCD_HC_Halt+0x3e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f003 fe99 	bl	8005fc6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800229c:	7bfb      	ldrb	r3, [r7, #15]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	70fb      	strb	r3, [r7, #3]
 80022ba:	460b      	mov	r3, r1
 80022bc:	70bb      	strb	r3, [r7, #2]
 80022be:	4613      	mov	r3, r2
 80022c0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	333b      	adds	r3, #59	; 0x3b
 80022d2:	78ba      	ldrb	r2, [r7, #2]
 80022d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	333f      	adds	r3, #63	; 0x3f
 80022e6:	787a      	ldrb	r2, [r7, #1]
 80022e8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80022ea:	7c3b      	ldrb	r3, [r7, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d114      	bne.n	800231a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	440b      	add	r3, r1
 80022fe:	3342      	adds	r3, #66	; 0x42
 8002300:	2203      	movs	r2, #3
 8002302:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	440b      	add	r3, r1
 8002312:	333d      	adds	r3, #61	; 0x3d
 8002314:	7f3a      	ldrb	r2, [r7, #28]
 8002316:	701a      	strb	r2, [r3, #0]
 8002318:	e009      	b.n	800232e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	3342      	adds	r3, #66	; 0x42
 800232a:	2202      	movs	r2, #2
 800232c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800232e:	787b      	ldrb	r3, [r7, #1]
 8002330:	2b03      	cmp	r3, #3
 8002332:	f200 80d6 	bhi.w	80024e2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002336:	a201      	add	r2, pc, #4	; (adr r2, 800233c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233c:	0800234d 	.word	0x0800234d
 8002340:	080024cd 	.word	0x080024cd
 8002344:	080023b9 	.word	0x080023b9
 8002348:	08002443 	.word	0x08002443
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800234c:	7c3b      	ldrb	r3, [r7, #16]
 800234e:	2b01      	cmp	r3, #1
 8002350:	f040 80c9 	bne.w	80024e6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002354:	78bb      	ldrb	r3, [r7, #2]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f040 80c5 	bne.w	80024e6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800235c:	8b3b      	ldrh	r3, [r7, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d109      	bne.n	8002376 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	3351      	adds	r3, #81	; 0x51
 8002372:	2201      	movs	r2, #1
 8002374:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	440b      	add	r3, r1
 8002384:	3351      	adds	r3, #81	; 0x51
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10a      	bne.n	80023a2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	440b      	add	r3, r1
 800239a:	3342      	adds	r3, #66	; 0x42
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023a0:	e0a1      	b.n	80024e6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023a2:	78fa      	ldrb	r2, [r7, #3]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	440b      	add	r3, r1
 80023b0:	3342      	adds	r3, #66	; 0x42
 80023b2:	2202      	movs	r2, #2
 80023b4:	701a      	strb	r2, [r3, #0]
      break;
 80023b6:	e096      	b.n	80024e6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80023b8:	78bb      	ldrb	r3, [r7, #2]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d120      	bne.n	8002400 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	440b      	add	r3, r1
 80023cc:	3351      	adds	r3, #81	; 0x51
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10a      	bne.n	80023ea <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	440b      	add	r3, r1
 80023e2:	3342      	adds	r3, #66	; 0x42
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80023e8:	e07e      	b.n	80024e8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	440b      	add	r3, r1
 80023f8:	3342      	adds	r3, #66	; 0x42
 80023fa:	2202      	movs	r2, #2
 80023fc:	701a      	strb	r2, [r3, #0]
      break;
 80023fe:	e073      	b.n	80024e8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	440b      	add	r3, r1
 800240e:	3350      	adds	r3, #80	; 0x50
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10a      	bne.n	800242c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	3342      	adds	r3, #66	; 0x42
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
      break;
 800242a:	e05d      	b.n	80024e8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	440b      	add	r3, r1
 800243a:	3342      	adds	r3, #66	; 0x42
 800243c:	2202      	movs	r2, #2
 800243e:	701a      	strb	r2, [r3, #0]
      break;
 8002440:	e052      	b.n	80024e8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002442:	78bb      	ldrb	r3, [r7, #2]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d120      	bne.n	800248a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	3351      	adds	r3, #81	; 0x51
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800245e:	78fa      	ldrb	r2, [r7, #3]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	440b      	add	r3, r1
 800246c:	3342      	adds	r3, #66	; 0x42
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002472:	e039      	b.n	80024e8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	440b      	add	r3, r1
 8002482:	3342      	adds	r3, #66	; 0x42
 8002484:	2202      	movs	r2, #2
 8002486:	701a      	strb	r2, [r3, #0]
      break;
 8002488:	e02e      	b.n	80024e8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800248a:	78fa      	ldrb	r2, [r7, #3]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	440b      	add	r3, r1
 8002498:	3350      	adds	r3, #80	; 0x50
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	3342      	adds	r3, #66	; 0x42
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
      break;
 80024b4:	e018      	b.n	80024e8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024b6:	78fa      	ldrb	r2, [r7, #3]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	3342      	adds	r3, #66	; 0x42
 80024c6:	2202      	movs	r2, #2
 80024c8:	701a      	strb	r2, [r3, #0]
      break;
 80024ca:	e00d      	b.n	80024e8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	440b      	add	r3, r1
 80024da:	3342      	adds	r3, #66	; 0x42
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
      break;
 80024e0:	e002      	b.n	80024e8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80024e2:	bf00      	nop
 80024e4:	e000      	b.n	80024e8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80024e6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	440b      	add	r3, r1
 80024f6:	3344      	adds	r3, #68	; 0x44
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	8b39      	ldrh	r1, [r7, #24]
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4403      	add	r3, r0
 800250c:	3348      	adds	r3, #72	; 0x48
 800250e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	440b      	add	r3, r1
 800251e:	335c      	adds	r3, #92	; 0x5c
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	440b      	add	r3, r1
 8002532:	334c      	adds	r3, #76	; 0x4c
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	440b      	add	r3, r1
 8002546:	3339      	adds	r3, #57	; 0x39
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800254c:	78fa      	ldrb	r2, [r7, #3]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	440b      	add	r3, r1
 800255a:	335d      	adds	r3, #93	; 0x5d
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	3338      	adds	r3, #56	; 0x38
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	18d1      	adds	r1, r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	f003 fbce 	bl	8005d1c <USB_HC_StartXfer>
 8002580:	4603      	mov	r3, r0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop

0800258c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f003 f8eb 	bl	800577e <USB_GetMode>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	f040 80ef 	bne.w	800278e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 f8cf 	bl	8005758 <USB_ReadInterrupts>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80e5 	beq.w	800278c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 f8c6 	bl	8005758 <USB_ReadInterrupts>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025d6:	d104      	bne.n	80025e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 f8b6 	bl	8005758 <USB_ReadInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025f6:	d104      	bne.n	8002602 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002600:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 f8a6 	bl	8005758 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002616:	d104      	bne.n	8002622 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002620:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f003 f896 	bl	8005758 <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b02      	cmp	r3, #2
 8002634:	d103      	bne.n	800263e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2202      	movs	r2, #2
 800263c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f003 f888 	bl	8005758 <USB_ReadInterrupts>
 8002648:	4603      	mov	r3, r0
 800264a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800264e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002652:	d115      	bne.n	8002680 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800265c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d108      	bne.n	8002680 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f008 fae6 	bl	800ac40 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2101      	movs	r1, #1
 800267a:	4618      	mov	r0, r3
 800267c:	f003 f97e 	bl	800597c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f003 f867 	bl	8005758 <USB_ReadInterrupts>
 800268a:	4603      	mov	r3, r0
 800268c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002694:	d102      	bne.n	800269c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f001 f966 	bl	8003968 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f003 f859 	bl	8005758 <USB_ReadInterrupts>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d106      	bne.n	80026be <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f008 faa9 	bl	800ac08 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2208      	movs	r2, #8
 80026bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 f848 	bl	8005758 <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026d2:	d138      	bne.n	8002746 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f003 fc63 	bl	8005fa4 <USB_HC_ReadInterrupt>
 80026de:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	e025      	b.n	8002732 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	fa22 f303 	lsr.w	r3, r2, r3
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d018      	beq.n	800272c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800270c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002710:	d106      	bne.n	8002720 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f8cf 	bl	80028bc <HCD_HC_IN_IRQHandler>
 800271e:	e005      	b.n	800272c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	4619      	mov	r1, r3
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fcfd 	bl	8003126 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	3301      	adds	r3, #1
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	429a      	cmp	r2, r3
 800273a:	d3d4      	bcc.n	80026e6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002744:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f003 f804 	bl	8005758 <USB_ReadInterrupts>
 8002750:	4603      	mov	r3, r0
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b10      	cmp	r3, #16
 8002758:	d101      	bne.n	800275e <HAL_HCD_IRQHandler+0x1d2>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_HCD_IRQHandler+0x1d4>
 800275e:	2300      	movs	r3, #0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d014      	beq.n	800278e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0210 	bic.w	r2, r2, #16
 8002772:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f001 f84b 	bl	8003810 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0210 	orr.w	r2, r2, #16
 8002788:	619a      	str	r2, [r3, #24]
 800278a:	e000      	b.n	800278e <HAL_HCD_IRQHandler+0x202>
      return;
 800278c:	bf00      	nop
    }
  }
}
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_HCD_Start+0x16>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e013      	b.n	80027d2 <HAL_HCD_Start+0x3e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 fedb 	bl	8005572 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2101      	movs	r1, #1
 80027c2:	4618      	mov	r0, r3
 80027c4:	f003 f93e 	bl	8005a44 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_HCD_Stop+0x16>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e00d      	b.n	800280c <HAL_HCD_Stop+0x32>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 fd1d 	bl	800623c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f003 f8e5 	bl	80059f0 <USB_ResetPort>
 8002826:	4603      	mov	r3, r0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	335c      	adds	r3, #92	; 0x5c
 800284c:	781b      	ldrb	r3, [r3, #0]
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	460b      	mov	r3, r1
 8002864:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	334c      	adds	r3, #76	; 0x4c
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f003 f927 	bl	8005ae4 <USB_GetCurrentFrame>
 8002896:	4603      	mov	r3, r0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f003 f902 	bl	8005ab6 <USB_GetHostSpeed>
 80028b2:	4603      	mov	r3, r0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d119      	bne.n	8002920 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f8:	461a      	mov	r2, r3
 80028fa:	2304      	movs	r3, #4
 80028fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4413      	add	r3, r2
 8002906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	0151      	lsls	r1, r2, #5
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	440a      	add	r2, r1
 8002914:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	60d3      	str	r3, [r2, #12]
 800291e:	e0ce      	b.n	8002abe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002936:	d12c      	bne.n	8002992 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002944:	461a      	mov	r2, r3
 8002946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800294a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	440b      	add	r3, r1
 800295a:	335d      	adds	r3, #93	; 0x5d
 800295c:	2207      	movs	r2, #7
 800295e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	0151      	lsls	r1, r2, #5
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	440a      	add	r2, r1
 8002976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800297a:	f043 0302 	orr.w	r3, r3, #2
 800297e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f003 fb1b 	bl	8005fc6 <USB_HC_Halt>
 8002990:	e095      	b.n	8002abe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d109      	bne.n	80029bc <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b4:	461a      	mov	r2, r3
 80029b6:	2320      	movs	r3, #32
 80029b8:	6093      	str	r3, [r2, #8]
 80029ba:	e080      	b.n	8002abe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d134      	bne.n	8002a3c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	0151      	lsls	r1, r2, #5
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	440a      	add	r2, r1
 80029e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	440b      	add	r3, r1
 8002a00:	335d      	adds	r3, #93	; 0x5d
 8002a02:	2205      	movs	r2, #5
 8002a04:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a12:	461a      	mov	r2, r3
 8002a14:	2310      	movs	r3, #16
 8002a16:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a24:	461a      	mov	r2, r3
 8002a26:	2308      	movs	r3, #8
 8002a28:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f003 fac6 	bl	8005fc6 <USB_HC_Halt>
 8002a3a:	e040      	b.n	8002abe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a52:	d134      	bne.n	8002abe <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	0151      	lsls	r1, r2, #5
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	440a      	add	r2, r1
 8002a6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a6e:	f043 0302 	orr.w	r3, r3, #2
 8002a72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 faa1 	bl	8005fc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	461a      	mov	r2, r3
 8002a92:	2310      	movs	r3, #16
 8002a94:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	440b      	add	r3, r1
 8002aa4:	335d      	adds	r3, #93	; 0x5d
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002abc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad4:	d122      	bne.n	8002b1c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	0151      	lsls	r1, r2, #5
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	440a      	add	r2, r1
 8002aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 fa60 	bl	8005fc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b12:	461a      	mov	r2, r3
 8002b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b18:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002b1a:	e300      	b.n	800311e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	f040 80fd 	bne.w	8002d2e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01b      	beq.n	8002b74 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	3348      	adds	r3, #72	; 0x48
 8002b4c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	0159      	lsls	r1, r3, #5
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	440b      	add	r3, r1
 8002b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002b60:	1ad1      	subs	r1, r2, r3
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4403      	add	r3, r0
 8002b70:	334c      	adds	r3, #76	; 0x4c
 8002b72:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	335d      	adds	r3, #93	; 0x5d
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	440b      	add	r3, r1
 8002b96:	3358      	adds	r3, #88	; 0x58
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2301      	movs	r3, #1
 8002bac:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	333f      	adds	r3, #63	; 0x3f
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	333f      	adds	r3, #63	; 0x3f
 8002bd4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d121      	bne.n	8002c1e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	0151      	lsls	r1, r2, #5
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	440a      	add	r2, r1
 8002bf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	4611      	mov	r1, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f003 f9de 	bl	8005fc6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c16:	461a      	mov	r2, r3
 8002c18:	2310      	movs	r3, #16
 8002c1a:	6093      	str	r3, [r2, #8]
 8002c1c:	e070      	b.n	8002d00 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	333f      	adds	r3, #63	; 0x3f
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d12a      	bne.n	8002c8a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	0151      	lsls	r1, r2, #5
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	440a      	add	r2, r1
 8002c4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c52:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	335c      	adds	r3, #92	; 0x5c
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	b2d8      	uxtb	r0, r3
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	335c      	adds	r3, #92	; 0x5c
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4601      	mov	r1, r0
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f007 ffea 	bl	800ac5c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c88:	e03a      	b.n	8002d00 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
 8002c98:	333f      	adds	r3, #63	; 0x3f
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d12f      	bne.n	8002d00 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	335c      	adds	r3, #92	; 0x5c
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3350      	adds	r3, #80	; 0x50
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	f083 0301 	eor.w	r3, r3, #1
 8002cca:	b2d8      	uxtb	r0, r3
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	3350      	adds	r3, #80	; 0x50
 8002cdc:	4602      	mov	r2, r0
 8002cde:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	b2d8      	uxtb	r0, r3
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	335c      	adds	r3, #92	; 0x5c
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4601      	mov	r1, r0
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f007 ffae 	bl	800ac5c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3350      	adds	r3, #80	; 0x50
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	f083 0301 	eor.w	r3, r3, #1
 8002d16:	b2d8      	uxtb	r0, r3
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	3350      	adds	r3, #80	; 0x50
 8002d28:	4602      	mov	r2, r0
 8002d2a:	701a      	strb	r2, [r3, #0]
}
 8002d2c:	e1f7      	b.n	800311e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	f040 811a 	bne.w	8002f7a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	0151      	lsls	r1, r2, #5
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	440a      	add	r2, r1
 8002d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d60:	f023 0302 	bic.w	r3, r3, #2
 8002d64:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	440b      	add	r3, r1
 8002d74:	335d      	adds	r3, #93	; 0x5d
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d10a      	bne.n	8002d92 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	440b      	add	r3, r1
 8002d8a:	335c      	adds	r3, #92	; 0x5c
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	e0d9      	b.n	8002f46 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	440b      	add	r3, r1
 8002da0:	335d      	adds	r3, #93	; 0x5d
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d10a      	bne.n	8002dbe <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	440b      	add	r3, r1
 8002db6:	335c      	adds	r3, #92	; 0x5c
 8002db8:	2205      	movs	r2, #5
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	e0c3      	b.n	8002f46 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	440b      	add	r3, r1
 8002dcc:	335d      	adds	r3, #93	; 0x5d
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b06      	cmp	r3, #6
 8002dd2:	d00a      	beq.n	8002dea <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	440b      	add	r3, r1
 8002de2:	335d      	adds	r3, #93	; 0x5d
 8002de4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d156      	bne.n	8002e98 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	440b      	add	r3, r1
 8002df8:	3358      	adds	r3, #88	; 0x58
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	1c59      	adds	r1, r3, #1
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4403      	add	r3, r0
 8002e0c:	3358      	adds	r3, #88	; 0x58
 8002e0e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	440b      	add	r3, r1
 8002e1e:	3358      	adds	r3, #88	; 0x58
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d914      	bls.n	8002e50 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	440b      	add	r3, r1
 8002e34:	3358      	adds	r3, #88	; 0x58
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	440b      	add	r3, r1
 8002e48:	335c      	adds	r3, #92	; 0x5c
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	e009      	b.n	8002e64 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	440b      	add	r3, r1
 8002e5e:	335c      	adds	r3, #92	; 0x5c
 8002e60:	2202      	movs	r2, #2
 8002e62:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e7a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e82:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	461a      	mov	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e056      	b.n	8002f46 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	440b      	add	r3, r1
 8002ea6:	335d      	adds	r3, #93	; 0x5d
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d123      	bne.n	8002ef6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	440b      	add	r3, r1
 8002ebc:	335c      	adds	r3, #92	; 0x5c
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ed8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ee0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	e027      	b.n	8002f46 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	440b      	add	r3, r1
 8002f04:	335d      	adds	r3, #93	; 0x5d
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b07      	cmp	r3, #7
 8002f0a:	d11c      	bne.n	8002f46 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	3358      	adds	r3, #88	; 0x58
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	1c59      	adds	r1, r3, #1
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4403      	add	r3, r0
 8002f2e:	3358      	adds	r3, #88	; 0x58
 8002f30:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	440b      	add	r3, r1
 8002f40:	335c      	adds	r3, #92	; 0x5c
 8002f42:	2204      	movs	r2, #4
 8002f44:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f52:	461a      	mov	r2, r3
 8002f54:	2302      	movs	r3, #2
 8002f56:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	b2d8      	uxtb	r0, r3
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	440b      	add	r3, r1
 8002f6a:	335c      	adds	r3, #92	; 0x5c
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4601      	mov	r1, r0
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f007 fe72 	bl	800ac5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f78:	e0d1      	b.n	800311e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d13e      	bne.n	800300e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	0151      	lsls	r1, r2, #5
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	440a      	add	r2, r1
 8002fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002faa:	f043 0302 	orr.w	r3, r3, #2
 8002fae:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3358      	adds	r3, #88	; 0x58
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	1c59      	adds	r1, r3, #1
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4403      	add	r3, r0
 8002fd2:	3358      	adds	r3, #88	; 0x58
 8002fd4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	440b      	add	r3, r1
 8002fe4:	335d      	adds	r3, #93	; 0x5d
 8002fe6:	2206      	movs	r2, #6
 8002fe8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f002 ffe6 	bl	8005fc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4413      	add	r3, r2
 8003002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003006:	461a      	mov	r2, r3
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	6093      	str	r3, [r2, #8]
}
 800300c:	e087      	b.n	800311e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4413      	add	r3, r2
 8003016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b10      	cmp	r3, #16
 8003022:	d17c      	bne.n	800311e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	333f      	adds	r3, #63	; 0x3f
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b03      	cmp	r3, #3
 8003038:	d122      	bne.n	8003080 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	440b      	add	r3, r1
 8003048:	3358      	adds	r3, #88	; 0x58
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4413      	add	r3, r2
 8003056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	0151      	lsls	r1, r2, #5
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	440a      	add	r2, r1
 8003064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003068:	f043 0302 	orr.w	r3, r3, #2
 800306c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f002 ffa4 	bl	8005fc6 <USB_HC_Halt>
 800307e:	e045      	b.n	800310c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	333f      	adds	r3, #63	; 0x3f
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	333f      	adds	r3, #63	; 0x3f
 80030a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d12f      	bne.n	800310c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	3358      	adds	r3, #88	; 0x58
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d121      	bne.n	800310c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	335d      	adds	r3, #93	; 0x5d
 80030d8:	2203      	movs	r2, #3
 80030da:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	0151      	lsls	r1, r2, #5
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	440a      	add	r2, r1
 80030f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030f6:	f043 0302 	orr.w	r3, r3, #2
 80030fa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f002 ff5d 	bl	8005fc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003118:	461a      	mov	r2, r3
 800311a:	2310      	movs	r3, #16
 800311c:	6093      	str	r3, [r2, #8]
}
 800311e:	bf00      	nop
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b086      	sub	sp, #24
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b04      	cmp	r3, #4
 8003154:	d119      	bne.n	800318a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4413      	add	r3, r2
 800315e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003162:	461a      	mov	r2, r3
 8003164:	2304      	movs	r3, #4
 8003166:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4413      	add	r3, r2
 8003170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	0151      	lsls	r1, r2, #5
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	440a      	add	r2, r1
 800317e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003182:	f043 0302 	orr.w	r3, r3, #2
 8003186:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003188:	e33e      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b20      	cmp	r3, #32
 800319e:	d141      	bne.n	8003224 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ac:	461a      	mov	r2, r3
 80031ae:	2320      	movs	r3, #32
 80031b0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	440b      	add	r3, r1
 80031c0:	333d      	adds	r3, #61	; 0x3d
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	f040 831f 	bne.w	8003808 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	440b      	add	r3, r1
 80031d8:	333d      	adds	r3, #61	; 0x3d
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	440b      	add	r3, r1
 80031ec:	335c      	adds	r3, #92	; 0x5c
 80031ee:	2202      	movs	r2, #2
 80031f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	0151      	lsls	r1, r2, #5
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	440a      	add	r2, r1
 8003208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f002 fed2 	bl	8005fc6 <USB_HC_Halt>
}
 8003222:	e2f1      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4413      	add	r3, r2
 800322c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003236:	2b40      	cmp	r3, #64	; 0x40
 8003238:	d13f      	bne.n	80032ba <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	440b      	add	r3, r1
 8003248:	335d      	adds	r3, #93	; 0x5d
 800324a:	2204      	movs	r2, #4
 800324c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	440b      	add	r3, r1
 800325c:	333d      	adds	r3, #61	; 0x3d
 800325e:	2201      	movs	r2, #1
 8003260:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	440b      	add	r3, r1
 8003270:	3358      	adds	r3, #88	; 0x58
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4413      	add	r3, r2
 800327e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	0151      	lsls	r1, r2, #5
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	440a      	add	r2, r1
 800328c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003290:	f043 0302 	orr.w	r3, r3, #2
 8003294:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f002 fe90 	bl	8005fc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b2:	461a      	mov	r2, r3
 80032b4:	2340      	movs	r3, #64	; 0x40
 80032b6:	6093      	str	r3, [r2, #8]
}
 80032b8:	e2a6      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d0:	d122      	bne.n	8003318 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	0151      	lsls	r1, r2, #5
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	440a      	add	r2, r1
 80032e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032ec:	f043 0302 	orr.w	r3, r3, #2
 80032f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f002 fe62 	bl	8005fc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330e:	461a      	mov	r2, r3
 8003310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003314:	6093      	str	r3, [r2, #8]
}
 8003316:	e277      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4413      	add	r3, r2
 8003320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	d135      	bne.n	800339a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	3358      	adds	r3, #88	; 0x58
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4413      	add	r3, r2
 800334a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	0151      	lsls	r1, r2, #5
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	440a      	add	r2, r1
 8003358:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f002 fe2a 	bl	8005fc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4413      	add	r3, r2
 800337a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337e:	461a      	mov	r2, r3
 8003380:	2301      	movs	r3, #1
 8003382:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	440b      	add	r3, r1
 8003392:	335d      	adds	r3, #93	; 0x5d
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
}
 8003398:	e236      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d12b      	bne.n	8003408 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033bc:	461a      	mov	r2, r3
 80033be:	2308      	movs	r3, #8
 80033c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	0151      	lsls	r1, r2, #5
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	440a      	add	r2, r1
 80033d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033dc:	f043 0302 	orr.w	r3, r3, #2
 80033e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f002 fdea 	bl	8005fc6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	440b      	add	r3, r1
 8003400:	335d      	adds	r3, #93	; 0x5d
 8003402:	2205      	movs	r2, #5
 8003404:	701a      	strb	r2, [r3, #0]
}
 8003406:	e1ff      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4413      	add	r3, r2
 8003410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b10      	cmp	r3, #16
 800341c:	d155      	bne.n	80034ca <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	440b      	add	r3, r1
 800342c:	3358      	adds	r3, #88	; 0x58
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	440b      	add	r3, r1
 8003440:	335d      	adds	r3, #93	; 0x5d
 8003442:	2203      	movs	r2, #3
 8003444:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	440b      	add	r3, r1
 8003454:	333d      	adds	r3, #61	; 0x3d
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d114      	bne.n	8003486 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	440b      	add	r3, r1
 800346a:	333c      	adds	r3, #60	; 0x3c
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	440b      	add	r3, r1
 8003480:	333d      	adds	r3, #61	; 0x3d
 8003482:	2201      	movs	r2, #1
 8003484:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4413      	add	r3, r2
 800348e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	0151      	lsls	r1, r2, #5
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	440a      	add	r2, r1
 800349c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034a0:	f043 0302 	orr.w	r3, r3, #2
 80034a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	4611      	mov	r1, r2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f002 fd88 	bl	8005fc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c2:	461a      	mov	r2, r3
 80034c4:	2310      	movs	r3, #16
 80034c6:	6093      	str	r3, [r2, #8]
}
 80034c8:	e19e      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034dc:	2b80      	cmp	r3, #128	; 0x80
 80034de:	d12b      	bne.n	8003538 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	0151      	lsls	r1, r2, #5
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	440a      	add	r2, r1
 80034f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034fa:	f043 0302 	orr.w	r3, r3, #2
 80034fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	4611      	mov	r1, r2
 800350a:	4618      	mov	r0, r3
 800350c:	f002 fd5b 	bl	8005fc6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	440b      	add	r3, r1
 800351e:	335d      	adds	r3, #93	; 0x5d
 8003520:	2206      	movs	r2, #6
 8003522:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4413      	add	r3, r2
 800352c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003530:	461a      	mov	r2, r3
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	6093      	str	r3, [r2, #8]
}
 8003536:	e167      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4413      	add	r3, r2
 8003540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354e:	d135      	bne.n	80035bc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4413      	add	r3, r2
 8003558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	0151      	lsls	r1, r2, #5
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	440a      	add	r2, r1
 8003566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800356a:	f043 0302 	orr.w	r3, r3, #2
 800356e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f002 fd23 	bl	8005fc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4413      	add	r3, r2
 8003588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358c:	461a      	mov	r2, r3
 800358e:	2310      	movs	r3, #16
 8003590:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4413      	add	r3, r2
 800359a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359e:	461a      	mov	r2, r3
 80035a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	440b      	add	r3, r1
 80035b4:	335d      	adds	r3, #93	; 0x5d
 80035b6:	2208      	movs	r2, #8
 80035b8:	701a      	strb	r2, [r3, #0]
}
 80035ba:	e125      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	f040 811a 	bne.w	8003808 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	0151      	lsls	r1, r2, #5
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	440a      	add	r2, r1
 80035ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035ee:	f023 0302 	bic.w	r3, r3, #2
 80035f2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	440b      	add	r3, r1
 8003602:	335d      	adds	r3, #93	; 0x5d
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d137      	bne.n	800367a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	440b      	add	r3, r1
 8003618:	335c      	adds	r3, #92	; 0x5c
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	440b      	add	r3, r1
 800362c:	333f      	adds	r3, #63	; 0x3f
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d00b      	beq.n	800364c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	440b      	add	r3, r1
 8003642:	333f      	adds	r3, #63	; 0x3f
 8003644:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003646:	2b03      	cmp	r3, #3
 8003648:	f040 80c5 	bne.w	80037d6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	440b      	add	r3, r1
 800365a:	3351      	adds	r3, #81	; 0x51
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	f083 0301 	eor.w	r3, r3, #1
 8003662:	b2d8      	uxtb	r0, r3
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	440b      	add	r3, r1
 8003672:	3351      	adds	r3, #81	; 0x51
 8003674:	4602      	mov	r2, r0
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	e0ad      	b.n	80037d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	440b      	add	r3, r1
 8003688:	335d      	adds	r3, #93	; 0x5d
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d10a      	bne.n	80036a6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	440b      	add	r3, r1
 800369e:	335c      	adds	r3, #92	; 0x5c
 80036a0:	2202      	movs	r2, #2
 80036a2:	701a      	strb	r2, [r3, #0]
 80036a4:	e097      	b.n	80037d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	440b      	add	r3, r1
 80036b4:	335d      	adds	r3, #93	; 0x5d
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d10a      	bne.n	80036d2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	440b      	add	r3, r1
 80036ca:	335c      	adds	r3, #92	; 0x5c
 80036cc:	2202      	movs	r2, #2
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	e081      	b.n	80037d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	440b      	add	r3, r1
 80036e0:	335d      	adds	r3, #93	; 0x5d
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b05      	cmp	r3, #5
 80036e6:	d10a      	bne.n	80036fe <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	440b      	add	r3, r1
 80036f6:	335c      	adds	r3, #92	; 0x5c
 80036f8:	2205      	movs	r2, #5
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e06b      	b.n	80037d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	440b      	add	r3, r1
 800370c:	335d      	adds	r3, #93	; 0x5d
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b06      	cmp	r3, #6
 8003712:	d00a      	beq.n	800372a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	440b      	add	r3, r1
 8003722:	335d      	adds	r3, #93	; 0x5d
 8003724:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003726:	2b08      	cmp	r3, #8
 8003728:	d155      	bne.n	80037d6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	440b      	add	r3, r1
 8003738:	3358      	adds	r3, #88	; 0x58
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	1c59      	adds	r1, r3, #1
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4403      	add	r3, r0
 800374c:	3358      	adds	r3, #88	; 0x58
 800374e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	440b      	add	r3, r1
 800375e:	3358      	adds	r3, #88	; 0x58
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b03      	cmp	r3, #3
 8003764:	d914      	bls.n	8003790 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	440b      	add	r3, r1
 8003774:	3358      	adds	r3, #88	; 0x58
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	440b      	add	r3, r1
 8003788:	335c      	adds	r3, #92	; 0x5c
 800378a:	2204      	movs	r2, #4
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	e009      	b.n	80037a4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	440b      	add	r3, r1
 800379e:	335c      	adds	r3, #92	; 0x5c
 80037a0:	2202      	movs	r2, #2
 80037a2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037ba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037c2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d0:	461a      	mov	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e2:	461a      	mov	r2, r3
 80037e4:	2302      	movs	r3, #2
 80037e6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	b2d8      	uxtb	r0, r3
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	440b      	add	r3, r1
 80037fa:	335c      	adds	r3, #92	; 0x5c
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	4601      	mov	r1, r0
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f007 fa2a 	bl	800ac5c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003808:	bf00      	nop
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	0c5b      	lsrs	r3, r3, #17
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	091b      	lsrs	r3, r3, #4
 8003840:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003844:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d003      	beq.n	8003854 <HCD_RXQLVL_IRQHandler+0x44>
 800384c:	2b05      	cmp	r3, #5
 800384e:	f000 8082 	beq.w	8003956 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003852:	e083      	b.n	800395c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d07f      	beq.n	800395a <HCD_RXQLVL_IRQHandler+0x14a>
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	440b      	add	r3, r1
 8003868:	3344      	adds	r3, #68	; 0x44
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d074      	beq.n	800395a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	440b      	add	r3, r1
 8003882:	3344      	adds	r3, #68	; 0x44
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	b292      	uxth	r2, r2
 800388a:	4619      	mov	r1, r3
 800388c:	f001 ff3b 	bl	8005706 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	440b      	add	r3, r1
 800389e:	3344      	adds	r3, #68	; 0x44
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	18d1      	adds	r1, r2, r3
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4403      	add	r3, r0
 80038b4:	3344      	adds	r3, #68	; 0x44
 80038b6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	440b      	add	r3, r1
 80038c6:	334c      	adds	r3, #76	; 0x4c
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	18d1      	adds	r1, r2, r3
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4403      	add	r3, r0
 80038dc:	334c      	adds	r3, #76	; 0x4c
 80038de:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <HCD_RXQLVL_IRQHandler+0x154>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d031      	beq.n	800395a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800390c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003914:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	4413      	add	r3, r2
 800391e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003922:	461a      	mov	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	440b      	add	r3, r1
 8003936:	3350      	adds	r3, #80	; 0x50
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	f083 0301 	eor.w	r3, r3, #1
 800393e:	b2d8      	uxtb	r0, r3
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	440b      	add	r3, r1
 800394e:	3350      	adds	r3, #80	; 0x50
 8003950:	4602      	mov	r2, r0
 8003952:	701a      	strb	r2, [r3, #0]
      break;
 8003954:	e001      	b.n	800395a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003956:	bf00      	nop
 8003958:	e000      	b.n	800395c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800395a:	bf00      	nop
  }
}
 800395c:	bf00      	nop
 800395e:	3728      	adds	r7, #40	; 0x28
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	1ff80000 	.word	0x1ff80000

08003968 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003994:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b02      	cmp	r3, #2
 800399e:	d10b      	bne.n	80039b8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d102      	bne.n	80039b0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f007 f93a 	bl	800ac24 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f043 0302 	orr.w	r3, r3, #2
 80039b6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d132      	bne.n	8003a28 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f043 0308 	orr.w	r3, r3, #8
 80039c8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d126      	bne.n	8003a22 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d113      	bne.n	8003a04 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80039e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039e6:	d106      	bne.n	80039f6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2102      	movs	r1, #2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 ffc4 	bl	800597c <USB_InitFSLSPClkSel>
 80039f4:	e011      	b.n	8003a1a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2101      	movs	r1, #1
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 ffbd 	bl	800597c <USB_InitFSLSPClkSel>
 8003a02:	e00a      	b.n	8003a1a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d106      	bne.n	8003a1a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a12:	461a      	mov	r2, r3
 8003a14:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a18:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f007 f930 	bl	800ac80 <HAL_HCD_PortEnabled_Callback>
 8003a20:	e002      	b.n	8003a28 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f007 f93a 	bl	800ac9c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d103      	bne.n	8003a3a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f043 0320 	orr.w	r3, r3, #32
 8003a38:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a40:	461a      	mov	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	6013      	str	r3, [r2, #0]
}
 8003a46:	bf00      	nop
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e30d      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b0f      	cmp	r3, #15
 8003a68:	d903      	bls.n	8003a72 <HAL_RCC_OscConfig+0x22>
 8003a6a:	21e8      	movs	r1, #232	; 0xe8
 8003a6c:	48a3      	ldr	r0, [pc, #652]	; (8003cfc <HAL_RCC_OscConfig+0x2ac>)
 8003a6e:	f7fd f8e8 	bl	8000c42 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8088 	beq.w	8003b90 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00d      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x54>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a90:	d008      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x54>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a9a:	d003      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x54>
 8003a9c:	21ed      	movs	r1, #237	; 0xed
 8003a9e:	4897      	ldr	r0, [pc, #604]	; (8003cfc <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	f7fd f8cf 	bl	8000c42 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aa4:	4b96      	ldr	r3, [pc, #600]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d00c      	beq.n	8003aca <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab0:	4b93      	ldr	r3, [pc, #588]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d112      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003abc:	4b90      	ldr	r3, [pc, #576]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ac8:	d10b      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aca:	4b8d      	ldr	r3, [pc, #564]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d05b      	beq.n	8003b8e <HAL_RCC_OscConfig+0x13e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d157      	bne.n	8003b8e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e2cd      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aea:	d106      	bne.n	8003afa <HAL_RCC_OscConfig+0xaa>
 8003aec:	4b84      	ldr	r3, [pc, #528]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a83      	ldr	r2, [pc, #524]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	e01d      	b.n	8003b36 <HAL_RCC_OscConfig+0xe6>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b02:	d10c      	bne.n	8003b1e <HAL_RCC_OscConfig+0xce>
 8003b04:	4b7e      	ldr	r3, [pc, #504]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a7d      	ldr	r2, [pc, #500]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003b0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	4b7b      	ldr	r3, [pc, #492]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a7a      	ldr	r2, [pc, #488]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e00b      	b.n	8003b36 <HAL_RCC_OscConfig+0xe6>
 8003b1e:	4b78      	ldr	r3, [pc, #480]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a77      	ldr	r2, [pc, #476]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	4b75      	ldr	r3, [pc, #468]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a74      	ldr	r2, [pc, #464]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d013      	beq.n	8003b66 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7fd fa71 	bl	8001024 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b46:	f7fd fa6d 	bl	8001024 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b64      	cmp	r3, #100	; 0x64
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e292      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b58:	4b69      	ldr	r3, [pc, #420]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCC_OscConfig+0xf6>
 8003b64:	e014      	b.n	8003b90 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7fd fa5d 	bl	8001024 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b6e:	f7fd fa59 	bl	8001024 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b64      	cmp	r3, #100	; 0x64
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e27e      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b80:	4b5f      	ldr	r3, [pc, #380]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f0      	bne.n	8003b6e <HAL_RCC_OscConfig+0x11e>
 8003b8c:	e000      	b.n	8003b90 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d079      	beq.n	8003c90 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x166>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d004      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x166>
 8003bac:	f240 111f 	movw	r1, #287	; 0x11f
 8003bb0:	4852      	ldr	r0, [pc, #328]	; (8003cfc <HAL_RCC_OscConfig+0x2ac>)
 8003bb2:	f7fd f846 	bl	8000c42 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b1f      	cmp	r3, #31
 8003bbc:	d904      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x178>
 8003bbe:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003bc2:	484e      	ldr	r0, [pc, #312]	; (8003cfc <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	f7fd f83d 	bl	8000c42 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bc8:	4b4d      	ldr	r3, [pc, #308]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00b      	beq.n	8003bec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd4:	4b4a      	ldr	r3, [pc, #296]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d11c      	bne.n	8003c1a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be0:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d116      	bne.n	8003c1a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bec:	4b44      	ldr	r3, [pc, #272]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_OscConfig+0x1b4>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e23c      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c04:	4b3e      	ldr	r3, [pc, #248]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	493b      	ldr	r1, [pc, #236]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c18:	e03a      	b.n	8003c90 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d020      	beq.n	8003c64 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c22:	4b38      	ldr	r3, [pc, #224]	; (8003d04 <HAL_RCC_OscConfig+0x2b4>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fd f9fc 	bl	8001024 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c30:	f7fd f9f8 	bl	8001024 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e21d      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c42:	4b2f      	ldr	r3, [pc, #188]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4e:	4b2c      	ldr	r3, [pc, #176]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4928      	ldr	r1, [pc, #160]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]
 8003c62:	e015      	b.n	8003c90 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c64:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <HAL_RCC_OscConfig+0x2b4>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6a:	f7fd f9db 	bl	8001024 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c72:	f7fd f9d7 	bl	8001024 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e1fc      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c84:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f0      	bne.n	8003c72 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d046      	beq.n	8003d2a <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x266>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d004      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x266>
 8003cac:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8003cb0:	4812      	ldr	r0, [pc, #72]	; (8003cfc <HAL_RCC_OscConfig+0x2ac>)
 8003cb2:	f7fc ffc6 	bl	8000c42 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d016      	beq.n	8003cec <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cbe:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <HAL_RCC_OscConfig+0x2b8>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc4:	f7fd f9ae 	bl	8001024 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ccc:	f7fd f9aa 	bl	8001024 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e1cf      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cde:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <HAL_RCC_OscConfig+0x2b0>)
 8003ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x27c>
 8003cea:	e01e      	b.n	8003d2a <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cec:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_RCC_OscConfig+0x2b8>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf2:	f7fd f997 	bl	8001024 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf8:	e011      	b.n	8003d1e <HAL_RCC_OscConfig+0x2ce>
 8003cfa:	bf00      	nop
 8003cfc:	0800b534 	.word	0x0800b534
 8003d00:	40023800 	.word	0x40023800
 8003d04:	42470000 	.word	0x42470000
 8003d08:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d0c:	f7fd f98a 	bl	8001024 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e1af      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1e:	4b97      	ldr	r3, [pc, #604]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80a8 	beq.w	8003e88 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00c      	beq.n	8003d5e <HAL_RCC_OscConfig+0x30e>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d008      	beq.n	8003d5e <HAL_RCC_OscConfig+0x30e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b05      	cmp	r3, #5
 8003d52:	d004      	beq.n	8003d5e <HAL_RCC_OscConfig+0x30e>
 8003d54:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003d58:	4889      	ldr	r0, [pc, #548]	; (8003f80 <HAL_RCC_OscConfig+0x530>)
 8003d5a:	f7fc ff72 	bl	8000c42 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d5e:	4b87      	ldr	r3, [pc, #540]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10f      	bne.n	8003d8a <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	4b83      	ldr	r3, [pc, #524]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	4a82      	ldr	r2, [pc, #520]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d78:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7a:	4b80      	ldr	r3, [pc, #512]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d86:	2301      	movs	r3, #1
 8003d88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8a:	4b7e      	ldr	r3, [pc, #504]	; (8003f84 <HAL_RCC_OscConfig+0x534>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d118      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d96:	4b7b      	ldr	r3, [pc, #492]	; (8003f84 <HAL_RCC_OscConfig+0x534>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a7a      	ldr	r2, [pc, #488]	; (8003f84 <HAL_RCC_OscConfig+0x534>)
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da2:	f7fd f93f 	bl	8001024 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003daa:	f7fd f93b 	bl	8001024 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e160      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbc:	4b71      	ldr	r3, [pc, #452]	; (8003f84 <HAL_RCC_OscConfig+0x534>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d106      	bne.n	8003dde <HAL_RCC_OscConfig+0x38e>
 8003dd0:	4b6a      	ldr	r3, [pc, #424]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	4a69      	ldr	r2, [pc, #420]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	6713      	str	r3, [r2, #112]	; 0x70
 8003ddc:	e01c      	b.n	8003e18 <HAL_RCC_OscConfig+0x3c8>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b05      	cmp	r3, #5
 8003de4:	d10c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x3b0>
 8003de6:	4b65      	ldr	r3, [pc, #404]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	4a64      	ldr	r2, [pc, #400]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003dec:	f043 0304 	orr.w	r3, r3, #4
 8003df0:	6713      	str	r3, [r2, #112]	; 0x70
 8003df2:	4b62      	ldr	r3, [pc, #392]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	4a61      	ldr	r2, [pc, #388]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCC_OscConfig+0x3c8>
 8003e00:	4b5e      	ldr	r3, [pc, #376]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	4a5d      	ldr	r2, [pc, #372]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003e06:	f023 0301 	bic.w	r3, r3, #1
 8003e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0c:	4b5b      	ldr	r3, [pc, #364]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	4a5a      	ldr	r2, [pc, #360]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003e12:	f023 0304 	bic.w	r3, r3, #4
 8003e16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d015      	beq.n	8003e4c <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e20:	f7fd f900 	bl	8001024 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e28:	f7fd f8fc 	bl	8001024 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e11f      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3e:	4b4f      	ldr	r3, [pc, #316]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0ee      	beq.n	8003e28 <HAL_RCC_OscConfig+0x3d8>
 8003e4a:	e014      	b.n	8003e76 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4c:	f7fd f8ea 	bl	8001024 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e52:	e00a      	b.n	8003e6a <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e54:	f7fd f8e6 	bl	8001024 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e109      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e6a:	4b44      	ldr	r3, [pc, #272]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1ee      	bne.n	8003e54 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d105      	bne.n	8003e88 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e7c:	4b3f      	ldr	r3, [pc, #252]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	4a3e      	ldr	r2, [pc, #248]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00c      	beq.n	8003eaa <HAL_RCC_OscConfig+0x45a>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d008      	beq.n	8003eaa <HAL_RCC_OscConfig+0x45a>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d004      	beq.n	8003eaa <HAL_RCC_OscConfig+0x45a>
 8003ea0:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003ea4:	4836      	ldr	r0, [pc, #216]	; (8003f80 <HAL_RCC_OscConfig+0x530>)
 8003ea6:	f7fc fecc 	bl	8000c42 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80e4 	beq.w	800407c <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eb4:	4b31      	ldr	r3, [pc, #196]	; (8003f7c <HAL_RCC_OscConfig+0x52c>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	f000 80ae 	beq.w	800401e <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	f040 8092 	bne.w	8003ff0 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d009      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x498>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003edc:	d004      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x498>
 8003ede:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003ee2:	4827      	ldr	r0, [pc, #156]	; (8003f80 <HAL_RCC_OscConfig+0x530>)
 8003ee4:	f7fc fead 	bl	8000c42 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	2b3f      	cmp	r3, #63	; 0x3f
 8003eee:	d904      	bls.n	8003efa <HAL_RCC_OscConfig+0x4aa>
 8003ef0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003ef4:	4822      	ldr	r0, [pc, #136]	; (8003f80 <HAL_RCC_OscConfig+0x530>)
 8003ef6:	f7fc fea4 	bl	8000c42 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	2bbf      	cmp	r3, #191	; 0xbf
 8003f00:	d904      	bls.n	8003f0c <HAL_RCC_OscConfig+0x4bc>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003f0a:	d904      	bls.n	8003f16 <HAL_RCC_OscConfig+0x4c6>
 8003f0c:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8003f10:	481b      	ldr	r0, [pc, #108]	; (8003f80 <HAL_RCC_OscConfig+0x530>)
 8003f12:	f7fc fe96 	bl	8000c42 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d010      	beq.n	8003f40 <HAL_RCC_OscConfig+0x4f0>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d00c      	beq.n	8003f40 <HAL_RCC_OscConfig+0x4f0>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d008      	beq.n	8003f40 <HAL_RCC_OscConfig+0x4f0>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d004      	beq.n	8003f40 <HAL_RCC_OscConfig+0x4f0>
 8003f36:	f240 11db 	movw	r1, #475	; 0x1db
 8003f3a:	4811      	ldr	r0, [pc, #68]	; (8003f80 <HAL_RCC_OscConfig+0x530>)
 8003f3c:	f7fc fe81 	bl	8000c42 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d903      	bls.n	8003f50 <HAL_RCC_OscConfig+0x500>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	2b0f      	cmp	r3, #15
 8003f4e:	d904      	bls.n	8003f5a <HAL_RCC_OscConfig+0x50a>
 8003f50:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8003f54:	480a      	ldr	r0, [pc, #40]	; (8003f80 <HAL_RCC_OscConfig+0x530>)
 8003f56:	f7fc fe74 	bl	8000c42 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCC_OscConfig+0x538>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f60:	f7fd f860 	bl	8001024 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f66:	e011      	b.n	8003f8c <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fd f85c 	bl	8001024 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d90a      	bls.n	8003f8c <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e081      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
 8003f7a:	bf00      	nop
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	0800b534 	.word	0x0800b534
 8003f84:	40007000 	.word	0x40007000
 8003f88:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8c:	4b3e      	ldr	r3, [pc, #248]	; (8004088 <HAL_RCC_OscConfig+0x638>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e7      	bne.n	8003f68 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	019b      	lsls	r3, r3, #6
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	061b      	lsls	r3, r3, #24
 8003fbc:	4932      	ldr	r1, [pc, #200]	; (8004088 <HAL_RCC_OscConfig+0x638>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc2:	4b32      	ldr	r3, [pc, #200]	; (800408c <HAL_RCC_OscConfig+0x63c>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7fd f82c 	bl	8001024 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fd f828 	bl	8001024 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e04d      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe2:	4b29      	ldr	r3, [pc, #164]	; (8004088 <HAL_RCC_OscConfig+0x638>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x580>
 8003fee:	e045      	b.n	800407c <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff0:	4b26      	ldr	r3, [pc, #152]	; (800408c <HAL_RCC_OscConfig+0x63c>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff6:	f7fd f815 	bl	8001024 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffe:	f7fd f811 	bl	8001024 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e036      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004010:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <HAL_RCC_OscConfig+0x638>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x5ae>
 800401c:	e02e      	b.n	800407c <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e029      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800402a:	4b17      	ldr	r3, [pc, #92]	; (8004088 <HAL_RCC_OscConfig+0x638>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	429a      	cmp	r2, r3
 800403c:	d11c      	bne.n	8004078 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004048:	429a      	cmp	r2, r3
 800404a:	d115      	bne.n	8004078 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004052:	4013      	ands	r3, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004058:	4293      	cmp	r3, r2
 800405a:	d10d      	bne.n	8004078 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004066:	429a      	cmp	r2, r3
 8004068:	d106      	bne.n	8004078 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d001      	beq.n	800407c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40023800 	.word	0x40023800
 800408c:	42470060 	.word	0x42470060

08004090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e174      	b.n	800438e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x24>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b0f      	cmp	r3, #15
 80040b2:	d904      	bls.n	80040be <HAL_RCC_ClockConfig+0x2e>
 80040b4:	f240 2151 	movw	r1, #593	; 0x251
 80040b8:	487b      	ldr	r0, [pc, #492]	; (80042a8 <HAL_RCC_ClockConfig+0x218>)
 80040ba:	f7fc fdc2 	bl	8000c42 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d019      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x68>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d016      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x68>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d013      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x68>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d010      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x68>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d00d      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x68>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b05      	cmp	r3, #5
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x68>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b06      	cmp	r3, #6
 80040e6:	d007      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x68>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b07      	cmp	r3, #7
 80040ec:	d004      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x68>
 80040ee:	f240 2152 	movw	r1, #594	; 0x252
 80040f2:	486d      	ldr	r0, [pc, #436]	; (80042a8 <HAL_RCC_ClockConfig+0x218>)
 80040f4:	f7fc fda5 	bl	8000c42 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4b6c      	ldr	r3, [pc, #432]	; (80042ac <HAL_RCC_ClockConfig+0x21c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d90c      	bls.n	8004120 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b69      	ldr	r3, [pc, #420]	; (80042ac <HAL_RCC_ClockConfig+0x21c>)
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b67      	ldr	r3, [pc, #412]	; (80042ac <HAL_RCC_ClockConfig+0x21c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e136      	b.n	800438e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d049      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004138:	4b5d      	ldr	r3, [pc, #372]	; (80042b0 <HAL_RCC_ClockConfig+0x220>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a5c      	ldr	r2, [pc, #368]	; (80042b0 <HAL_RCC_ClockConfig+0x220>)
 800413e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004142:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004150:	4b57      	ldr	r3, [pc, #348]	; (80042b0 <HAL_RCC_ClockConfig+0x220>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4a56      	ldr	r2, [pc, #344]	; (80042b0 <HAL_RCC_ClockConfig+0x220>)
 8004156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800415a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d024      	beq.n	80041ae <HAL_RCC_ClockConfig+0x11e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2b80      	cmp	r3, #128	; 0x80
 800416a:	d020      	beq.n	80041ae <HAL_RCC_ClockConfig+0x11e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b90      	cmp	r3, #144	; 0x90
 8004172:	d01c      	beq.n	80041ae <HAL_RCC_ClockConfig+0x11e>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2ba0      	cmp	r3, #160	; 0xa0
 800417a:	d018      	beq.n	80041ae <HAL_RCC_ClockConfig+0x11e>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2bb0      	cmp	r3, #176	; 0xb0
 8004182:	d014      	beq.n	80041ae <HAL_RCC_ClockConfig+0x11e>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2bc0      	cmp	r3, #192	; 0xc0
 800418a:	d010      	beq.n	80041ae <HAL_RCC_ClockConfig+0x11e>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2bd0      	cmp	r3, #208	; 0xd0
 8004192:	d00c      	beq.n	80041ae <HAL_RCC_ClockConfig+0x11e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2be0      	cmp	r3, #224	; 0xe0
 800419a:	d008      	beq.n	80041ae <HAL_RCC_ClockConfig+0x11e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2bf0      	cmp	r3, #240	; 0xf0
 80041a2:	d004      	beq.n	80041ae <HAL_RCC_ClockConfig+0x11e>
 80041a4:	f240 2175 	movw	r1, #629	; 0x275
 80041a8:	483f      	ldr	r0, [pc, #252]	; (80042a8 <HAL_RCC_ClockConfig+0x218>)
 80041aa:	f7fc fd4a 	bl	8000c42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ae:	4b40      	ldr	r3, [pc, #256]	; (80042b0 <HAL_RCC_ClockConfig+0x220>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	493d      	ldr	r1, [pc, #244]	; (80042b0 <HAL_RCC_ClockConfig+0x220>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d059      	beq.n	8004280 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d010      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x166>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d00c      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x166>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d008      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x166>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d004      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x166>
 80041ec:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80041f0:	482d      	ldr	r0, [pc, #180]	; (80042a8 <HAL_RCC_ClockConfig+0x218>)
 80041f2:	f7fc fd26 	bl	8000c42 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d107      	bne.n	800420e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fe:	4b2c      	ldr	r3, [pc, #176]	; (80042b0 <HAL_RCC_ClockConfig+0x220>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d119      	bne.n	800423e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e0bf      	b.n	800438e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d003      	beq.n	800421e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800421a:	2b03      	cmp	r3, #3
 800421c:	d107      	bne.n	800422e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421e:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <HAL_RCC_ClockConfig+0x220>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e0af      	b.n	800438e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422e:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <HAL_RCC_ClockConfig+0x220>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e0a7      	b.n	800438e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800423e:	4b1c      	ldr	r3, [pc, #112]	; (80042b0 <HAL_RCC_ClockConfig+0x220>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f023 0203 	bic.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4919      	ldr	r1, [pc, #100]	; (80042b0 <HAL_RCC_ClockConfig+0x220>)
 800424c:	4313      	orrs	r3, r2
 800424e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004250:	f7fc fee8 	bl	8001024 <HAL_GetTick>
 8004254:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004256:	e00a      	b.n	800426e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004258:	f7fc fee4 	bl	8001024 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f241 3288 	movw	r2, #5000	; 0x1388
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e08f      	b.n	800438e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <HAL_RCC_ClockConfig+0x220>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 020c 	and.w	r2, r3, #12
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	429a      	cmp	r2, r3
 800427e:	d1eb      	bne.n	8004258 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004280:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <HAL_RCC_ClockConfig+0x21c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d212      	bcs.n	80042b4 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b07      	ldr	r3, [pc, #28]	; (80042ac <HAL_RCC_ClockConfig+0x21c>)
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_RCC_ClockConfig+0x21c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d007      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e072      	b.n	800438e <HAL_RCC_ClockConfig+0x2fe>
 80042a8:	0800b534 	.word	0x0800b534
 80042ac:	40023c00 	.word	0x40023c00
 80042b0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d025      	beq.n	800430c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d018      	beq.n	80042fa <HAL_RCC_ClockConfig+0x26a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d0:	d013      	beq.n	80042fa <HAL_RCC_ClockConfig+0x26a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042da:	d00e      	beq.n	80042fa <HAL_RCC_ClockConfig+0x26a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80042e4:	d009      	beq.n	80042fa <HAL_RCC_ClockConfig+0x26a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80042ee:	d004      	beq.n	80042fa <HAL_RCC_ClockConfig+0x26a>
 80042f0:	f240 21ba 	movw	r1, #698	; 0x2ba
 80042f4:	4828      	ldr	r0, [pc, #160]	; (8004398 <HAL_RCC_ClockConfig+0x308>)
 80042f6:	f7fc fca4 	bl	8000c42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042fa:	4b28      	ldr	r3, [pc, #160]	; (800439c <HAL_RCC_ClockConfig+0x30c>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	4925      	ldr	r1, [pc, #148]	; (800439c <HAL_RCC_ClockConfig+0x30c>)
 8004308:	4313      	orrs	r3, r2
 800430a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d026      	beq.n	8004366 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d018      	beq.n	8004352 <HAL_RCC_ClockConfig+0x2c2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004328:	d013      	beq.n	8004352 <HAL_RCC_ClockConfig+0x2c2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004332:	d00e      	beq.n	8004352 <HAL_RCC_ClockConfig+0x2c2>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800433c:	d009      	beq.n	8004352 <HAL_RCC_ClockConfig+0x2c2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004346:	d004      	beq.n	8004352 <HAL_RCC_ClockConfig+0x2c2>
 8004348:	f240 21c1 	movw	r1, #705	; 0x2c1
 800434c:	4812      	ldr	r0, [pc, #72]	; (8004398 <HAL_RCC_ClockConfig+0x308>)
 800434e:	f7fc fc78 	bl	8000c42 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004352:	4b12      	ldr	r3, [pc, #72]	; (800439c <HAL_RCC_ClockConfig+0x30c>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	490e      	ldr	r1, [pc, #56]	; (800439c <HAL_RCC_ClockConfig+0x30c>)
 8004362:	4313      	orrs	r3, r2
 8004364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004366:	f000 f821 	bl	80043ac <HAL_RCC_GetSysClockFreq>
 800436a:	4601      	mov	r1, r0
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_RCC_ClockConfig+0x30c>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	4a0a      	ldr	r2, [pc, #40]	; (80043a0 <HAL_RCC_ClockConfig+0x310>)
 8004378:	5cd3      	ldrb	r3, [r2, r3]
 800437a:	fa21 f303 	lsr.w	r3, r1, r3
 800437e:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <HAL_RCC_ClockConfig+0x314>)
 8004380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <HAL_RCC_ClockConfig+0x318>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fc fc92 	bl	8000cb0 <HAL_InitTick>

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	0800b534 	.word	0x0800b534
 800439c:	40023800 	.word	0x40023800
 80043a0:	0800b624 	.word	0x0800b624
 80043a4:	20000000 	.word	0x20000000
 80043a8:	20000004 	.word	0x20000004

080043ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	607b      	str	r3, [r7, #4]
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	2300      	movs	r3, #0
 80043bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043c2:	4b63      	ldr	r3, [pc, #396]	; (8004550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d007      	beq.n	80043de <HAL_RCC_GetSysClockFreq+0x32>
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d008      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0x38>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f040 80b4 	bne.w	8004540 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043d8:	4b5e      	ldr	r3, [pc, #376]	; (8004554 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043da:	60bb      	str	r3, [r7, #8]
       break;
 80043dc:	e0b3      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043de:	4b5e      	ldr	r3, [pc, #376]	; (8004558 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80043e0:	60bb      	str	r3, [r7, #8]
      break;
 80043e2:	e0b0      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043e4:	4b5a      	ldr	r3, [pc, #360]	; (8004550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ee:	4b58      	ldr	r3, [pc, #352]	; (8004550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d04a      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fa:	4b55      	ldr	r3, [pc, #340]	; (8004550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	099b      	lsrs	r3, r3, #6
 8004400:	f04f 0400 	mov.w	r4, #0
 8004404:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	ea03 0501 	and.w	r5, r3, r1
 8004410:	ea04 0602 	and.w	r6, r4, r2
 8004414:	4629      	mov	r1, r5
 8004416:	4632      	mov	r2, r6
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	f04f 0400 	mov.w	r4, #0
 8004420:	0154      	lsls	r4, r2, #5
 8004422:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004426:	014b      	lsls	r3, r1, #5
 8004428:	4619      	mov	r1, r3
 800442a:	4622      	mov	r2, r4
 800442c:	1b49      	subs	r1, r1, r5
 800442e:	eb62 0206 	sbc.w	r2, r2, r6
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	f04f 0400 	mov.w	r4, #0
 800443a:	0194      	lsls	r4, r2, #6
 800443c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004440:	018b      	lsls	r3, r1, #6
 8004442:	1a5b      	subs	r3, r3, r1
 8004444:	eb64 0402 	sbc.w	r4, r4, r2
 8004448:	f04f 0100 	mov.w	r1, #0
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	00e2      	lsls	r2, r4, #3
 8004452:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004456:	00d9      	lsls	r1, r3, #3
 8004458:	460b      	mov	r3, r1
 800445a:	4614      	mov	r4, r2
 800445c:	195b      	adds	r3, r3, r5
 800445e:	eb44 0406 	adc.w	r4, r4, r6
 8004462:	f04f 0100 	mov.w	r1, #0
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	0262      	lsls	r2, r4, #9
 800446c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004470:	0259      	lsls	r1, r3, #9
 8004472:	460b      	mov	r3, r1
 8004474:	4614      	mov	r4, r2
 8004476:	4618      	mov	r0, r3
 8004478:	4621      	mov	r1, r4
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f04f 0400 	mov.w	r4, #0
 8004480:	461a      	mov	r2, r3
 8004482:	4623      	mov	r3, r4
 8004484:	f7fb feac 	bl	80001e0 <__aeabi_uldivmod>
 8004488:	4603      	mov	r3, r0
 800448a:	460c      	mov	r4, r1
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	e049      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004490:	4b2f      	ldr	r3, [pc, #188]	; (8004550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	099b      	lsrs	r3, r3, #6
 8004496:	f04f 0400 	mov.w	r4, #0
 800449a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	ea03 0501 	and.w	r5, r3, r1
 80044a6:	ea04 0602 	and.w	r6, r4, r2
 80044aa:	4629      	mov	r1, r5
 80044ac:	4632      	mov	r2, r6
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	f04f 0400 	mov.w	r4, #0
 80044b6:	0154      	lsls	r4, r2, #5
 80044b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044bc:	014b      	lsls	r3, r1, #5
 80044be:	4619      	mov	r1, r3
 80044c0:	4622      	mov	r2, r4
 80044c2:	1b49      	subs	r1, r1, r5
 80044c4:	eb62 0206 	sbc.w	r2, r2, r6
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	f04f 0400 	mov.w	r4, #0
 80044d0:	0194      	lsls	r4, r2, #6
 80044d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044d6:	018b      	lsls	r3, r1, #6
 80044d8:	1a5b      	subs	r3, r3, r1
 80044da:	eb64 0402 	sbc.w	r4, r4, r2
 80044de:	f04f 0100 	mov.w	r1, #0
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	00e2      	lsls	r2, r4, #3
 80044e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044ec:	00d9      	lsls	r1, r3, #3
 80044ee:	460b      	mov	r3, r1
 80044f0:	4614      	mov	r4, r2
 80044f2:	195b      	adds	r3, r3, r5
 80044f4:	eb44 0406 	adc.w	r4, r4, r6
 80044f8:	f04f 0100 	mov.w	r1, #0
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	02a2      	lsls	r2, r4, #10
 8004502:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004506:	0299      	lsls	r1, r3, #10
 8004508:	460b      	mov	r3, r1
 800450a:	4614      	mov	r4, r2
 800450c:	4618      	mov	r0, r3
 800450e:	4621      	mov	r1, r4
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f04f 0400 	mov.w	r4, #0
 8004516:	461a      	mov	r2, r3
 8004518:	4623      	mov	r3, r4
 800451a:	f7fb fe61 	bl	80001e0 <__aeabi_uldivmod>
 800451e:	4603      	mov	r3, r0
 8004520:	460c      	mov	r4, r1
 8004522:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004524:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	3301      	adds	r3, #1
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	fbb2 f3f3 	udiv	r3, r2, r3
 800453c:	60bb      	str	r3, [r7, #8]
      break;
 800453e:	e002      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004542:	60bb      	str	r3, [r7, #8]
      break;
 8004544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004546:	68bb      	ldr	r3, [r7, #8]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004550:	40023800 	.word	0x40023800
 8004554:	00f42400 	.word	0x00f42400
 8004558:	007a1200 	.word	0x007a1200

0800455c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004560:	4b03      	ldr	r3, [pc, #12]	; (8004570 <HAL_RCC_GetHCLKFreq+0x14>)
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20000000 	.word	0x20000000

08004574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004578:	f7ff fff0 	bl	800455c <HAL_RCC_GetHCLKFreq>
 800457c:	4601      	mov	r1, r0
 800457e:	4b05      	ldr	r3, [pc, #20]	; (8004594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	0a9b      	lsrs	r3, r3, #10
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	4a03      	ldr	r2, [pc, #12]	; (8004598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800458a:	5cd3      	ldrb	r3, [r2, r3]
 800458c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004590:	4618      	mov	r0, r3
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40023800 	.word	0x40023800
 8004598:	0800b634 	.word	0x0800b634

0800459c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045a0:	f7ff ffdc 	bl	800455c <HAL_RCC_GetHCLKFreq>
 80045a4:	4601      	mov	r1, r0
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	0b5b      	lsrs	r3, r3, #13
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	4a03      	ldr	r2, [pc, #12]	; (80045c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045b2:	5cd3      	ldrb	r3, [r2, r3]
 80045b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40023800 	.word	0x40023800
 80045c0:	0800b634 	.word	0x0800b634

080045c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	220f      	movs	r2, #15
 80045d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045d4:	4b12      	ldr	r3, [pc, #72]	; (8004620 <HAL_RCC_GetClockConfig+0x5c>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0203 	and.w	r2, r3, #3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045e0:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <HAL_RCC_GetClockConfig+0x5c>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045ec:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <HAL_RCC_GetClockConfig+0x5c>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045f8:	4b09      	ldr	r3, [pc, #36]	; (8004620 <HAL_RCC_GetClockConfig+0x5c>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	08db      	lsrs	r3, r3, #3
 80045fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004606:	4b07      	ldr	r3, [pc, #28]	; (8004624 <HAL_RCC_GetClockConfig+0x60>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 020f 	and.w	r2, r3, #15
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	601a      	str	r2, [r3, #0]
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800
 8004624:	40023c00 	.word	0x40023c00

08004628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e083      	b.n	8004742 <HAL_TIM_Base_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a43      	ldr	r2, [pc, #268]	; (800474c <HAL_TIM_Base_Init+0x124>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d027      	beq.n	8004694 <HAL_TIM_Base_Init+0x6c>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464c:	d022      	beq.n	8004694 <HAL_TIM_Base_Init+0x6c>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a3f      	ldr	r2, [pc, #252]	; (8004750 <HAL_TIM_Base_Init+0x128>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d01d      	beq.n	8004694 <HAL_TIM_Base_Init+0x6c>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a3d      	ldr	r2, [pc, #244]	; (8004754 <HAL_TIM_Base_Init+0x12c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d018      	beq.n	8004694 <HAL_TIM_Base_Init+0x6c>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a3c      	ldr	r2, [pc, #240]	; (8004758 <HAL_TIM_Base_Init+0x130>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <HAL_TIM_Base_Init+0x6c>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a3a      	ldr	r2, [pc, #232]	; (800475c <HAL_TIM_Base_Init+0x134>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00e      	beq.n	8004694 <HAL_TIM_Base_Init+0x6c>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a39      	ldr	r2, [pc, #228]	; (8004760 <HAL_TIM_Base_Init+0x138>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d009      	beq.n	8004694 <HAL_TIM_Base_Init+0x6c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a37      	ldr	r2, [pc, #220]	; (8004764 <HAL_TIM_Base_Init+0x13c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_TIM_Base_Init+0x6c>
 800468a:	f44f 7189 	mov.w	r1, #274	; 0x112
 800468e:	4836      	ldr	r0, [pc, #216]	; (8004768 <HAL_TIM_Base_Init+0x140>)
 8004690:	f7fc fad7 	bl	8000c42 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d014      	beq.n	80046c6 <HAL_TIM_Base_Init+0x9e>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d010      	beq.n	80046c6 <HAL_TIM_Base_Init+0x9e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d00c      	beq.n	80046c6 <HAL_TIM_Base_Init+0x9e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d008      	beq.n	80046c6 <HAL_TIM_Base_Init+0x9e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b60      	cmp	r3, #96	; 0x60
 80046ba:	d004      	beq.n	80046c6 <HAL_TIM_Base_Init+0x9e>
 80046bc:	f240 1113 	movw	r1, #275	; 0x113
 80046c0:	4829      	ldr	r0, [pc, #164]	; (8004768 <HAL_TIM_Base_Init+0x140>)
 80046c2:	f7fc fabe 	bl	8000c42 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00e      	beq.n	80046ec <HAL_TIM_Base_Init+0xc4>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d6:	d009      	beq.n	80046ec <HAL_TIM_Base_Init+0xc4>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e0:	d004      	beq.n	80046ec <HAL_TIM_Base_Init+0xc4>
 80046e2:	f44f 718a 	mov.w	r1, #276	; 0x114
 80046e6:	4820      	ldr	r0, [pc, #128]	; (8004768 <HAL_TIM_Base_Init+0x140>)
 80046e8:	f7fc faab 	bl	8000c42 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <HAL_TIM_Base_Init+0xde>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	2b80      	cmp	r3, #128	; 0x80
 80046fa:	d004      	beq.n	8004706 <HAL_TIM_Base_Init+0xde>
 80046fc:	f240 1115 	movw	r1, #277	; 0x115
 8004700:	4819      	ldr	r0, [pc, #100]	; (8004768 <HAL_TIM_Base_Init+0x140>)
 8004702:	f7fc fa9e 	bl	8000c42 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f826 	bl	800476c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3304      	adds	r3, #4
 8004730:	4619      	mov	r1, r3
 8004732:	4610      	mov	r0, r2
 8004734:	f000 f9b4 	bl	8004aa0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40010000 	.word	0x40010000
 8004750:	40000400 	.word	0x40000400
 8004754:	40000800 	.word	0x40000800
 8004758:	40000c00 	.word	0x40000c00
 800475c:	40014000 	.word	0x40014000
 8004760:	40014400 	.word	0x40014400
 8004764:	40014800 	.word	0x40014800
 8004768:	0800b56c 	.word	0x0800b56c

0800476c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a24      	ldr	r2, [pc, #144]	; (8004820 <HAL_TIM_Base_Start_IT+0xa0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d027      	beq.n	80047e2 <HAL_TIM_Base_Start_IT+0x62>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479a:	d022      	beq.n	80047e2 <HAL_TIM_Base_Start_IT+0x62>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a20      	ldr	r2, [pc, #128]	; (8004824 <HAL_TIM_Base_Start_IT+0xa4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01d      	beq.n	80047e2 <HAL_TIM_Base_Start_IT+0x62>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1f      	ldr	r2, [pc, #124]	; (8004828 <HAL_TIM_Base_Start_IT+0xa8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d018      	beq.n	80047e2 <HAL_TIM_Base_Start_IT+0x62>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1d      	ldr	r2, [pc, #116]	; (800482c <HAL_TIM_Base_Start_IT+0xac>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_TIM_Base_Start_IT+0x62>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1c      	ldr	r2, [pc, #112]	; (8004830 <HAL_TIM_Base_Start_IT+0xb0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00e      	beq.n	80047e2 <HAL_TIM_Base_Start_IT+0x62>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1a      	ldr	r2, [pc, #104]	; (8004834 <HAL_TIM_Base_Start_IT+0xb4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d009      	beq.n	80047e2 <HAL_TIM_Base_Start_IT+0x62>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a19      	ldr	r2, [pc, #100]	; (8004838 <HAL_TIM_Base_Start_IT+0xb8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d004      	beq.n	80047e2 <HAL_TIM_Base_Start_IT+0x62>
 80047d8:	f240 11b9 	movw	r1, #441	; 0x1b9
 80047dc:	4817      	ldr	r0, [pc, #92]	; (800483c <HAL_TIM_Base_Start_IT+0xbc>)
 80047de:	f7fc fa30 	bl	8000c42 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b06      	cmp	r3, #6
 8004802:	d007      	beq.n	8004814 <HAL_TIM_Base_Start_IT+0x94>
  {
    __HAL_TIM_ENABLE(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40010000 	.word	0x40010000
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800
 800482c:	40000c00 	.word	0x40000c00
 8004830:	40014000 	.word	0x40014000
 8004834:	40014400 	.word	0x40014400
 8004838:	40014800 	.word	0x40014800
 800483c:	0800b56c 	.word	0x0800b56c

08004840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b02      	cmp	r3, #2
 8004854:	d122      	bne.n	800489c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b02      	cmp	r3, #2
 8004862:	d11b      	bne.n	800489c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0202 	mvn.w	r2, #2
 800486c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f8ee 	bl	8004a64 <HAL_TIM_IC_CaptureCallback>
 8004888:	e005      	b.n	8004896 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f8e0 	bl	8004a50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f8f1 	bl	8004a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d122      	bne.n	80048f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d11b      	bne.n	80048f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0204 	mvn.w	r2, #4
 80048c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f8c4 	bl	8004a64 <HAL_TIM_IC_CaptureCallback>
 80048dc:	e005      	b.n	80048ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f8b6 	bl	8004a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f8c7 	bl	8004a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d122      	bne.n	8004944 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b08      	cmp	r3, #8
 800490a:	d11b      	bne.n	8004944 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0208 	mvn.w	r2, #8
 8004914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2204      	movs	r2, #4
 800491a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f89a 	bl	8004a64 <HAL_TIM_IC_CaptureCallback>
 8004930:	e005      	b.n	800493e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f88c 	bl	8004a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f89d 	bl	8004a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	2b10      	cmp	r3, #16
 8004950:	d122      	bne.n	8004998 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	2b10      	cmp	r3, #16
 800495e:	d11b      	bne.n	8004998 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0210 	mvn.w	r2, #16
 8004968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2208      	movs	r2, #8
 800496e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f870 	bl	8004a64 <HAL_TIM_IC_CaptureCallback>
 8004984:	e005      	b.n	8004992 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f862 	bl	8004a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f873 	bl	8004a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d10e      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d107      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0201 	mvn.w	r2, #1
 80049bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fc f926 	bl	8000c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ce:	2b80      	cmp	r3, #128	; 0x80
 80049d0:	d10e      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049dc:	2b80      	cmp	r3, #128	; 0x80
 80049de:	d107      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f8e2 	bl	8004bb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	d10e      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d107      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f838 	bl	8004a8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d10e      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	d107      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0220 	mvn.w	r2, #32
 8004a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f8ac 	bl	8004ba0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a48:	bf00      	nop
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a34      	ldr	r2, [pc, #208]	; (8004b84 <TIM_Base_SetConfig+0xe4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d00f      	beq.n	8004ad8 <TIM_Base_SetConfig+0x38>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004abe:	d00b      	beq.n	8004ad8 <TIM_Base_SetConfig+0x38>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a31      	ldr	r2, [pc, #196]	; (8004b88 <TIM_Base_SetConfig+0xe8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d007      	beq.n	8004ad8 <TIM_Base_SetConfig+0x38>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a30      	ldr	r2, [pc, #192]	; (8004b8c <TIM_Base_SetConfig+0xec>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d003      	beq.n	8004ad8 <TIM_Base_SetConfig+0x38>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a2f      	ldr	r2, [pc, #188]	; (8004b90 <TIM_Base_SetConfig+0xf0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d108      	bne.n	8004aea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a25      	ldr	r2, [pc, #148]	; (8004b84 <TIM_Base_SetConfig+0xe4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d01b      	beq.n	8004b2a <TIM_Base_SetConfig+0x8a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af8:	d017      	beq.n	8004b2a <TIM_Base_SetConfig+0x8a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a22      	ldr	r2, [pc, #136]	; (8004b88 <TIM_Base_SetConfig+0xe8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <TIM_Base_SetConfig+0x8a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a21      	ldr	r2, [pc, #132]	; (8004b8c <TIM_Base_SetConfig+0xec>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00f      	beq.n	8004b2a <TIM_Base_SetConfig+0x8a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a20      	ldr	r2, [pc, #128]	; (8004b90 <TIM_Base_SetConfig+0xf0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00b      	beq.n	8004b2a <TIM_Base_SetConfig+0x8a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a1f      	ldr	r2, [pc, #124]	; (8004b94 <TIM_Base_SetConfig+0xf4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d007      	beq.n	8004b2a <TIM_Base_SetConfig+0x8a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a1e      	ldr	r2, [pc, #120]	; (8004b98 <TIM_Base_SetConfig+0xf8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d003      	beq.n	8004b2a <TIM_Base_SetConfig+0x8a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a1d      	ldr	r2, [pc, #116]	; (8004b9c <TIM_Base_SetConfig+0xfc>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d108      	bne.n	8004b3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a08      	ldr	r2, [pc, #32]	; (8004b84 <TIM_Base_SetConfig+0xe4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d103      	bne.n	8004b70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	615a      	str	r2, [r3, #20]
}
 8004b76:	bf00      	nop
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40010000 	.word	0x40010000
 8004b88:	40000400 	.word	0x40000400
 8004b8c:	40000800 	.word	0x40000800
 8004b90:	40000c00 	.word	0x40000c00
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800

08004ba0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e0a0      	b.n	8004d1c <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d02c      	beq.n	8004c3c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a4f      	ldr	r2, [pc, #316]	; (8004d24 <HAL_UART_Init+0x15c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <HAL_UART_Init+0x42>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a4d      	ldr	r2, [pc, #308]	; (8004d28 <HAL_UART_Init+0x160>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d009      	beq.n	8004c0a <HAL_UART_Init+0x42>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a4c      	ldr	r2, [pc, #304]	; (8004d2c <HAL_UART_Init+0x164>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_UART_Init+0x42>
 8004c00:	f240 114b 	movw	r1, #331	; 0x14b
 8004c04:	484a      	ldr	r0, [pc, #296]	; (8004d30 <HAL_UART_Init+0x168>)
 8004c06:	f7fc f81c 	bl	8000c42 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d028      	beq.n	8004c64 <HAL_UART_Init+0x9c>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1a:	d023      	beq.n	8004c64 <HAL_UART_Init+0x9c>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c24:	d01e      	beq.n	8004c64 <HAL_UART_Init+0x9c>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c2e:	d019      	beq.n	8004c64 <HAL_UART_Init+0x9c>
 8004c30:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004c34:	483e      	ldr	r0, [pc, #248]	; (8004d30 <HAL_UART_Init+0x168>)
 8004c36:	f7fc f804 	bl	8000c42 <assert_failed>
 8004c3a:	e013      	b.n	8004c64 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a38      	ldr	r2, [pc, #224]	; (8004d24 <HAL_UART_Init+0x15c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d00e      	beq.n	8004c64 <HAL_UART_Init+0x9c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a37      	ldr	r2, [pc, #220]	; (8004d28 <HAL_UART_Init+0x160>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d009      	beq.n	8004c64 <HAL_UART_Init+0x9c>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a35      	ldr	r2, [pc, #212]	; (8004d2c <HAL_UART_Init+0x164>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d004      	beq.n	8004c64 <HAL_UART_Init+0x9c>
 8004c5a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004c5e:	4834      	ldr	r0, [pc, #208]	; (8004d30 <HAL_UART_Init+0x168>)
 8004c60:	f7fb ffef 	bl	8000c42 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d009      	beq.n	8004c80 <HAL_UART_Init+0xb8>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c74:	d004      	beq.n	8004c80 <HAL_UART_Init+0xb8>
 8004c76:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8004c7a:	482d      	ldr	r0, [pc, #180]	; (8004d30 <HAL_UART_Init+0x168>)
 8004c7c:	f7fb ffe1 	bl	8000c42 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d009      	beq.n	8004c9c <HAL_UART_Init+0xd4>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c90:	d004      	beq.n	8004c9c <HAL_UART_Init+0xd4>
 8004c92:	f240 1153 	movw	r1, #339	; 0x153
 8004c96:	4826      	ldr	r0, [pc, #152]	; (8004d30 <HAL_UART_Init+0x168>)
 8004c98:	f7fb ffd3 	bl	8000c42 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d106      	bne.n	8004cb6 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7fc f8ef 	bl	8000e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2224      	movs	r2, #36	; 0x24
 8004cba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ccc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f830 	bl	8004d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ce2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695a      	ldr	r2, [r3, #20]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cf2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40011000 	.word	0x40011000
 8004d28:	40004400 	.word	0x40004400
 8004d2c:	40011400 	.word	0x40011400
 8004d30:	0800b5a4 	.word	0x0800b5a4

08004d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d38:	b085      	sub	sp, #20
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	4a9a      	ldr	r2, [pc, #616]	; (8004fac <UART_SetConfig+0x278>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d904      	bls.n	8004d52 <UART_SetConfig+0x1e>
 8004d48:	f640 31fb 	movw	r1, #3067	; 0xbfb
 8004d4c:	4898      	ldr	r0, [pc, #608]	; (8004fb0 <UART_SetConfig+0x27c>)
 8004d4e:	f7fb ff78 	bl	8000c42 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d009      	beq.n	8004d6e <UART_SetConfig+0x3a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d62:	d004      	beq.n	8004d6e <UART_SetConfig+0x3a>
 8004d64:	f640 31fc 	movw	r1, #3068	; 0xbfc
 8004d68:	4891      	ldr	r0, [pc, #580]	; (8004fb0 <UART_SetConfig+0x27c>)
 8004d6a:	f7fb ff6a 	bl	8000c42 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00e      	beq.n	8004d94 <UART_SetConfig+0x60>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7e:	d009      	beq.n	8004d94 <UART_SetConfig+0x60>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d88:	d004      	beq.n	8004d94 <UART_SetConfig+0x60>
 8004d8a:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8004d8e:	4888      	ldr	r0, [pc, #544]	; (8004fb0 <UART_SetConfig+0x27c>)
 8004d90:	f7fb ff57 	bl	8000c42 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	695a      	ldr	r2, [r3, #20]
 8004d98:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <UART_SetConfig+0x76>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d104      	bne.n	8004db4 <UART_SetConfig+0x80>
 8004daa:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8004dae:	4880      	ldr	r0, [pc, #512]	; (8004fb0 <UART_SetConfig+0x27c>)
 8004db0:	f7fb ff47 	bl	8000c42 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004dec:	f023 030c 	bic.w	r3, r3, #12
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	68f9      	ldr	r1, [r7, #12]
 8004df6:	430b      	orrs	r3, r1
 8004df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	699a      	ldr	r2, [r3, #24]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e18:	f040 818f 	bne.w	800513a <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a64      	ldr	r2, [pc, #400]	; (8004fb4 <UART_SetConfig+0x280>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d005      	beq.n	8004e32 <UART_SetConfig+0xfe>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a63      	ldr	r2, [pc, #396]	; (8004fb8 <UART_SetConfig+0x284>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	f040 80c7 	bne.w	8004fc0 <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e32:	f7ff fbb3 	bl	800459c <HAL_RCC_GetPCLK2Freq>
 8004e36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	461d      	mov	r5, r3
 8004e3c:	f04f 0600 	mov.w	r6, #0
 8004e40:	46a8      	mov	r8, r5
 8004e42:	46b1      	mov	r9, r6
 8004e44:	eb18 0308 	adds.w	r3, r8, r8
 8004e48:	eb49 0409 	adc.w	r4, r9, r9
 8004e4c:	4698      	mov	r8, r3
 8004e4e:	46a1      	mov	r9, r4
 8004e50:	eb18 0805 	adds.w	r8, r8, r5
 8004e54:	eb49 0906 	adc.w	r9, r9, r6
 8004e58:	f04f 0100 	mov.w	r1, #0
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e6c:	4688      	mov	r8, r1
 8004e6e:	4691      	mov	r9, r2
 8004e70:	eb18 0005 	adds.w	r0, r8, r5
 8004e74:	eb49 0106 	adc.w	r1, r9, r6
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	461d      	mov	r5, r3
 8004e7e:	f04f 0600 	mov.w	r6, #0
 8004e82:	196b      	adds	r3, r5, r5
 8004e84:	eb46 0406 	adc.w	r4, r6, r6
 8004e88:	461a      	mov	r2, r3
 8004e8a:	4623      	mov	r3, r4
 8004e8c:	f7fb f9a8 	bl	80001e0 <__aeabi_uldivmod>
 8004e90:	4603      	mov	r3, r0
 8004e92:	460c      	mov	r4, r1
 8004e94:	461a      	mov	r2, r3
 8004e96:	4b49      	ldr	r3, [pc, #292]	; (8004fbc <UART_SetConfig+0x288>)
 8004e98:	fba3 2302 	umull	r2, r3, r3, r2
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	461d      	mov	r5, r3
 8004ea6:	f04f 0600 	mov.w	r6, #0
 8004eaa:	46a9      	mov	r9, r5
 8004eac:	46b2      	mov	sl, r6
 8004eae:	eb19 0309 	adds.w	r3, r9, r9
 8004eb2:	eb4a 040a 	adc.w	r4, sl, sl
 8004eb6:	4699      	mov	r9, r3
 8004eb8:	46a2      	mov	sl, r4
 8004eba:	eb19 0905 	adds.w	r9, r9, r5
 8004ebe:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ec2:	f04f 0100 	mov.w	r1, #0
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ece:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ed2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ed6:	4689      	mov	r9, r1
 8004ed8:	4692      	mov	sl, r2
 8004eda:	eb19 0005 	adds.w	r0, r9, r5
 8004ede:	eb4a 0106 	adc.w	r1, sl, r6
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	461d      	mov	r5, r3
 8004ee8:	f04f 0600 	mov.w	r6, #0
 8004eec:	196b      	adds	r3, r5, r5
 8004eee:	eb46 0406 	adc.w	r4, r6, r6
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	4623      	mov	r3, r4
 8004ef6:	f7fb f973 	bl	80001e0 <__aeabi_uldivmod>
 8004efa:	4603      	mov	r3, r0
 8004efc:	460c      	mov	r4, r1
 8004efe:	461a      	mov	r2, r3
 8004f00:	4b2e      	ldr	r3, [pc, #184]	; (8004fbc <UART_SetConfig+0x288>)
 8004f02:	fba3 1302 	umull	r1, r3, r3, r2
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	2164      	movs	r1, #100	; 0x64
 8004f0a:	fb01 f303 	mul.w	r3, r1, r3
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	3332      	adds	r3, #50	; 0x32
 8004f14:	4a29      	ldr	r2, [pc, #164]	; (8004fbc <UART_SetConfig+0x288>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	095b      	lsrs	r3, r3, #5
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f22:	4498      	add	r8, r3
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	461d      	mov	r5, r3
 8004f28:	f04f 0600 	mov.w	r6, #0
 8004f2c:	46a9      	mov	r9, r5
 8004f2e:	46b2      	mov	sl, r6
 8004f30:	eb19 0309 	adds.w	r3, r9, r9
 8004f34:	eb4a 040a 	adc.w	r4, sl, sl
 8004f38:	4699      	mov	r9, r3
 8004f3a:	46a2      	mov	sl, r4
 8004f3c:	eb19 0905 	adds.w	r9, r9, r5
 8004f40:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f44:	f04f 0100 	mov.w	r1, #0
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f58:	4689      	mov	r9, r1
 8004f5a:	4692      	mov	sl, r2
 8004f5c:	eb19 0005 	adds.w	r0, r9, r5
 8004f60:	eb4a 0106 	adc.w	r1, sl, r6
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	461d      	mov	r5, r3
 8004f6a:	f04f 0600 	mov.w	r6, #0
 8004f6e:	196b      	adds	r3, r5, r5
 8004f70:	eb46 0406 	adc.w	r4, r6, r6
 8004f74:	461a      	mov	r2, r3
 8004f76:	4623      	mov	r3, r4
 8004f78:	f7fb f932 	bl	80001e0 <__aeabi_uldivmod>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	460c      	mov	r4, r1
 8004f80:	461a      	mov	r2, r3
 8004f82:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <UART_SetConfig+0x288>)
 8004f84:	fba3 1302 	umull	r1, r3, r3, r2
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	2164      	movs	r1, #100	; 0x64
 8004f8c:	fb01 f303 	mul.w	r3, r1, r3
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	3332      	adds	r3, #50	; 0x32
 8004f96:	4a09      	ldr	r2, [pc, #36]	; (8004fbc <UART_SetConfig+0x288>)
 8004f98:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9c:	095b      	lsrs	r3, r3, #5
 8004f9e:	f003 0207 	and.w	r2, r3, #7
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4442      	add	r2, r8
 8004fa8:	609a      	str	r2, [r3, #8]
 8004faa:	e27a      	b.n	80054a2 <UART_SetConfig+0x76e>
 8004fac:	00a037a0 	.word	0x00a037a0
 8004fb0:	0800b5a4 	.word	0x0800b5a4
 8004fb4:	40011000 	.word	0x40011000
 8004fb8:	40011400 	.word	0x40011400
 8004fbc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fc0:	f7ff fad8 	bl	8004574 <HAL_RCC_GetPCLK1Freq>
 8004fc4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	461d      	mov	r5, r3
 8004fca:	f04f 0600 	mov.w	r6, #0
 8004fce:	46a8      	mov	r8, r5
 8004fd0:	46b1      	mov	r9, r6
 8004fd2:	eb18 0308 	adds.w	r3, r8, r8
 8004fd6:	eb49 0409 	adc.w	r4, r9, r9
 8004fda:	4698      	mov	r8, r3
 8004fdc:	46a1      	mov	r9, r4
 8004fde:	eb18 0805 	adds.w	r8, r8, r5
 8004fe2:	eb49 0906 	adc.w	r9, r9, r6
 8004fe6:	f04f 0100 	mov.w	r1, #0
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ff2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ff6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ffa:	4688      	mov	r8, r1
 8004ffc:	4691      	mov	r9, r2
 8004ffe:	eb18 0005 	adds.w	r0, r8, r5
 8005002:	eb49 0106 	adc.w	r1, r9, r6
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	461d      	mov	r5, r3
 800500c:	f04f 0600 	mov.w	r6, #0
 8005010:	196b      	adds	r3, r5, r5
 8005012:	eb46 0406 	adc.w	r4, r6, r6
 8005016:	461a      	mov	r2, r3
 8005018:	4623      	mov	r3, r4
 800501a:	f7fb f8e1 	bl	80001e0 <__aeabi_uldivmod>
 800501e:	4603      	mov	r3, r0
 8005020:	460c      	mov	r4, r1
 8005022:	461a      	mov	r2, r3
 8005024:	4bb3      	ldr	r3, [pc, #716]	; (80052f4 <UART_SetConfig+0x5c0>)
 8005026:	fba3 2302 	umull	r2, r3, r3, r2
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	461d      	mov	r5, r3
 8005034:	f04f 0600 	mov.w	r6, #0
 8005038:	46a9      	mov	r9, r5
 800503a:	46b2      	mov	sl, r6
 800503c:	eb19 0309 	adds.w	r3, r9, r9
 8005040:	eb4a 040a 	adc.w	r4, sl, sl
 8005044:	4699      	mov	r9, r3
 8005046:	46a2      	mov	sl, r4
 8005048:	eb19 0905 	adds.w	r9, r9, r5
 800504c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005050:	f04f 0100 	mov.w	r1, #0
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800505c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005060:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005064:	4689      	mov	r9, r1
 8005066:	4692      	mov	sl, r2
 8005068:	eb19 0005 	adds.w	r0, r9, r5
 800506c:	eb4a 0106 	adc.w	r1, sl, r6
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	461d      	mov	r5, r3
 8005076:	f04f 0600 	mov.w	r6, #0
 800507a:	196b      	adds	r3, r5, r5
 800507c:	eb46 0406 	adc.w	r4, r6, r6
 8005080:	461a      	mov	r2, r3
 8005082:	4623      	mov	r3, r4
 8005084:	f7fb f8ac 	bl	80001e0 <__aeabi_uldivmod>
 8005088:	4603      	mov	r3, r0
 800508a:	460c      	mov	r4, r1
 800508c:	461a      	mov	r2, r3
 800508e:	4b99      	ldr	r3, [pc, #612]	; (80052f4 <UART_SetConfig+0x5c0>)
 8005090:	fba3 1302 	umull	r1, r3, r3, r2
 8005094:	095b      	lsrs	r3, r3, #5
 8005096:	2164      	movs	r1, #100	; 0x64
 8005098:	fb01 f303 	mul.w	r3, r1, r3
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	3332      	adds	r3, #50	; 0x32
 80050a2:	4a94      	ldr	r2, [pc, #592]	; (80052f4 <UART_SetConfig+0x5c0>)
 80050a4:	fba2 2303 	umull	r2, r3, r2, r3
 80050a8:	095b      	lsrs	r3, r3, #5
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050b0:	4498      	add	r8, r3
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	461d      	mov	r5, r3
 80050b6:	f04f 0600 	mov.w	r6, #0
 80050ba:	46a9      	mov	r9, r5
 80050bc:	46b2      	mov	sl, r6
 80050be:	eb19 0309 	adds.w	r3, r9, r9
 80050c2:	eb4a 040a 	adc.w	r4, sl, sl
 80050c6:	4699      	mov	r9, r3
 80050c8:	46a2      	mov	sl, r4
 80050ca:	eb19 0905 	adds.w	r9, r9, r5
 80050ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80050d2:	f04f 0100 	mov.w	r1, #0
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050e6:	4689      	mov	r9, r1
 80050e8:	4692      	mov	sl, r2
 80050ea:	eb19 0005 	adds.w	r0, r9, r5
 80050ee:	eb4a 0106 	adc.w	r1, sl, r6
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	461d      	mov	r5, r3
 80050f8:	f04f 0600 	mov.w	r6, #0
 80050fc:	196b      	adds	r3, r5, r5
 80050fe:	eb46 0406 	adc.w	r4, r6, r6
 8005102:	461a      	mov	r2, r3
 8005104:	4623      	mov	r3, r4
 8005106:	f7fb f86b 	bl	80001e0 <__aeabi_uldivmod>
 800510a:	4603      	mov	r3, r0
 800510c:	460c      	mov	r4, r1
 800510e:	461a      	mov	r2, r3
 8005110:	4b78      	ldr	r3, [pc, #480]	; (80052f4 <UART_SetConfig+0x5c0>)
 8005112:	fba3 1302 	umull	r1, r3, r3, r2
 8005116:	095b      	lsrs	r3, r3, #5
 8005118:	2164      	movs	r1, #100	; 0x64
 800511a:	fb01 f303 	mul.w	r3, r1, r3
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	3332      	adds	r3, #50	; 0x32
 8005124:	4a73      	ldr	r2, [pc, #460]	; (80052f4 <UART_SetConfig+0x5c0>)
 8005126:	fba2 2303 	umull	r2, r3, r2, r3
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	f003 0207 	and.w	r2, r3, #7
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4442      	add	r2, r8
 8005136:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005138:	e1b3      	b.n	80054a2 <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a6e      	ldr	r2, [pc, #440]	; (80052f8 <UART_SetConfig+0x5c4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d005      	beq.n	8005150 <UART_SetConfig+0x41c>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a6c      	ldr	r2, [pc, #432]	; (80052fc <UART_SetConfig+0x5c8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	f040 80d8 	bne.w	8005300 <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005150:	f7ff fa24 	bl	800459c <HAL_RCC_GetPCLK2Freq>
 8005154:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	469a      	mov	sl, r3
 800515a:	f04f 0b00 	mov.w	fp, #0
 800515e:	46d0      	mov	r8, sl
 8005160:	46d9      	mov	r9, fp
 8005162:	eb18 0308 	adds.w	r3, r8, r8
 8005166:	eb49 0409 	adc.w	r4, r9, r9
 800516a:	4698      	mov	r8, r3
 800516c:	46a1      	mov	r9, r4
 800516e:	eb18 080a 	adds.w	r8, r8, sl
 8005172:	eb49 090b 	adc.w	r9, r9, fp
 8005176:	f04f 0100 	mov.w	r1, #0
 800517a:	f04f 0200 	mov.w	r2, #0
 800517e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005182:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005186:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800518a:	4688      	mov	r8, r1
 800518c:	4691      	mov	r9, r2
 800518e:	eb1a 0508 	adds.w	r5, sl, r8
 8005192:	eb4b 0609 	adc.w	r6, fp, r9
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	4619      	mov	r1, r3
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	f04f 0400 	mov.w	r4, #0
 80051a8:	0094      	lsls	r4, r2, #2
 80051aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051ae:	008b      	lsls	r3, r1, #2
 80051b0:	461a      	mov	r2, r3
 80051b2:	4623      	mov	r3, r4
 80051b4:	4628      	mov	r0, r5
 80051b6:	4631      	mov	r1, r6
 80051b8:	f7fb f812 	bl	80001e0 <__aeabi_uldivmod>
 80051bc:	4603      	mov	r3, r0
 80051be:	460c      	mov	r4, r1
 80051c0:	461a      	mov	r2, r3
 80051c2:	4b4c      	ldr	r3, [pc, #304]	; (80052f4 <UART_SetConfig+0x5c0>)
 80051c4:	fba3 2302 	umull	r2, r3, r3, r2
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	469b      	mov	fp, r3
 80051d2:	f04f 0c00 	mov.w	ip, #0
 80051d6:	46d9      	mov	r9, fp
 80051d8:	46e2      	mov	sl, ip
 80051da:	eb19 0309 	adds.w	r3, r9, r9
 80051de:	eb4a 040a 	adc.w	r4, sl, sl
 80051e2:	4699      	mov	r9, r3
 80051e4:	46a2      	mov	sl, r4
 80051e6:	eb19 090b 	adds.w	r9, r9, fp
 80051ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051ee:	f04f 0100 	mov.w	r1, #0
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005202:	4689      	mov	r9, r1
 8005204:	4692      	mov	sl, r2
 8005206:	eb1b 0509 	adds.w	r5, fp, r9
 800520a:	eb4c 060a 	adc.w	r6, ip, sl
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	4619      	mov	r1, r3
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	f04f 0400 	mov.w	r4, #0
 8005220:	0094      	lsls	r4, r2, #2
 8005222:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005226:	008b      	lsls	r3, r1, #2
 8005228:	461a      	mov	r2, r3
 800522a:	4623      	mov	r3, r4
 800522c:	4628      	mov	r0, r5
 800522e:	4631      	mov	r1, r6
 8005230:	f7fa ffd6 	bl	80001e0 <__aeabi_uldivmod>
 8005234:	4603      	mov	r3, r0
 8005236:	460c      	mov	r4, r1
 8005238:	461a      	mov	r2, r3
 800523a:	4b2e      	ldr	r3, [pc, #184]	; (80052f4 <UART_SetConfig+0x5c0>)
 800523c:	fba3 1302 	umull	r1, r3, r3, r2
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	2164      	movs	r1, #100	; 0x64
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	3332      	adds	r3, #50	; 0x32
 800524e:	4a29      	ldr	r2, [pc, #164]	; (80052f4 <UART_SetConfig+0x5c0>)
 8005250:	fba2 2303 	umull	r2, r3, r2, r3
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800525a:	4498      	add	r8, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	469b      	mov	fp, r3
 8005260:	f04f 0c00 	mov.w	ip, #0
 8005264:	46d9      	mov	r9, fp
 8005266:	46e2      	mov	sl, ip
 8005268:	eb19 0309 	adds.w	r3, r9, r9
 800526c:	eb4a 040a 	adc.w	r4, sl, sl
 8005270:	4699      	mov	r9, r3
 8005272:	46a2      	mov	sl, r4
 8005274:	eb19 090b 	adds.w	r9, r9, fp
 8005278:	eb4a 0a0c 	adc.w	sl, sl, ip
 800527c:	f04f 0100 	mov.w	r1, #0
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005288:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800528c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005290:	4689      	mov	r9, r1
 8005292:	4692      	mov	sl, r2
 8005294:	eb1b 0509 	adds.w	r5, fp, r9
 8005298:	eb4c 060a 	adc.w	r6, ip, sl
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	4619      	mov	r1, r3
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	f04f 0400 	mov.w	r4, #0
 80052ae:	0094      	lsls	r4, r2, #2
 80052b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052b4:	008b      	lsls	r3, r1, #2
 80052b6:	461a      	mov	r2, r3
 80052b8:	4623      	mov	r3, r4
 80052ba:	4628      	mov	r0, r5
 80052bc:	4631      	mov	r1, r6
 80052be:	f7fa ff8f 	bl	80001e0 <__aeabi_uldivmod>
 80052c2:	4603      	mov	r3, r0
 80052c4:	460c      	mov	r4, r1
 80052c6:	461a      	mov	r2, r3
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <UART_SetConfig+0x5c0>)
 80052ca:	fba3 1302 	umull	r1, r3, r3, r2
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	2164      	movs	r1, #100	; 0x64
 80052d2:	fb01 f303 	mul.w	r3, r1, r3
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	3332      	adds	r3, #50	; 0x32
 80052dc:	4a05      	ldr	r2, [pc, #20]	; (80052f4 <UART_SetConfig+0x5c0>)
 80052de:	fba2 2303 	umull	r2, r3, r2, r3
 80052e2:	095b      	lsrs	r3, r3, #5
 80052e4:	f003 020f 	and.w	r2, r3, #15
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4442      	add	r2, r8
 80052ee:	609a      	str	r2, [r3, #8]
 80052f0:	e0d7      	b.n	80054a2 <UART_SetConfig+0x76e>
 80052f2:	bf00      	nop
 80052f4:	51eb851f 	.word	0x51eb851f
 80052f8:	40011000 	.word	0x40011000
 80052fc:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 8005300:	f7ff f938 	bl	8004574 <HAL_RCC_GetPCLK1Freq>
 8005304:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	469a      	mov	sl, r3
 800530a:	f04f 0b00 	mov.w	fp, #0
 800530e:	46d0      	mov	r8, sl
 8005310:	46d9      	mov	r9, fp
 8005312:	eb18 0308 	adds.w	r3, r8, r8
 8005316:	eb49 0409 	adc.w	r4, r9, r9
 800531a:	4698      	mov	r8, r3
 800531c:	46a1      	mov	r9, r4
 800531e:	eb18 080a 	adds.w	r8, r8, sl
 8005322:	eb49 090b 	adc.w	r9, r9, fp
 8005326:	f04f 0100 	mov.w	r1, #0
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005332:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005336:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800533a:	4688      	mov	r8, r1
 800533c:	4691      	mov	r9, r2
 800533e:	eb1a 0508 	adds.w	r5, sl, r8
 8005342:	eb4b 0609 	adc.w	r6, fp, r9
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	4619      	mov	r1, r3
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	f04f 0400 	mov.w	r4, #0
 8005358:	0094      	lsls	r4, r2, #2
 800535a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800535e:	008b      	lsls	r3, r1, #2
 8005360:	461a      	mov	r2, r3
 8005362:	4623      	mov	r3, r4
 8005364:	4628      	mov	r0, r5
 8005366:	4631      	mov	r1, r6
 8005368:	f7fa ff3a 	bl	80001e0 <__aeabi_uldivmod>
 800536c:	4603      	mov	r3, r0
 800536e:	460c      	mov	r4, r1
 8005370:	461a      	mov	r2, r3
 8005372:	4b4e      	ldr	r3, [pc, #312]	; (80054ac <UART_SetConfig+0x778>)
 8005374:	fba3 2302 	umull	r2, r3, r3, r2
 8005378:	095b      	lsrs	r3, r3, #5
 800537a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	469b      	mov	fp, r3
 8005382:	f04f 0c00 	mov.w	ip, #0
 8005386:	46d9      	mov	r9, fp
 8005388:	46e2      	mov	sl, ip
 800538a:	eb19 0309 	adds.w	r3, r9, r9
 800538e:	eb4a 040a 	adc.w	r4, sl, sl
 8005392:	4699      	mov	r9, r3
 8005394:	46a2      	mov	sl, r4
 8005396:	eb19 090b 	adds.w	r9, r9, fp
 800539a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800539e:	f04f 0100 	mov.w	r1, #0
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053b2:	4689      	mov	r9, r1
 80053b4:	4692      	mov	sl, r2
 80053b6:	eb1b 0509 	adds.w	r5, fp, r9
 80053ba:	eb4c 060a 	adc.w	r6, ip, sl
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4619      	mov	r1, r3
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	f04f 0400 	mov.w	r4, #0
 80053d0:	0094      	lsls	r4, r2, #2
 80053d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053d6:	008b      	lsls	r3, r1, #2
 80053d8:	461a      	mov	r2, r3
 80053da:	4623      	mov	r3, r4
 80053dc:	4628      	mov	r0, r5
 80053de:	4631      	mov	r1, r6
 80053e0:	f7fa fefe 	bl	80001e0 <__aeabi_uldivmod>
 80053e4:	4603      	mov	r3, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	461a      	mov	r2, r3
 80053ea:	4b30      	ldr	r3, [pc, #192]	; (80054ac <UART_SetConfig+0x778>)
 80053ec:	fba3 1302 	umull	r1, r3, r3, r2
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	2164      	movs	r1, #100	; 0x64
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	3332      	adds	r3, #50	; 0x32
 80053fe:	4a2b      	ldr	r2, [pc, #172]	; (80054ac <UART_SetConfig+0x778>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800540a:	4498      	add	r8, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	469b      	mov	fp, r3
 8005410:	f04f 0c00 	mov.w	ip, #0
 8005414:	46d9      	mov	r9, fp
 8005416:	46e2      	mov	sl, ip
 8005418:	eb19 0309 	adds.w	r3, r9, r9
 800541c:	eb4a 040a 	adc.w	r4, sl, sl
 8005420:	4699      	mov	r9, r3
 8005422:	46a2      	mov	sl, r4
 8005424:	eb19 090b 	adds.w	r9, r9, fp
 8005428:	eb4a 0a0c 	adc.w	sl, sl, ip
 800542c:	f04f 0100 	mov.w	r1, #0
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005438:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800543c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005440:	4689      	mov	r9, r1
 8005442:	4692      	mov	sl, r2
 8005444:	eb1b 0509 	adds.w	r5, fp, r9
 8005448:	eb4c 060a 	adc.w	r6, ip, sl
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	4619      	mov	r1, r3
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	f04f 0400 	mov.w	r4, #0
 800545e:	0094      	lsls	r4, r2, #2
 8005460:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005464:	008b      	lsls	r3, r1, #2
 8005466:	461a      	mov	r2, r3
 8005468:	4623      	mov	r3, r4
 800546a:	4628      	mov	r0, r5
 800546c:	4631      	mov	r1, r6
 800546e:	f7fa feb7 	bl	80001e0 <__aeabi_uldivmod>
 8005472:	4603      	mov	r3, r0
 8005474:	460c      	mov	r4, r1
 8005476:	461a      	mov	r2, r3
 8005478:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <UART_SetConfig+0x778>)
 800547a:	fba3 1302 	umull	r1, r3, r3, r2
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	2164      	movs	r1, #100	; 0x64
 8005482:	fb01 f303 	mul.w	r3, r1, r3
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	3332      	adds	r3, #50	; 0x32
 800548c:	4a07      	ldr	r2, [pc, #28]	; (80054ac <UART_SetConfig+0x778>)
 800548e:	fba2 2303 	umull	r2, r3, r2, r3
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	f003 020f 	and.w	r2, r3, #15
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4442      	add	r2, r8
 800549e:	609a      	str	r2, [r3, #8]
}
 80054a0:	e7ff      	b.n	80054a2 <UART_SetConfig+0x76e>
 80054a2:	bf00      	nop
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ac:	51eb851f 	.word	0x51eb851f

080054b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054b0:	b084      	sub	sp, #16
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	f107 001c 	add.w	r0, r7, #28
 80054be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d122      	bne.n	800550e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80054dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d105      	bne.n	8005502 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f94a 	bl	800579c <USB_CoreReset>
 8005508:	4603      	mov	r3, r0
 800550a:	73fb      	strb	r3, [r7, #15]
 800550c:	e01a      	b.n	8005544 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f93e 	bl	800579c <USB_CoreReset>
 8005520:	4603      	mov	r3, r0
 8005522:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	639a      	str	r2, [r3, #56]	; 0x38
 8005536:	e005      	b.n	8005544 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	2b01      	cmp	r3, #1
 8005548:	d10b      	bne.n	8005562 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f043 0206 	orr.w	r2, r3, #6
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f043 0220 	orr.w	r2, r3, #32
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005562:	7bfb      	ldrb	r3, [r7, #15]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800556e:	b004      	add	sp, #16
 8005570:	4770      	bx	lr

08005572 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f043 0201 	orr.w	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f023 0201 	bic.w	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b082      	sub	sp, #8
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	460b      	mov	r3, r1
 80055c0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d106      	bne.n	80055e2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	60da      	str	r2, [r3, #12]
 80055e0:	e00b      	b.n	80055fa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d106      	bne.n	80055f6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	60da      	str	r2, [r3, #12]
 80055f4:	e001      	b.n	80055fa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e003      	b.n	8005602 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80055fa:	2032      	movs	r0, #50	; 0x32
 80055fc:	f7fb fd1e 	bl	800103c <HAL_Delay>

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	019b      	lsls	r3, r3, #6
 800561e:	f043 0220 	orr.w	r2, r3, #32
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3301      	adds	r3, #1
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4a09      	ldr	r2, [pc, #36]	; (8005654 <USB_FlushTxFifo+0x48>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d901      	bls.n	8005638 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e006      	b.n	8005646 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b20      	cmp	r3, #32
 8005642:	d0f0      	beq.n	8005626 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	00030d40 	.word	0x00030d40

08005658 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2210      	movs	r2, #16
 8005668:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3301      	adds	r3, #1
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4a09      	ldr	r2, [pc, #36]	; (8005698 <USB_FlushRxFifo+0x40>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d901      	bls.n	800567c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e006      	b.n	800568a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b10      	cmp	r3, #16
 8005686:	d0f0      	beq.n	800566a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	00030d40 	.word	0x00030d40

0800569c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800569c:	b480      	push	{r7}
 800569e:	b089      	sub	sp, #36	; 0x24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	4611      	mov	r1, r2
 80056a8:	461a      	mov	r2, r3
 80056aa:	460b      	mov	r3, r1
 80056ac:	71fb      	strb	r3, [r7, #7]
 80056ae:	4613      	mov	r3, r2
 80056b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80056ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d11a      	bne.n	80056f8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056c2:	88bb      	ldrh	r3, [r7, #4]
 80056c4:	3303      	adds	r3, #3
 80056c6:	089b      	lsrs	r3, r3, #2
 80056c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80056ca:	2300      	movs	r3, #0
 80056cc:	61bb      	str	r3, [r7, #24]
 80056ce:	e00f      	b.n	80056f0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	031a      	lsls	r2, r3, #12
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056dc:	461a      	mov	r2, r3
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	3304      	adds	r3, #4
 80056e8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	3301      	adds	r3, #1
 80056ee:	61bb      	str	r3, [r7, #24]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d3eb      	bcc.n	80056d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3724      	adds	r7, #36	; 0x24
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005706:	b480      	push	{r7}
 8005708:	b089      	sub	sp, #36	; 0x24
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	4613      	mov	r3, r2
 8005712:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800571c:	88fb      	ldrh	r3, [r7, #6]
 800571e:	3303      	adds	r3, #3
 8005720:	089b      	lsrs	r3, r3, #2
 8005722:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005724:	2300      	movs	r3, #0
 8005726:	61bb      	str	r3, [r7, #24]
 8005728:	e00b      	b.n	8005742 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	601a      	str	r2, [r3, #0]
    pDest++;
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	3304      	adds	r3, #4
 800573a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	3301      	adds	r3, #1
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	429a      	cmp	r2, r3
 8005748:	d3ef      	bcc.n	800572a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800574a:	69fb      	ldr	r3, [r7, #28]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3724      	adds	r7, #36	; 0x24
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4013      	ands	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005770:	68fb      	ldr	r3, [r7, #12]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f003 0301 	and.w	r3, r3, #1
}
 800578e:	4618      	mov	r0, r3
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
	...

0800579c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a13      	ldr	r2, [pc, #76]	; (8005800 <USB_CoreReset+0x64>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e01b      	b.n	80057f2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	daf2      	bge.n	80057a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f043 0201 	orr.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3301      	adds	r3, #1
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4a09      	ldr	r2, [pc, #36]	; (8005800 <USB_CoreReset+0x64>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d901      	bls.n	80057e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e006      	b.n	80057f2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d0f0      	beq.n	80057d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	00030d40 	.word	0x00030d40

08005804 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005804:	b084      	sub	sp, #16
 8005806:	b580      	push	{r7, lr}
 8005808:	b084      	sub	sp, #16
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	f107 001c 	add.w	r0, r7, #28
 8005812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005820:	461a      	mov	r2, r3
 8005822:	2300      	movs	r3, #0
 8005824:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005852:	2b00      	cmp	r3, #0
 8005854:	d018      	beq.n	8005888 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	2b01      	cmp	r3, #1
 800585a:	d10a      	bne.n	8005872 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800586a:	f043 0304 	orr.w	r3, r3, #4
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	e014      	b.n	800589c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005880:	f023 0304 	bic.w	r3, r3, #4
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	e009      	b.n	800589c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005896:	f023 0304 	bic.w	r3, r3, #4
 800589a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800589c:	2110      	movs	r1, #16
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff feb4 	bl	800560c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff fed7 	bl	8005658 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	e015      	b.n	80058dc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058bc:	461a      	mov	r2, r3
 80058be:	f04f 33ff 	mov.w	r3, #4294967295
 80058c2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d0:	461a      	mov	r2, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3301      	adds	r3, #1
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d3e5      	bcc.n	80058b0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80058e4:	2101      	movs	r1, #1
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f8ac 	bl	8005a44 <USB_DriveVbus>

  HAL_Delay(200U);
 80058ec:	20c8      	movs	r0, #200	; 0xc8
 80058ee:	f7fb fba5 	bl	800103c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f04f 32ff 	mov.w	r2, #4294967295
 80058fe:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00b      	beq.n	8005924 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005912:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a14      	ldr	r2, [pc, #80]	; (8005968 <USB_HostInit+0x164>)
 8005918:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a13      	ldr	r2, [pc, #76]	; (800596c <USB_HostInit+0x168>)
 800591e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005922:	e009      	b.n	8005938 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2280      	movs	r2, #128	; 0x80
 8005928:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a10      	ldr	r2, [pc, #64]	; (8005970 <USB_HostInit+0x16c>)
 800592e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a10      	ldr	r2, [pc, #64]	; (8005974 <USB_HostInit+0x170>)
 8005934:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d105      	bne.n	800594a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f043 0210 	orr.w	r2, r3, #16
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699a      	ldr	r2, [r3, #24]
 800594e:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <USB_HostInit+0x174>)
 8005950:	4313      	orrs	r3, r2
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005962:	b004      	add	sp, #16
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	01000200 	.word	0x01000200
 800596c:	00e00300 	.word	0x00e00300
 8005970:	00600080 	.word	0x00600080
 8005974:	004000e0 	.word	0x004000e0
 8005978:	a3200008 	.word	0xa3200008

0800597c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800599a:	f023 0303 	bic.w	r3, r3, #3
 800599e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	78fb      	ldrb	r3, [r7, #3]
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	68f9      	ldr	r1, [r7, #12]
 80059b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80059b4:	4313      	orrs	r3, r2
 80059b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d107      	bne.n	80059ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c4:	461a      	mov	r2, r3
 80059c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80059ca:	6053      	str	r3, [r2, #4]
 80059cc:	e009      	b.n	80059e2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d106      	bne.n	80059e2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059da:	461a      	mov	r2, r3
 80059dc:	f241 7370 	movw	r3, #6000	; 0x1770
 80059e0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a10:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a1e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005a20:	2064      	movs	r0, #100	; 0x64
 8005a22:	f7fb fb0b 	bl	800103c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a32:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005a34:	200a      	movs	r0, #10
 8005a36:	f7fb fb01 	bl	800103c <HAL_Delay>

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a68:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d109      	bne.n	8005a88 <USB_DriveVbus+0x44>
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d106      	bne.n	8005a88 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a86:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a92:	d109      	bne.n	8005aa8 <USB_DriveVbus+0x64>
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005aa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aa6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	0c5b      	lsrs	r3, r3, #17
 8005ad4:	f003 0303 	and.w	r3, r3, #3
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	b29b      	uxth	r3, r3
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	4608      	mov	r0, r1
 8005b12:	4611      	mov	r1, r2
 8005b14:	461a      	mov	r2, r3
 8005b16:	4603      	mov	r3, r0
 8005b18:	70fb      	strb	r3, [r7, #3]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	70bb      	strb	r3, [r7, #2]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b36:	461a      	mov	r2, r3
 8005b38:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005b3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d87e      	bhi.n	8005c44 <USB_HC_Init+0x13c>
 8005b46:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <USB_HC_Init+0x44>)
 8005b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4c:	08005b5d 	.word	0x08005b5d
 8005b50:	08005c07 	.word	0x08005c07
 8005b54:	08005b5d 	.word	0x08005b5d
 8005b58:	08005bc9 	.word	0x08005bc9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b68:	461a      	mov	r2, r3
 8005b6a:	f240 439d 	movw	r3, #1181	; 0x49d
 8005b6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005b70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	da10      	bge.n	8005b9a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	78fa      	ldrb	r2, [r7, #3]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b96:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005b98:	e057      	b.n	8005c4a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d051      	beq.n	8005c4a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005ba6:	78fb      	ldrb	r3, [r7, #3]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	78fa      	ldrb	r2, [r7, #3]
 8005bb6:	0151      	lsls	r1, r2, #5
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	440a      	add	r2, r1
 8005bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bc0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005bc4:	60d3      	str	r3, [r2, #12]
      break;
 8005bc6:	e040      	b.n	8005c4a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	f240 639d 	movw	r3, #1693	; 0x69d
 8005bda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005bdc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	da34      	bge.n	8005c4e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	78fa      	ldrb	r2, [r7, #3]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c02:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005c04:	e023      	b.n	8005c4e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c06:	78fb      	ldrb	r3, [r7, #3]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c12:	461a      	mov	r2, r3
 8005c14:	f240 2325 	movw	r3, #549	; 0x225
 8005c18:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c1a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	da17      	bge.n	8005c52 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005c22:	78fb      	ldrb	r3, [r7, #3]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	78fa      	ldrb	r2, [r7, #3]
 8005c32:	0151      	lsls	r1, r2, #5
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	440a      	add	r2, r1
 8005c38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c3c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005c40:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005c42:	e006      	b.n	8005c52 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	75fb      	strb	r3, [r7, #23]
      break;
 8005c48:	e004      	b.n	8005c54 <USB_HC_Init+0x14c>
      break;
 8005c4a:	bf00      	nop
 8005c4c:	e002      	b.n	8005c54 <USB_HC_Init+0x14c>
      break;
 8005c4e:	bf00      	nop
 8005c50:	e000      	b.n	8005c54 <USB_HC_Init+0x14c>
      break;
 8005c52:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c5a:	699a      	ldr	r2, [r3, #24]
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	2101      	movs	r1, #1
 8005c64:	fa01 f303 	lsl.w	r3, r1, r3
 8005c68:	68b9      	ldr	r1, [r7, #8]
 8005c6a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005c7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	da03      	bge.n	8005c8e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c8a:	613b      	str	r3, [r7, #16]
 8005c8c:	e001      	b.n	8005c92 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005c92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d103      	bne.n	8005ca2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e001      	b.n	8005ca6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ca6:	787b      	ldrb	r3, [r7, #1]
 8005ca8:	059b      	lsls	r3, r3, #22
 8005caa:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005cae:	78bb      	ldrb	r3, [r7, #2]
 8005cb0:	02db      	lsls	r3, r3, #11
 8005cb2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cb6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005cb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cbc:	049b      	lsls	r3, r3, #18
 8005cbe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005cc2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005cc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005cca:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cd0:	78fb      	ldrb	r3, [r7, #3]
 8005cd2:	0159      	lsls	r1, r3, #5
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	440b      	add	r3, r1
 8005cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cdc:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ce2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005ce4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d10f      	bne.n	8005d0c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	78fa      	ldrb	r2, [r7, #3]
 8005cfc:	0151      	lsls	r1, r2, #5
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	440a      	add	r2, r1
 8005d02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d0a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop

08005d1c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08c      	sub	sp, #48	; 0x30
 8005d20:	af02      	add	r7, sp, #8
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	4613      	mov	r3, r2
 8005d28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	785b      	ldrb	r3, [r3, #1]
 8005d32:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d38:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d028      	beq.n	8005d98 <USB_HC_StartXfer+0x7c>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	791b      	ldrb	r3, [r3, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d124      	bne.n	8005d98 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10b      	bne.n	8005d6c <USB_HC_StartXfer+0x50>
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	795b      	ldrb	r3, [r3, #5]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d107      	bne.n	8005d6c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	785b      	ldrb	r3, [r3, #1]
 8005d60:	4619      	mov	r1, r3
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 fa2e 	bl	80061c4 <USB_DoPing>
      return HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e112      	b.n	8005f92 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005d6c:	79fb      	ldrb	r3, [r7, #7]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d112      	bne.n	8005d98 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	6a3a      	ldr	r2, [r7, #32]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d8c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005d90:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2200      	movs	r2, #0
 8005d96:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d018      	beq.n	8005dd2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	8912      	ldrh	r2, [r2, #8]
 8005da8:	4413      	add	r3, r2
 8005daa:	3b01      	subs	r3, #1
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	8912      	ldrh	r2, [r2, #8]
 8005db0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005db4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005db6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005db8:	8b7b      	ldrh	r3, [r7, #26]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d90b      	bls.n	8005dd6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005dbe:	8b7b      	ldrh	r3, [r7, #26]
 8005dc0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005dc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	8912      	ldrh	r2, [r2, #8]
 8005dc8:	fb02 f203 	mul.w	r2, r2, r3
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	611a      	str	r2, [r3, #16]
 8005dd0:	e001      	b.n	8005dd6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	78db      	ldrb	r3, [r3, #3]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d006      	beq.n	8005dec <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005dde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	8912      	ldrh	r2, [r2, #8]
 8005de4:	fb02 f203 	mul.w	r2, r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005df4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005df6:	04d9      	lsls	r1, r3, #19
 8005df8:	4b68      	ldr	r3, [pc, #416]	; (8005f9c <USB_HC_StartXfer+0x280>)
 8005dfa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005dfc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	7a9b      	ldrb	r3, [r3, #10]
 8005e02:	075b      	lsls	r3, r3, #29
 8005e04:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e08:	69f9      	ldr	r1, [r7, #28]
 8005e0a:	0148      	lsls	r0, r1, #5
 8005e0c:	6a39      	ldr	r1, [r7, #32]
 8005e0e:	4401      	add	r1, r0
 8005e10:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e14:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e16:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	68d9      	ldr	r1, [r3, #12]
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2e:	460a      	mov	r2, r1
 8005e30:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	bf0c      	ite	eq
 8005e42:	2301      	moveq	r3, #1
 8005e44:	2300      	movne	r3, #0
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	6a3a      	ldr	r2, [r7, #32]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e64:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e68:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	7e7b      	ldrb	r3, [r7, #25]
 8005e7a:	075b      	lsls	r3, r3, #29
 8005e7c:	69f9      	ldr	r1, [r7, #28]
 8005e7e:	0148      	lsls	r0, r1, #5
 8005e80:	6a39      	ldr	r1, [r7, #32]
 8005e82:	4401      	add	r1, r0
 8005e84:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a41      	ldr	r2, [pc, #260]	; (8005fa0 <USB_HC_StartXfer+0x284>)
 8005e9c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e9e:	4b40      	ldr	r3, [pc, #256]	; (8005fa0 <USB_HC_StartXfer+0x284>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ea6:	4a3e      	ldr	r2, [pc, #248]	; (8005fa0 <USB_HC_StartXfer+0x284>)
 8005ea8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	78db      	ldrb	r3, [r3, #3]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d006      	beq.n	8005ec0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005eb2:	4b3b      	ldr	r3, [pc, #236]	; (8005fa0 <USB_HC_StartXfer+0x284>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eba:	4a39      	ldr	r2, [pc, #228]	; (8005fa0 <USB_HC_StartXfer+0x284>)
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e005      	b.n	8005ecc <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ec0:	4b37      	ldr	r3, [pc, #220]	; (8005fa0 <USB_HC_StartXfer+0x284>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ec8:	4a35      	ldr	r2, [pc, #212]	; (8005fa0 <USB_HC_StartXfer+0x284>)
 8005eca:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ecc:	4b34      	ldr	r3, [pc, #208]	; (8005fa0 <USB_HC_StartXfer+0x284>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ed4:	4a32      	ldr	r2, [pc, #200]	; (8005fa0 <USB_HC_StartXfer+0x284>)
 8005ed6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	4b2e      	ldr	r3, [pc, #184]	; (8005fa0 <USB_HC_StartXfer+0x284>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d14e      	bne.n	8005f90 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	78db      	ldrb	r3, [r3, #3]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d14a      	bne.n	8005f90 <USB_HC_StartXfer+0x274>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d046      	beq.n	8005f90 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	79db      	ldrb	r3, [r3, #7]
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d830      	bhi.n	8005f6c <USB_HC_StartXfer+0x250>
 8005f0a:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <USB_HC_StartXfer+0x1f4>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08005f21 	.word	0x08005f21
 8005f14:	08005f45 	.word	0x08005f45
 8005f18:	08005f21 	.word	0x08005f21
 8005f1c:	08005f45 	.word	0x08005f45
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	3303      	adds	r3, #3
 8005f26:	089b      	lsrs	r3, r3, #2
 8005f28:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005f2a:	8afa      	ldrh	r2, [r7, #22]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d91c      	bls.n	8005f70 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f043 0220 	orr.w	r2, r3, #32
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	619a      	str	r2, [r3, #24]
          }
          break;
 8005f42:	e015      	b.n	8005f70 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	3303      	adds	r3, #3
 8005f4a:	089b      	lsrs	r3, r3, #2
 8005f4c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005f4e:	8afa      	ldrh	r2, [r7, #22]
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d90a      	bls.n	8005f74 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	619a      	str	r2, [r3, #24]
          }
          break;
 8005f6a:	e003      	b.n	8005f74 <USB_HC_StartXfer+0x258>

        default:
          break;
 8005f6c:	bf00      	nop
 8005f6e:	e002      	b.n	8005f76 <USB_HC_StartXfer+0x25a>
          break;
 8005f70:	bf00      	nop
 8005f72:	e000      	b.n	8005f76 <USB_HC_StartXfer+0x25a>
          break;
 8005f74:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	68d9      	ldr	r1, [r3, #12]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	785a      	ldrb	r2, [r3, #1]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	b298      	uxth	r0, r3
 8005f84:	2300      	movs	r3, #0
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	4603      	mov	r3, r0
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f7ff fb86 	bl	800569c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3728      	adds	r7, #40	; 0x28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	1ff80000 	.word	0x1ff80000
 8005fa0:	20000308 	.word	0x20000308

08005fa4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	b29b      	uxth	r3, r3
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b087      	sub	sp, #28
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005fd6:	78fb      	ldrb	r3, [r7, #3]
 8005fd8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	0c9b      	lsrs	r3, r3, #18
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <USB_HC_Halt+0x3a>
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d16c      	bne.n	80060da <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	4413      	add	r3, r2
 8006008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	440a      	add	r2, r1
 8006016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800601a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800601e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d143      	bne.n	80060b4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	4413      	add	r3, r2
 8006034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	440a      	add	r2, r1
 8006042:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800604a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	4413      	add	r3, r2
 8006054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	440a      	add	r2, r1
 8006062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006066:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800606a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	4413      	add	r3, r2
 8006074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	440a      	add	r2, r1
 8006082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006086:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800608a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	3301      	adds	r3, #1
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006098:	d81d      	bhi.n	80060d6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060b0:	d0ec      	beq.n	800608c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060b2:	e080      	b.n	80061b6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060d2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060d4:	e06f      	b.n	80061b6 <USB_HC_Halt+0x1f0>
          break;
 80060d6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80060d8:	e06d      	b.n	80061b6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060f8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d143      	bne.n	8006192 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	4413      	add	r3, r2
 8006112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	0151      	lsls	r1, r2, #5
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	440a      	add	r2, r1
 8006120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006128:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	4413      	add	r3, r2
 8006132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	0151      	lsls	r1, r2, #5
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	440a      	add	r2, r1
 8006140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006148:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4413      	add	r3, r2
 8006152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	440a      	add	r2, r1
 8006160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006164:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006168:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	3301      	adds	r3, #1
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006176:	d81d      	bhi.n	80061b4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	4413      	add	r3, r2
 8006180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800618a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800618e:	d0ec      	beq.n	800616a <USB_HC_Halt+0x1a4>
 8006190:	e011      	b.n	80061b6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	4413      	add	r3, r2
 800619a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	e000      	b.n	80061b6 <USB_HC_Halt+0x1f0>
          break;
 80061b4:	bf00      	nop
    }
  }

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	371c      	adds	r7, #28
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80061d4:	78fb      	ldrb	r3, [r7, #3]
 80061d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80061d8:	2301      	movs	r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	04da      	lsls	r2, r3, #19
 80061e0:	4b15      	ldr	r3, [pc, #84]	; (8006238 <USB_DoPing+0x74>)
 80061e2:	4013      	ands	r3, r2
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800620c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006214:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	4413      	add	r3, r2
 800621e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006222:	461a      	mov	r2, r3
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	1ff80000 	.word	0x1ff80000

0800623c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff f9a1 	bl	8005594 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006252:	2110      	movs	r1, #16
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff f9d9 	bl	800560c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff f9fc 	bl	8005658 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006260:	2300      	movs	r3, #0
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	e01f      	b.n	80062a6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4413      	add	r3, r2
 800626e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800627c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006284:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800628c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4413      	add	r3, r2
 8006296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629a:	461a      	mov	r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	3301      	adds	r3, #1
 80062a4:	613b      	str	r3, [r7, #16]
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	2b0f      	cmp	r3, #15
 80062aa:	d9dc      	bls.n	8006266 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80062ac:	2300      	movs	r3, #0
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	e034      	b.n	800631c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062c8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062d8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e6:	461a      	mov	r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	3301      	adds	r3, #1
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062f8:	d80c      	bhi.n	8006314 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800630c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006310:	d0ec      	beq.n	80062ec <USB_StopHost+0xb0>
 8006312:	e000      	b.n	8006316 <USB_StopHost+0xda>
        break;
 8006314:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	3301      	adds	r3, #1
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	2b0f      	cmp	r3, #15
 8006320:	d9c7      	bls.n	80062b2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006328:	461a      	mov	r2, r3
 800632a:	f04f 33ff 	mov.w	r3, #4294967295
 800632e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f04f 32ff 	mov.w	r2, #4294967295
 8006336:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff f91a 	bl	8005572 <USB_EnableGlobalInt>

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006348:	b590      	push	{r4, r7, lr}
 800634a:	b089      	sub	sp, #36	; 0x24
 800634c:	af04      	add	r7, sp, #16
 800634e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006350:	2301      	movs	r3, #1
 8006352:	2202      	movs	r2, #2
 8006354:	2102      	movs	r1, #2
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fcba 	bl	8006cd0 <USBH_FindInterface>
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2bff      	cmp	r3, #255	; 0xff
 8006364:	d002      	beq.n	800636c <USBH_CDC_InterfaceInit+0x24>
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d901      	bls.n	8006370 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800636c:	2302      	movs	r3, #2
 800636e:	e13d      	b.n	80065ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fc8f 	bl	8006c98 <USBH_SelectInterface>
 800637a:	4603      	mov	r3, r0
 800637c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800637e:	7bbb      	ldrb	r3, [r7, #14]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006384:	2302      	movs	r3, #2
 8006386:	e131      	b.n	80065ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800638e:	2050      	movs	r0, #80	; 0x50
 8006390:	f004 feb0 	bl	800b0f4 <malloc>
 8006394:	4603      	mov	r3, r0
 8006396:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80063a8:	2302      	movs	r3, #2
 80063aa:	e11f      	b.n	80065ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80063ac:	2250      	movs	r2, #80	; 0x50
 80063ae:	2100      	movs	r1, #0
 80063b0:	68b8      	ldr	r0, [r7, #8]
 80063b2:	f004 feba 	bl	800b12a <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	211a      	movs	r1, #26
 80063bc:	fb01 f303 	mul.w	r3, r1, r3
 80063c0:	4413      	add	r3, r2
 80063c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	b25b      	sxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	da15      	bge.n	80063fa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	211a      	movs	r1, #26
 80063d4:	fb01 f303 	mul.w	r3, r1, r3
 80063d8:	4413      	add	r3, r2
 80063da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063de:	781a      	ldrb	r2, [r3, #0]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	211a      	movs	r1, #26
 80063ea:	fb01 f303 	mul.w	r3, r1, r3
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063f4:	881a      	ldrh	r2, [r3, #0]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	785b      	ldrb	r3, [r3, #1]
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f002 f894 	bl	800852e <USBH_AllocPipe>
 8006406:	4603      	mov	r3, r0
 8006408:	461a      	mov	r2, r3
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	7819      	ldrb	r1, [r3, #0]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	7858      	ldrb	r0, [r3, #1]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	8952      	ldrh	r2, [r2, #10]
 8006426:	9202      	str	r2, [sp, #8]
 8006428:	2203      	movs	r2, #3
 800642a:	9201      	str	r2, [sp, #4]
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	4623      	mov	r3, r4
 8006430:	4602      	mov	r2, r0
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f002 f84c 	bl	80084d0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2200      	movs	r2, #0
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f004 fda7 	bl	800af94 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006446:	2300      	movs	r3, #0
 8006448:	2200      	movs	r2, #0
 800644a:	210a      	movs	r1, #10
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fc3f 	bl	8006cd0 <USBH_FindInterface>
 8006452:	4603      	mov	r3, r0
 8006454:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	2bff      	cmp	r3, #255	; 0xff
 800645a:	d002      	beq.n	8006462 <USBH_CDC_InterfaceInit+0x11a>
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d901      	bls.n	8006466 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006462:	2302      	movs	r3, #2
 8006464:	e0c2      	b.n	80065ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	211a      	movs	r1, #26
 800646c:	fb01 f303 	mul.w	r3, r1, r3
 8006470:	4413      	add	r3, r2
 8006472:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	b25b      	sxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	da16      	bge.n	80064ac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	211a      	movs	r1, #26
 8006484:	fb01 f303 	mul.w	r3, r1, r3
 8006488:	4413      	add	r3, r2
 800648a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800648e:	781a      	ldrb	r2, [r3, #0]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	211a      	movs	r1, #26
 800649a:	fb01 f303 	mul.w	r3, r1, r3
 800649e:	4413      	add	r3, r2
 80064a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80064a4:	881a      	ldrh	r2, [r3, #0]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	835a      	strh	r2, [r3, #26]
 80064aa:	e015      	b.n	80064d8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	211a      	movs	r1, #26
 80064b2:	fb01 f303 	mul.w	r3, r1, r3
 80064b6:	4413      	add	r3, r2
 80064b8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064bc:	781a      	ldrb	r2, [r3, #0]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	211a      	movs	r1, #26
 80064c8:	fb01 f303 	mul.w	r3, r1, r3
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80064d2:	881a      	ldrh	r2, [r3, #0]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	211a      	movs	r1, #26
 80064de:	fb01 f303 	mul.w	r3, r1, r3
 80064e2:	4413      	add	r3, r2
 80064e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	b25b      	sxtb	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	da16      	bge.n	800651e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	211a      	movs	r1, #26
 80064f6:	fb01 f303 	mul.w	r3, r1, r3
 80064fa:	4413      	add	r3, r2
 80064fc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006500:	781a      	ldrb	r2, [r3, #0]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	211a      	movs	r1, #26
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	4413      	add	r3, r2
 8006512:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006516:	881a      	ldrh	r2, [r3, #0]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	835a      	strh	r2, [r3, #26]
 800651c:	e015      	b.n	800654a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	211a      	movs	r1, #26
 8006524:	fb01 f303 	mul.w	r3, r1, r3
 8006528:	4413      	add	r3, r2
 800652a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800652e:	781a      	ldrb	r2, [r3, #0]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	211a      	movs	r1, #26
 800653a:	fb01 f303 	mul.w	r3, r1, r3
 800653e:	4413      	add	r3, r2
 8006540:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006544:	881a      	ldrh	r2, [r3, #0]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	7b9b      	ldrb	r3, [r3, #14]
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 ffec 	bl	800852e <USBH_AllocPipe>
 8006556:	4603      	mov	r3, r0
 8006558:	461a      	mov	r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	7bdb      	ldrb	r3, [r3, #15]
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f001 ffe2 	bl	800852e <USBH_AllocPipe>
 800656a:	4603      	mov	r3, r0
 800656c:	461a      	mov	r2, r3
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	7b59      	ldrb	r1, [r3, #13]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	7b98      	ldrb	r0, [r3, #14]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	8b12      	ldrh	r2, [r2, #24]
 800658a:	9202      	str	r2, [sp, #8]
 800658c:	2202      	movs	r2, #2
 800658e:	9201      	str	r2, [sp, #4]
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	4623      	mov	r3, r4
 8006594:	4602      	mov	r2, r0
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f001 ff9a 	bl	80084d0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	7b19      	ldrb	r1, [r3, #12]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	7bd8      	ldrb	r0, [r3, #15]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	8b52      	ldrh	r2, [r2, #26]
 80065b4:	9202      	str	r2, [sp, #8]
 80065b6:	2202      	movs	r2, #2
 80065b8:	9201      	str	r2, [sp, #4]
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	4623      	mov	r3, r4
 80065be:	4602      	mov	r2, r0
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 ff85 	bl	80084d0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	7b5b      	ldrb	r3, [r3, #13]
 80065d2:	2200      	movs	r2, #0
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f004 fcdc 	bl	800af94 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	7b1b      	ldrb	r3, [r3, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f004 fcd5 	bl	800af94 <USBH_LL_SetToggle>

  return USBH_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd90      	pop	{r4, r7, pc}

080065f4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00e      	beq.n	800662c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 ff7a 	bl	800850e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 ffa5 	bl	8008570 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	7b1b      	ldrb	r3, [r3, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00e      	beq.n	8006652 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	7b1b      	ldrb	r3, [r3, #12]
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 ff67 	bl	800850e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	7b1b      	ldrb	r3, [r3, #12]
 8006644:	4619      	mov	r1, r3
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f001 ff92 	bl	8008570 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	7b5b      	ldrb	r3, [r3, #13]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00e      	beq.n	8006678 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	7b5b      	ldrb	r3, [r3, #13]
 800665e:	4619      	mov	r1, r3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 ff54 	bl	800850e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	7b5b      	ldrb	r3, [r3, #13]
 800666a:	4619      	mov	r1, r3
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 ff7f 	bl	8008570 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	4618      	mov	r0, r3
 800668e:	f004 fd39 	bl	800b104 <free>
    phost->pActiveClass->pData = 0U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006698:	2200      	movs	r2, #0
 800669a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3340      	adds	r3, #64	; 0x40
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f8b1 	bl	8006826 <GetLineCoding>
 80066c4:	4603      	mov	r3, r0
 80066c6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80066c8:	7afb      	ldrb	r3, [r7, #11]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d105      	bne.n	80066da <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066d4:	2102      	movs	r1, #2
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80066da:	7afb      	ldrb	r3, [r7, #11]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80066ec:	2301      	movs	r3, #1
 80066ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066fa:	69db      	ldr	r3, [r3, #28]
 80066fc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006704:	2b04      	cmp	r3, #4
 8006706:	d877      	bhi.n	80067f8 <USBH_CDC_Process+0x114>
 8006708:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <USBH_CDC_Process+0x2c>)
 800670a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670e:	bf00      	nop
 8006710:	08006725 	.word	0x08006725
 8006714:	0800672b 	.word	0x0800672b
 8006718:	0800675b 	.word	0x0800675b
 800671c:	080067cf 	.word	0x080067cf
 8006720:	080067dd 	.word	0x080067dd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	73fb      	strb	r3, [r7, #15]
      break;
 8006728:	e06d      	b.n	8006806 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f897 	bl	8006864 <SetLineCoding>
 8006736:	4603      	mov	r3, r0
 8006738:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800673a:	7bbb      	ldrb	r3, [r7, #14]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d104      	bne.n	800674a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006748:	e058      	b.n	80067fc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800674a:	7bbb      	ldrb	r3, [r7, #14]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d055      	beq.n	80067fc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2204      	movs	r2, #4
 8006754:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006758:	e050      	b.n	80067fc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	3340      	adds	r3, #64	; 0x40
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f860 	bl	8006826 <GetLineCoding>
 8006766:	4603      	mov	r3, r0
 8006768:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800676a:	7bbb      	ldrb	r3, [r7, #14]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d126      	bne.n	80067be <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006782:	791b      	ldrb	r3, [r3, #4]
 8006784:	429a      	cmp	r2, r3
 8006786:	d13b      	bne.n	8006800 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006792:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006794:	429a      	cmp	r2, r3
 8006796:	d133      	bne.n	8006800 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d12b      	bne.n	8006800 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067b0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d124      	bne.n	8006800 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f984 	bl	8006ac4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80067bc:	e020      	b.n	8006800 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80067be:	7bbb      	ldrb	r3, [r7, #14]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d01d      	beq.n	8006800 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2204      	movs	r2, #4
 80067c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80067cc:	e018      	b.n	8006800 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f867 	bl	80068a2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f8f8 	bl	80069ca <CDC_ProcessReception>
      break;
 80067da:	e014      	b.n	8006806 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80067dc:	2100      	movs	r1, #0
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 f953 	bl	8007a8a <USBH_ClrFeature>
 80067e4:	4603      	mov	r3, r0
 80067e6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067e8:	7bbb      	ldrb	r3, [r7, #14]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10a      	bne.n	8006804 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80067f6:	e005      	b.n	8006804 <USBH_CDC_Process+0x120>

    default:
      break;
 80067f8:	bf00      	nop
 80067fa:	e004      	b.n	8006806 <USBH_CDC_Process+0x122>
      break;
 80067fc:	bf00      	nop
 80067fe:	e002      	b.n	8006806 <USBH_CDC_Process+0x122>
      break;
 8006800:	bf00      	nop
 8006802:	e000      	b.n	8006806 <USBH_CDC_Process+0x122>
      break;
 8006804:	bf00      	nop

  }

  return status;
 8006806:	7bfb      	ldrb	r3, [r7, #15]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	22a1      	movs	r2, #161	; 0xa1
 8006834:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2221      	movs	r2, #33	; 0x21
 800683a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2207      	movs	r2, #7
 800684c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2207      	movs	r2, #7
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f001 faf8 	bl	8007e4a <USBH_CtlReq>
 800685a:	4603      	mov	r3, r0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2221      	movs	r2, #33	; 0x21
 8006872:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2207      	movs	r2, #7
 800688a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2207      	movs	r2, #7
 8006890:	4619      	mov	r1, r3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 fad9 	bl	8007e4a <USBH_CtlReq>
 8006898:	4603      	mov	r3, r0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b086      	sub	sp, #24
 80068a6:	af02      	add	r7, sp, #8
 80068a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068b4:	2300      	movs	r3, #0
 80068b6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d002      	beq.n	80068c8 <CDC_ProcessTransmission+0x26>
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d025      	beq.n	8006912 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80068c6:	e07c      	b.n	80069c2 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	8b12      	ldrh	r2, [r2, #24]
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d90c      	bls.n	80068ee <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	69d9      	ldr	r1, [r3, #28]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8b1a      	ldrh	r2, [r3, #24]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	7b58      	ldrb	r0, [r3, #13]
 80068e0:	2301      	movs	r3, #1
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	4603      	mov	r3, r0
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f001 fdaf 	bl	800844a <USBH_BulkSendData>
 80068ec:	e00c      	b.n	8006908 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	7b58      	ldrb	r0, [r3, #13]
 80068fc:	2301      	movs	r3, #1
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	4603      	mov	r3, r0
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f001 fda1 	bl	800844a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006910:	e057      	b.n	80069c2 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	7b5b      	ldrb	r3, [r3, #13]
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f004 fb11 	bl	800af40 <USBH_LL_GetURBState>
 800691e:	4603      	mov	r3, r0
 8006920:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006922:	7afb      	ldrb	r3, [r7, #11]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d136      	bne.n	8006996 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	8b12      	ldrh	r2, [r2, #24]
 8006930:	4293      	cmp	r3, r2
 8006932:	d90e      	bls.n	8006952 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	8b12      	ldrh	r2, [r2, #24]
 800693c:	1a9a      	subs	r2, r3, r2
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	8b12      	ldrh	r2, [r2, #24]
 800694a:	441a      	add	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	61da      	str	r2, [r3, #28]
 8006950:	e002      	b.n	8006958 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	2b00      	cmp	r3, #0
 800695e:	d004      	beq.n	800696a <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006968:	e006      	b.n	8006978 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f892 	bl	8006a9c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2204      	movs	r2, #4
 800697c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800698c:	2200      	movs	r2, #0
 800698e:	4619      	mov	r1, r3
 8006990:	f001 feea 	bl	8008768 <osMessagePut>
      break;
 8006994:	e014      	b.n	80069c0 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8006996:	7afb      	ldrb	r3, [r7, #11]
 8006998:	2b02      	cmp	r3, #2
 800699a:	d111      	bne.n	80069c0 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2204      	movs	r2, #4
 80069a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80069b8:	2200      	movs	r2, #0
 80069ba:	4619      	mov	r1, r3
 80069bc:	f001 fed4 	bl	8008768 <osMessagePut>
      break;
 80069c0:	bf00      	nop
  }
}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b086      	sub	sp, #24
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069dc:	2300      	movs	r3, #0
 80069de:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d002      	beq.n	80069f0 <CDC_ProcessReception+0x26>
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	d00e      	beq.n	8006a0c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80069ee:	e051      	b.n	8006a94 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	6a19      	ldr	r1, [r3, #32]
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	8b5a      	ldrh	r2, [r3, #26]
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	7b1b      	ldrb	r3, [r3, #12]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 fd49 	bl	8008494 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2204      	movs	r2, #4
 8006a06:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006a0a:	e043      	b.n	8006a94 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	7b1b      	ldrb	r3, [r3, #12]
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f004 fa94 	bl	800af40 <USBH_LL_GetURBState>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006a1c:	7cfb      	ldrb	r3, [r7, #19]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d137      	bne.n	8006a92 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	7b1b      	ldrb	r3, [r3, #12]
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f004 f9f7 	bl	800ae1c <USBH_LL_GetLastXferSize>
 8006a2e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d016      	beq.n	8006a68 <CDC_ProcessReception+0x9e>
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	8b5b      	ldrh	r3, [r3, #26]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d910      	bls.n	8006a68 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	1ad2      	subs	r2, r2, r3
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	6a1a      	ldr	r2, [r3, #32]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	441a      	add	r2, r3
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2203      	movs	r2, #3
 8006a62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006a66:	e006      	b.n	8006a76 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f81d 	bl	8006ab0 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2204      	movs	r2, #4
 8006a7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	f001 fe6b 	bl	8008768 <osMessagePut>
      break;
 8006a92:	bf00      	nop
  }
}
 8006a94:	bf00      	nop
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006ad8:	b5b0      	push	{r4, r5, r7, lr}
 8006ada:	b090      	sub	sp, #64	; 0x40
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006aec:	2302      	movs	r3, #2
 8006aee:	e04d      	b.n	8006b8c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	79fa      	ldrb	r2, [r7, #7]
 8006af4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 f847 	bl	8006b9c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8006b3c:	4b15      	ldr	r3, [pc, #84]	; (8006b94 <USBH_Init+0xbc>)
 8006b3e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8006b48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f001 fde1 	bl	8008716 <osMessageCreate>
 8006b54:	4602      	mov	r2, r0
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8006b5c:	4b0e      	ldr	r3, [pc, #56]	; (8006b98 <USBH_Init+0xc0>)
 8006b5e:	f107 0414 	add.w	r4, r7, #20
 8006b62:	461d      	mov	r5, r3
 8006b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006b6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8006b70:	f107 0314 	add.w	r3, r7, #20
 8006b74:	68f9      	ldr	r1, [r7, #12]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 fd6d 	bl	8008656 <osThreadCreate>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f004 f897 	bl	800acb8 <USBH_LL_Init>

  return USBH_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3740      	adds	r7, #64	; 0x40
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bdb0      	pop	{r4, r5, r7, pc}
 8006b94:	0800b5e4 	.word	0x0800b5e4
 8006b98:	0800b600 	.word	0x0800b600

08006b9c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	e009      	b.n	8006bc2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	33e0      	adds	r3, #224	; 0xe0
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	2200      	movs	r2, #0
 8006bba:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60fb      	str	r3, [r7, #12]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b0e      	cmp	r3, #14
 8006bc6:	d9f2      	bls.n	8006bae <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	e009      	b.n	8006be2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006bd8:	2200      	movs	r2, #0
 8006bda:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3301      	adds	r3, #1
 8006be0:	60fb      	str	r3, [r7, #12]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be8:	d3f1      	bcc.n	8006bce <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2240      	movs	r2, #64	; 0x40
 8006c0e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d016      	beq.n	8006c86 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10e      	bne.n	8006c80 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c68:	1c59      	adds	r1, r3, #1
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	33de      	adds	r3, #222	; 0xde
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	73fb      	strb	r3, [r7, #15]
 8006c7e:	e004      	b.n	8006c8a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006c80:	2302      	movs	r3, #2
 8006c82:	73fb      	strb	r3, [r7, #15]
 8006c84:	e001      	b.n	8006c8a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006c86:	2302      	movs	r3, #2
 8006c88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006cae:	78fa      	ldrb	r2, [r7, #3]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d204      	bcs.n	8006cbe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	78fa      	ldrb	r2, [r7, #3]
 8006cb8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006cbc:	e001      	b.n	8006cc2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	4608      	mov	r0, r1
 8006cda:	4611      	mov	r1, r2
 8006cdc:	461a      	mov	r2, r3
 8006cde:	4603      	mov	r3, r0
 8006ce0:	70fb      	strb	r3, [r7, #3]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	70bb      	strb	r3, [r7, #2]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006cf8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006cfa:	e025      	b.n	8006d48 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	221a      	movs	r2, #26
 8006d00:	fb02 f303 	mul.w	r3, r2, r3
 8006d04:	3308      	adds	r3, #8
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	4413      	add	r3, r2
 8006d0a:	3302      	adds	r3, #2
 8006d0c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	795b      	ldrb	r3, [r3, #5]
 8006d12:	78fa      	ldrb	r2, [r7, #3]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d002      	beq.n	8006d1e <USBH_FindInterface+0x4e>
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	2bff      	cmp	r3, #255	; 0xff
 8006d1c:	d111      	bne.n	8006d42 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006d22:	78ba      	ldrb	r2, [r7, #2]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d002      	beq.n	8006d2e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d28:	78bb      	ldrb	r3, [r7, #2]
 8006d2a:	2bff      	cmp	r3, #255	; 0xff
 8006d2c:	d109      	bne.n	8006d42 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006d32:	787a      	ldrb	r2, [r7, #1]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d002      	beq.n	8006d3e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d38:	787b      	ldrb	r3, [r7, #1]
 8006d3a:	2bff      	cmp	r3, #255	; 0xff
 8006d3c:	d101      	bne.n	8006d42 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
 8006d40:	e006      	b.n	8006d50 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
 8006d44:	3301      	adds	r3, #1
 8006d46:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d48:	7dfb      	ldrb	r3, [r7, #23]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d9d6      	bls.n	8006cfc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006d4e:	23ff      	movs	r3, #255	; 0xff
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	371c      	adds	r7, #28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f003 ffe3 	bl	800ad30 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f004 f8fa 	bl	800af66 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af04      	add	r7, sp, #16
 8006d82:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006d84:	2302      	movs	r3, #2
 8006d86:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d102      	bne.n	8006d9e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2203      	movs	r2, #3
 8006d9c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b0b      	cmp	r3, #11
 8006da6:	f200 823c 	bhi.w	8007222 <USBH_Process+0x4a6>
 8006daa:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <USBH_Process+0x34>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006de1 	.word	0x08006de1
 8006db4:	08006e2f 	.word	0x08006e2f
 8006db8:	08006eb3 	.word	0x08006eb3
 8006dbc:	080071a1 	.word	0x080071a1
 8006dc0:	08007223 	.word	0x08007223
 8006dc4:	08006f73 	.word	0x08006f73
 8006dc8:	0800712b 	.word	0x0800712b
 8006dcc:	08006fc5 	.word	0x08006fc5
 8006dd0:	08007001 	.word	0x08007001
 8006dd4:	0800703b 	.word	0x0800703b
 8006dd8:	08007083 	.word	0x08007083
 8006ddc:	08007189 	.word	0x08007189
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 821c 	beq.w	8007226 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006df4:	20c8      	movs	r0, #200	; 0xc8
 8006df6:	f004 f900 	bl	800affa <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f003 fff3 	bl	800ade6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006e24:	2200      	movs	r2, #0
 8006e26:	4619      	mov	r1, r3
 8006e28:	f001 fc9e 	bl	8008768 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006e2c:	e1fb      	b.n	8007226 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d107      	bne.n	8006e48 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	e025      	b.n	8006e94 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e52:	d914      	bls.n	8006e7e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d903      	bls.n	8006e76 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	220d      	movs	r2, #13
 8006e72:	701a      	strb	r2, [r3, #0]
 8006e74:	e00e      	b.n	8006e94 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	701a      	strb	r2, [r3, #0]
 8006e7c:	e00a      	b.n	8006e94 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006e84:	f103 020a 	add.w	r2, r3, #10
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006e8e:	200a      	movs	r0, #10
 8006e90:	f004 f8b3 	bl	800affa <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4619      	mov	r1, r3
 8006eac:	f001 fc5c 	bl	8008768 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006eb0:	e1c0      	b.n	8007234 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d005      	beq.n	8006ec8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ec2:	2104      	movs	r1, #4
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006ec8:	2064      	movs	r0, #100	; 0x64
 8006eca:	f004 f896 	bl	800affa <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f003 ff64 	bl	800ad9c <USBH_LL_GetSpeed>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2205      	movs	r2, #5
 8006ee2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 fb21 	bl	800852e <USBH_AllocPipe>
 8006eec:	4603      	mov	r3, r0
 8006eee:	461a      	mov	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006ef4:	2180      	movs	r1, #128	; 0x80
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 fb19 	bl	800852e <USBH_AllocPipe>
 8006efc:	4603      	mov	r3, r0
 8006efe:	461a      	mov	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	7919      	ldrb	r1, [r3, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006f18:	b292      	uxth	r2, r2
 8006f1a:	9202      	str	r2, [sp, #8]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	9201      	str	r2, [sp, #4]
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	4603      	mov	r3, r0
 8006f24:	2280      	movs	r2, #128	; 0x80
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 fad2 	bl	80084d0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7959      	ldrb	r1, [r3, #5]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006f40:	b292      	uxth	r2, r2
 8006f42:	9202      	str	r2, [sp, #8]
 8006f44:	2200      	movs	r2, #0
 8006f46:	9201      	str	r2, [sp, #4]
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 fabe 	bl	80084d0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006f68:	2200      	movs	r2, #0
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	f001 fbfc 	bl	8008768 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f70:	e160      	b.n	8007234 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f964 	bl	8007240 <USBH_HandleEnum>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f040 8152 	bne.w	800722a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d103      	bne.n	8006fa0 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2208      	movs	r2, #8
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	e002      	b.n	8006fa6 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2207      	movs	r2, #7
 8006fa4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2205      	movs	r2, #5
 8006faa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006fba:	2200      	movs	r2, #0
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	f001 fbd3 	bl	8008768 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006fc2:	e132      	b.n	800722a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 812f 	beq.w	800722e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2208      	movs	r2, #8
 8006fe0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2205      	movs	r2, #5
 8006fe6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	f001 fbb5 	bl	8008768 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006ffe:	e116      	b.n	800722e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007006:	b29b      	uxth	r3, r3
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fcf6 	bl	80079fc <USBH_SetCfg>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d102      	bne.n	800701c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2209      	movs	r2, #9
 800701a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007030:	2200      	movs	r2, #0
 8007032:	4619      	mov	r1, r3
 8007034:	f001 fb98 	bl	8008768 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007038:	e0fc      	b.n	8007234 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007040:	f003 0320 	and.w	r3, r3, #32
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00a      	beq.n	800705e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007048:	2101      	movs	r1, #1
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fcf9 	bl	8007a42 <USBH_SetFeature>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d106      	bne.n	8007064 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	220a      	movs	r2, #10
 800705a:	701a      	strb	r2, [r3, #0]
 800705c:	e002      	b.n	8007064 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	220a      	movs	r2, #10
 8007062:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007078:	2200      	movs	r2, #0
 800707a:	4619      	mov	r1, r3
 800707c:	f001 fb74 	bl	8008768 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007080:	e0d8      	b.n	8007234 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007088:	2b00      	cmp	r3, #0
 800708a:	d03f      	beq.n	800710c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007094:	2300      	movs	r3, #0
 8007096:	73fb      	strb	r3, [r7, #15]
 8007098:	e016      	b.n	80070c8 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800709a:	7bfa      	ldrb	r2, [r7, #15]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	32de      	adds	r2, #222	; 0xde
 80070a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a4:	791a      	ldrb	r2, [r3, #4]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d108      	bne.n	80070c2 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80070b0:	7bfa      	ldrb	r2, [r7, #15]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	32de      	adds	r2, #222	; 0xde
 80070b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80070c0:	e005      	b.n	80070ce <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
 80070c4:	3301      	adds	r3, #1
 80070c6:	73fb      	strb	r3, [r7, #15]
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0e5      	beq.n	800709a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d016      	beq.n	8007106 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	4798      	blx	r3
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d109      	bne.n	80070fe <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2206      	movs	r2, #6
 80070ee:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070f6:	2103      	movs	r1, #3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	4798      	blx	r3
 80070fc:	e006      	b.n	800710c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	220d      	movs	r2, #13
 8007102:	701a      	strb	r2, [r3, #0]
 8007104:	e002      	b.n	800710c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	220d      	movs	r2, #13
 800710a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2205      	movs	r2, #5
 8007110:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007120:	2200      	movs	r2, #0
 8007122:	4619      	mov	r1, r3
 8007124:	f001 fb20 	bl	8008768 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007128:	e084      	b.n	8007234 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007130:	2b00      	cmp	r3, #0
 8007132:	d017      	beq.n	8007164 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4798      	blx	r3
 8007140:	4603      	mov	r3, r0
 8007142:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d103      	bne.n	8007154 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	220b      	movs	r2, #11
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	e00a      	b.n	800716a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8007154:	7bbb      	ldrb	r3, [r7, #14]
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d106      	bne.n	800716a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	220d      	movs	r2, #13
 8007160:	701a      	strb	r2, [r3, #0]
 8007162:	e002      	b.n	800716a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	220d      	movs	r2, #13
 8007168:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2205      	movs	r2, #5
 800716e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800717e:	2200      	movs	r2, #0
 8007180:	4619      	mov	r1, r3
 8007182:	f001 faf1 	bl	8008768 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007186:	e055      	b.n	8007234 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d04f      	beq.n	8007232 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	4798      	blx	r3
      }
      break;
 800719e:	e048      	b.n	8007232 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7ff fcf7 	bl	8006b9c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d009      	beq.n	80071cc <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071dc:	2105      	movs	r1, #5
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d107      	bne.n	80071fe <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7ff fdb0 	bl	8006d5c <USBH_Start>
 80071fc:	e002      	b.n	8007204 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f003 fd96 	bl	800ad30 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007218:	2200      	movs	r2, #0
 800721a:	4619      	mov	r1, r3
 800721c:	f001 faa4 	bl	8008768 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007220:	e008      	b.n	8007234 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8007222:	bf00      	nop
 8007224:	e006      	b.n	8007234 <USBH_Process+0x4b8>
      break;
 8007226:	bf00      	nop
 8007228:	e004      	b.n	8007234 <USBH_Process+0x4b8>
      break;
 800722a:	bf00      	nop
 800722c:	e002      	b.n	8007234 <USBH_Process+0x4b8>
    break;
 800722e:	bf00      	nop
 8007230:	e000      	b.n	8007234 <USBH_Process+0x4b8>
      break;
 8007232:	bf00      	nop
  }
  return USBH_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop

08007240 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af04      	add	r7, sp, #16
 8007246:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007248:	2301      	movs	r3, #1
 800724a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800724c:	2301      	movs	r3, #1
 800724e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	785b      	ldrb	r3, [r3, #1]
 8007254:	2b07      	cmp	r3, #7
 8007256:	f200 8208 	bhi.w	800766a <USBH_HandleEnum+0x42a>
 800725a:	a201      	add	r2, pc, #4	; (adr r2, 8007260 <USBH_HandleEnum+0x20>)
 800725c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007260:	08007281 	.word	0x08007281
 8007264:	0800733f 	.word	0x0800733f
 8007268:	080073a9 	.word	0x080073a9
 800726c:	08007437 	.word	0x08007437
 8007270:	080074a1 	.word	0x080074a1
 8007274:	08007511 	.word	0x08007511
 8007278:	080075ad 	.word	0x080075ad
 800727c:	0800762b 	.word	0x0800762b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007280:	2108      	movs	r1, #8
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 faea 	bl	800785c <USBH_Get_DevDesc>
 8007288:	4603      	mov	r3, r0
 800728a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d130      	bne.n	80072f4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	7919      	ldrb	r1, [r3, #4]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80072b6:	b292      	uxth	r2, r2
 80072b8:	9202      	str	r2, [sp, #8]
 80072ba:	2200      	movs	r2, #0
 80072bc:	9201      	str	r2, [sp, #4]
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	4603      	mov	r3, r0
 80072c2:	2280      	movs	r2, #128	; 0x80
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 f903 	bl	80084d0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	7959      	ldrb	r1, [r3, #5]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072de:	b292      	uxth	r2, r2
 80072e0:	9202      	str	r2, [sp, #8]
 80072e2:	2200      	movs	r2, #0
 80072e4:	9201      	str	r2, [sp, #4]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	4603      	mov	r3, r0
 80072ea:	2200      	movs	r2, #0
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f001 f8ef 	bl	80084d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80072f2:	e1bc      	b.n	800766e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	f040 81b9 	bne.w	800766e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007302:	3301      	adds	r3, #1
 8007304:	b2da      	uxtb	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007312:	2b03      	cmp	r3, #3
 8007314:	d903      	bls.n	800731e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	220d      	movs	r2, #13
 800731a:	701a      	strb	r2, [r3, #0]
      break;
 800731c:	e1a7      	b.n	800766e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	795b      	ldrb	r3, [r3, #5]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 f923 	bl	8008570 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	791b      	ldrb	r3, [r3, #4]
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f001 f91d 	bl	8008570 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	701a      	strb	r2, [r3, #0]
      break;
 800733c:	e197      	b.n	800766e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800733e:	2112      	movs	r1, #18
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fa8b 	bl	800785c <USBH_Get_DevDesc>
 8007346:	4603      	mov	r3, r0
 8007348:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800734a:	7bbb      	ldrb	r3, [r7, #14]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d103      	bne.n	8007358 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007356:	e18c      	b.n	8007672 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	2b03      	cmp	r3, #3
 800735c:	f040 8189 	bne.w	8007672 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007366:	3301      	adds	r3, #1
 8007368:	b2da      	uxtb	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007376:	2b03      	cmp	r3, #3
 8007378:	d903      	bls.n	8007382 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	220d      	movs	r2, #13
 800737e:	701a      	strb	r2, [r3, #0]
      break;
 8007380:	e177      	b.n	8007672 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	795b      	ldrb	r3, [r3, #5]
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f001 f8f1 	bl	8008570 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	791b      	ldrb	r3, [r3, #4]
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f001 f8eb 	bl	8008570 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	701a      	strb	r2, [r3, #0]
      break;
 80073a6:	e164      	b.n	8007672 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80073a8:	2101      	movs	r1, #1
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fb02 	bl	80079b4 <USBH_SetAddress>
 80073b0:	4603      	mov	r3, r0
 80073b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d132      	bne.n	8007420 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80073ba:	2002      	movs	r0, #2
 80073bc:	f003 fe1d 	bl	800affa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2203      	movs	r2, #3
 80073cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	7919      	ldrb	r1, [r3, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80073e2:	b292      	uxth	r2, r2
 80073e4:	9202      	str	r2, [sp, #8]
 80073e6:	2200      	movs	r2, #0
 80073e8:	9201      	str	r2, [sp, #4]
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	4603      	mov	r3, r0
 80073ee:	2280      	movs	r2, #128	; 0x80
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 f86d 	bl	80084d0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	7959      	ldrb	r1, [r3, #5]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800740a:	b292      	uxth	r2, r2
 800740c:	9202      	str	r2, [sp, #8]
 800740e:	2200      	movs	r2, #0
 8007410:	9201      	str	r2, [sp, #4]
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	4603      	mov	r3, r0
 8007416:	2200      	movs	r2, #0
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 f859 	bl	80084d0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800741e:	e12a      	b.n	8007676 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	2b03      	cmp	r3, #3
 8007424:	f040 8127 	bne.w	8007676 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	220d      	movs	r2, #13
 800742c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	705a      	strb	r2, [r3, #1]
      break;
 8007434:	e11f      	b.n	8007676 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007436:	2109      	movs	r1, #9
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fa37 	bl	80078ac <USBH_Get_CfgDesc>
 800743e:	4603      	mov	r3, r0
 8007440:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d103      	bne.n	8007450 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2204      	movs	r2, #4
 800744c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800744e:	e114      	b.n	800767a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	2b03      	cmp	r3, #3
 8007454:	f040 8111 	bne.w	800767a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800745e:	3301      	adds	r3, #1
 8007460:	b2da      	uxtb	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800746e:	2b03      	cmp	r3, #3
 8007470:	d903      	bls.n	800747a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	220d      	movs	r2, #13
 8007476:	701a      	strb	r2, [r3, #0]
      break;
 8007478:	e0ff      	b.n	800767a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	795b      	ldrb	r3, [r3, #5]
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f001 f875 	bl	8008570 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	791b      	ldrb	r3, [r3, #4]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 f86f 	bl	8008570 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	701a      	strb	r2, [r3, #0]
      break;
 800749e:	e0ec      	b.n	800767a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f9ff 	bl	80078ac <USBH_Get_CfgDesc>
 80074ae:	4603      	mov	r3, r0
 80074b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074b2:	7bbb      	ldrb	r3, [r7, #14]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d103      	bne.n	80074c0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2205      	movs	r2, #5
 80074bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80074be:	e0de      	b.n	800767e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	f040 80db 	bne.w	800767e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074ce:	3301      	adds	r3, #1
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d903      	bls.n	80074ea <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	220d      	movs	r2, #13
 80074e6:	701a      	strb	r2, [r3, #0]
      break;
 80074e8:	e0c9      	b.n	800767e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	795b      	ldrb	r3, [r3, #5]
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f001 f83d 	bl	8008570 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	791b      	ldrb	r3, [r3, #4]
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 f837 	bl	8008570 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	701a      	strb	r2, [r3, #0]
      break;
 800750e:	e0b6      	b.n	800767e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007516:	2b00      	cmp	r3, #0
 8007518:	d036      	beq.n	8007588 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007526:	23ff      	movs	r3, #255	; 0xff
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f9e3 	bl	80078f4 <USBH_Get_StringDesc>
 800752e:	4603      	mov	r3, r0
 8007530:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d111      	bne.n	800755c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2206      	movs	r2, #6
 800753c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2205      	movs	r2, #5
 8007542:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007552:	2200      	movs	r2, #0
 8007554:	4619      	mov	r1, r3
 8007556:	f001 f907 	bl	8008768 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800755a:	e092      	b.n	8007682 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800755c:	7bbb      	ldrb	r3, [r7, #14]
 800755e:	2b03      	cmp	r3, #3
 8007560:	f040 808f 	bne.w	8007682 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2206      	movs	r2, #6
 8007568:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2205      	movs	r2, #5
 800756e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800757e:	2200      	movs	r2, #0
 8007580:	4619      	mov	r1, r3
 8007582:	f001 f8f1 	bl	8008768 <osMessagePut>
      break;
 8007586:	e07c      	b.n	8007682 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2206      	movs	r2, #6
 800758c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2205      	movs	r2, #5
 8007592:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80075a2:	2200      	movs	r2, #0
 80075a4:	4619      	mov	r1, r3
 80075a6:	f001 f8df 	bl	8008768 <osMessagePut>
      break;
 80075aa:	e06a      	b.n	8007682 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d027      	beq.n	8007606 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80075c2:	23ff      	movs	r3, #255	; 0xff
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f995 	bl	80078f4 <USBH_Get_StringDesc>
 80075ca:	4603      	mov	r3, r0
 80075cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80075ce:	7bbb      	ldrb	r3, [r7, #14]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d103      	bne.n	80075dc <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2207      	movs	r2, #7
 80075d8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80075da:	e054      	b.n	8007686 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075dc:	7bbb      	ldrb	r3, [r7, #14]
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d151      	bne.n	8007686 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2207      	movs	r2, #7
 80075e6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2205      	movs	r2, #5
 80075ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80075fc:	2200      	movs	r2, #0
 80075fe:	4619      	mov	r1, r3
 8007600:	f001 f8b2 	bl	8008768 <osMessagePut>
      break;
 8007604:	e03f      	b.n	8007686 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2207      	movs	r2, #7
 800760a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2205      	movs	r2, #5
 8007610:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007620:	2200      	movs	r2, #0
 8007622:	4619      	mov	r1, r3
 8007624:	f001 f8a0 	bl	8008768 <osMessagePut>
      break;
 8007628:	e02d      	b.n	8007686 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007630:	2b00      	cmp	r3, #0
 8007632:	d017      	beq.n	8007664 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007640:	23ff      	movs	r3, #255	; 0xff
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f956 	bl	80078f4 <USBH_Get_StringDesc>
 8007648:	4603      	mov	r3, r0
 800764a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800764c:	7bbb      	ldrb	r3, [r7, #14]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d102      	bne.n	8007658 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007656:	e018      	b.n	800768a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	2b03      	cmp	r3, #3
 800765c:	d115      	bne.n	800768a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]
      break;
 8007662:	e012      	b.n	800768a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	73fb      	strb	r3, [r7, #15]
      break;
 8007668:	e00f      	b.n	800768a <USBH_HandleEnum+0x44a>

    default:
      break;
 800766a:	bf00      	nop
 800766c:	e00e      	b.n	800768c <USBH_HandleEnum+0x44c>
      break;
 800766e:	bf00      	nop
 8007670:	e00c      	b.n	800768c <USBH_HandleEnum+0x44c>
      break;
 8007672:	bf00      	nop
 8007674:	e00a      	b.n	800768c <USBH_HandleEnum+0x44c>
      break;
 8007676:	bf00      	nop
 8007678:	e008      	b.n	800768c <USBH_HandleEnum+0x44c>
      break;
 800767a:	bf00      	nop
 800767c:	e006      	b.n	800768c <USBH_HandleEnum+0x44c>
      break;
 800767e:	bf00      	nop
 8007680:	e004      	b.n	800768c <USBH_HandleEnum+0x44c>
      break;
 8007682:	bf00      	nop
 8007684:	e002      	b.n	800768c <USBH_HandleEnum+0x44c>
      break;
 8007686:	bf00      	nop
 8007688:	e000      	b.n	800768c <USBH_HandleEnum+0x44c>
      break;
 800768a:	bf00      	nop
  }
  return Status;
 800768c:	7bfb      	ldrb	r3, [r7, #15]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop

08007698 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b082      	sub	sp, #8
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f804 	bl	80076da <USBH_HandleSof>
}
 80076d2:	bf00      	nop
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b082      	sub	sp, #8
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b0b      	cmp	r3, #11
 80076ea:	d10a      	bne.n	8007702 <USBH_HandleSof+0x28>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d005      	beq.n	8007702 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	4798      	blx	r3
  }
}
 8007702:	bf00      	nop
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800772e:	2200      	movs	r2, #0
 8007730:	4619      	mov	r1, r3
 8007732:	f001 f819 	bl	8008768 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007736:	bf00      	nop
}
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800774e:	bf00      	nop
}
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800778e:	2200      	movs	r2, #0
 8007790:	4619      	mov	r1, r3
 8007792:	f000 ffe9 	bl	8008768 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f003 fad0 	bl	800ad66 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	791b      	ldrb	r3, [r3, #4]
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fecf 	bl	8008570 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	795b      	ldrb	r3, [r3, #5]
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fec9 	bl	8008570 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80077f2:	2200      	movs	r2, #0
 80077f4:	4619      	mov	r1, r3
 80077f6:	f000 ffb7 	bl	8008768 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 8007812:	f107 030c 	add.w	r3, r7, #12
 8007816:	f04f 32ff 	mov.w	r2, #4294967295
 800781a:	4618      	mov	r0, r3
 800781c:	f000 ffe4 	bl	80087e8 <osMessageGet>
    if (event.status == osEventMessage)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2b10      	cmp	r3, #16
 8007824:	d1f2      	bne.n	800780c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff faa8 	bl	8006d7c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800782c:	e7ee      	b.n	800780c <USBH_Process_OS+0x8>

0800782e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800784a:	2200      	movs	r2, #0
 800784c:	4619      	mov	r1, r3
 800784e:	f000 ff8b 	bl	8008768 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af02      	add	r7, sp, #8
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	b29b      	uxth	r3, r3
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	4613      	mov	r3, r2
 8007876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800787a:	2100      	movs	r1, #0
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f864 	bl	800794a <USBH_GetDescriptor>
 8007882:	4603      	mov	r3, r0
 8007884:	73fb      	strb	r3, [r7, #15]
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007898:	78fa      	ldrb	r2, [r7, #3]
 800789a:	b292      	uxth	r2, r2
 800789c:	4619      	mov	r1, r3
 800789e:	f000 f918 	bl	8007ad2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af02      	add	r7, sp, #8
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	460b      	mov	r3, r1
 80078b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	331c      	adds	r3, #28
 80078bc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80078be:	887b      	ldrh	r3, [r7, #2]
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078c8:	2100      	movs	r1, #0
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f83d 	bl	800794a <USBH_GetDescriptor>
 80078d0:	4603      	mov	r3, r0
 80078d2:	72fb      	strb	r3, [r7, #11]
 80078d4:	7afb      	ldrb	r3, [r7, #11]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d107      	bne.n	80078ea <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80078e0:	887a      	ldrh	r2, [r7, #2]
 80078e2:	68f9      	ldr	r1, [r7, #12]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 f964 	bl	8007bb2 <USBH_ParseCfgDesc>
  }

  return status;
 80078ea:	7afb      	ldrb	r3, [r7, #11]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b088      	sub	sp, #32
 80078f8:	af02      	add	r7, sp, #8
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	607a      	str	r2, [r7, #4]
 80078fe:	461a      	mov	r2, r3
 8007900:	460b      	mov	r3, r1
 8007902:	72fb      	strb	r3, [r7, #11]
 8007904:	4613      	mov	r3, r2
 8007906:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007908:	7afb      	ldrb	r3, [r7, #11]
 800790a:	b29b      	uxth	r3, r3
 800790c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007910:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007918:	893b      	ldrh	r3, [r7, #8]
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	460b      	mov	r3, r1
 800791e:	2100      	movs	r1, #0
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 f812 	bl	800794a <USBH_GetDescriptor>
 8007926:	4603      	mov	r3, r0
 8007928:	75fb      	strb	r3, [r7, #23]
 800792a:	7dfb      	ldrb	r3, [r7, #23]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d107      	bne.n	8007940 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007936:	893a      	ldrh	r2, [r7, #8]
 8007938:	6879      	ldr	r1, [r7, #4]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fa37 	bl	8007dae <USBH_ParseStringDesc>
  }

  return status;
 8007940:	7dfb      	ldrb	r3, [r7, #23]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	607b      	str	r3, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	72fb      	strb	r3, [r7, #11]
 8007958:	4613      	mov	r3, r2
 800795a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	789b      	ldrb	r3, [r3, #2]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d11c      	bne.n	800799e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007964:	7afb      	ldrb	r3, [r7, #11]
 8007966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800796a:	b2da      	uxtb	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2206      	movs	r2, #6
 8007974:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	893a      	ldrh	r2, [r7, #8]
 800797a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800797c:	893b      	ldrh	r3, [r7, #8]
 800797e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007986:	d104      	bne.n	8007992 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f240 4209 	movw	r2, #1033	; 0x409
 800798e:	829a      	strh	r2, [r3, #20]
 8007990:	e002      	b.n	8007998 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8b3a      	ldrh	r2, [r7, #24]
 800799c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800799e:	8b3b      	ldrh	r3, [r7, #24]
 80079a0:	461a      	mov	r2, r3
 80079a2:	6879      	ldr	r1, [r7, #4]
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fa50 	bl	8007e4a <USBH_CtlReq>
 80079aa:	4603      	mov	r3, r0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	789b      	ldrb	r3, [r3, #2]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d10f      	bne.n	80079e8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2205      	movs	r2, #5
 80079d2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80079d4:	78fb      	ldrb	r3, [r7, #3]
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80079e8:	2200      	movs	r2, #0
 80079ea:	2100      	movs	r1, #0
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fa2c 	bl	8007e4a <USBH_CtlReq>
 80079f2:	4603      	mov	r3, r0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	460b      	mov	r3, r1
 8007a06:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	789b      	ldrb	r3, [r3, #2]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d10e      	bne.n	8007a2e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2209      	movs	r2, #9
 8007a1a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	887a      	ldrh	r2, [r7, #2]
 8007a20:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2100      	movs	r1, #0
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fa09 	bl	8007e4a <USBH_CtlReq>
 8007a38:	4603      	mov	r3, r0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	789b      	ldrb	r3, [r3, #2]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d10f      	bne.n	8007a76 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2203      	movs	r2, #3
 8007a60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007a62:	78fb      	ldrb	r3, [r7, #3]
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007a76:	2200      	movs	r2, #0
 8007a78:	2100      	movs	r1, #0
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f9e5 	bl	8007e4a <USBH_CtlReq>
 8007a80:	4603      	mov	r3, r0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	460b      	mov	r3, r1
 8007a94:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	789b      	ldrb	r3, [r3, #2]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d10f      	bne.n	8007abe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007abe:	2200      	movs	r2, #0
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f9c1 	bl	8007e4a <USBH_CtlReq>
 8007ac8:	4603      	mov	r3, r0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	4613      	mov	r3, r2
 8007ade:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	781a      	ldrb	r2, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	785a      	ldrb	r2, [r3, #1]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	3302      	adds	r3, #2
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	3303      	adds	r3, #3
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	021b      	lsls	r3, r3, #8
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	4313      	orrs	r3, r2
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	791a      	ldrb	r2, [r3, #4]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	795a      	ldrb	r2, [r3, #5]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	799a      	ldrb	r2, [r3, #6]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	79da      	ldrb	r2, [r3, #7]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
 8007b2e:	2b08      	cmp	r3, #8
 8007b30:	d939      	bls.n	8007ba6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	3308      	adds	r3, #8
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	3309      	adds	r3, #9
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	021b      	lsls	r3, r3, #8
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	4313      	orrs	r3, r2
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	330a      	adds	r3, #10
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	330b      	adds	r3, #11
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	021b      	lsls	r3, r3, #8
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	4313      	orrs	r3, r2
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	330c      	adds	r3, #12
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	330d      	adds	r3, #13
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	021b      	lsls	r3, r3, #8
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	7b9a      	ldrb	r2, [r3, #14]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	7bda      	ldrb	r2, [r3, #15]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	7c1a      	ldrb	r2, [r3, #16]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	7c5a      	ldrb	r2, [r3, #17]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	745a      	strb	r2, [r3, #17]
  }
}
 8007ba6:	bf00      	nop
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b08a      	sub	sp, #40	; 0x28
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	60f8      	str	r0, [r7, #12]
 8007bba:	60b9      	str	r1, [r7, #8]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	781a      	ldrb	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	785a      	ldrb	r2, [r3, #1]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	3302      	adds	r3, #2
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	3303      	adds	r3, #3
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	021b      	lsls	r3, r3, #8
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	791a      	ldrb	r2, [r3, #4]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	795a      	ldrb	r2, [r3, #5]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	799a      	ldrb	r2, [r3, #6]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	79da      	ldrb	r2, [r3, #7]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	7a1a      	ldrb	r2, [r3, #8]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007c28:	88fb      	ldrh	r3, [r7, #6]
 8007c2a:	2b09      	cmp	r3, #9
 8007c2c:	d95f      	bls.n	8007cee <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c2e:	2309      	movs	r3, #9
 8007c30:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c36:	e051      	b.n	8007cdc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c38:	f107 0316 	add.w	r3, r7, #22
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c40:	f000 f8e8 	bl	8007e14 <USBH_GetNextDesc>
 8007c44:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	785b      	ldrb	r3, [r3, #1]
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d146      	bne.n	8007cdc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c52:	221a      	movs	r2, #26
 8007c54:	fb02 f303 	mul.w	r3, r2, r3
 8007c58:	3308      	adds	r3, #8
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	3302      	adds	r3, #2
 8007c60:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007c62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c64:	69f8      	ldr	r0, [r7, #28]
 8007c66:	f000 f846 	bl	8007cf6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c74:	e022      	b.n	8007cbc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c76:	f107 0316 	add.w	r3, r7, #22
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c7e:	f000 f8c9 	bl	8007e14 <USBH_GetNextDesc>
 8007c82:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	785b      	ldrb	r3, [r3, #1]
 8007c88:	2b05      	cmp	r3, #5
 8007c8a:	d117      	bne.n	8007cbc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c90:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007c94:	3201      	adds	r2, #1
 8007c96:	00d2      	lsls	r2, r2, #3
 8007c98:	211a      	movs	r1, #26
 8007c9a:	fb01 f303 	mul.w	r3, r1, r3
 8007c9e:	4413      	add	r3, r2
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007caa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cac:	69b8      	ldr	r0, [r7, #24]
 8007cae:	f000 f851 	bl	8007d54 <USBH_ParseEPDesc>
            ep_ix++;
 8007cb2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	791b      	ldrb	r3, [r3, #4]
 8007cc0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d204      	bcs.n	8007cd2 <USBH_ParseCfgDesc+0x120>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	885a      	ldrh	r2, [r3, #2]
 8007ccc:	8afb      	ldrh	r3, [r7, #22]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d8d1      	bhi.n	8007c76 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007cd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d804      	bhi.n	8007cee <USBH_ParseCfgDesc+0x13c>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	885a      	ldrh	r2, [r3, #2]
 8007ce8:	8afb      	ldrh	r3, [r7, #22]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d8a4      	bhi.n	8007c38 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007cee:	bf00      	nop
 8007cf0:	3728      	adds	r7, #40	; 0x28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b083      	sub	sp, #12
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781a      	ldrb	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	785a      	ldrb	r2, [r3, #1]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	789a      	ldrb	r2, [r3, #2]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	78da      	ldrb	r2, [r3, #3]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	791a      	ldrb	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	795a      	ldrb	r2, [r3, #5]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	799a      	ldrb	r2, [r3, #6]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	79da      	ldrb	r2, [r3, #7]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	7a1a      	ldrb	r2, [r3, #8]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	721a      	strb	r2, [r3, #8]
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781a      	ldrb	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	785a      	ldrb	r2, [r3, #1]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	789a      	ldrb	r2, [r3, #2]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	78da      	ldrb	r2, [r3, #3]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	3304      	adds	r3, #4
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	3305      	adds	r3, #5
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	021b      	lsls	r3, r3, #8
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	4313      	orrs	r3, r2
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	799a      	ldrb	r2, [r3, #6]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	719a      	strb	r2, [r3, #6]
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b087      	sub	sp, #28
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	4613      	mov	r3, r2
 8007dba:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d120      	bne.n	8007e08 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	1e9a      	subs	r2, r3, #2
 8007dcc:	88fb      	ldrh	r3, [r7, #6]
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	bf28      	it	cs
 8007dd2:	4613      	movcs	r3, r2
 8007dd4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3302      	adds	r3, #2
 8007dda:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007ddc:	2300      	movs	r3, #0
 8007dde:	82fb      	strh	r3, [r7, #22]
 8007de0:	e00b      	b.n	8007dfa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007de2:	8afb      	ldrh	r3, [r7, #22]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4413      	add	r3, r2
 8007de8:	781a      	ldrb	r2, [r3, #0]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	3301      	adds	r3, #1
 8007df2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007df4:	8afb      	ldrh	r3, [r7, #22]
 8007df6:	3302      	adds	r3, #2
 8007df8:	82fb      	strh	r3, [r7, #22]
 8007dfa:	8afa      	ldrh	r2, [r7, #22]
 8007dfc:	8abb      	ldrh	r3, [r7, #20]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d3ef      	bcc.n	8007de2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2200      	movs	r2, #0
 8007e06:	701a      	strb	r2, [r3, #0]
  }
}
 8007e08:	bf00      	nop
 8007e0a:	371c      	adds	r7, #28
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	881a      	ldrh	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	4413      	add	r3, r2
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4413      	add	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b086      	sub	sp, #24
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	60b9      	str	r1, [r7, #8]
 8007e54:	4613      	mov	r3, r2
 8007e56:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	789b      	ldrb	r3, [r3, #2]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d002      	beq.n	8007e6a <USBH_CtlReq+0x20>
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d01d      	beq.n	8007ea4 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8007e68:	e043      	b.n	8007ef2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	88fa      	ldrh	r2, [r7, #6]
 8007e74:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007e82:	2301      	movs	r3, #1
 8007e84:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2203      	movs	r2, #3
 8007e8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	f000 fc63 	bl	8008768 <osMessagePut>
      break;
 8007ea2:	e026      	b.n	8007ef2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 f829 	bl	8007efc <USBH_HandleControl>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007eae:	7dfb      	ldrb	r3, [r7, #23]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <USBH_CtlReq+0x70>
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d106      	bne.n	8007ec8 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	761a      	strb	r2, [r3, #24]
 8007ec6:	e005      	b.n	8007ed4 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8007ec8:	7dfb      	ldrb	r3, [r7, #23]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d102      	bne.n	8007ed4 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2203      	movs	r2, #3
 8007ed8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ee8:	2200      	movs	r2, #0
 8007eea:	4619      	mov	r1, r3
 8007eec:	f000 fc3c 	bl	8008768 <osMessagePut>
      break;
 8007ef0:	bf00      	nop
  }
  return status;
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3718      	adds	r7, #24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af02      	add	r7, sp, #8
 8007f02:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f04:	2301      	movs	r3, #1
 8007f06:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	7e1b      	ldrb	r3, [r3, #24]
 8007f10:	3b01      	subs	r3, #1
 8007f12:	2b0a      	cmp	r3, #10
 8007f14:	f200 822b 	bhi.w	800836e <USBH_HandleControl+0x472>
 8007f18:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <USBH_HandleControl+0x24>)
 8007f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1e:	bf00      	nop
 8007f20:	08007f4d 	.word	0x08007f4d
 8007f24:	08007f67 	.word	0x08007f67
 8007f28:	08008009 	.word	0x08008009
 8007f2c:	0800802f 	.word	0x0800802f
 8007f30:	080080bb 	.word	0x080080bb
 8007f34:	080080e7 	.word	0x080080e7
 8007f38:	080081a9 	.word	0x080081a9
 8007f3c:	080081cb 	.word	0x080081cb
 8007f40:	0800825d 	.word	0x0800825d
 8007f44:	08008285 	.word	0x08008285
 8007f48:	08008317 	.word	0x08008317
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f103 0110 	add.w	r1, r3, #16
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	795b      	ldrb	r3, [r3, #5]
 8007f56:	461a      	mov	r2, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fa19 	bl	8008390 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2202      	movs	r2, #2
 8007f62:	761a      	strb	r2, [r3, #24]
      break;
 8007f64:	e20e      	b.n	8008384 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	795b      	ldrb	r3, [r3, #5]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f002 ffe7 	bl	800af40 <USBH_LL_GetURBState>
 8007f72:	4603      	mov	r3, r0
 8007f74:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f76:	7bbb      	ldrb	r3, [r7, #14]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d12c      	bne.n	8007fd6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	7c1b      	ldrb	r3, [r3, #16]
 8007f80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f84:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	8adb      	ldrh	r3, [r3, #22]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00a      	beq.n	8007fa4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007f8e:	7b7b      	ldrb	r3, [r7, #13]
 8007f90:	2b80      	cmp	r3, #128	; 0x80
 8007f92:	d103      	bne.n	8007f9c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2203      	movs	r2, #3
 8007f98:	761a      	strb	r2, [r3, #24]
 8007f9a:	e00d      	b.n	8007fb8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2205      	movs	r2, #5
 8007fa0:	761a      	strb	r2, [r3, #24]
 8007fa2:	e009      	b.n	8007fb8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007fa4:	7b7b      	ldrb	r3, [r7, #13]
 8007fa6:	2b80      	cmp	r3, #128	; 0x80
 8007fa8:	d103      	bne.n	8007fb2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2209      	movs	r2, #9
 8007fae:	761a      	strb	r2, [r3, #24]
 8007fb0:	e002      	b.n	8007fb8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2207      	movs	r2, #7
 8007fb6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2203      	movs	r2, #3
 8007fbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007fcc:	2200      	movs	r2, #0
 8007fce:	4619      	mov	r1, r3
 8007fd0:	f000 fbca 	bl	8008768 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007fd4:	e1cd      	b.n	8008372 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	d003      	beq.n	8007fe4 <USBH_HandleControl+0xe8>
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	f040 81c7 	bne.w	8008372 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	220b      	movs	r2, #11
 8007fe8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2203      	movs	r2, #3
 8007fee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ffe:	2200      	movs	r2, #0
 8008000:	4619      	mov	r1, r3
 8008002:	f000 fbb1 	bl	8008768 <osMessagePut>
      break;
 8008006:	e1b4      	b.n	8008372 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800800e:	b29a      	uxth	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6899      	ldr	r1, [r3, #8]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	899a      	ldrh	r2, [r3, #12]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	791b      	ldrb	r3, [r3, #4]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f9f4 	bl	800840e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2204      	movs	r2, #4
 800802a:	761a      	strb	r2, [r3, #24]
      break;
 800802c:	e1aa      	b.n	8008384 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	791b      	ldrb	r3, [r3, #4]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f002 ff83 	bl	800af40 <USBH_LL_GetURBState>
 800803a:	4603      	mov	r3, r0
 800803c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800803e:	7bbb      	ldrb	r3, [r7, #14]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d110      	bne.n	8008066 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2209      	movs	r2, #9
 8008048:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2203      	movs	r2, #3
 800804e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800805e:	2200      	movs	r2, #0
 8008060:	4619      	mov	r1, r3
 8008062:	f000 fb81 	bl	8008768 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008066:	7bbb      	ldrb	r3, [r7, #14]
 8008068:	2b05      	cmp	r3, #5
 800806a:	d110      	bne.n	800808e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800806c:	2303      	movs	r3, #3
 800806e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2203      	movs	r2, #3
 8008074:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008084:	2200      	movs	r2, #0
 8008086:	4619      	mov	r1, r3
 8008088:	f000 fb6e 	bl	8008768 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800808c:	e173      	b.n	8008376 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800808e:	7bbb      	ldrb	r3, [r7, #14]
 8008090:	2b04      	cmp	r3, #4
 8008092:	f040 8170 	bne.w	8008376 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	220b      	movs	r2, #11
 800809a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2203      	movs	r2, #3
 80080a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80080b0:	2200      	movs	r2, #0
 80080b2:	4619      	mov	r1, r3
 80080b4:	f000 fb58 	bl	8008768 <osMessagePut>
      break;
 80080b8:	e15d      	b.n	8008376 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6899      	ldr	r1, [r3, #8]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	899a      	ldrh	r2, [r3, #12]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	7958      	ldrb	r0, [r3, #5]
 80080c6:	2301      	movs	r3, #1
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	4603      	mov	r3, r0
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f979 	bl	80083c4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080d8:	b29a      	uxth	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2206      	movs	r2, #6
 80080e2:	761a      	strb	r2, [r3, #24]
      break;
 80080e4:	e14e      	b.n	8008384 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	795b      	ldrb	r3, [r3, #5]
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f002 ff27 	bl	800af40 <USBH_LL_GetURBState>
 80080f2:	4603      	mov	r3, r0
 80080f4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d111      	bne.n	8008120 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2207      	movs	r2, #7
 8008100:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2203      	movs	r2, #3
 8008106:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008116:	2200      	movs	r2, #0
 8008118:	4619      	mov	r1, r3
 800811a:	f000 fb25 	bl	8008768 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800811e:	e12c      	b.n	800837a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	2b05      	cmp	r3, #5
 8008124:	d113      	bne.n	800814e <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	220c      	movs	r2, #12
 800812a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800812c:	2303      	movs	r3, #3
 800812e:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2203      	movs	r2, #3
 8008134:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008144:	2200      	movs	r2, #0
 8008146:	4619      	mov	r1, r3
 8008148:	f000 fb0e 	bl	8008768 <osMessagePut>
      break;
 800814c:	e115      	b.n	800837a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	2b02      	cmp	r3, #2
 8008152:	d111      	bne.n	8008178 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2205      	movs	r2, #5
 8008158:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2203      	movs	r2, #3
 800815e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800816e:	2200      	movs	r2, #0
 8008170:	4619      	mov	r1, r3
 8008172:	f000 faf9 	bl	8008768 <osMessagePut>
      break;
 8008176:	e100      	b.n	800837a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	2b04      	cmp	r3, #4
 800817c:	f040 80fd 	bne.w	800837a <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	220b      	movs	r2, #11
 8008184:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008186:	2302      	movs	r3, #2
 8008188:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2203      	movs	r2, #3
 800818e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800819e:	2200      	movs	r2, #0
 80081a0:	4619      	mov	r1, r3
 80081a2:	f000 fae1 	bl	8008768 <osMessagePut>
      break;
 80081a6:	e0e8      	b.n	800837a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	791b      	ldrb	r3, [r3, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	2100      	movs	r1, #0
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f92c 	bl	800840e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081bc:	b29a      	uxth	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2208      	movs	r2, #8
 80081c6:	761a      	strb	r2, [r3, #24]

      break;
 80081c8:	e0dc      	b.n	8008384 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	791b      	ldrb	r3, [r3, #4]
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f002 feb5 	bl	800af40 <USBH_LL_GetURBState>
 80081d6:	4603      	mov	r3, r0
 80081d8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d113      	bne.n	8008208 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	220d      	movs	r2, #13
 80081e4:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2203      	movs	r2, #3
 80081ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80081fe:	2200      	movs	r2, #0
 8008200:	4619      	mov	r1, r3
 8008202:	f000 fab1 	bl	8008768 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008206:	e0ba      	b.n	800837e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8008208:	7bbb      	ldrb	r3, [r7, #14]
 800820a:	2b04      	cmp	r3, #4
 800820c:	d111      	bne.n	8008232 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	220b      	movs	r2, #11
 8008212:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2203      	movs	r2, #3
 8008218:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008228:	2200      	movs	r2, #0
 800822a:	4619      	mov	r1, r3
 800822c:	f000 fa9c 	bl	8008768 <osMessagePut>
      break;
 8008230:	e0a5      	b.n	800837e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 8008232:	7bbb      	ldrb	r3, [r7, #14]
 8008234:	2b05      	cmp	r3, #5
 8008236:	f040 80a2 	bne.w	800837e <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800823a:	2303      	movs	r3, #3
 800823c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2203      	movs	r2, #3
 8008242:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008252:	2200      	movs	r2, #0
 8008254:	4619      	mov	r1, r3
 8008256:	f000 fa87 	bl	8008768 <osMessagePut>
      break;
 800825a:	e090      	b.n	800837e <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	795a      	ldrb	r2, [r3, #5]
 8008260:	2301      	movs	r3, #1
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	4613      	mov	r3, r2
 8008266:	2200      	movs	r2, #0
 8008268:	2100      	movs	r1, #0
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f8aa 	bl	80083c4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008276:	b29a      	uxth	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	220a      	movs	r2, #10
 8008280:	761a      	strb	r2, [r3, #24]
      break;
 8008282:	e07f      	b.n	8008384 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	795b      	ldrb	r3, [r3, #5]
 8008288:	4619      	mov	r1, r3
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f002 fe58 	bl	800af40 <USBH_LL_GetURBState>
 8008290:	4603      	mov	r3, r0
 8008292:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d113      	bne.n	80082c2 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	220d      	movs	r2, #13
 80082a2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2203      	movs	r2, #3
 80082a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082b8:	2200      	movs	r2, #0
 80082ba:	4619      	mov	r1, r3
 80082bc:	f000 fa54 	bl	8008768 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80082c0:	e05f      	b.n	8008382 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d111      	bne.n	80082ec <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2209      	movs	r2, #9
 80082cc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2203      	movs	r2, #3
 80082d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082e2:	2200      	movs	r2, #0
 80082e4:	4619      	mov	r1, r3
 80082e6:	f000 fa3f 	bl	8008768 <osMessagePut>
      break;
 80082ea:	e04a      	b.n	8008382 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d147      	bne.n	8008382 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	220b      	movs	r2, #11
 80082f6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2203      	movs	r2, #3
 80082fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800830c:	2200      	movs	r2, #0
 800830e:	4619      	mov	r1, r3
 8008310:	f000 fa2a 	bl	8008768 <osMessagePut>
      break;
 8008314:	e035      	b.n	8008382 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	7e5b      	ldrb	r3, [r3, #25]
 800831a:	3301      	adds	r3, #1
 800831c:	b2da      	uxtb	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	765a      	strb	r2, [r3, #25]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	7e5b      	ldrb	r3, [r3, #25]
 8008326:	2b02      	cmp	r3, #2
 8008328:	d806      	bhi.n	8008338 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008336:	e025      	b.n	8008384 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800833e:	2106      	movs	r1, #6
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	795b      	ldrb	r3, [r3, #5]
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f90d 	bl	8008570 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	791b      	ldrb	r3, [r3, #4]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f907 	bl	8008570 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008368:	2302      	movs	r3, #2
 800836a:	73fb      	strb	r3, [r7, #15]
      break;
 800836c:	e00a      	b.n	8008384 <USBH_HandleControl+0x488>

    default:
      break;
 800836e:	bf00      	nop
 8008370:	e008      	b.n	8008384 <USBH_HandleControl+0x488>
      break;
 8008372:	bf00      	nop
 8008374:	e006      	b.n	8008384 <USBH_HandleControl+0x488>
      break;
 8008376:	bf00      	nop
 8008378:	e004      	b.n	8008384 <USBH_HandleControl+0x488>
      break;
 800837a:	bf00      	nop
 800837c:	e002      	b.n	8008384 <USBH_HandleControl+0x488>
      break;
 800837e:	bf00      	nop
 8008380:	e000      	b.n	8008384 <USBH_HandleControl+0x488>
      break;
 8008382:	bf00      	nop
  }

  return status;
 8008384:	7bfb      	ldrb	r3, [r7, #15]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop

08008390 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af04      	add	r7, sp, #16
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	4613      	mov	r3, r2
 800839c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800839e:	79f9      	ldrb	r1, [r7, #7]
 80083a0:	2300      	movs	r3, #0
 80083a2:	9303      	str	r3, [sp, #12]
 80083a4:	2308      	movs	r3, #8
 80083a6:	9302      	str	r3, [sp, #8]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	9301      	str	r3, [sp, #4]
 80083ac:	2300      	movs	r3, #0
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	2300      	movs	r3, #0
 80083b2:	2200      	movs	r2, #0
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f002 fd92 	bl	800aede <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b088      	sub	sp, #32
 80083c8:	af04      	add	r7, sp, #16
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	4611      	mov	r1, r2
 80083d0:	461a      	mov	r2, r3
 80083d2:	460b      	mov	r3, r1
 80083d4:	80fb      	strh	r3, [r7, #6]
 80083d6:	4613      	mov	r3, r2
 80083d8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80083e8:	7979      	ldrb	r1, [r7, #5]
 80083ea:	7e3b      	ldrb	r3, [r7, #24]
 80083ec:	9303      	str	r3, [sp, #12]
 80083ee:	88fb      	ldrh	r3, [r7, #6]
 80083f0:	9302      	str	r3, [sp, #8]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	2301      	movs	r3, #1
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	2300      	movs	r3, #0
 80083fc:	2200      	movs	r2, #0
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f002 fd6d 	bl	800aede <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b088      	sub	sp, #32
 8008412:	af04      	add	r7, sp, #16
 8008414:	60f8      	str	r0, [r7, #12]
 8008416:	60b9      	str	r1, [r7, #8]
 8008418:	4611      	mov	r1, r2
 800841a:	461a      	mov	r2, r3
 800841c:	460b      	mov	r3, r1
 800841e:	80fb      	strh	r3, [r7, #6]
 8008420:	4613      	mov	r3, r2
 8008422:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008424:	7979      	ldrb	r1, [r7, #5]
 8008426:	2300      	movs	r3, #0
 8008428:	9303      	str	r3, [sp, #12]
 800842a:	88fb      	ldrh	r3, [r7, #6]
 800842c:	9302      	str	r3, [sp, #8]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	2301      	movs	r3, #1
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	2300      	movs	r3, #0
 8008438:	2201      	movs	r2, #1
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f002 fd4f 	bl	800aede <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008440:	2300      	movs	r3, #0

}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b088      	sub	sp, #32
 800844e:	af04      	add	r7, sp, #16
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	60b9      	str	r1, [r7, #8]
 8008454:	4611      	mov	r1, r2
 8008456:	461a      	mov	r2, r3
 8008458:	460b      	mov	r3, r1
 800845a:	80fb      	strh	r3, [r7, #6]
 800845c:	4613      	mov	r3, r2
 800845e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800846e:	7979      	ldrb	r1, [r7, #5]
 8008470:	7e3b      	ldrb	r3, [r7, #24]
 8008472:	9303      	str	r3, [sp, #12]
 8008474:	88fb      	ldrh	r3, [r7, #6]
 8008476:	9302      	str	r3, [sp, #8]
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	2301      	movs	r3, #1
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	2302      	movs	r3, #2
 8008482:	2200      	movs	r2, #0
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f002 fd2a 	bl	800aede <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b088      	sub	sp, #32
 8008498:	af04      	add	r7, sp, #16
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	4611      	mov	r1, r2
 80084a0:	461a      	mov	r2, r3
 80084a2:	460b      	mov	r3, r1
 80084a4:	80fb      	strh	r3, [r7, #6]
 80084a6:	4613      	mov	r3, r2
 80084a8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80084aa:	7979      	ldrb	r1, [r7, #5]
 80084ac:	2300      	movs	r3, #0
 80084ae:	9303      	str	r3, [sp, #12]
 80084b0:	88fb      	ldrh	r3, [r7, #6]
 80084b2:	9302      	str	r3, [sp, #8]
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	2301      	movs	r3, #1
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	2302      	movs	r3, #2
 80084be:	2201      	movs	r2, #1
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f002 fd0c 	bl	800aede <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af04      	add	r7, sp, #16
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	4608      	mov	r0, r1
 80084da:	4611      	mov	r1, r2
 80084dc:	461a      	mov	r2, r3
 80084de:	4603      	mov	r3, r0
 80084e0:	70fb      	strb	r3, [r7, #3]
 80084e2:	460b      	mov	r3, r1
 80084e4:	70bb      	strb	r3, [r7, #2]
 80084e6:	4613      	mov	r3, r2
 80084e8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80084ea:	7878      	ldrb	r0, [r7, #1]
 80084ec:	78ba      	ldrb	r2, [r7, #2]
 80084ee:	78f9      	ldrb	r1, [r7, #3]
 80084f0:	8b3b      	ldrh	r3, [r7, #24]
 80084f2:	9302      	str	r3, [sp, #8]
 80084f4:	7d3b      	ldrb	r3, [r7, #20]
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	7c3b      	ldrb	r3, [r7, #16]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	4603      	mov	r3, r0
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f002 fc9f 	bl	800ae42 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
 8008516:	460b      	mov	r3, r1
 8008518:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800851a:	78fb      	ldrb	r3, [r7, #3]
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f002 fcbe 	bl	800aea0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f836 	bl	80085ac <USBH_GetFreePipe>
 8008540:	4603      	mov	r3, r0
 8008542:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008544:	89fb      	ldrh	r3, [r7, #14]
 8008546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800854a:	4293      	cmp	r3, r2
 800854c:	d00a      	beq.n	8008564 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800854e:	78fa      	ldrb	r2, [r7, #3]
 8008550:	89fb      	ldrh	r3, [r7, #14]
 8008552:	f003 030f 	and.w	r3, r3, #15
 8008556:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800855a:	6879      	ldr	r1, [r7, #4]
 800855c:	33e0      	adds	r3, #224	; 0xe0
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	440b      	add	r3, r1
 8008562:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008564:	89fb      	ldrh	r3, [r7, #14]
 8008566:	b2db      	uxtb	r3, r3
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800857c:	78fb      	ldrb	r3, [r7, #3]
 800857e:	2b0a      	cmp	r3, #10
 8008580:	d80d      	bhi.n	800859e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	33e0      	adds	r3, #224	; 0xe0
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	78fb      	ldrb	r3, [r7, #3]
 8008590:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	33e0      	adds	r3, #224	; 0xe0
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	440b      	add	r3, r1
 800859c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]
 80085bc:	e00f      	b.n	80085de <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	33e0      	adds	r3, #224	; 0xe0
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d102      	bne.n	80085d8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	e007      	b.n	80085e8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	3301      	adds	r3, #1
 80085dc:	73fb      	strb	r3, [r7, #15]
 80085de:	7bfb      	ldrb	r3, [r7, #15]
 80085e0:	2b0a      	cmp	r3, #10
 80085e2:	d9ec      	bls.n	80085be <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80085e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	4603      	mov	r3, r0
 80085fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80085fe:	2300      	movs	r3, #0
 8008600:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008606:	2b84      	cmp	r3, #132	; 0x84
 8008608:	d005      	beq.n	8008616 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800860a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	4413      	add	r3, r2
 8008612:	3303      	adds	r3, #3
 8008614:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008616:	68fb      	ldr	r3, [r7, #12]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800862a:	f3ef 8305 	mrs	r3, IPSR
 800862e:	607b      	str	r3, [r7, #4]
  return(result);
 8008630:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008632:	2b00      	cmp	r3, #0
 8008634:	bf14      	ite	ne
 8008636:	2301      	movne	r3, #1
 8008638:	2300      	moveq	r3, #0
 800863a:	b2db      	uxtb	r3, r3
}
 800863c:	4618      	mov	r0, r3
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800864c:	f001 f8f0 	bl	8009830 <vTaskStartScheduler>
  
  return osOK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	bd80      	pop	{r7, pc}

08008656 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008656:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008658:	b089      	sub	sp, #36	; 0x24
 800865a:	af04      	add	r7, sp, #16
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d020      	beq.n	80086aa <osThreadCreate+0x54>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d01c      	beq.n	80086aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685c      	ldr	r4, [r3, #4]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681d      	ldr	r5, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	691e      	ldr	r6, [r3, #16]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff ffb6 	bl	80085f4 <makeFreeRtosPriority>
 8008688:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008692:	9202      	str	r2, [sp, #8]
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	9100      	str	r1, [sp, #0]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	4632      	mov	r2, r6
 800869c:	4629      	mov	r1, r5
 800869e:	4620      	mov	r0, r4
 80086a0:	f000 fefb 	bl	800949a <xTaskCreateStatic>
 80086a4:	4603      	mov	r3, r0
 80086a6:	60fb      	str	r3, [r7, #12]
 80086a8:	e01c      	b.n	80086e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685c      	ldr	r4, [r3, #4]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086b6:	b29e      	uxth	r6, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80086be:	4618      	mov	r0, r3
 80086c0:	f7ff ff98 	bl	80085f4 <makeFreeRtosPriority>
 80086c4:	4602      	mov	r2, r0
 80086c6:	f107 030c 	add.w	r3, r7, #12
 80086ca:	9301      	str	r3, [sp, #4]
 80086cc:	9200      	str	r2, [sp, #0]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	4632      	mov	r2, r6
 80086d2:	4629      	mov	r1, r5
 80086d4:	4620      	mov	r0, r4
 80086d6:	f000 ff3a 	bl	800954e <xTaskCreate>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d001      	beq.n	80086e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80086e0:	2300      	movs	r3, #0
 80086e2:	e000      	b.n	80086e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80086e4:	68fb      	ldr	r3, [r7, #12]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080086ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b084      	sub	sp, #16
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <osDelay+0x16>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	e000      	b.n	8008706 <osDelay+0x18>
 8008704:	2301      	movs	r3, #1
 8008706:	4618      	mov	r0, r3
 8008708:	f001 f85e 	bl	80097c8 <vTaskDelay>
  
  return osOK;
 800870c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008716:	b590      	push	{r4, r7, lr}
 8008718:	b085      	sub	sp, #20
 800871a:	af02      	add	r7, sp, #8
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d012      	beq.n	800874e <osMessageCreate+0x38>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00e      	beq.n	800874e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6818      	ldr	r0, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6859      	ldr	r1, [r3, #4]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	689a      	ldr	r2, [r3, #8]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68dc      	ldr	r4, [r3, #12]
 8008740:	2300      	movs	r3, #0
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	4623      	mov	r3, r4
 8008746:	f000 f9df 	bl	8008b08 <xQueueGenericCreateStatic>
 800874a:	4603      	mov	r3, r0
 800874c:	e008      	b.n	8008760 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6818      	ldr	r0, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	4619      	mov	r1, r3
 800875a:	f000 fa48 	bl	8008bee <xQueueGenericCreate>
 800875e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	bd90      	pop	{r4, r7, pc}

08008768 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008774:	2300      	movs	r3, #0
 8008776:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <osMessagePut+0x1e>
    ticks = 1;
 8008782:	2301      	movs	r3, #1
 8008784:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008786:	f7ff ff4d 	bl	8008624 <inHandlerMode>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d018      	beq.n	80087c2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008790:	f107 0210 	add.w	r2, r7, #16
 8008794:	f107 0108 	add.w	r1, r7, #8
 8008798:	2300      	movs	r3, #0
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 fb80 	bl	8008ea0 <xQueueGenericSendFromISR>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d001      	beq.n	80087aa <osMessagePut+0x42>
      return osErrorOS;
 80087a6:	23ff      	movs	r3, #255	; 0xff
 80087a8:	e018      	b.n	80087dc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d014      	beq.n	80087da <osMessagePut+0x72>
 80087b0:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <osMessagePut+0x7c>)
 80087b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	e00b      	b.n	80087da <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80087c2:	f107 0108 	add.w	r1, r7, #8
 80087c6:	2300      	movs	r3, #0
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f000 fa6e 	bl	8008cac <xQueueGenericSend>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d001      	beq.n	80087da <osMessagePut+0x72>
      return osErrorOS;
 80087d6:	23ff      	movs	r3, #255	; 0xff
 80087d8:	e000      	b.n	80087dc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	e000ed04 	.word	0xe000ed04

080087e8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80087e8:	b590      	push	{r4, r7, lr}
 80087ea:	b08b      	sub	sp, #44	; 0x2c
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10a      	bne.n	8008818 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008802:	2380      	movs	r3, #128	; 0x80
 8008804:	617b      	str	r3, [r7, #20]
    return event;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	461c      	mov	r4, r3
 800880a:	f107 0314 	add.w	r3, r7, #20
 800880e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008812:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008816:	e054      	b.n	80088c2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008818:	2300      	movs	r3, #0
 800881a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008826:	d103      	bne.n	8008830 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008828:	f04f 33ff 	mov.w	r3, #4294967295
 800882c:	627b      	str	r3, [r7, #36]	; 0x24
 800882e:	e009      	b.n	8008844 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d006      	beq.n	8008844 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	2b00      	cmp	r3, #0
 800883e:	d101      	bne.n	8008844 <osMessageGet+0x5c>
      ticks = 1;
 8008840:	2301      	movs	r3, #1
 8008842:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008844:	f7ff feee 	bl	8008624 <inHandlerMode>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d01c      	beq.n	8008888 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800884e:	f107 0220 	add.w	r2, r7, #32
 8008852:	f107 0314 	add.w	r3, r7, #20
 8008856:	3304      	adds	r3, #4
 8008858:	4619      	mov	r1, r3
 800885a:	68b8      	ldr	r0, [r7, #8]
 800885c:	f000 fc90 	bl	8009180 <xQueueReceiveFromISR>
 8008860:	4603      	mov	r3, r0
 8008862:	2b01      	cmp	r3, #1
 8008864:	d102      	bne.n	800886c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008866:	2310      	movs	r3, #16
 8008868:	617b      	str	r3, [r7, #20]
 800886a:	e001      	b.n	8008870 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800886c:	2300      	movs	r3, #0
 800886e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d01d      	beq.n	80088b2 <osMessageGet+0xca>
 8008876:	4b15      	ldr	r3, [pc, #84]	; (80088cc <osMessageGet+0xe4>)
 8008878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	e014      	b.n	80088b2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008888:	f107 0314 	add.w	r3, r7, #20
 800888c:	3304      	adds	r3, #4
 800888e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008890:	4619      	mov	r1, r3
 8008892:	68b8      	ldr	r0, [r7, #8]
 8008894:	f000 fb98 	bl	8008fc8 <xQueueReceive>
 8008898:	4603      	mov	r3, r0
 800889a:	2b01      	cmp	r3, #1
 800889c:	d102      	bne.n	80088a4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800889e:	2310      	movs	r3, #16
 80088a0:	617b      	str	r3, [r7, #20]
 80088a2:	e006      	b.n	80088b2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <osMessageGet+0xc6>
 80088aa:	2300      	movs	r3, #0
 80088ac:	e000      	b.n	80088b0 <osMessageGet+0xc8>
 80088ae:	2340      	movs	r3, #64	; 0x40
 80088b0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	461c      	mov	r4, r3
 80088b6:	f107 0314 	add.w	r3, r7, #20
 80088ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80088be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	372c      	adds	r7, #44	; 0x2c
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd90      	pop	{r4, r7, pc}
 80088ca:	bf00      	nop
 80088cc:	e000ed04 	.word	0xe000ed04

080088d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f103 0208 	add.w	r2, r3, #8
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f04f 32ff 	mov.w	r2, #4294967295
 80088e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f103 0208 	add.w	r2, r3, #8
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f103 0208 	add.w	r2, r3, #8
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800891e:	bf00      	nop
 8008920:	370c      	adds	r7, #12
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800892a:	b480      	push	{r7}
 800892c:	b085      	sub	sp, #20
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	689a      	ldr	r2, [r3, #8]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	1c5a      	adds	r2, r3, #1
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	601a      	str	r2, [r3, #0]
}
 8008966:	bf00      	nop
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008972:	b480      	push	{r7}
 8008974:	b085      	sub	sp, #20
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008988:	d103      	bne.n	8008992 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	60fb      	str	r3, [r7, #12]
 8008990:	e00c      	b.n	80089ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	3308      	adds	r3, #8
 8008996:	60fb      	str	r3, [r7, #12]
 8008998:	e002      	b.n	80089a0 <vListInsert+0x2e>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d2f6      	bcs.n	800899a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	1c5a      	adds	r2, r3, #1
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	601a      	str	r2, [r3, #0]
}
 80089d8:	bf00      	nop
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	6892      	ldr	r2, [r2, #8]
 80089fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	6852      	ldr	r2, [r2, #4]
 8008a04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d103      	bne.n	8008a18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689a      	ldr	r2, [r3, #8]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	1e5a      	subs	r2, r3, #1
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d109      	bne.n	8008a60 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a50:	f383 8811 	msr	BASEPRI, r3
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	60bb      	str	r3, [r7, #8]
 8008a5e:	e7fe      	b.n	8008a5e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008a60:	f001 fd2c 	bl	800a4bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6c:	68f9      	ldr	r1, [r7, #12]
 8008a6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a70:	fb01 f303 	mul.w	r3, r1, r3
 8008a74:	441a      	add	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a90:	3b01      	subs	r3, #1
 8008a92:	68f9      	ldr	r1, [r7, #12]
 8008a94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a96:	fb01 f303 	mul.w	r3, r1, r3
 8008a9a:	441a      	add	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	22ff      	movs	r2, #255	; 0xff
 8008aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	22ff      	movs	r2, #255	; 0xff
 8008aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d114      	bne.n	8008ae0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d01a      	beq.n	8008af4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3310      	adds	r3, #16
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f001 f918 	bl	8009cf8 <xTaskRemoveFromEventList>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d012      	beq.n	8008af4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008ace:	4b0d      	ldr	r3, [pc, #52]	; (8008b04 <xQueueGenericReset+0xcc>)
 8008ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	e009      	b.n	8008af4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3310      	adds	r3, #16
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff fef3 	bl	80088d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3324      	adds	r3, #36	; 0x24
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff feee 	bl	80088d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008af4:	f001 fd10 	bl	800a518 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008af8:	2301      	movs	r3, #1
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	e000ed04 	.word	0xe000ed04

08008b08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08e      	sub	sp, #56	; 0x38
 8008b0c:	af02      	add	r7, sp, #8
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
 8008b14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d109      	bne.n	8008b30 <xQueueGenericCreateStatic+0x28>
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b2e:	e7fe      	b.n	8008b2e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d109      	bne.n	8008b4a <xQueueGenericCreateStatic+0x42>
 8008b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3a:	f383 8811 	msr	BASEPRI, r3
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	627b      	str	r3, [r7, #36]	; 0x24
 8008b48:	e7fe      	b.n	8008b48 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <xQueueGenericCreateStatic+0x4e>
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <xQueueGenericCreateStatic+0x52>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e000      	b.n	8008b5c <xQueueGenericCreateStatic+0x54>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d109      	bne.n	8008b74 <xQueueGenericCreateStatic+0x6c>
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	623b      	str	r3, [r7, #32]
 8008b72:	e7fe      	b.n	8008b72 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d102      	bne.n	8008b80 <xQueueGenericCreateStatic+0x78>
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <xQueueGenericCreateStatic+0x7c>
 8008b80:	2301      	movs	r3, #1
 8008b82:	e000      	b.n	8008b86 <xQueueGenericCreateStatic+0x7e>
 8008b84:	2300      	movs	r3, #0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d109      	bne.n	8008b9e <xQueueGenericCreateStatic+0x96>
 8008b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	61fb      	str	r3, [r7, #28]
 8008b9c:	e7fe      	b.n	8008b9c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008b9e:	2348      	movs	r3, #72	; 0x48
 8008ba0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2b48      	cmp	r3, #72	; 0x48
 8008ba6:	d009      	beq.n	8008bbc <xQueueGenericCreateStatic+0xb4>
 8008ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	61bb      	str	r3, [r7, #24]
 8008bba:	e7fe      	b.n	8008bba <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008bbc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00d      	beq.n	8008be4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008bd0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	68b9      	ldr	r1, [r7, #8]
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 f844 	bl	8008c6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3730      	adds	r7, #48	; 0x30
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b08a      	sub	sp, #40	; 0x28
 8008bf2:	af02      	add	r7, sp, #8
 8008bf4:	60f8      	str	r0, [r7, #12]
 8008bf6:	60b9      	str	r1, [r7, #8]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d109      	bne.n	8008c16 <xQueueGenericCreate+0x28>
 8008c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	613b      	str	r3, [r7, #16]
 8008c14:	e7fe      	b.n	8008c14 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d102      	bne.n	8008c22 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	61fb      	str	r3, [r7, #28]
 8008c20:	e004      	b.n	8008c2c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	68ba      	ldr	r2, [r7, #8]
 8008c26:	fb02 f303 	mul.w	r3, r2, r3
 8008c2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	3348      	adds	r3, #72	; 0x48
 8008c30:	4618      	mov	r0, r3
 8008c32:	f001 fd5d 	bl	800a6f0 <pvPortMalloc>
 8008c36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d011      	beq.n	8008c62 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	3348      	adds	r3, #72	; 0x48
 8008c46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c50:	79fa      	ldrb	r2, [r7, #7]
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	4613      	mov	r3, r2
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	68b9      	ldr	r1, [r7, #8]
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 f805 	bl	8008c6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c62:	69bb      	ldr	r3, [r7, #24]
	}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3720      	adds	r7, #32
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
 8008c78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d103      	bne.n	8008c88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	69ba      	ldr	r2, [r7, #24]
 8008c84:	601a      	str	r2, [r3, #0]
 8008c86:	e002      	b.n	8008c8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	68ba      	ldr	r2, [r7, #8]
 8008c98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008c9a:	2101      	movs	r1, #1
 8008c9c:	69b8      	ldr	r0, [r7, #24]
 8008c9e:	f7ff fecb 	bl	8008a38 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ca2:	bf00      	nop
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
	...

08008cac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b08e      	sub	sp, #56	; 0x38
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d109      	bne.n	8008cdc <xQueueGenericSend+0x30>
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cda:	e7fe      	b.n	8008cda <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d103      	bne.n	8008cea <xQueueGenericSend+0x3e>
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <xQueueGenericSend+0x42>
 8008cea:	2301      	movs	r3, #1
 8008cec:	e000      	b.n	8008cf0 <xQueueGenericSend+0x44>
 8008cee:	2300      	movs	r3, #0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d109      	bne.n	8008d08 <xQueueGenericSend+0x5c>
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
 8008d06:	e7fe      	b.n	8008d06 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d103      	bne.n	8008d16 <xQueueGenericSend+0x6a>
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d101      	bne.n	8008d1a <xQueueGenericSend+0x6e>
 8008d16:	2301      	movs	r3, #1
 8008d18:	e000      	b.n	8008d1c <xQueueGenericSend+0x70>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d109      	bne.n	8008d34 <xQueueGenericSend+0x88>
 8008d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	623b      	str	r3, [r7, #32]
 8008d32:	e7fe      	b.n	8008d32 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d34:	f001 f996 	bl	800a064 <xTaskGetSchedulerState>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d102      	bne.n	8008d44 <xQueueGenericSend+0x98>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <xQueueGenericSend+0x9c>
 8008d44:	2301      	movs	r3, #1
 8008d46:	e000      	b.n	8008d4a <xQueueGenericSend+0x9e>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d109      	bne.n	8008d62 <xQueueGenericSend+0xb6>
 8008d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	61fb      	str	r3, [r7, #28]
 8008d60:	e7fe      	b.n	8008d60 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d62:	f001 fbab 	bl	800a4bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d302      	bcc.n	8008d78 <xQueueGenericSend+0xcc>
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d129      	bne.n	8008dcc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	68b9      	ldr	r1, [r7, #8]
 8008d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d7e:	f000 fa7c 	bl	800927a <prvCopyDataToQueue>
 8008d82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d010      	beq.n	8008dae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	3324      	adds	r3, #36	; 0x24
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 ffb1 	bl	8009cf8 <xTaskRemoveFromEventList>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d013      	beq.n	8008dc4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008d9c:	4b3f      	ldr	r3, [pc, #252]	; (8008e9c <xQueueGenericSend+0x1f0>)
 8008d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	e00a      	b.n	8008dc4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d007      	beq.n	8008dc4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008db4:	4b39      	ldr	r3, [pc, #228]	; (8008e9c <xQueueGenericSend+0x1f0>)
 8008db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008dc4:	f001 fba8 	bl	800a518 <vPortExitCritical>
				return pdPASS;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e063      	b.n	8008e94 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d103      	bne.n	8008dda <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dd2:	f001 fba1 	bl	800a518 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	e05c      	b.n	8008e94 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d106      	bne.n	8008dee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008de0:	f107 0314 	add.w	r3, r7, #20
 8008de4:	4618      	mov	r0, r3
 8008de6:	f000 ffe9 	bl	8009dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dea:	2301      	movs	r3, #1
 8008dec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dee:	f001 fb93 	bl	800a518 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008df2:	f000 fd7b 	bl	80098ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008df6:	f001 fb61 	bl	800a4bc <vPortEnterCritical>
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e00:	b25b      	sxtb	r3, r3
 8008e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e06:	d103      	bne.n	8008e10 <xQueueGenericSend+0x164>
 8008e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e16:	b25b      	sxtb	r3, r3
 8008e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1c:	d103      	bne.n	8008e26 <xQueueGenericSend+0x17a>
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e26:	f001 fb77 	bl	800a518 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e2a:	1d3a      	adds	r2, r7, #4
 8008e2c:	f107 0314 	add.w	r3, r7, #20
 8008e30:	4611      	mov	r1, r2
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 ffd8 	bl	8009de8 <xTaskCheckForTimeOut>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d124      	bne.n	8008e88 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e40:	f000 fb13 	bl	800946a <prvIsQueueFull>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d018      	beq.n	8008e7c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4c:	3310      	adds	r3, #16
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	4611      	mov	r1, r2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 ff2c 	bl	8009cb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e5a:	f000 fa9e 	bl	800939a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008e5e:	f000 fd53 	bl	8009908 <xTaskResumeAll>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f47f af7c 	bne.w	8008d62 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008e6a:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <xQueueGenericSend+0x1f0>)
 8008e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	e772      	b.n	8008d62 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e7e:	f000 fa8c 	bl	800939a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e82:	f000 fd41 	bl	8009908 <xTaskResumeAll>
 8008e86:	e76c      	b.n	8008d62 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e8a:	f000 fa86 	bl	800939a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e8e:	f000 fd3b 	bl	8009908 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008e92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3738      	adds	r7, #56	; 0x38
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	e000ed04 	.word	0xe000ed04

08008ea0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08e      	sub	sp, #56	; 0x38
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d109      	bne.n	8008ecc <xQueueGenericSendFromISR+0x2c>
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eca:	e7fe      	b.n	8008eca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d103      	bne.n	8008eda <xQueueGenericSendFromISR+0x3a>
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <xQueueGenericSendFromISR+0x3e>
 8008eda:	2301      	movs	r3, #1
 8008edc:	e000      	b.n	8008ee0 <xQueueGenericSendFromISR+0x40>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d109      	bne.n	8008ef8 <xQueueGenericSendFromISR+0x58>
 8008ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	623b      	str	r3, [r7, #32]
 8008ef6:	e7fe      	b.n	8008ef6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d103      	bne.n	8008f06 <xQueueGenericSendFromISR+0x66>
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d101      	bne.n	8008f0a <xQueueGenericSendFromISR+0x6a>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e000      	b.n	8008f0c <xQueueGenericSendFromISR+0x6c>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d109      	bne.n	8008f24 <xQueueGenericSendFromISR+0x84>
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	61fb      	str	r3, [r7, #28]
 8008f22:	e7fe      	b.n	8008f22 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f24:	f001 fba6 	bl	800a674 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008f28:	f3ef 8211 	mrs	r2, BASEPRI
 8008f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	61ba      	str	r2, [r7, #24]
 8008f3e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008f40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d302      	bcc.n	8008f56 <xQueueGenericSendFromISR+0xb6>
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d12c      	bne.n	8008fb0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	68b9      	ldr	r1, [r7, #8]
 8008f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f66:	f000 f988 	bl	800927a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008f6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f72:	d112      	bne.n	8008f9a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d016      	beq.n	8008faa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7e:	3324      	adds	r3, #36	; 0x24
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 feb9 	bl	8009cf8 <xTaskRemoveFromEventList>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00e      	beq.n	8008faa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00b      	beq.n	8008faa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	e007      	b.n	8008faa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	b25a      	sxtb	r2, r3
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008faa:	2301      	movs	r3, #1
 8008fac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008fae:	e001      	b.n	8008fb4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8008fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3738      	adds	r7, #56	; 0x38
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08c      	sub	sp, #48	; 0x30
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d109      	bne.n	8008ff6 <xQueueReceive+0x2e>
	__asm volatile
 8008fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe6:	f383 8811 	msr	BASEPRI, r3
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	623b      	str	r3, [r7, #32]
 8008ff4:	e7fe      	b.n	8008ff4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d103      	bne.n	8009004 <xQueueReceive+0x3c>
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <xQueueReceive+0x40>
 8009004:	2301      	movs	r3, #1
 8009006:	e000      	b.n	800900a <xQueueReceive+0x42>
 8009008:	2300      	movs	r3, #0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d109      	bne.n	8009022 <xQueueReceive+0x5a>
 800900e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	61fb      	str	r3, [r7, #28]
 8009020:	e7fe      	b.n	8009020 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009022:	f001 f81f 	bl	800a064 <xTaskGetSchedulerState>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d102      	bne.n	8009032 <xQueueReceive+0x6a>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <xQueueReceive+0x6e>
 8009032:	2301      	movs	r3, #1
 8009034:	e000      	b.n	8009038 <xQueueReceive+0x70>
 8009036:	2300      	movs	r3, #0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d109      	bne.n	8009050 <xQueueReceive+0x88>
 800903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	61bb      	str	r3, [r7, #24]
 800904e:	e7fe      	b.n	800904e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009050:	f001 fa34 	bl	800a4bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009058:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	2b00      	cmp	r3, #0
 800905e:	d01f      	beq.n	80090a0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009060:	68b9      	ldr	r1, [r7, #8]
 8009062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009064:	f000 f973 	bl	800934e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906a:	1e5a      	subs	r2, r3, #1
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00f      	beq.n	8009098 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	3310      	adds	r3, #16
 800907c:	4618      	mov	r0, r3
 800907e:	f000 fe3b 	bl	8009cf8 <xTaskRemoveFromEventList>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d007      	beq.n	8009098 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009088:	4b3c      	ldr	r3, [pc, #240]	; (800917c <xQueueReceive+0x1b4>)
 800908a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800908e:	601a      	str	r2, [r3, #0]
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009098:	f001 fa3e 	bl	800a518 <vPortExitCritical>
				return pdPASS;
 800909c:	2301      	movs	r3, #1
 800909e:	e069      	b.n	8009174 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d103      	bne.n	80090ae <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090a6:	f001 fa37 	bl	800a518 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80090aa:	2300      	movs	r3, #0
 80090ac:	e062      	b.n	8009174 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d106      	bne.n	80090c2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090b4:	f107 0310 	add.w	r3, r7, #16
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 fe7f 	bl	8009dbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090be:	2301      	movs	r3, #1
 80090c0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090c2:	f001 fa29 	bl	800a518 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090c6:	f000 fc11 	bl	80098ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090ca:	f001 f9f7 	bl	800a4bc <vPortEnterCritical>
 80090ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090d4:	b25b      	sxtb	r3, r3
 80090d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090da:	d103      	bne.n	80090e4 <xQueueReceive+0x11c>
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090ea:	b25b      	sxtb	r3, r3
 80090ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f0:	d103      	bne.n	80090fa <xQueueReceive+0x132>
 80090f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090fa:	f001 fa0d 	bl	800a518 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090fe:	1d3a      	adds	r2, r7, #4
 8009100:	f107 0310 	add.w	r3, r7, #16
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f000 fe6e 	bl	8009de8 <xTaskCheckForTimeOut>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d123      	bne.n	800915a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009114:	f000 f993 	bl	800943e <prvIsQueueEmpty>
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d017      	beq.n	800914e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009120:	3324      	adds	r3, #36	; 0x24
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	4611      	mov	r1, r2
 8009126:	4618      	mov	r0, r3
 8009128:	f000 fdc2 	bl	8009cb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800912c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800912e:	f000 f934 	bl	800939a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009132:	f000 fbe9 	bl	8009908 <xTaskResumeAll>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d189      	bne.n	8009050 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800913c:	4b0f      	ldr	r3, [pc, #60]	; (800917c <xQueueReceive+0x1b4>)
 800913e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	e780      	b.n	8009050 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800914e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009150:	f000 f923 	bl	800939a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009154:	f000 fbd8 	bl	8009908 <xTaskResumeAll>
 8009158:	e77a      	b.n	8009050 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800915a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800915c:	f000 f91d 	bl	800939a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009160:	f000 fbd2 	bl	8009908 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009166:	f000 f96a 	bl	800943e <prvIsQueueEmpty>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	f43f af6f 	beq.w	8009050 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009172:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009174:	4618      	mov	r0, r3
 8009176:	3730      	adds	r7, #48	; 0x30
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	e000ed04 	.word	0xe000ed04

08009180 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08e      	sub	sp, #56	; 0x38
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009192:	2b00      	cmp	r3, #0
 8009194:	d109      	bne.n	80091aa <xQueueReceiveFromISR+0x2a>
 8009196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	623b      	str	r3, [r7, #32]
 80091a8:	e7fe      	b.n	80091a8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d103      	bne.n	80091b8 <xQueueReceiveFromISR+0x38>
 80091b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d101      	bne.n	80091bc <xQueueReceiveFromISR+0x3c>
 80091b8:	2301      	movs	r3, #1
 80091ba:	e000      	b.n	80091be <xQueueReceiveFromISR+0x3e>
 80091bc:	2300      	movs	r3, #0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d109      	bne.n	80091d6 <xQueueReceiveFromISR+0x56>
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	61fb      	str	r3, [r7, #28]
 80091d4:	e7fe      	b.n	80091d4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091d6:	f001 fa4d 	bl	800a674 <vPortValidateInterruptPriority>
	__asm volatile
 80091da:	f3ef 8211 	mrs	r2, BASEPRI
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	61ba      	str	r2, [r7, #24]
 80091f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80091f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d02f      	beq.n	8009262 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009204:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800920c:	68b9      	ldr	r1, [r7, #8]
 800920e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009210:	f000 f89d 	bl	800934e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	1e5a      	subs	r2, r3, #1
 8009218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800921c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009224:	d112      	bne.n	800924c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d016      	beq.n	800925c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800922e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009230:	3310      	adds	r3, #16
 8009232:	4618      	mov	r0, r3
 8009234:	f000 fd60 	bl	8009cf8 <xTaskRemoveFromEventList>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00e      	beq.n	800925c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00b      	beq.n	800925c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	e007      	b.n	800925c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800924c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009250:	3301      	adds	r3, #1
 8009252:	b2db      	uxtb	r3, r3
 8009254:	b25a      	sxtb	r2, r3
 8009256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800925c:	2301      	movs	r3, #1
 800925e:	637b      	str	r3, [r7, #52]	; 0x34
 8009260:	e001      	b.n	8009266 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009262:	2300      	movs	r3, #0
 8009264:	637b      	str	r3, [r7, #52]	; 0x34
 8009266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009268:	613b      	str	r3, [r7, #16]
	__asm volatile
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009272:	4618      	mov	r0, r3
 8009274:	3738      	adds	r7, #56	; 0x38
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b086      	sub	sp, #24
 800927e:	af00      	add	r7, sp, #0
 8009280:	60f8      	str	r0, [r7, #12]
 8009282:	60b9      	str	r1, [r7, #8]
 8009284:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009286:	2300      	movs	r3, #0
 8009288:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10d      	bne.n	80092b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d14d      	bne.n	800933c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fefb 	bl	800a0a0 <xTaskPriorityDisinherit>
 80092aa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	609a      	str	r2, [r3, #8]
 80092b2:	e043      	b.n	800933c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d119      	bne.n	80092ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6858      	ldr	r0, [r3, #4]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c2:	461a      	mov	r2, r3
 80092c4:	68b9      	ldr	r1, [r7, #8]
 80092c6:	f001 ff25 	bl	800b114 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d2:	441a      	add	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d32b      	bcc.n	800933c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	605a      	str	r2, [r3, #4]
 80092ec:	e026      	b.n	800933c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	68d8      	ldr	r0, [r3, #12]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f6:	461a      	mov	r2, r3
 80092f8:	68b9      	ldr	r1, [r7, #8]
 80092fa:	f001 ff0b 	bl	800b114 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009306:	425b      	negs	r3, r3
 8009308:	441a      	add	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	68da      	ldr	r2, [r3, #12]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	429a      	cmp	r2, r3
 8009318:	d207      	bcs.n	800932a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	689a      	ldr	r2, [r3, #8]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009322:	425b      	negs	r3, r3
 8009324:	441a      	add	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b02      	cmp	r3, #2
 800932e:	d105      	bne.n	800933c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d002      	beq.n	800933c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	3b01      	subs	r3, #1
 800933a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009344:	697b      	ldr	r3, [r7, #20]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b082      	sub	sp, #8
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935c:	2b00      	cmp	r3, #0
 800935e:	d018      	beq.n	8009392 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68da      	ldr	r2, [r3, #12]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009368:	441a      	add	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68da      	ldr	r2, [r3, #12]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	429a      	cmp	r2, r3
 8009378:	d303      	bcc.n	8009382 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68d9      	ldr	r1, [r3, #12]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938a:	461a      	mov	r2, r3
 800938c:	6838      	ldr	r0, [r7, #0]
 800938e:	f001 fec1 	bl	800b114 <memcpy>
	}
}
 8009392:	bf00      	nop
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b084      	sub	sp, #16
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093a2:	f001 f88b 	bl	800a4bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093ae:	e011      	b.n	80093d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d012      	beq.n	80093de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	3324      	adds	r3, #36	; 0x24
 80093bc:	4618      	mov	r0, r3
 80093be:	f000 fc9b 	bl	8009cf8 <xTaskRemoveFromEventList>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80093c8:	f000 fd6e 	bl	8009ea8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
 80093ce:	3b01      	subs	r3, #1
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	dce9      	bgt.n	80093b0 <prvUnlockQueue+0x16>
 80093dc:	e000      	b.n	80093e0 <prvUnlockQueue+0x46>
					break;
 80093de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	22ff      	movs	r2, #255	; 0xff
 80093e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80093e8:	f001 f896 	bl	800a518 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093ec:	f001 f866 	bl	800a4bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093f8:	e011      	b.n	800941e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d012      	beq.n	8009428 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	3310      	adds	r3, #16
 8009406:	4618      	mov	r0, r3
 8009408:	f000 fc76 	bl	8009cf8 <xTaskRemoveFromEventList>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009412:	f000 fd49 	bl	8009ea8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009416:	7bbb      	ldrb	r3, [r7, #14]
 8009418:	3b01      	subs	r3, #1
 800941a:	b2db      	uxtb	r3, r3
 800941c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800941e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009422:	2b00      	cmp	r3, #0
 8009424:	dce9      	bgt.n	80093fa <prvUnlockQueue+0x60>
 8009426:	e000      	b.n	800942a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009428:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	22ff      	movs	r2, #255	; 0xff
 800942e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009432:	f001 f871 	bl	800a518 <vPortExitCritical>
}
 8009436:	bf00      	nop
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b084      	sub	sp, #16
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009446:	f001 f839 	bl	800a4bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944e:	2b00      	cmp	r3, #0
 8009450:	d102      	bne.n	8009458 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009452:	2301      	movs	r3, #1
 8009454:	60fb      	str	r3, [r7, #12]
 8009456:	e001      	b.n	800945c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009458:	2300      	movs	r3, #0
 800945a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800945c:	f001 f85c 	bl	800a518 <vPortExitCritical>

	return xReturn;
 8009460:	68fb      	ldr	r3, [r7, #12]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b084      	sub	sp, #16
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009472:	f001 f823 	bl	800a4bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947e:	429a      	cmp	r2, r3
 8009480:	d102      	bne.n	8009488 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009482:	2301      	movs	r3, #1
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	e001      	b.n	800948c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009488:	2300      	movs	r3, #0
 800948a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800948c:	f001 f844 	bl	800a518 <vPortExitCritical>

	return xReturn;
 8009490:	68fb      	ldr	r3, [r7, #12]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800949a:	b580      	push	{r7, lr}
 800949c:	b08e      	sub	sp, #56	; 0x38
 800949e:	af04      	add	r7, sp, #16
 80094a0:	60f8      	str	r0, [r7, #12]
 80094a2:	60b9      	str	r1, [r7, #8]
 80094a4:	607a      	str	r2, [r7, #4]
 80094a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80094a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d109      	bne.n	80094c2 <xTaskCreateStatic+0x28>
	__asm volatile
 80094ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	623b      	str	r3, [r7, #32]
 80094c0:	e7fe      	b.n	80094c0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80094c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d109      	bne.n	80094dc <xTaskCreateStatic+0x42>
 80094c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	61fb      	str	r3, [r7, #28]
 80094da:	e7fe      	b.n	80094da <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80094dc:	2354      	movs	r3, #84	; 0x54
 80094de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	2b54      	cmp	r3, #84	; 0x54
 80094e4:	d009      	beq.n	80094fa <xTaskCreateStatic+0x60>
 80094e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	61bb      	str	r3, [r7, #24]
 80094f8:	e7fe      	b.n	80094f8 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80094fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80094fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d01e      	beq.n	8009540 <xTaskCreateStatic+0xa6>
 8009502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009504:	2b00      	cmp	r3, #0
 8009506:	d01b      	beq.n	8009540 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800950c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009510:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009514:	2202      	movs	r2, #2
 8009516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800951a:	2300      	movs	r3, #0
 800951c:	9303      	str	r3, [sp, #12]
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	9302      	str	r3, [sp, #8]
 8009522:	f107 0314 	add.w	r3, r7, #20
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	68b9      	ldr	r1, [r7, #8]
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 f850 	bl	80095d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800953a:	f000 f8db 	bl	80096f4 <prvAddNewTaskToReadyList>
 800953e:	e001      	b.n	8009544 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009540:	2300      	movs	r3, #0
 8009542:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009544:	697b      	ldr	r3, [r7, #20]
	}
 8009546:	4618      	mov	r0, r3
 8009548:	3728      	adds	r7, #40	; 0x28
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800954e:	b580      	push	{r7, lr}
 8009550:	b08c      	sub	sp, #48	; 0x30
 8009552:	af04      	add	r7, sp, #16
 8009554:	60f8      	str	r0, [r7, #12]
 8009556:	60b9      	str	r1, [r7, #8]
 8009558:	603b      	str	r3, [r7, #0]
 800955a:	4613      	mov	r3, r2
 800955c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800955e:	88fb      	ldrh	r3, [r7, #6]
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4618      	mov	r0, r3
 8009564:	f001 f8c4 	bl	800a6f0 <pvPortMalloc>
 8009568:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00e      	beq.n	800958e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009570:	2054      	movs	r0, #84	; 0x54
 8009572:	f001 f8bd 	bl	800a6f0 <pvPortMalloc>
 8009576:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	631a      	str	r2, [r3, #48]	; 0x30
 8009584:	e005      	b.n	8009592 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009586:	6978      	ldr	r0, [r7, #20]
 8009588:	f001 f974 	bl	800a874 <vPortFree>
 800958c:	e001      	b.n	8009592 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800958e:	2300      	movs	r3, #0
 8009590:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d017      	beq.n	80095c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	2200      	movs	r2, #0
 800959c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80095a0:	88fa      	ldrh	r2, [r7, #6]
 80095a2:	2300      	movs	r3, #0
 80095a4:	9303      	str	r3, [sp, #12]
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	9302      	str	r3, [sp, #8]
 80095aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	68b9      	ldr	r1, [r7, #8]
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 f80e 	bl	80095d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095bc:	69f8      	ldr	r0, [r7, #28]
 80095be:	f000 f899 	bl	80096f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80095c2:	2301      	movs	r3, #1
 80095c4:	61bb      	str	r3, [r7, #24]
 80095c6:	e002      	b.n	80095ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80095c8:	f04f 33ff 	mov.w	r3, #4294967295
 80095cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095ce:	69bb      	ldr	r3, [r7, #24]
	}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3720      	adds	r7, #32
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b088      	sub	sp, #32
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
 80095e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	461a      	mov	r2, r3
 80095f0:	21a5      	movs	r1, #165	; 0xa5
 80095f2:	f001 fd9a 	bl	800b12a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009600:	3b01      	subs	r3, #1
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	f023 0307 	bic.w	r3, r3, #7
 800960e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	f003 0307 	and.w	r3, r3, #7
 8009616:	2b00      	cmp	r3, #0
 8009618:	d009      	beq.n	800962e <prvInitialiseNewTask+0x56>
 800961a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961e:	f383 8811 	msr	BASEPRI, r3
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	617b      	str	r3, [r7, #20]
 800962c:	e7fe      	b.n	800962c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d01f      	beq.n	8009674 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009634:	2300      	movs	r3, #0
 8009636:	61fb      	str	r3, [r7, #28]
 8009638:	e012      	b.n	8009660 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	4413      	add	r3, r2
 8009640:	7819      	ldrb	r1, [r3, #0]
 8009642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	4413      	add	r3, r2
 8009648:	3334      	adds	r3, #52	; 0x34
 800964a:	460a      	mov	r2, r1
 800964c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	4413      	add	r3, r2
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d006      	beq.n	8009668 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	3301      	adds	r3, #1
 800965e:	61fb      	str	r3, [r7, #28]
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	2b0f      	cmp	r3, #15
 8009664:	d9e9      	bls.n	800963a <prvInitialiseNewTask+0x62>
 8009666:	e000      	b.n	800966a <prvInitialiseNewTask+0x92>
			{
				break;
 8009668:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800966a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966c:	2200      	movs	r2, #0
 800966e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009672:	e003      	b.n	800967c <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	2b06      	cmp	r3, #6
 8009680:	d901      	bls.n	8009686 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009682:	2306      	movs	r3, #6
 8009684:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800968a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009690:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009694:	2200      	movs	r2, #0
 8009696:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969a:	3304      	adds	r3, #4
 800969c:	4618      	mov	r0, r3
 800969e:	f7ff f937 	bl	8008910 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a4:	3318      	adds	r3, #24
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff f932 	bl	8008910 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80096ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b4:	f1c3 0207 	rsb	r2, r3, #7
 80096b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096c0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	2200      	movs	r2, #0
 80096c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80096d0:	683a      	ldr	r2, [r7, #0]
 80096d2:	68f9      	ldr	r1, [r7, #12]
 80096d4:	69b8      	ldr	r0, [r7, #24]
 80096d6:	f000 fdcd 	bl	800a274 <pxPortInitialiseStack>
 80096da:	4602      	mov	r2, r0
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80096e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d002      	beq.n	80096ec <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80096e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096ec:	bf00      	nop
 80096ee:	3720      	adds	r7, #32
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80096fc:	f000 fede 	bl	800a4bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009700:	4b2a      	ldr	r3, [pc, #168]	; (80097ac <prvAddNewTaskToReadyList+0xb8>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	3301      	adds	r3, #1
 8009706:	4a29      	ldr	r2, [pc, #164]	; (80097ac <prvAddNewTaskToReadyList+0xb8>)
 8009708:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800970a:	4b29      	ldr	r3, [pc, #164]	; (80097b0 <prvAddNewTaskToReadyList+0xbc>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d109      	bne.n	8009726 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009712:	4a27      	ldr	r2, [pc, #156]	; (80097b0 <prvAddNewTaskToReadyList+0xbc>)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009718:	4b24      	ldr	r3, [pc, #144]	; (80097ac <prvAddNewTaskToReadyList+0xb8>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d110      	bne.n	8009742 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009720:	f000 fbe6 	bl	8009ef0 <prvInitialiseTaskLists>
 8009724:	e00d      	b.n	8009742 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009726:	4b23      	ldr	r3, [pc, #140]	; (80097b4 <prvAddNewTaskToReadyList+0xc0>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d109      	bne.n	8009742 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800972e:	4b20      	ldr	r3, [pc, #128]	; (80097b0 <prvAddNewTaskToReadyList+0xbc>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009738:	429a      	cmp	r2, r3
 800973a:	d802      	bhi.n	8009742 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800973c:	4a1c      	ldr	r2, [pc, #112]	; (80097b0 <prvAddNewTaskToReadyList+0xbc>)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009742:	4b1d      	ldr	r3, [pc, #116]	; (80097b8 <prvAddNewTaskToReadyList+0xc4>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3301      	adds	r3, #1
 8009748:	4a1b      	ldr	r2, [pc, #108]	; (80097b8 <prvAddNewTaskToReadyList+0xc4>)
 800974a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009750:	2201      	movs	r2, #1
 8009752:	409a      	lsls	r2, r3
 8009754:	4b19      	ldr	r3, [pc, #100]	; (80097bc <prvAddNewTaskToReadyList+0xc8>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4313      	orrs	r3, r2
 800975a:	4a18      	ldr	r2, [pc, #96]	; (80097bc <prvAddNewTaskToReadyList+0xc8>)
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009762:	4613      	mov	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	4413      	add	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4a15      	ldr	r2, [pc, #84]	; (80097c0 <prvAddNewTaskToReadyList+0xcc>)
 800976c:	441a      	add	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	3304      	adds	r3, #4
 8009772:	4619      	mov	r1, r3
 8009774:	4610      	mov	r0, r2
 8009776:	f7ff f8d8 	bl	800892a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800977a:	f000 fecd 	bl	800a518 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800977e:	4b0d      	ldr	r3, [pc, #52]	; (80097b4 <prvAddNewTaskToReadyList+0xc0>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00e      	beq.n	80097a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009786:	4b0a      	ldr	r3, [pc, #40]	; (80097b0 <prvAddNewTaskToReadyList+0xbc>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009790:	429a      	cmp	r2, r3
 8009792:	d207      	bcs.n	80097a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009794:	4b0b      	ldr	r3, [pc, #44]	; (80097c4 <prvAddNewTaskToReadyList+0xd0>)
 8009796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097a4:	bf00      	nop
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	2000040c 	.word	0x2000040c
 80097b0:	2000030c 	.word	0x2000030c
 80097b4:	20000418 	.word	0x20000418
 80097b8:	20000428 	.word	0x20000428
 80097bc:	20000414 	.word	0x20000414
 80097c0:	20000310 	.word	0x20000310
 80097c4:	e000ed04 	.word	0xe000ed04

080097c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80097d0:	2300      	movs	r3, #0
 80097d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d016      	beq.n	8009808 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80097da:	4b13      	ldr	r3, [pc, #76]	; (8009828 <vTaskDelay+0x60>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d009      	beq.n	80097f6 <vTaskDelay+0x2e>
 80097e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e6:	f383 8811 	msr	BASEPRI, r3
 80097ea:	f3bf 8f6f 	isb	sy
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	60bb      	str	r3, [r7, #8]
 80097f4:	e7fe      	b.n	80097f4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80097f6:	f000 f879 	bl	80098ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80097fa:	2100      	movs	r1, #0
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fcd3 	bl	800a1a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009802:	f000 f881 	bl	8009908 <xTaskResumeAll>
 8009806:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d107      	bne.n	800981e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800980e:	4b07      	ldr	r3, [pc, #28]	; (800982c <vTaskDelay+0x64>)
 8009810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800981e:	bf00      	nop
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20000434 	.word	0x20000434
 800982c:	e000ed04 	.word	0xe000ed04

08009830 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b08a      	sub	sp, #40	; 0x28
 8009834:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009836:	2300      	movs	r3, #0
 8009838:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800983a:	2300      	movs	r3, #0
 800983c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800983e:	463a      	mov	r2, r7
 8009840:	1d39      	adds	r1, r7, #4
 8009842:	f107 0308 	add.w	r3, r7, #8
 8009846:	4618      	mov	r0, r3
 8009848:	f7f6 feec 	bl	8000624 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	9202      	str	r2, [sp, #8]
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	2300      	movs	r3, #0
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	2300      	movs	r3, #0
 800985c:	460a      	mov	r2, r1
 800985e:	491d      	ldr	r1, [pc, #116]	; (80098d4 <vTaskStartScheduler+0xa4>)
 8009860:	481d      	ldr	r0, [pc, #116]	; (80098d8 <vTaskStartScheduler+0xa8>)
 8009862:	f7ff fe1a 	bl	800949a <xTaskCreateStatic>
 8009866:	4602      	mov	r2, r0
 8009868:	4b1c      	ldr	r3, [pc, #112]	; (80098dc <vTaskStartScheduler+0xac>)
 800986a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800986c:	4b1b      	ldr	r3, [pc, #108]	; (80098dc <vTaskStartScheduler+0xac>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d002      	beq.n	800987a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009874:	2301      	movs	r3, #1
 8009876:	617b      	str	r3, [r7, #20]
 8009878:	e001      	b.n	800987e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800987a:	2300      	movs	r3, #0
 800987c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d115      	bne.n	80098b0 <vTaskStartScheduler+0x80>
 8009884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009896:	4b12      	ldr	r3, [pc, #72]	; (80098e0 <vTaskStartScheduler+0xb0>)
 8009898:	f04f 32ff 	mov.w	r2, #4294967295
 800989c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800989e:	4b11      	ldr	r3, [pc, #68]	; (80098e4 <vTaskStartScheduler+0xb4>)
 80098a0:	2201      	movs	r2, #1
 80098a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80098a4:	4b10      	ldr	r3, [pc, #64]	; (80098e8 <vTaskStartScheduler+0xb8>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80098aa:	f000 fd69 	bl	800a380 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80098ae:	e00d      	b.n	80098cc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b6:	d109      	bne.n	80098cc <vTaskStartScheduler+0x9c>
 80098b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098bc:	f383 8811 	msr	BASEPRI, r3
 80098c0:	f3bf 8f6f 	isb	sy
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	60fb      	str	r3, [r7, #12]
 80098ca:	e7fe      	b.n	80098ca <vTaskStartScheduler+0x9a>
}
 80098cc:	bf00      	nop
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	0800b61c 	.word	0x0800b61c
 80098d8:	08009ec1 	.word	0x08009ec1
 80098dc:	20000430 	.word	0x20000430
 80098e0:	2000042c 	.word	0x2000042c
 80098e4:	20000418 	.word	0x20000418
 80098e8:	20000410 	.word	0x20000410

080098ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80098ec:	b480      	push	{r7}
 80098ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80098f0:	4b04      	ldr	r3, [pc, #16]	; (8009904 <vTaskSuspendAll+0x18>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3301      	adds	r3, #1
 80098f6:	4a03      	ldr	r2, [pc, #12]	; (8009904 <vTaskSuspendAll+0x18>)
 80098f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80098fa:	bf00      	nop
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	20000434 	.word	0x20000434

08009908 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800990e:	2300      	movs	r3, #0
 8009910:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009912:	2300      	movs	r3, #0
 8009914:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009916:	4b41      	ldr	r3, [pc, #260]	; (8009a1c <xTaskResumeAll+0x114>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d109      	bne.n	8009932 <xTaskResumeAll+0x2a>
 800991e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	e7fe      	b.n	8009930 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009932:	f000 fdc3 	bl	800a4bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009936:	4b39      	ldr	r3, [pc, #228]	; (8009a1c <xTaskResumeAll+0x114>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3b01      	subs	r3, #1
 800993c:	4a37      	ldr	r2, [pc, #220]	; (8009a1c <xTaskResumeAll+0x114>)
 800993e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009940:	4b36      	ldr	r3, [pc, #216]	; (8009a1c <xTaskResumeAll+0x114>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d161      	bne.n	8009a0c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009948:	4b35      	ldr	r3, [pc, #212]	; (8009a20 <xTaskResumeAll+0x118>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d05d      	beq.n	8009a0c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009950:	e02e      	b.n	80099b0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009952:	4b34      	ldr	r3, [pc, #208]	; (8009a24 <xTaskResumeAll+0x11c>)
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3318      	adds	r3, #24
 800995e:	4618      	mov	r0, r3
 8009960:	f7ff f840 	bl	80089e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	3304      	adds	r3, #4
 8009968:	4618      	mov	r0, r3
 800996a:	f7ff f83b 	bl	80089e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009972:	2201      	movs	r2, #1
 8009974:	409a      	lsls	r2, r3
 8009976:	4b2c      	ldr	r3, [pc, #176]	; (8009a28 <xTaskResumeAll+0x120>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4313      	orrs	r3, r2
 800997c:	4a2a      	ldr	r2, [pc, #168]	; (8009a28 <xTaskResumeAll+0x120>)
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009984:	4613      	mov	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4a27      	ldr	r2, [pc, #156]	; (8009a2c <xTaskResumeAll+0x124>)
 800998e:	441a      	add	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	3304      	adds	r3, #4
 8009994:	4619      	mov	r1, r3
 8009996:	4610      	mov	r0, r2
 8009998:	f7fe ffc7 	bl	800892a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a0:	4b23      	ldr	r3, [pc, #140]	; (8009a30 <xTaskResumeAll+0x128>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d302      	bcc.n	80099b0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80099aa:	4b22      	ldr	r3, [pc, #136]	; (8009a34 <xTaskResumeAll+0x12c>)
 80099ac:	2201      	movs	r2, #1
 80099ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099b0:	4b1c      	ldr	r3, [pc, #112]	; (8009a24 <xTaskResumeAll+0x11c>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1cc      	bne.n	8009952 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80099be:	f000 fb31 	bl	800a024 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80099c2:	4b1d      	ldr	r3, [pc, #116]	; (8009a38 <xTaskResumeAll+0x130>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d010      	beq.n	80099f0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80099ce:	f000 f837 	bl	8009a40 <xTaskIncrementTick>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80099d8:	4b16      	ldr	r3, [pc, #88]	; (8009a34 <xTaskResumeAll+0x12c>)
 80099da:	2201      	movs	r2, #1
 80099dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1f1      	bne.n	80099ce <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80099ea:	4b13      	ldr	r3, [pc, #76]	; (8009a38 <xTaskResumeAll+0x130>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80099f0:	4b10      	ldr	r3, [pc, #64]	; (8009a34 <xTaskResumeAll+0x12c>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d009      	beq.n	8009a0c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80099f8:	2301      	movs	r3, #1
 80099fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80099fc:	4b0f      	ldr	r3, [pc, #60]	; (8009a3c <xTaskResumeAll+0x134>)
 80099fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a0c:	f000 fd84 	bl	800a518 <vPortExitCritical>

	return xAlreadyYielded;
 8009a10:	68bb      	ldr	r3, [r7, #8]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20000434 	.word	0x20000434
 8009a20:	2000040c 	.word	0x2000040c
 8009a24:	200003cc 	.word	0x200003cc
 8009a28:	20000414 	.word	0x20000414
 8009a2c:	20000310 	.word	0x20000310
 8009a30:	2000030c 	.word	0x2000030c
 8009a34:	20000420 	.word	0x20000420
 8009a38:	2000041c 	.word	0x2000041c
 8009a3c:	e000ed04 	.word	0xe000ed04

08009a40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a46:	2300      	movs	r3, #0
 8009a48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a4a:	4b4e      	ldr	r3, [pc, #312]	; (8009b84 <xTaskIncrementTick+0x144>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f040 8087 	bne.w	8009b62 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a54:	4b4c      	ldr	r3, [pc, #304]	; (8009b88 <xTaskIncrementTick+0x148>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a5c:	4a4a      	ldr	r2, [pc, #296]	; (8009b88 <xTaskIncrementTick+0x148>)
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d11f      	bne.n	8009aa8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009a68:	4b48      	ldr	r3, [pc, #288]	; (8009b8c <xTaskIncrementTick+0x14c>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d009      	beq.n	8009a86 <xTaskIncrementTick+0x46>
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	603b      	str	r3, [r7, #0]
 8009a84:	e7fe      	b.n	8009a84 <xTaskIncrementTick+0x44>
 8009a86:	4b41      	ldr	r3, [pc, #260]	; (8009b8c <xTaskIncrementTick+0x14c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	60fb      	str	r3, [r7, #12]
 8009a8c:	4b40      	ldr	r3, [pc, #256]	; (8009b90 <xTaskIncrementTick+0x150>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a3e      	ldr	r2, [pc, #248]	; (8009b8c <xTaskIncrementTick+0x14c>)
 8009a92:	6013      	str	r3, [r2, #0]
 8009a94:	4a3e      	ldr	r2, [pc, #248]	; (8009b90 <xTaskIncrementTick+0x150>)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6013      	str	r3, [r2, #0]
 8009a9a:	4b3e      	ldr	r3, [pc, #248]	; (8009b94 <xTaskIncrementTick+0x154>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	4a3c      	ldr	r2, [pc, #240]	; (8009b94 <xTaskIncrementTick+0x154>)
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	f000 fabe 	bl	800a024 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009aa8:	4b3b      	ldr	r3, [pc, #236]	; (8009b98 <xTaskIncrementTick+0x158>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d348      	bcc.n	8009b44 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ab2:	4b36      	ldr	r3, [pc, #216]	; (8009b8c <xTaskIncrementTick+0x14c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d104      	bne.n	8009ac6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009abc:	4b36      	ldr	r3, [pc, #216]	; (8009b98 <xTaskIncrementTick+0x158>)
 8009abe:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac2:	601a      	str	r2, [r3, #0]
					break;
 8009ac4:	e03e      	b.n	8009b44 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ac6:	4b31      	ldr	r3, [pc, #196]	; (8009b8c <xTaskIncrementTick+0x14c>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d203      	bcs.n	8009ae6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ade:	4a2e      	ldr	r2, [pc, #184]	; (8009b98 <xTaskIncrementTick+0x158>)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009ae4:	e02e      	b.n	8009b44 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	3304      	adds	r3, #4
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe ff7a 	bl	80089e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d004      	beq.n	8009b02 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	3318      	adds	r3, #24
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fe ff71 	bl	80089e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	2201      	movs	r2, #1
 8009b08:	409a      	lsls	r2, r3
 8009b0a:	4b24      	ldr	r3, [pc, #144]	; (8009b9c <xTaskIncrementTick+0x15c>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	4a22      	ldr	r2, [pc, #136]	; (8009b9c <xTaskIncrementTick+0x15c>)
 8009b12:	6013      	str	r3, [r2, #0]
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b18:	4613      	mov	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4413      	add	r3, r2
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4a1f      	ldr	r2, [pc, #124]	; (8009ba0 <xTaskIncrementTick+0x160>)
 8009b22:	441a      	add	r2, r3
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	3304      	adds	r3, #4
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	f7fe fefd 	bl	800892a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b34:	4b1b      	ldr	r3, [pc, #108]	; (8009ba4 <xTaskIncrementTick+0x164>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d3b9      	bcc.n	8009ab2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b42:	e7b6      	b.n	8009ab2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b44:	4b17      	ldr	r3, [pc, #92]	; (8009ba4 <xTaskIncrementTick+0x164>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b4a:	4915      	ldr	r1, [pc, #84]	; (8009ba0 <xTaskIncrementTick+0x160>)
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	440b      	add	r3, r1
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d907      	bls.n	8009b6c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	617b      	str	r3, [r7, #20]
 8009b60:	e004      	b.n	8009b6c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009b62:	4b11      	ldr	r3, [pc, #68]	; (8009ba8 <xTaskIncrementTick+0x168>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	3301      	adds	r3, #1
 8009b68:	4a0f      	ldr	r2, [pc, #60]	; (8009ba8 <xTaskIncrementTick+0x168>)
 8009b6a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009b6c:	4b0f      	ldr	r3, [pc, #60]	; (8009bac <xTaskIncrementTick+0x16c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009b74:	2301      	movs	r3, #1
 8009b76:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009b78:	697b      	ldr	r3, [r7, #20]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	20000434 	.word	0x20000434
 8009b88:	20000410 	.word	0x20000410
 8009b8c:	200003c4 	.word	0x200003c4
 8009b90:	200003c8 	.word	0x200003c8
 8009b94:	20000424 	.word	0x20000424
 8009b98:	2000042c 	.word	0x2000042c
 8009b9c:	20000414 	.word	0x20000414
 8009ba0:	20000310 	.word	0x20000310
 8009ba4:	2000030c 	.word	0x2000030c
 8009ba8:	2000041c 	.word	0x2000041c
 8009bac:	20000420 	.word	0x20000420

08009bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b088      	sub	sp, #32
 8009bb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009bb6:	4b39      	ldr	r3, [pc, #228]	; (8009c9c <vTaskSwitchContext+0xec>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009bbe:	4b38      	ldr	r3, [pc, #224]	; (8009ca0 <vTaskSwitchContext+0xf0>)
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009bc4:	e065      	b.n	8009c92 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8009bc6:	4b36      	ldr	r3, [pc, #216]	; (8009ca0 <vTaskSwitchContext+0xf0>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009bcc:	4b35      	ldr	r3, [pc, #212]	; (8009ca4 <vTaskSwitchContext+0xf4>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd2:	61fb      	str	r3, [r7, #28]
 8009bd4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009bd8:	61bb      	str	r3, [r7, #24]
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	69ba      	ldr	r2, [r7, #24]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d111      	bne.n	8009c08 <vTaskSwitchContext+0x58>
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	3304      	adds	r3, #4
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	69ba      	ldr	r2, [r7, #24]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d10b      	bne.n	8009c08 <vTaskSwitchContext+0x58>
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	69ba      	ldr	r2, [r7, #24]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d105      	bne.n	8009c08 <vTaskSwitchContext+0x58>
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	330c      	adds	r3, #12
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	69ba      	ldr	r2, [r7, #24]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d008      	beq.n	8009c1a <vTaskSwitchContext+0x6a>
 8009c08:	4b26      	ldr	r3, [pc, #152]	; (8009ca4 <vTaskSwitchContext+0xf4>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	4b25      	ldr	r3, [pc, #148]	; (8009ca4 <vTaskSwitchContext+0xf4>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	3334      	adds	r3, #52	; 0x34
 8009c12:	4619      	mov	r1, r3
 8009c14:	4610      	mov	r0, r2
 8009c16:	f7f6 fcf9 	bl	800060c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c1a:	4b23      	ldr	r3, [pc, #140]	; (8009ca8 <vTaskSwitchContext+0xf8>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	fab3 f383 	clz	r3, r3
 8009c26:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009c28:	7afb      	ldrb	r3, [r7, #11]
 8009c2a:	f1c3 031f 	rsb	r3, r3, #31
 8009c2e:	617b      	str	r3, [r7, #20]
 8009c30:	491e      	ldr	r1, [pc, #120]	; (8009cac <vTaskSwitchContext+0xfc>)
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	4613      	mov	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4413      	add	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	440b      	add	r3, r1
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d109      	bne.n	8009c58 <vTaskSwitchContext+0xa8>
	__asm volatile
 8009c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	607b      	str	r3, [r7, #4]
 8009c56:	e7fe      	b.n	8009c56 <vTaskSwitchContext+0xa6>
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4413      	add	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	4a12      	ldr	r2, [pc, #72]	; (8009cac <vTaskSwitchContext+0xfc>)
 8009c64:	4413      	add	r3, r2
 8009c66:	613b      	str	r3, [r7, #16]
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	685a      	ldr	r2, [r3, #4]
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	605a      	str	r2, [r3, #4]
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	685a      	ldr	r2, [r3, #4]
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	3308      	adds	r3, #8
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d104      	bne.n	8009c88 <vTaskSwitchContext+0xd8>
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	605a      	str	r2, [r3, #4]
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	4a05      	ldr	r2, [pc, #20]	; (8009ca4 <vTaskSwitchContext+0xf4>)
 8009c90:	6013      	str	r3, [r2, #0]
}
 8009c92:	bf00      	nop
 8009c94:	3720      	adds	r7, #32
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000434 	.word	0x20000434
 8009ca0:	20000420 	.word	0x20000420
 8009ca4:	2000030c 	.word	0x2000030c
 8009ca8:	20000414 	.word	0x20000414
 8009cac:	20000310 	.word	0x20000310

08009cb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d109      	bne.n	8009cd4 <vTaskPlaceOnEventList+0x24>
 8009cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	60fb      	str	r3, [r7, #12]
 8009cd2:	e7fe      	b.n	8009cd2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cd4:	4b07      	ldr	r3, [pc, #28]	; (8009cf4 <vTaskPlaceOnEventList+0x44>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3318      	adds	r3, #24
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7fe fe48 	bl	8008972 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ce2:	2101      	movs	r1, #1
 8009ce4:	6838      	ldr	r0, [r7, #0]
 8009ce6:	f000 fa5f 	bl	800a1a8 <prvAddCurrentTaskToDelayedList>
}
 8009cea:	bf00      	nop
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	2000030c 	.word	0x2000030c

08009cf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d109      	bne.n	8009d22 <xTaskRemoveFromEventList+0x2a>
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	60fb      	str	r3, [r7, #12]
 8009d20:	e7fe      	b.n	8009d20 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	3318      	adds	r3, #24
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7fe fe5c 	bl	80089e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d2c:	4b1d      	ldr	r3, [pc, #116]	; (8009da4 <xTaskRemoveFromEventList+0xac>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d11c      	bne.n	8009d6e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	3304      	adds	r3, #4
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fe fe53 	bl	80089e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d42:	2201      	movs	r2, #1
 8009d44:	409a      	lsls	r2, r3
 8009d46:	4b18      	ldr	r3, [pc, #96]	; (8009da8 <xTaskRemoveFromEventList+0xb0>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	4a16      	ldr	r2, [pc, #88]	; (8009da8 <xTaskRemoveFromEventList+0xb0>)
 8009d4e:	6013      	str	r3, [r2, #0]
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d54:	4613      	mov	r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4a13      	ldr	r2, [pc, #76]	; (8009dac <xTaskRemoveFromEventList+0xb4>)
 8009d5e:	441a      	add	r2, r3
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	3304      	adds	r3, #4
 8009d64:	4619      	mov	r1, r3
 8009d66:	4610      	mov	r0, r2
 8009d68:	f7fe fddf 	bl	800892a <vListInsertEnd>
 8009d6c:	e005      	b.n	8009d7a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	3318      	adds	r3, #24
 8009d72:	4619      	mov	r1, r3
 8009d74:	480e      	ldr	r0, [pc, #56]	; (8009db0 <xTaskRemoveFromEventList+0xb8>)
 8009d76:	f7fe fdd8 	bl	800892a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d7e:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <xTaskRemoveFromEventList+0xbc>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d905      	bls.n	8009d94 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009d8c:	4b0a      	ldr	r3, [pc, #40]	; (8009db8 <xTaskRemoveFromEventList+0xc0>)
 8009d8e:	2201      	movs	r2, #1
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	e001      	b.n	8009d98 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009d94:	2300      	movs	r3, #0
 8009d96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009d98:	697b      	ldr	r3, [r7, #20]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20000434 	.word	0x20000434
 8009da8:	20000414 	.word	0x20000414
 8009dac:	20000310 	.word	0x20000310
 8009db0:	200003cc 	.word	0x200003cc
 8009db4:	2000030c 	.word	0x2000030c
 8009db8:	20000420 	.word	0x20000420

08009dbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009dc4:	4b06      	ldr	r3, [pc, #24]	; (8009de0 <vTaskInternalSetTimeOutState+0x24>)
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009dcc:	4b05      	ldr	r3, [pc, #20]	; (8009de4 <vTaskInternalSetTimeOutState+0x28>)
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	605a      	str	r2, [r3, #4]
}
 8009dd4:	bf00      	nop
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	20000424 	.word	0x20000424
 8009de4:	20000410 	.word	0x20000410

08009de8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b088      	sub	sp, #32
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d109      	bne.n	8009e0c <xTaskCheckForTimeOut+0x24>
 8009df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfc:	f383 8811 	msr	BASEPRI, r3
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	613b      	str	r3, [r7, #16]
 8009e0a:	e7fe      	b.n	8009e0a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d109      	bne.n	8009e26 <xTaskCheckForTimeOut+0x3e>
 8009e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e16:	f383 8811 	msr	BASEPRI, r3
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	e7fe      	b.n	8009e24 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009e26:	f000 fb49 	bl	800a4bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e2a:	4b1d      	ldr	r3, [pc, #116]	; (8009ea0 <xTaskCheckForTimeOut+0xb8>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	69ba      	ldr	r2, [r7, #24]
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e42:	d102      	bne.n	8009e4a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009e44:	2300      	movs	r3, #0
 8009e46:	61fb      	str	r3, [r7, #28]
 8009e48:	e023      	b.n	8009e92 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	4b15      	ldr	r3, [pc, #84]	; (8009ea4 <xTaskCheckForTimeOut+0xbc>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d007      	beq.n	8009e66 <xTaskCheckForTimeOut+0x7e>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	69ba      	ldr	r2, [r7, #24]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d302      	bcc.n	8009e66 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009e60:	2301      	movs	r3, #1
 8009e62:	61fb      	str	r3, [r7, #28]
 8009e64:	e015      	b.n	8009e92 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	697a      	ldr	r2, [r7, #20]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d20b      	bcs.n	8009e88 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	1ad2      	subs	r2, r2, r3
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7ff ff9d 	bl	8009dbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009e82:	2300      	movs	r3, #0
 8009e84:	61fb      	str	r3, [r7, #28]
 8009e86:	e004      	b.n	8009e92 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009e92:	f000 fb41 	bl	800a518 <vPortExitCritical>

	return xReturn;
 8009e96:	69fb      	ldr	r3, [r7, #28]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3720      	adds	r7, #32
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	20000410 	.word	0x20000410
 8009ea4:	20000424 	.word	0x20000424

08009ea8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009eac:	4b03      	ldr	r3, [pc, #12]	; (8009ebc <vTaskMissedYield+0x14>)
 8009eae:	2201      	movs	r2, #1
 8009eb0:	601a      	str	r2, [r3, #0]
}
 8009eb2:	bf00      	nop
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	20000420 	.word	0x20000420

08009ec0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ec8:	f000 f852 	bl	8009f70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ecc:	4b06      	ldr	r3, [pc, #24]	; (8009ee8 <prvIdleTask+0x28>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d9f9      	bls.n	8009ec8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ed4:	4b05      	ldr	r3, [pc, #20]	; (8009eec <prvIdleTask+0x2c>)
 8009ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eda:	601a      	str	r2, [r3, #0]
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ee4:	e7f0      	b.n	8009ec8 <prvIdleTask+0x8>
 8009ee6:	bf00      	nop
 8009ee8:	20000310 	.word	0x20000310
 8009eec:	e000ed04 	.word	0xe000ed04

08009ef0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	607b      	str	r3, [r7, #4]
 8009efa:	e00c      	b.n	8009f16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	4613      	mov	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	4413      	add	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4a12      	ldr	r2, [pc, #72]	; (8009f50 <prvInitialiseTaskLists+0x60>)
 8009f08:	4413      	add	r3, r2
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe fce0 	bl	80088d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	3301      	adds	r3, #1
 8009f14:	607b      	str	r3, [r7, #4]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b06      	cmp	r3, #6
 8009f1a:	d9ef      	bls.n	8009efc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f1c:	480d      	ldr	r0, [pc, #52]	; (8009f54 <prvInitialiseTaskLists+0x64>)
 8009f1e:	f7fe fcd7 	bl	80088d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f22:	480d      	ldr	r0, [pc, #52]	; (8009f58 <prvInitialiseTaskLists+0x68>)
 8009f24:	f7fe fcd4 	bl	80088d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f28:	480c      	ldr	r0, [pc, #48]	; (8009f5c <prvInitialiseTaskLists+0x6c>)
 8009f2a:	f7fe fcd1 	bl	80088d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009f2e:	480c      	ldr	r0, [pc, #48]	; (8009f60 <prvInitialiseTaskLists+0x70>)
 8009f30:	f7fe fcce 	bl	80088d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009f34:	480b      	ldr	r0, [pc, #44]	; (8009f64 <prvInitialiseTaskLists+0x74>)
 8009f36:	f7fe fccb 	bl	80088d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f3a:	4b0b      	ldr	r3, [pc, #44]	; (8009f68 <prvInitialiseTaskLists+0x78>)
 8009f3c:	4a05      	ldr	r2, [pc, #20]	; (8009f54 <prvInitialiseTaskLists+0x64>)
 8009f3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f40:	4b0a      	ldr	r3, [pc, #40]	; (8009f6c <prvInitialiseTaskLists+0x7c>)
 8009f42:	4a05      	ldr	r2, [pc, #20]	; (8009f58 <prvInitialiseTaskLists+0x68>)
 8009f44:	601a      	str	r2, [r3, #0]
}
 8009f46:	bf00      	nop
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	20000310 	.word	0x20000310
 8009f54:	2000039c 	.word	0x2000039c
 8009f58:	200003b0 	.word	0x200003b0
 8009f5c:	200003cc 	.word	0x200003cc
 8009f60:	200003e0 	.word	0x200003e0
 8009f64:	200003f8 	.word	0x200003f8
 8009f68:	200003c4 	.word	0x200003c4
 8009f6c:	200003c8 	.word	0x200003c8

08009f70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f76:	e019      	b.n	8009fac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009f78:	f000 faa0 	bl	800a4bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f7c:	4b0f      	ldr	r3, [pc, #60]	; (8009fbc <prvCheckTasksWaitingTermination+0x4c>)
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	3304      	adds	r3, #4
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fe fd2b 	bl	80089e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009f8e:	4b0c      	ldr	r3, [pc, #48]	; (8009fc0 <prvCheckTasksWaitingTermination+0x50>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3b01      	subs	r3, #1
 8009f94:	4a0a      	ldr	r2, [pc, #40]	; (8009fc0 <prvCheckTasksWaitingTermination+0x50>)
 8009f96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009f98:	4b0a      	ldr	r3, [pc, #40]	; (8009fc4 <prvCheckTasksWaitingTermination+0x54>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	4a09      	ldr	r2, [pc, #36]	; (8009fc4 <prvCheckTasksWaitingTermination+0x54>)
 8009fa0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009fa2:	f000 fab9 	bl	800a518 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f80e 	bl	8009fc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fac:	4b05      	ldr	r3, [pc, #20]	; (8009fc4 <prvCheckTasksWaitingTermination+0x54>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1e1      	bne.n	8009f78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	200003e0 	.word	0x200003e0
 8009fc0:	2000040c 	.word	0x2000040c
 8009fc4:	200003f4 	.word	0x200003f4

08009fc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d108      	bne.n	8009fec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 fc48 	bl	800a874 <vPortFree>
				vPortFree( pxTCB );
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 fc45 	bl	800a874 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009fea:	e017      	b.n	800a01c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d103      	bne.n	8009ffe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fc3c 	bl	800a874 <vPortFree>
	}
 8009ffc:	e00e      	b.n	800a01c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a004:	2b02      	cmp	r3, #2
 800a006:	d009      	beq.n	800a01c <prvDeleteTCB+0x54>
 800a008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	60fb      	str	r3, [r7, #12]
 800a01a:	e7fe      	b.n	800a01a <prvDeleteTCB+0x52>
	}
 800a01c:	bf00      	nop
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a02a:	4b0c      	ldr	r3, [pc, #48]	; (800a05c <prvResetNextTaskUnblockTime+0x38>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d104      	bne.n	800a03e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a034:	4b0a      	ldr	r3, [pc, #40]	; (800a060 <prvResetNextTaskUnblockTime+0x3c>)
 800a036:	f04f 32ff 	mov.w	r2, #4294967295
 800a03a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a03c:	e008      	b.n	800a050 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a03e:	4b07      	ldr	r3, [pc, #28]	; (800a05c <prvResetNextTaskUnblockTime+0x38>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	4a04      	ldr	r2, [pc, #16]	; (800a060 <prvResetNextTaskUnblockTime+0x3c>)
 800a04e:	6013      	str	r3, [r2, #0]
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	200003c4 	.word	0x200003c4
 800a060:	2000042c 	.word	0x2000042c

0800a064 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a06a:	4b0b      	ldr	r3, [pc, #44]	; (800a098 <xTaskGetSchedulerState+0x34>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d102      	bne.n	800a078 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a072:	2301      	movs	r3, #1
 800a074:	607b      	str	r3, [r7, #4]
 800a076:	e008      	b.n	800a08a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a078:	4b08      	ldr	r3, [pc, #32]	; (800a09c <xTaskGetSchedulerState+0x38>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d102      	bne.n	800a086 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a080:	2302      	movs	r3, #2
 800a082:	607b      	str	r3, [r7, #4]
 800a084:	e001      	b.n	800a08a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a086:	2300      	movs	r3, #0
 800a088:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a08a:	687b      	ldr	r3, [r7, #4]
	}
 800a08c:	4618      	mov	r0, r3
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr
 800a098:	20000418 	.word	0x20000418
 800a09c:	20000434 	.word	0x20000434

0800a0a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d06c      	beq.n	800a190 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a0b6:	4b39      	ldr	r3, [pc, #228]	; (800a19c <xTaskPriorityDisinherit+0xfc>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d009      	beq.n	800a0d4 <xTaskPriorityDisinherit+0x34>
 800a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	60fb      	str	r3, [r7, #12]
 800a0d2:	e7fe      	b.n	800a0d2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d109      	bne.n	800a0f0 <xTaskPriorityDisinherit+0x50>
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	60bb      	str	r3, [r7, #8]
 800a0ee:	e7fe      	b.n	800a0ee <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0f4:	1e5a      	subs	r2, r3, #1
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a102:	429a      	cmp	r2, r3
 800a104:	d044      	beq.n	800a190 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d140      	bne.n	800a190 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	3304      	adds	r3, #4
 800a112:	4618      	mov	r0, r3
 800a114:	f7fe fc66 	bl	80089e4 <uxListRemove>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d115      	bne.n	800a14a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a122:	491f      	ldr	r1, [pc, #124]	; (800a1a0 <xTaskPriorityDisinherit+0x100>)
 800a124:	4613      	mov	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	4413      	add	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	440b      	add	r3, r1
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10a      	bne.n	800a14a <xTaskPriorityDisinherit+0xaa>
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a138:	2201      	movs	r2, #1
 800a13a:	fa02 f303 	lsl.w	r3, r2, r3
 800a13e:	43da      	mvns	r2, r3
 800a140:	4b18      	ldr	r3, [pc, #96]	; (800a1a4 <xTaskPriorityDisinherit+0x104>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4013      	ands	r3, r2
 800a146:	4a17      	ldr	r2, [pc, #92]	; (800a1a4 <xTaskPriorityDisinherit+0x104>)
 800a148:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a156:	f1c3 0207 	rsb	r2, r3, #7
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a162:	2201      	movs	r2, #1
 800a164:	409a      	lsls	r2, r3
 800a166:	4b0f      	ldr	r3, [pc, #60]	; (800a1a4 <xTaskPriorityDisinherit+0x104>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	4a0d      	ldr	r2, [pc, #52]	; (800a1a4 <xTaskPriorityDisinherit+0x104>)
 800a16e:	6013      	str	r3, [r2, #0]
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a174:	4613      	mov	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4413      	add	r3, r2
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	4a08      	ldr	r2, [pc, #32]	; (800a1a0 <xTaskPriorityDisinherit+0x100>)
 800a17e:	441a      	add	r2, r3
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	3304      	adds	r3, #4
 800a184:	4619      	mov	r1, r3
 800a186:	4610      	mov	r0, r2
 800a188:	f7fe fbcf 	bl	800892a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a18c:	2301      	movs	r3, #1
 800a18e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a190:	697b      	ldr	r3, [r7, #20]
	}
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	2000030c 	.word	0x2000030c
 800a1a0:	20000310 	.word	0x20000310
 800a1a4:	20000414 	.word	0x20000414

0800a1a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a1b2:	4b29      	ldr	r3, [pc, #164]	; (800a258 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1b8:	4b28      	ldr	r3, [pc, #160]	; (800a25c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3304      	adds	r3, #4
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fe fc10 	bl	80089e4 <uxListRemove>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10b      	bne.n	800a1e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a1ca:	4b24      	ldr	r3, [pc, #144]	; (800a25c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d6:	43da      	mvns	r2, r3
 800a1d8:	4b21      	ldr	r3, [pc, #132]	; (800a260 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4013      	ands	r3, r2
 800a1de:	4a20      	ldr	r2, [pc, #128]	; (800a260 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a1e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e8:	d10a      	bne.n	800a200 <prvAddCurrentTaskToDelayedList+0x58>
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d007      	beq.n	800a200 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1f0:	4b1a      	ldr	r3, [pc, #104]	; (800a25c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	481a      	ldr	r0, [pc, #104]	; (800a264 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a1fa:	f7fe fb96 	bl	800892a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1fe:	e026      	b.n	800a24e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4413      	add	r3, r2
 800a206:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a208:	4b14      	ldr	r3, [pc, #80]	; (800a25c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	429a      	cmp	r2, r3
 800a216:	d209      	bcs.n	800a22c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a218:	4b13      	ldr	r3, [pc, #76]	; (800a268 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	4b0f      	ldr	r3, [pc, #60]	; (800a25c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3304      	adds	r3, #4
 800a222:	4619      	mov	r1, r3
 800a224:	4610      	mov	r0, r2
 800a226:	f7fe fba4 	bl	8008972 <vListInsert>
}
 800a22a:	e010      	b.n	800a24e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a22c:	4b0f      	ldr	r3, [pc, #60]	; (800a26c <prvAddCurrentTaskToDelayedList+0xc4>)
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	4b0a      	ldr	r3, [pc, #40]	; (800a25c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	3304      	adds	r3, #4
 800a236:	4619      	mov	r1, r3
 800a238:	4610      	mov	r0, r2
 800a23a:	f7fe fb9a 	bl	8008972 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a23e:	4b0c      	ldr	r3, [pc, #48]	; (800a270 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	429a      	cmp	r2, r3
 800a246:	d202      	bcs.n	800a24e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a248:	4a09      	ldr	r2, [pc, #36]	; (800a270 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	6013      	str	r3, [r2, #0]
}
 800a24e:	bf00      	nop
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	20000410 	.word	0x20000410
 800a25c:	2000030c 	.word	0x2000030c
 800a260:	20000414 	.word	0x20000414
 800a264:	200003f8 	.word	0x200003f8
 800a268:	200003c8 	.word	0x200003c8
 800a26c:	200003c4 	.word	0x200003c4
 800a270:	2000042c 	.word	0x2000042c

0800a274 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	3b04      	subs	r3, #4
 800a284:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a28c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3b04      	subs	r3, #4
 800a292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	f023 0201 	bic.w	r2, r3, #1
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	3b04      	subs	r3, #4
 800a2a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a2a4:	4a0c      	ldr	r2, [pc, #48]	; (800a2d8 <pxPortInitialiseStack+0x64>)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	3b14      	subs	r3, #20
 800a2ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	3b04      	subs	r3, #4
 800a2ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f06f 0202 	mvn.w	r2, #2
 800a2c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	3b20      	subs	r3, #32
 800a2c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3714      	adds	r7, #20
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	0800a2dd 	.word	0x0800a2dd

0800a2dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a2e6:	4b11      	ldr	r3, [pc, #68]	; (800a32c <prvTaskExitError+0x50>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ee:	d009      	beq.n	800a304 <prvTaskExitError+0x28>
 800a2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	60fb      	str	r3, [r7, #12]
 800a302:	e7fe      	b.n	800a302 <prvTaskExitError+0x26>
 800a304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a308:	f383 8811 	msr	BASEPRI, r3
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a316:	bf00      	nop
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d0fc      	beq.n	800a318 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a31e:	bf00      	nop
 800a320:	3714      	adds	r7, #20
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	2000002c 	.word	0x2000002c

0800a330 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a330:	4b07      	ldr	r3, [pc, #28]	; (800a350 <pxCurrentTCBConst2>)
 800a332:	6819      	ldr	r1, [r3, #0]
 800a334:	6808      	ldr	r0, [r1, #0]
 800a336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33a:	f380 8809 	msr	PSP, r0
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f04f 0000 	mov.w	r0, #0
 800a346:	f380 8811 	msr	BASEPRI, r0
 800a34a:	4770      	bx	lr
 800a34c:	f3af 8000 	nop.w

0800a350 <pxCurrentTCBConst2>:
 800a350:	2000030c 	.word	0x2000030c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a354:	bf00      	nop
 800a356:	bf00      	nop

0800a358 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a358:	4808      	ldr	r0, [pc, #32]	; (800a37c <prvPortStartFirstTask+0x24>)
 800a35a:	6800      	ldr	r0, [r0, #0]
 800a35c:	6800      	ldr	r0, [r0, #0]
 800a35e:	f380 8808 	msr	MSP, r0
 800a362:	f04f 0000 	mov.w	r0, #0
 800a366:	f380 8814 	msr	CONTROL, r0
 800a36a:	b662      	cpsie	i
 800a36c:	b661      	cpsie	f
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	df00      	svc	0
 800a378:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a37a:	bf00      	nop
 800a37c:	e000ed08 	.word	0xe000ed08

0800a380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a386:	4b44      	ldr	r3, [pc, #272]	; (800a498 <xPortStartScheduler+0x118>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a44      	ldr	r2, [pc, #272]	; (800a49c <xPortStartScheduler+0x11c>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d109      	bne.n	800a3a4 <xPortStartScheduler+0x24>
 800a390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	613b      	str	r3, [r7, #16]
 800a3a2:	e7fe      	b.n	800a3a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a3a4:	4b3c      	ldr	r3, [pc, #240]	; (800a498 <xPortStartScheduler+0x118>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a3d      	ldr	r2, [pc, #244]	; (800a4a0 <xPortStartScheduler+0x120>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d109      	bne.n	800a3c2 <xPortStartScheduler+0x42>
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	60fb      	str	r3, [r7, #12]
 800a3c0:	e7fe      	b.n	800a3c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a3c2:	4b38      	ldr	r3, [pc, #224]	; (800a4a4 <xPortStartScheduler+0x124>)
 800a3c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	22ff      	movs	r2, #255	; 0xff
 800a3d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a3dc:	78fb      	ldrb	r3, [r7, #3]
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a3e4:	b2da      	uxtb	r2, r3
 800a3e6:	4b30      	ldr	r3, [pc, #192]	; (800a4a8 <xPortStartScheduler+0x128>)
 800a3e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a3ea:	4b30      	ldr	r3, [pc, #192]	; (800a4ac <xPortStartScheduler+0x12c>)
 800a3ec:	2207      	movs	r2, #7
 800a3ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3f0:	e009      	b.n	800a406 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a3f2:	4b2e      	ldr	r3, [pc, #184]	; (800a4ac <xPortStartScheduler+0x12c>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	4a2c      	ldr	r2, [pc, #176]	; (800a4ac <xPortStartScheduler+0x12c>)
 800a3fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	005b      	lsls	r3, r3, #1
 800a402:	b2db      	uxtb	r3, r3
 800a404:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a406:	78fb      	ldrb	r3, [r7, #3]
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a40e:	2b80      	cmp	r3, #128	; 0x80
 800a410:	d0ef      	beq.n	800a3f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a412:	4b26      	ldr	r3, [pc, #152]	; (800a4ac <xPortStartScheduler+0x12c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f1c3 0307 	rsb	r3, r3, #7
 800a41a:	2b04      	cmp	r3, #4
 800a41c:	d009      	beq.n	800a432 <xPortStartScheduler+0xb2>
 800a41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	60bb      	str	r3, [r7, #8]
 800a430:	e7fe      	b.n	800a430 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a432:	4b1e      	ldr	r3, [pc, #120]	; (800a4ac <xPortStartScheduler+0x12c>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	021b      	lsls	r3, r3, #8
 800a438:	4a1c      	ldr	r2, [pc, #112]	; (800a4ac <xPortStartScheduler+0x12c>)
 800a43a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a43c:	4b1b      	ldr	r3, [pc, #108]	; (800a4ac <xPortStartScheduler+0x12c>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a444:	4a19      	ldr	r2, [pc, #100]	; (800a4ac <xPortStartScheduler+0x12c>)
 800a446:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	b2da      	uxtb	r2, r3
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a450:	4b17      	ldr	r3, [pc, #92]	; (800a4b0 <xPortStartScheduler+0x130>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a16      	ldr	r2, [pc, #88]	; (800a4b0 <xPortStartScheduler+0x130>)
 800a456:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a45a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a45c:	4b14      	ldr	r3, [pc, #80]	; (800a4b0 <xPortStartScheduler+0x130>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a13      	ldr	r2, [pc, #76]	; (800a4b0 <xPortStartScheduler+0x130>)
 800a462:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a466:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a468:	f000 f8d6 	bl	800a618 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a46c:	4b11      	ldr	r3, [pc, #68]	; (800a4b4 <xPortStartScheduler+0x134>)
 800a46e:	2200      	movs	r2, #0
 800a470:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a472:	f000 f8f5 	bl	800a660 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a476:	4b10      	ldr	r3, [pc, #64]	; (800a4b8 <xPortStartScheduler+0x138>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a0f      	ldr	r2, [pc, #60]	; (800a4b8 <xPortStartScheduler+0x138>)
 800a47c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a480:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a482:	f7ff ff69 	bl	800a358 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a486:	f7ff fb93 	bl	8009bb0 <vTaskSwitchContext>
	prvTaskExitError();
 800a48a:	f7ff ff27 	bl	800a2dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3718      	adds	r7, #24
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	e000ed00 	.word	0xe000ed00
 800a49c:	410fc271 	.word	0x410fc271
 800a4a0:	410fc270 	.word	0x410fc270
 800a4a4:	e000e400 	.word	0xe000e400
 800a4a8:	20000438 	.word	0x20000438
 800a4ac:	2000043c 	.word	0x2000043c
 800a4b0:	e000ed20 	.word	0xe000ed20
 800a4b4:	2000002c 	.word	0x2000002c
 800a4b8:	e000ef34 	.word	0xe000ef34

0800a4bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a4d4:	4b0e      	ldr	r3, [pc, #56]	; (800a510 <vPortEnterCritical+0x54>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	4a0d      	ldr	r2, [pc, #52]	; (800a510 <vPortEnterCritical+0x54>)
 800a4dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a4de:	4b0c      	ldr	r3, [pc, #48]	; (800a510 <vPortEnterCritical+0x54>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d10e      	bne.n	800a504 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a4e6:	4b0b      	ldr	r3, [pc, #44]	; (800a514 <vPortEnterCritical+0x58>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d009      	beq.n	800a504 <vPortEnterCritical+0x48>
 800a4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	603b      	str	r3, [r7, #0]
 800a502:	e7fe      	b.n	800a502 <vPortEnterCritical+0x46>
	}
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr
 800a510:	2000002c 	.word	0x2000002c
 800a514:	e000ed04 	.word	0xe000ed04

0800a518 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a51e:	4b11      	ldr	r3, [pc, #68]	; (800a564 <vPortExitCritical+0x4c>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d109      	bne.n	800a53a <vPortExitCritical+0x22>
 800a526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	607b      	str	r3, [r7, #4]
 800a538:	e7fe      	b.n	800a538 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a53a:	4b0a      	ldr	r3, [pc, #40]	; (800a564 <vPortExitCritical+0x4c>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3b01      	subs	r3, #1
 800a540:	4a08      	ldr	r2, [pc, #32]	; (800a564 <vPortExitCritical+0x4c>)
 800a542:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a544:	4b07      	ldr	r3, [pc, #28]	; (800a564 <vPortExitCritical+0x4c>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d104      	bne.n	800a556 <vPortExitCritical+0x3e>
 800a54c:	2300      	movs	r3, #0
 800a54e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a556:	bf00      	nop
 800a558:	370c      	adds	r7, #12
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	2000002c 	.word	0x2000002c
	...

0800a570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a570:	f3ef 8009 	mrs	r0, PSP
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	4b15      	ldr	r3, [pc, #84]	; (800a5d0 <pxCurrentTCBConst>)
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	f01e 0f10 	tst.w	lr, #16
 800a580:	bf08      	it	eq
 800a582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58a:	6010      	str	r0, [r2, #0]
 800a58c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a590:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a594:	f380 8811 	msr	BASEPRI, r0
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f7ff fb06 	bl	8009bb0 <vTaskSwitchContext>
 800a5a4:	f04f 0000 	mov.w	r0, #0
 800a5a8:	f380 8811 	msr	BASEPRI, r0
 800a5ac:	bc09      	pop	{r0, r3}
 800a5ae:	6819      	ldr	r1, [r3, #0]
 800a5b0:	6808      	ldr	r0, [r1, #0]
 800a5b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b6:	f01e 0f10 	tst.w	lr, #16
 800a5ba:	bf08      	it	eq
 800a5bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a5c0:	f380 8809 	msr	PSP, r0
 800a5c4:	f3bf 8f6f 	isb	sy
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	f3af 8000 	nop.w

0800a5d0 <pxCurrentTCBConst>:
 800a5d0:	2000030c 	.word	0x2000030c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a5d4:	bf00      	nop
 800a5d6:	bf00      	nop

0800a5d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a5f0:	f7ff fa26 	bl	8009a40 <xTaskIncrementTick>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d003      	beq.n	800a602 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a5fa:	4b06      	ldr	r3, [pc, #24]	; (800a614 <SysTick_Handler+0x3c>)
 800a5fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	2300      	movs	r3, #0
 800a604:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a60c:	bf00      	nop
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	e000ed04 	.word	0xe000ed04

0800a618 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a618:	b480      	push	{r7}
 800a61a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a61c:	4b0b      	ldr	r3, [pc, #44]	; (800a64c <vPortSetupTimerInterrupt+0x34>)
 800a61e:	2200      	movs	r2, #0
 800a620:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a622:	4b0b      	ldr	r3, [pc, #44]	; (800a650 <vPortSetupTimerInterrupt+0x38>)
 800a624:	2200      	movs	r2, #0
 800a626:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a628:	4b0a      	ldr	r3, [pc, #40]	; (800a654 <vPortSetupTimerInterrupt+0x3c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a0a      	ldr	r2, [pc, #40]	; (800a658 <vPortSetupTimerInterrupt+0x40>)
 800a62e:	fba2 2303 	umull	r2, r3, r2, r3
 800a632:	099b      	lsrs	r3, r3, #6
 800a634:	4a09      	ldr	r2, [pc, #36]	; (800a65c <vPortSetupTimerInterrupt+0x44>)
 800a636:	3b01      	subs	r3, #1
 800a638:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a63a:	4b04      	ldr	r3, [pc, #16]	; (800a64c <vPortSetupTimerInterrupt+0x34>)
 800a63c:	2207      	movs	r2, #7
 800a63e:	601a      	str	r2, [r3, #0]
}
 800a640:	bf00      	nop
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	e000e010 	.word	0xe000e010
 800a650:	e000e018 	.word	0xe000e018
 800a654:	20000000 	.word	0x20000000
 800a658:	10624dd3 	.word	0x10624dd3
 800a65c:	e000e014 	.word	0xe000e014

0800a660 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a660:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a670 <vPortEnableVFP+0x10>
 800a664:	6801      	ldr	r1, [r0, #0]
 800a666:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a66a:	6001      	str	r1, [r0, #0]
 800a66c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a66e:	bf00      	nop
 800a670:	e000ed88 	.word	0xe000ed88

0800a674 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a67a:	f3ef 8305 	mrs	r3, IPSR
 800a67e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2b0f      	cmp	r3, #15
 800a684:	d913      	bls.n	800a6ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a686:	4a16      	ldr	r2, [pc, #88]	; (800a6e0 <vPortValidateInterruptPriority+0x6c>)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	4413      	add	r3, r2
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a690:	4b14      	ldr	r3, [pc, #80]	; (800a6e4 <vPortValidateInterruptPriority+0x70>)
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	7afa      	ldrb	r2, [r7, #11]
 800a696:	429a      	cmp	r2, r3
 800a698:	d209      	bcs.n	800a6ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	607b      	str	r3, [r7, #4]
 800a6ac:	e7fe      	b.n	800a6ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a6ae:	4b0e      	ldr	r3, [pc, #56]	; (800a6e8 <vPortValidateInterruptPriority+0x74>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a6b6:	4b0d      	ldr	r3, [pc, #52]	; (800a6ec <vPortValidateInterruptPriority+0x78>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d909      	bls.n	800a6d2 <vPortValidateInterruptPriority+0x5e>
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	603b      	str	r3, [r7, #0]
 800a6d0:	e7fe      	b.n	800a6d0 <vPortValidateInterruptPriority+0x5c>
	}
 800a6d2:	bf00      	nop
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	e000e3f0 	.word	0xe000e3f0
 800a6e4:	20000438 	.word	0x20000438
 800a6e8:	e000ed0c 	.word	0xe000ed0c
 800a6ec:	2000043c 	.word	0x2000043c

0800a6f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08a      	sub	sp, #40	; 0x28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a6fc:	f7ff f8f6 	bl	80098ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a700:	4b57      	ldr	r3, [pc, #348]	; (800a860 <pvPortMalloc+0x170>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a708:	f000 f90c 	bl	800a924 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a70c:	4b55      	ldr	r3, [pc, #340]	; (800a864 <pvPortMalloc+0x174>)
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4013      	ands	r3, r2
 800a714:	2b00      	cmp	r3, #0
 800a716:	f040 808c 	bne.w	800a832 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d01c      	beq.n	800a75a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a720:	2208      	movs	r2, #8
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4413      	add	r3, r2
 800a726:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f003 0307 	and.w	r3, r3, #7
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d013      	beq.n	800a75a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f023 0307 	bic.w	r3, r3, #7
 800a738:	3308      	adds	r3, #8
 800a73a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f003 0307 	and.w	r3, r3, #7
 800a742:	2b00      	cmp	r3, #0
 800a744:	d009      	beq.n	800a75a <pvPortMalloc+0x6a>
 800a746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	617b      	str	r3, [r7, #20]
 800a758:	e7fe      	b.n	800a758 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d068      	beq.n	800a832 <pvPortMalloc+0x142>
 800a760:	4b41      	ldr	r3, [pc, #260]	; (800a868 <pvPortMalloc+0x178>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	429a      	cmp	r2, r3
 800a768:	d863      	bhi.n	800a832 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a76a:	4b40      	ldr	r3, [pc, #256]	; (800a86c <pvPortMalloc+0x17c>)
 800a76c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a76e:	4b3f      	ldr	r3, [pc, #252]	; (800a86c <pvPortMalloc+0x17c>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a774:	e004      	b.n	800a780 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a778:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	429a      	cmp	r2, r3
 800a788:	d903      	bls.n	800a792 <pvPortMalloc+0xa2>
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1f1      	bne.n	800a776 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a792:	4b33      	ldr	r3, [pc, #204]	; (800a860 <pvPortMalloc+0x170>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a798:	429a      	cmp	r2, r3
 800a79a:	d04a      	beq.n	800a832 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a79c:	6a3b      	ldr	r3, [r7, #32]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2208      	movs	r2, #8
 800a7a2:	4413      	add	r3, r2
 800a7a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	6a3b      	ldr	r3, [r7, #32]
 800a7ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	685a      	ldr	r2, [r3, #4]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	1ad2      	subs	r2, r2, r3
 800a7b6:	2308      	movs	r3, #8
 800a7b8:	005b      	lsls	r3, r3, #1
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d91e      	bls.n	800a7fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a7be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	f003 0307 	and.w	r3, r3, #7
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d009      	beq.n	800a7e4 <pvPortMalloc+0xf4>
 800a7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	613b      	str	r3, [r7, #16]
 800a7e2:	e7fe      	b.n	800a7e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e6:	685a      	ldr	r2, [r3, #4]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	1ad2      	subs	r2, r2, r3
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a7f6:	69b8      	ldr	r0, [r7, #24]
 800a7f8:	f000 f8f6 	bl	800a9e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7fc:	4b1a      	ldr	r3, [pc, #104]	; (800a868 <pvPortMalloc+0x178>)
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	1ad3      	subs	r3, r2, r3
 800a806:	4a18      	ldr	r2, [pc, #96]	; (800a868 <pvPortMalloc+0x178>)
 800a808:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a80a:	4b17      	ldr	r3, [pc, #92]	; (800a868 <pvPortMalloc+0x178>)
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	4b18      	ldr	r3, [pc, #96]	; (800a870 <pvPortMalloc+0x180>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	429a      	cmp	r2, r3
 800a814:	d203      	bcs.n	800a81e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a816:	4b14      	ldr	r3, [pc, #80]	; (800a868 <pvPortMalloc+0x178>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a15      	ldr	r2, [pc, #84]	; (800a870 <pvPortMalloc+0x180>)
 800a81c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a820:	685a      	ldr	r2, [r3, #4]
 800a822:	4b10      	ldr	r3, [pc, #64]	; (800a864 <pvPortMalloc+0x174>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	431a      	orrs	r2, r3
 800a828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82e:	2200      	movs	r2, #0
 800a830:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a832:	f7ff f869 	bl	8009908 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	f003 0307 	and.w	r3, r3, #7
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d009      	beq.n	800a854 <pvPortMalloc+0x164>
 800a840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a844:	f383 8811 	msr	BASEPRI, r3
 800a848:	f3bf 8f6f 	isb	sy
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	60fb      	str	r3, [r7, #12]
 800a852:	e7fe      	b.n	800a852 <pvPortMalloc+0x162>
	return pvReturn;
 800a854:	69fb      	ldr	r3, [r7, #28]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3728      	adds	r7, #40	; 0x28
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	20004048 	.word	0x20004048
 800a864:	20004054 	.word	0x20004054
 800a868:	2000404c 	.word	0x2000404c
 800a86c:	20004040 	.word	0x20004040
 800a870:	20004050 	.word	0x20004050

0800a874 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d046      	beq.n	800a914 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a886:	2308      	movs	r3, #8
 800a888:	425b      	negs	r3, r3
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	4413      	add	r3, r2
 800a88e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	685a      	ldr	r2, [r3, #4]
 800a898:	4b20      	ldr	r3, [pc, #128]	; (800a91c <vPortFree+0xa8>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4013      	ands	r3, r2
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d109      	bne.n	800a8b6 <vPortFree+0x42>
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	60fb      	str	r3, [r7, #12]
 800a8b4:	e7fe      	b.n	800a8b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d009      	beq.n	800a8d2 <vPortFree+0x5e>
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	60bb      	str	r3, [r7, #8]
 800a8d0:	e7fe      	b.n	800a8d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	4b11      	ldr	r3, [pc, #68]	; (800a91c <vPortFree+0xa8>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4013      	ands	r3, r2
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d019      	beq.n	800a914 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d115      	bne.n	800a914 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	685a      	ldr	r2, [r3, #4]
 800a8ec:	4b0b      	ldr	r3, [pc, #44]	; (800a91c <vPortFree+0xa8>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	43db      	mvns	r3, r3
 800a8f2:	401a      	ands	r2, r3
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8f8:	f7fe fff8 	bl	80098ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	4b07      	ldr	r3, [pc, #28]	; (800a920 <vPortFree+0xac>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4413      	add	r3, r2
 800a906:	4a06      	ldr	r2, [pc, #24]	; (800a920 <vPortFree+0xac>)
 800a908:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a90a:	6938      	ldr	r0, [r7, #16]
 800a90c:	f000 f86c 	bl	800a9e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a910:	f7fe fffa 	bl	8009908 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a914:	bf00      	nop
 800a916:	3718      	adds	r7, #24
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	20004054 	.word	0x20004054
 800a920:	2000404c 	.word	0x2000404c

0800a924 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a92a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a92e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a930:	4b27      	ldr	r3, [pc, #156]	; (800a9d0 <prvHeapInit+0xac>)
 800a932:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f003 0307 	and.w	r3, r3, #7
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00c      	beq.n	800a958 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3307      	adds	r3, #7
 800a942:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f023 0307 	bic.w	r3, r3, #7
 800a94a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	4a1f      	ldr	r2, [pc, #124]	; (800a9d0 <prvHeapInit+0xac>)
 800a954:	4413      	add	r3, r2
 800a956:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a95c:	4a1d      	ldr	r2, [pc, #116]	; (800a9d4 <prvHeapInit+0xb0>)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a962:	4b1c      	ldr	r3, [pc, #112]	; (800a9d4 <prvHeapInit+0xb0>)
 800a964:	2200      	movs	r2, #0
 800a966:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	4413      	add	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a970:	2208      	movs	r2, #8
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	1a9b      	subs	r3, r3, r2
 800a976:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f023 0307 	bic.w	r3, r3, #7
 800a97e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4a15      	ldr	r2, [pc, #84]	; (800a9d8 <prvHeapInit+0xb4>)
 800a984:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a986:	4b14      	ldr	r3, [pc, #80]	; (800a9d8 <prvHeapInit+0xb4>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2200      	movs	r2, #0
 800a98c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a98e:	4b12      	ldr	r3, [pc, #72]	; (800a9d8 <prvHeapInit+0xb4>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2200      	movs	r2, #0
 800a994:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	1ad2      	subs	r2, r2, r3
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a9a4:	4b0c      	ldr	r3, [pc, #48]	; (800a9d8 <prvHeapInit+0xb4>)
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	4a0a      	ldr	r2, [pc, #40]	; (800a9dc <prvHeapInit+0xb8>)
 800a9b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	4a09      	ldr	r2, [pc, #36]	; (800a9e0 <prvHeapInit+0xbc>)
 800a9ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a9bc:	4b09      	ldr	r3, [pc, #36]	; (800a9e4 <prvHeapInit+0xc0>)
 800a9be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a9c2:	601a      	str	r2, [r3, #0]
}
 800a9c4:	bf00      	nop
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	20000440 	.word	0x20000440
 800a9d4:	20004040 	.word	0x20004040
 800a9d8:	20004048 	.word	0x20004048
 800a9dc:	20004050 	.word	0x20004050
 800a9e0:	2000404c 	.word	0x2000404c
 800a9e4:	20004054 	.word	0x20004054

0800a9e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9f0:	4b28      	ldr	r3, [pc, #160]	; (800aa94 <prvInsertBlockIntoFreeList+0xac>)
 800a9f2:	60fb      	str	r3, [r7, #12]
 800a9f4:	e002      	b.n	800a9fc <prvInsertBlockIntoFreeList+0x14>
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	60fb      	str	r3, [r7, #12]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d8f7      	bhi.n	800a9f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	4413      	add	r3, r2
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d108      	bne.n	800aa2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	685a      	ldr	r2, [r3, #4]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	441a      	add	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	441a      	add	r2, r3
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d118      	bne.n	800aa70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	4b15      	ldr	r3, [pc, #84]	; (800aa98 <prvInsertBlockIntoFreeList+0xb0>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d00d      	beq.n	800aa66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685a      	ldr	r2, [r3, #4]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	441a      	add	r2, r3
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	e008      	b.n	800aa78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa66:	4b0c      	ldr	r3, [pc, #48]	; (800aa98 <prvInsertBlockIntoFreeList+0xb0>)
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	601a      	str	r2, [r3, #0]
 800aa6e:	e003      	b.n	800aa78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d002      	beq.n	800aa86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa86:	bf00      	nop
 800aa88:	3714      	adds	r7, #20
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	20004040 	.word	0x20004040
 800aa98:	20004048 	.word	0x20004048

0800aa9c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	490e      	ldr	r1, [pc, #56]	; (800aadc <MX_USB_HOST_Init+0x40>)
 800aaa4:	480e      	ldr	r0, [pc, #56]	; (800aae0 <MX_USB_HOST_Init+0x44>)
 800aaa6:	f7fc f817 	bl	8006ad8 <USBH_Init>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d001      	beq.n	800aab4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800aab0:	f7f6 f8c0 	bl	8000c34 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800aab4:	490b      	ldr	r1, [pc, #44]	; (800aae4 <MX_USB_HOST_Init+0x48>)
 800aab6:	480a      	ldr	r0, [pc, #40]	; (800aae0 <MX_USB_HOST_Init+0x44>)
 800aab8:	f7fc f8c4 	bl	8006c44 <USBH_RegisterClass>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aac2:	f7f6 f8b7 	bl	8000c34 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800aac6:	4806      	ldr	r0, [pc, #24]	; (800aae0 <MX_USB_HOST_Init+0x44>)
 800aac8:	f7fc f948 	bl	8006d5c <USBH_Start>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d001      	beq.n	800aad6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aad2:	f7f6 f8af 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aad6:	bf00      	nop
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	0800aae9 	.word	0x0800aae9
 800aae0:	2000414c 	.word	0x2000414c
 800aae4:	2000000c 	.word	0x2000000c

0800aae8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aaf4:	78fb      	ldrb	r3, [r7, #3]
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	2b04      	cmp	r3, #4
 800aafa:	d819      	bhi.n	800ab30 <USBH_UserProcess+0x48>
 800aafc:	a201      	add	r2, pc, #4	; (adr r2, 800ab04 <USBH_UserProcess+0x1c>)
 800aafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab02:	bf00      	nop
 800ab04:	0800ab31 	.word	0x0800ab31
 800ab08:	0800ab21 	.word	0x0800ab21
 800ab0c:	0800ab31 	.word	0x0800ab31
 800ab10:	0800ab29 	.word	0x0800ab29
 800ab14:	0800ab19 	.word	0x0800ab19
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ab18:	4b09      	ldr	r3, [pc, #36]	; (800ab40 <USBH_UserProcess+0x58>)
 800ab1a:	2203      	movs	r2, #3
 800ab1c:	701a      	strb	r2, [r3, #0]
  break;
 800ab1e:	e008      	b.n	800ab32 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ab20:	4b07      	ldr	r3, [pc, #28]	; (800ab40 <USBH_UserProcess+0x58>)
 800ab22:	2202      	movs	r2, #2
 800ab24:	701a      	strb	r2, [r3, #0]
  break;
 800ab26:	e004      	b.n	800ab32 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ab28:	4b05      	ldr	r3, [pc, #20]	; (800ab40 <USBH_UserProcess+0x58>)
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	701a      	strb	r2, [r3, #0]
  break;
 800ab2e:	e000      	b.n	800ab32 <USBH_UserProcess+0x4a>

  default:
  break;
 800ab30:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ab32:	bf00      	nop
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	20004058 	.word	0x20004058

0800ab44 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b08a      	sub	sp, #40	; 0x28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab4c:	f107 0314 	add.w	r3, r7, #20
 800ab50:	2200      	movs	r2, #0
 800ab52:	601a      	str	r2, [r3, #0]
 800ab54:	605a      	str	r2, [r3, #4]
 800ab56:	609a      	str	r2, [r3, #8]
 800ab58:	60da      	str	r2, [r3, #12]
 800ab5a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab64:	d147      	bne.n	800abf6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab66:	2300      	movs	r3, #0
 800ab68:	613b      	str	r3, [r7, #16]
 800ab6a:	4b25      	ldr	r3, [pc, #148]	; (800ac00 <HAL_HCD_MspInit+0xbc>)
 800ab6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab6e:	4a24      	ldr	r2, [pc, #144]	; (800ac00 <HAL_HCD_MspInit+0xbc>)
 800ab70:	f043 0301 	orr.w	r3, r3, #1
 800ab74:	6313      	str	r3, [r2, #48]	; 0x30
 800ab76:	4b22      	ldr	r3, [pc, #136]	; (800ac00 <HAL_HCD_MspInit+0xbc>)
 800ab78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7a:	f003 0301 	and.w	r3, r3, #1
 800ab7e:	613b      	str	r3, [r7, #16]
 800ab80:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ab82:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ab90:	f107 0314 	add.w	r3, r7, #20
 800ab94:	4619      	mov	r1, r3
 800ab96:	481b      	ldr	r0, [pc, #108]	; (800ac04 <HAL_HCD_MspInit+0xc0>)
 800ab98:	f7f6 ff5a 	bl	8001a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ab9c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800aba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aba2:	2302      	movs	r3, #2
 800aba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aba6:	2300      	movs	r3, #0
 800aba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abaa:	2303      	movs	r3, #3
 800abac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800abae:	230a      	movs	r3, #10
 800abb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abb2:	f107 0314 	add.w	r3, r7, #20
 800abb6:	4619      	mov	r1, r3
 800abb8:	4812      	ldr	r0, [pc, #72]	; (800ac04 <HAL_HCD_MspInit+0xc0>)
 800abba:	f7f6 ff49 	bl	8001a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800abbe:	4b10      	ldr	r3, [pc, #64]	; (800ac00 <HAL_HCD_MspInit+0xbc>)
 800abc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc2:	4a0f      	ldr	r2, [pc, #60]	; (800ac00 <HAL_HCD_MspInit+0xbc>)
 800abc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abc8:	6353      	str	r3, [r2, #52]	; 0x34
 800abca:	2300      	movs	r3, #0
 800abcc:	60fb      	str	r3, [r7, #12]
 800abce:	4b0c      	ldr	r3, [pc, #48]	; (800ac00 <HAL_HCD_MspInit+0xbc>)
 800abd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abd2:	4a0b      	ldr	r2, [pc, #44]	; (800ac00 <HAL_HCD_MspInit+0xbc>)
 800abd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800abd8:	6453      	str	r3, [r2, #68]	; 0x44
 800abda:	4b09      	ldr	r3, [pc, #36]	; (800ac00 <HAL_HCD_MspInit+0xbc>)
 800abdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800abe6:	2200      	movs	r2, #0
 800abe8:	2105      	movs	r1, #5
 800abea:	2043      	movs	r0, #67	; 0x43
 800abec:	f7f6 feec 	bl	80019c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800abf0:	2043      	movs	r0, #67	; 0x43
 800abf2:	f7f6 ff15 	bl	8001a20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800abf6:	bf00      	nop
 800abf8:	3728      	adds	r7, #40	; 0x28
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	40023800 	.word	0x40023800
 800ac04:	40020000 	.word	0x40020000

0800ac08 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7fc fd4d 	bl	80076b6 <USBH_LL_IncTimer>
}
 800ac1c:	bf00      	nop
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fc fd91 	bl	800775a <USBH_LL_Connect>
}
 800ac38:	bf00      	nop
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fc fda6 	bl	80077a0 <USBH_LL_Disconnect>
}
 800ac54:	bf00      	nop
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	460b      	mov	r3, r1
 800ac66:	70fb      	strb	r3, [r7, #3]
 800ac68:	4613      	mov	r3, r2
 800ac6a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7fc fddb 	bl	800782e <USBH_LL_NotifyURBChange>
#endif
}
 800ac78:	bf00      	nop
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fc fd3b 	bl	800770a <USBH_LL_PortEnabled>
} 
 800ac94:	bf00      	nop
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acaa:	4618      	mov	r0, r3
 800acac:	f7fc fd47 	bl	800773e <USBH_LL_PortDisabled>
} 
 800acb0:	bf00      	nop
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d12a      	bne.n	800ad20 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800acca:	4a18      	ldr	r2, [pc, #96]	; (800ad2c <USBH_LL_Init+0x74>)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a15      	ldr	r2, [pc, #84]	; (800ad2c <USBH_LL_Init+0x74>)
 800acd6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800acda:	4b14      	ldr	r3, [pc, #80]	; (800ad2c <USBH_LL_Init+0x74>)
 800acdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ace0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ace2:	4b12      	ldr	r3, [pc, #72]	; (800ad2c <USBH_LL_Init+0x74>)
 800ace4:	2208      	movs	r2, #8
 800ace6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ace8:	4b10      	ldr	r3, [pc, #64]	; (800ad2c <USBH_LL_Init+0x74>)
 800acea:	2201      	movs	r2, #1
 800acec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800acee:	4b0f      	ldr	r3, [pc, #60]	; (800ad2c <USBH_LL_Init+0x74>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800acf4:	4b0d      	ldr	r3, [pc, #52]	; (800ad2c <USBH_LL_Init+0x74>)
 800acf6:	2202      	movs	r2, #2
 800acf8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800acfa:	4b0c      	ldr	r3, [pc, #48]	; (800ad2c <USBH_LL_Init+0x74>)
 800acfc:	2200      	movs	r2, #0
 800acfe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ad00:	480a      	ldr	r0, [pc, #40]	; (800ad2c <USBH_LL_Init+0x74>)
 800ad02:	f7f7 f9a7 	bl	8002054 <HAL_HCD_Init>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d001      	beq.n	800ad10 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ad0c:	f7f5 ff92 	bl	8000c34 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ad10:	4806      	ldr	r0, [pc, #24]	; (800ad2c <USBH_LL_Init+0x74>)
 800ad12:	f7f7 fdb7 	bl	8002884 <HAL_HCD_GetCurrentFrame>
 800ad16:	4603      	mov	r3, r0
 800ad18:	4619      	mov	r1, r3
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7fc fcbc 	bl	8007698 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	20004530 	.word	0x20004530

0800ad30 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7f7 fd24 	bl	8002794 <HAL_HCD_Start>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad50:	7bfb      	ldrb	r3, [r7, #15]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f000 f95c 	bl	800b010 <USBH_Get_USB_Status>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ad5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b084      	sub	sp, #16
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7f7 fd2c 	bl	80027da <HAL_HCD_Stop>
 800ad82:	4603      	mov	r3, r0
 800ad84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad86:	7bfb      	ldrb	r3, [r7, #15]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 f941 	bl	800b010 <USBH_Get_USB_Status>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800ad92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ada4:	2301      	movs	r3, #1
 800ada6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800adae:	4618      	mov	r0, r3
 800adb0:	f7f7 fd76 	bl	80028a0 <HAL_HCD_GetCurrentSpeed>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d007      	beq.n	800adca <USBH_LL_GetSpeed+0x2e>
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d302      	bcc.n	800adc4 <USBH_LL_GetSpeed+0x28>
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d006      	beq.n	800add0 <USBH_LL_GetSpeed+0x34>
 800adc2:	e008      	b.n	800add6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800adc4:	2300      	movs	r3, #0
 800adc6:	73fb      	strb	r3, [r7, #15]
    break;
 800adc8:	e008      	b.n	800addc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800adca:	2301      	movs	r3, #1
 800adcc:	73fb      	strb	r3, [r7, #15]
    break;
 800adce:	e005      	b.n	800addc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800add0:	2302      	movs	r3, #2
 800add2:	73fb      	strb	r3, [r7, #15]
    break;
 800add4:	e002      	b.n	800addc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800add6:	2301      	movs	r3, #1
 800add8:	73fb      	strb	r3, [r7, #15]
    break;
 800adda:	bf00      	nop
  }
  return  speed;
 800addc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b084      	sub	sp, #16
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adee:	2300      	movs	r3, #0
 800adf0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adf2:	2300      	movs	r3, #0
 800adf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7f7 fd09 	bl	8002814 <HAL_HCD_ResetPort>
 800ae02:	4603      	mov	r3, r0
 800ae04:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f000 f901 	bl	800b010 <USBH_Get_USB_Status>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ae12:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae2e:	78fa      	ldrb	r2, [r7, #3]
 800ae30:	4611      	mov	r1, r2
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7f7 fd11 	bl	800285a <HAL_HCD_HC_GetXferCount>
 800ae38:	4603      	mov	r3, r0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ae42:	b590      	push	{r4, r7, lr}
 800ae44:	b089      	sub	sp, #36	; 0x24
 800ae46:	af04      	add	r7, sp, #16
 800ae48:	6078      	str	r0, [r7, #4]
 800ae4a:	4608      	mov	r0, r1
 800ae4c:	4611      	mov	r1, r2
 800ae4e:	461a      	mov	r2, r3
 800ae50:	4603      	mov	r3, r0
 800ae52:	70fb      	strb	r3, [r7, #3]
 800ae54:	460b      	mov	r3, r1
 800ae56:	70bb      	strb	r3, [r7, #2]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae60:	2300      	movs	r3, #0
 800ae62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ae6a:	787c      	ldrb	r4, [r7, #1]
 800ae6c:	78ba      	ldrb	r2, [r7, #2]
 800ae6e:	78f9      	ldrb	r1, [r7, #3]
 800ae70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae72:	9302      	str	r3, [sp, #8]
 800ae74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ae78:	9301      	str	r3, [sp, #4]
 800ae7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	4623      	mov	r3, r4
 800ae82:	f7f7 f955 	bl	8002130 <HAL_HCD_HC_Init>
 800ae86:	4603      	mov	r3, r0
 800ae88:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 f8bf 	bl	800b010 <USBH_Get_USB_Status>
 800ae92:	4603      	mov	r3, r0
 800ae94:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ae96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd90      	pop	{r4, r7, pc}

0800aea0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aeba:	78fa      	ldrb	r2, [r7, #3]
 800aebc:	4611      	mov	r1, r2
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7f7 f9ce 	bl	8002260 <HAL_HCD_HC_Halt>
 800aec4:	4603      	mov	r3, r0
 800aec6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f000 f8a0 	bl	800b010 <USBH_Get_USB_Status>
 800aed0:	4603      	mov	r3, r0
 800aed2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800aed4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800aede:	b590      	push	{r4, r7, lr}
 800aee0:	b089      	sub	sp, #36	; 0x24
 800aee2:	af04      	add	r7, sp, #16
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	4608      	mov	r0, r1
 800aee8:	4611      	mov	r1, r2
 800aeea:	461a      	mov	r2, r3
 800aeec:	4603      	mov	r3, r0
 800aeee:	70fb      	strb	r3, [r7, #3]
 800aef0:	460b      	mov	r3, r1
 800aef2:	70bb      	strb	r3, [r7, #2]
 800aef4:	4613      	mov	r3, r2
 800aef6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aefc:	2300      	movs	r3, #0
 800aefe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800af06:	787c      	ldrb	r4, [r7, #1]
 800af08:	78ba      	ldrb	r2, [r7, #2]
 800af0a:	78f9      	ldrb	r1, [r7, #3]
 800af0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800af10:	9303      	str	r3, [sp, #12]
 800af12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af14:	9302      	str	r3, [sp, #8]
 800af16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af18:	9301      	str	r3, [sp, #4]
 800af1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	4623      	mov	r3, r4
 800af22:	f7f7 f9c1 	bl	80022a8 <HAL_HCD_HC_SubmitRequest>
 800af26:	4603      	mov	r3, r0
 800af28:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800af2a:	7bfb      	ldrb	r3, [r7, #15]
 800af2c:	4618      	mov	r0, r3
 800af2e:	f000 f86f 	bl	800b010 <USBH_Get_USB_Status>
 800af32:	4603      	mov	r3, r0
 800af34:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800af36:	7bbb      	ldrb	r3, [r7, #14]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3714      	adds	r7, #20
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd90      	pop	{r4, r7, pc}

0800af40 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af52:	78fa      	ldrb	r2, [r7, #3]
 800af54:	4611      	mov	r1, r2
 800af56:	4618      	mov	r0, r3
 800af58:	f7f7 fc6a 	bl	8002830 <HAL_HCD_HC_GetURBState>
 800af5c:	4603      	mov	r3, r0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b082      	sub	sp, #8
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	460b      	mov	r3, r1
 800af70:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d103      	bne.n	800af84 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800af7c:	78fb      	ldrb	r3, [r7, #3]
 800af7e:	4618      	mov	r0, r3
 800af80:	f000 f872 	bl	800b068 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800af84:	20c8      	movs	r0, #200	; 0xc8
 800af86:	f7f6 f859 	bl	800103c <HAL_Delay>
  return USBH_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	460b      	mov	r3, r1
 800af9e:	70fb      	strb	r3, [r7, #3]
 800afa0:	4613      	mov	r3, r2
 800afa2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800afaa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800afac:	78fa      	ldrb	r2, [r7, #3]
 800afae:	68f9      	ldr	r1, [r7, #12]
 800afb0:	4613      	mov	r3, r2
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	4413      	add	r3, r2
 800afb6:	00db      	lsls	r3, r3, #3
 800afb8:	440b      	add	r3, r1
 800afba:	333b      	adds	r3, #59	; 0x3b
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00a      	beq.n	800afd8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800afc2:	78fa      	ldrb	r2, [r7, #3]
 800afc4:	68f9      	ldr	r1, [r7, #12]
 800afc6:	4613      	mov	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4413      	add	r3, r2
 800afcc:	00db      	lsls	r3, r3, #3
 800afce:	440b      	add	r3, r1
 800afd0:	3350      	adds	r3, #80	; 0x50
 800afd2:	78ba      	ldrb	r2, [r7, #2]
 800afd4:	701a      	strb	r2, [r3, #0]
 800afd6:	e009      	b.n	800afec <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800afd8:	78fa      	ldrb	r2, [r7, #3]
 800afda:	68f9      	ldr	r1, [r7, #12]
 800afdc:	4613      	mov	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4413      	add	r3, r2
 800afe2:	00db      	lsls	r3, r3, #3
 800afe4:	440b      	add	r3, r1
 800afe6:	3351      	adds	r3, #81	; 0x51
 800afe8:	78ba      	ldrb	r2, [r7, #2]
 800afea:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3714      	adds	r7, #20
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b082      	sub	sp, #8
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7f6 f81a 	bl	800103c <HAL_Delay>
}
 800b008:	bf00      	nop
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b010:	b480      	push	{r7}
 800b012:	b085      	sub	sp, #20
 800b014:	af00      	add	r7, sp, #0
 800b016:	4603      	mov	r3, r0
 800b018:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b01a:	2300      	movs	r3, #0
 800b01c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b01e:	79fb      	ldrb	r3, [r7, #7]
 800b020:	2b03      	cmp	r3, #3
 800b022:	d817      	bhi.n	800b054 <USBH_Get_USB_Status+0x44>
 800b024:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <USBH_Get_USB_Status+0x1c>)
 800b026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02a:	bf00      	nop
 800b02c:	0800b03d 	.word	0x0800b03d
 800b030:	0800b043 	.word	0x0800b043
 800b034:	0800b049 	.word	0x0800b049
 800b038:	0800b04f 	.word	0x0800b04f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b03c:	2300      	movs	r3, #0
 800b03e:	73fb      	strb	r3, [r7, #15]
    break;
 800b040:	e00b      	b.n	800b05a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b042:	2302      	movs	r3, #2
 800b044:	73fb      	strb	r3, [r7, #15]
    break;
 800b046:	e008      	b.n	800b05a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b048:	2301      	movs	r3, #1
 800b04a:	73fb      	strb	r3, [r7, #15]
    break;
 800b04c:	e005      	b.n	800b05a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b04e:	2302      	movs	r3, #2
 800b050:	73fb      	strb	r3, [r7, #15]
    break;
 800b052:	e002      	b.n	800b05a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b054:	2302      	movs	r3, #2
 800b056:	73fb      	strb	r3, [r7, #15]
    break;
 800b058:	bf00      	nop
  }
  return usb_status;
 800b05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3714      	adds	r7, #20
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	4603      	mov	r3, r0
 800b070:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800b072:	79fb      	ldrb	r3, [r7, #7]
 800b074:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b076:	79fb      	ldrb	r3, [r7, #7]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d102      	bne.n	800b082 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800b07c:	2301      	movs	r3, #1
 800b07e:	73fb      	strb	r3, [r7, #15]
 800b080:	e001      	b.n	800b086 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b082:	2300      	movs	r3, #0
 800b084:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b086:	7bfb      	ldrb	r3, [r7, #15]
 800b088:	461a      	mov	r2, r3
 800b08a:	2101      	movs	r1, #1
 800b08c:	4803      	ldr	r0, [pc, #12]	; (800b09c <MX_DriverVbusFS+0x34>)
 800b08e:	f7f6 ff87 	bl	8001fa0 <HAL_GPIO_WritePin>
}
 800b092:	bf00      	nop
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	40020800 	.word	0x40020800

0800b0a0 <__errno>:
 800b0a0:	4b01      	ldr	r3, [pc, #4]	; (800b0a8 <__errno+0x8>)
 800b0a2:	6818      	ldr	r0, [r3, #0]
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	20000030 	.word	0x20000030

0800b0ac <__libc_init_array>:
 800b0ac:	b570      	push	{r4, r5, r6, lr}
 800b0ae:	4e0d      	ldr	r6, [pc, #52]	; (800b0e4 <__libc_init_array+0x38>)
 800b0b0:	4c0d      	ldr	r4, [pc, #52]	; (800b0e8 <__libc_init_array+0x3c>)
 800b0b2:	1ba4      	subs	r4, r4, r6
 800b0b4:	10a4      	asrs	r4, r4, #2
 800b0b6:	2500      	movs	r5, #0
 800b0b8:	42a5      	cmp	r5, r4
 800b0ba:	d109      	bne.n	800b0d0 <__libc_init_array+0x24>
 800b0bc:	4e0b      	ldr	r6, [pc, #44]	; (800b0ec <__libc_init_array+0x40>)
 800b0be:	4c0c      	ldr	r4, [pc, #48]	; (800b0f0 <__libc_init_array+0x44>)
 800b0c0:	f000 f982 	bl	800b3c8 <_init>
 800b0c4:	1ba4      	subs	r4, r4, r6
 800b0c6:	10a4      	asrs	r4, r4, #2
 800b0c8:	2500      	movs	r5, #0
 800b0ca:	42a5      	cmp	r5, r4
 800b0cc:	d105      	bne.n	800b0da <__libc_init_array+0x2e>
 800b0ce:	bd70      	pop	{r4, r5, r6, pc}
 800b0d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b0d4:	4798      	blx	r3
 800b0d6:	3501      	adds	r5, #1
 800b0d8:	e7ee      	b.n	800b0b8 <__libc_init_array+0xc>
 800b0da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b0de:	4798      	blx	r3
 800b0e0:	3501      	adds	r5, #1
 800b0e2:	e7f2      	b.n	800b0ca <__libc_init_array+0x1e>
 800b0e4:	0800b644 	.word	0x0800b644
 800b0e8:	0800b644 	.word	0x0800b644
 800b0ec:	0800b644 	.word	0x0800b644
 800b0f0:	0800b648 	.word	0x0800b648

0800b0f4 <malloc>:
 800b0f4:	4b02      	ldr	r3, [pc, #8]	; (800b100 <malloc+0xc>)
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	6818      	ldr	r0, [r3, #0]
 800b0fa:	f000 b86d 	b.w	800b1d8 <_malloc_r>
 800b0fe:	bf00      	nop
 800b100:	20000030 	.word	0x20000030

0800b104 <free>:
 800b104:	4b02      	ldr	r3, [pc, #8]	; (800b110 <free+0xc>)
 800b106:	4601      	mov	r1, r0
 800b108:	6818      	ldr	r0, [r3, #0]
 800b10a:	f000 b817 	b.w	800b13c <_free_r>
 800b10e:	bf00      	nop
 800b110:	20000030 	.word	0x20000030

0800b114 <memcpy>:
 800b114:	b510      	push	{r4, lr}
 800b116:	1e43      	subs	r3, r0, #1
 800b118:	440a      	add	r2, r1
 800b11a:	4291      	cmp	r1, r2
 800b11c:	d100      	bne.n	800b120 <memcpy+0xc>
 800b11e:	bd10      	pop	{r4, pc}
 800b120:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b124:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b128:	e7f7      	b.n	800b11a <memcpy+0x6>

0800b12a <memset>:
 800b12a:	4402      	add	r2, r0
 800b12c:	4603      	mov	r3, r0
 800b12e:	4293      	cmp	r3, r2
 800b130:	d100      	bne.n	800b134 <memset+0xa>
 800b132:	4770      	bx	lr
 800b134:	f803 1b01 	strb.w	r1, [r3], #1
 800b138:	e7f9      	b.n	800b12e <memset+0x4>
	...

0800b13c <_free_r>:
 800b13c:	b538      	push	{r3, r4, r5, lr}
 800b13e:	4605      	mov	r5, r0
 800b140:	2900      	cmp	r1, #0
 800b142:	d045      	beq.n	800b1d0 <_free_r+0x94>
 800b144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b148:	1f0c      	subs	r4, r1, #4
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	bfb8      	it	lt
 800b14e:	18e4      	addlt	r4, r4, r3
 800b150:	f000 f930 	bl	800b3b4 <__malloc_lock>
 800b154:	4a1f      	ldr	r2, [pc, #124]	; (800b1d4 <_free_r+0x98>)
 800b156:	6813      	ldr	r3, [r2, #0]
 800b158:	4610      	mov	r0, r2
 800b15a:	b933      	cbnz	r3, 800b16a <_free_r+0x2e>
 800b15c:	6063      	str	r3, [r4, #4]
 800b15e:	6014      	str	r4, [r2, #0]
 800b160:	4628      	mov	r0, r5
 800b162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b166:	f000 b926 	b.w	800b3b6 <__malloc_unlock>
 800b16a:	42a3      	cmp	r3, r4
 800b16c:	d90c      	bls.n	800b188 <_free_r+0x4c>
 800b16e:	6821      	ldr	r1, [r4, #0]
 800b170:	1862      	adds	r2, r4, r1
 800b172:	4293      	cmp	r3, r2
 800b174:	bf04      	itt	eq
 800b176:	681a      	ldreq	r2, [r3, #0]
 800b178:	685b      	ldreq	r3, [r3, #4]
 800b17a:	6063      	str	r3, [r4, #4]
 800b17c:	bf04      	itt	eq
 800b17e:	1852      	addeq	r2, r2, r1
 800b180:	6022      	streq	r2, [r4, #0]
 800b182:	6004      	str	r4, [r0, #0]
 800b184:	e7ec      	b.n	800b160 <_free_r+0x24>
 800b186:	4613      	mov	r3, r2
 800b188:	685a      	ldr	r2, [r3, #4]
 800b18a:	b10a      	cbz	r2, 800b190 <_free_r+0x54>
 800b18c:	42a2      	cmp	r2, r4
 800b18e:	d9fa      	bls.n	800b186 <_free_r+0x4a>
 800b190:	6819      	ldr	r1, [r3, #0]
 800b192:	1858      	adds	r0, r3, r1
 800b194:	42a0      	cmp	r0, r4
 800b196:	d10b      	bne.n	800b1b0 <_free_r+0x74>
 800b198:	6820      	ldr	r0, [r4, #0]
 800b19a:	4401      	add	r1, r0
 800b19c:	1858      	adds	r0, r3, r1
 800b19e:	4282      	cmp	r2, r0
 800b1a0:	6019      	str	r1, [r3, #0]
 800b1a2:	d1dd      	bne.n	800b160 <_free_r+0x24>
 800b1a4:	6810      	ldr	r0, [r2, #0]
 800b1a6:	6852      	ldr	r2, [r2, #4]
 800b1a8:	605a      	str	r2, [r3, #4]
 800b1aa:	4401      	add	r1, r0
 800b1ac:	6019      	str	r1, [r3, #0]
 800b1ae:	e7d7      	b.n	800b160 <_free_r+0x24>
 800b1b0:	d902      	bls.n	800b1b8 <_free_r+0x7c>
 800b1b2:	230c      	movs	r3, #12
 800b1b4:	602b      	str	r3, [r5, #0]
 800b1b6:	e7d3      	b.n	800b160 <_free_r+0x24>
 800b1b8:	6820      	ldr	r0, [r4, #0]
 800b1ba:	1821      	adds	r1, r4, r0
 800b1bc:	428a      	cmp	r2, r1
 800b1be:	bf04      	itt	eq
 800b1c0:	6811      	ldreq	r1, [r2, #0]
 800b1c2:	6852      	ldreq	r2, [r2, #4]
 800b1c4:	6062      	str	r2, [r4, #4]
 800b1c6:	bf04      	itt	eq
 800b1c8:	1809      	addeq	r1, r1, r0
 800b1ca:	6021      	streq	r1, [r4, #0]
 800b1cc:	605c      	str	r4, [r3, #4]
 800b1ce:	e7c7      	b.n	800b160 <_free_r+0x24>
 800b1d0:	bd38      	pop	{r3, r4, r5, pc}
 800b1d2:	bf00      	nop
 800b1d4:	2000405c 	.word	0x2000405c

0800b1d8 <_malloc_r>:
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	1ccd      	adds	r5, r1, #3
 800b1dc:	f025 0503 	bic.w	r5, r5, #3
 800b1e0:	3508      	adds	r5, #8
 800b1e2:	2d0c      	cmp	r5, #12
 800b1e4:	bf38      	it	cc
 800b1e6:	250c      	movcc	r5, #12
 800b1e8:	2d00      	cmp	r5, #0
 800b1ea:	4606      	mov	r6, r0
 800b1ec:	db01      	blt.n	800b1f2 <_malloc_r+0x1a>
 800b1ee:	42a9      	cmp	r1, r5
 800b1f0:	d903      	bls.n	800b1fa <_malloc_r+0x22>
 800b1f2:	230c      	movs	r3, #12
 800b1f4:	6033      	str	r3, [r6, #0]
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	bd70      	pop	{r4, r5, r6, pc}
 800b1fa:	f000 f8db 	bl	800b3b4 <__malloc_lock>
 800b1fe:	4a21      	ldr	r2, [pc, #132]	; (800b284 <_malloc_r+0xac>)
 800b200:	6814      	ldr	r4, [r2, #0]
 800b202:	4621      	mov	r1, r4
 800b204:	b991      	cbnz	r1, 800b22c <_malloc_r+0x54>
 800b206:	4c20      	ldr	r4, [pc, #128]	; (800b288 <_malloc_r+0xb0>)
 800b208:	6823      	ldr	r3, [r4, #0]
 800b20a:	b91b      	cbnz	r3, 800b214 <_malloc_r+0x3c>
 800b20c:	4630      	mov	r0, r6
 800b20e:	f000 f895 	bl	800b33c <_sbrk_r>
 800b212:	6020      	str	r0, [r4, #0]
 800b214:	4629      	mov	r1, r5
 800b216:	4630      	mov	r0, r6
 800b218:	f000 f890 	bl	800b33c <_sbrk_r>
 800b21c:	1c43      	adds	r3, r0, #1
 800b21e:	d124      	bne.n	800b26a <_malloc_r+0x92>
 800b220:	230c      	movs	r3, #12
 800b222:	6033      	str	r3, [r6, #0]
 800b224:	4630      	mov	r0, r6
 800b226:	f000 f8c6 	bl	800b3b6 <__malloc_unlock>
 800b22a:	e7e4      	b.n	800b1f6 <_malloc_r+0x1e>
 800b22c:	680b      	ldr	r3, [r1, #0]
 800b22e:	1b5b      	subs	r3, r3, r5
 800b230:	d418      	bmi.n	800b264 <_malloc_r+0x8c>
 800b232:	2b0b      	cmp	r3, #11
 800b234:	d90f      	bls.n	800b256 <_malloc_r+0x7e>
 800b236:	600b      	str	r3, [r1, #0]
 800b238:	50cd      	str	r5, [r1, r3]
 800b23a:	18cc      	adds	r4, r1, r3
 800b23c:	4630      	mov	r0, r6
 800b23e:	f000 f8ba 	bl	800b3b6 <__malloc_unlock>
 800b242:	f104 000b 	add.w	r0, r4, #11
 800b246:	1d23      	adds	r3, r4, #4
 800b248:	f020 0007 	bic.w	r0, r0, #7
 800b24c:	1ac3      	subs	r3, r0, r3
 800b24e:	d0d3      	beq.n	800b1f8 <_malloc_r+0x20>
 800b250:	425a      	negs	r2, r3
 800b252:	50e2      	str	r2, [r4, r3]
 800b254:	e7d0      	b.n	800b1f8 <_malloc_r+0x20>
 800b256:	428c      	cmp	r4, r1
 800b258:	684b      	ldr	r3, [r1, #4]
 800b25a:	bf16      	itet	ne
 800b25c:	6063      	strne	r3, [r4, #4]
 800b25e:	6013      	streq	r3, [r2, #0]
 800b260:	460c      	movne	r4, r1
 800b262:	e7eb      	b.n	800b23c <_malloc_r+0x64>
 800b264:	460c      	mov	r4, r1
 800b266:	6849      	ldr	r1, [r1, #4]
 800b268:	e7cc      	b.n	800b204 <_malloc_r+0x2c>
 800b26a:	1cc4      	adds	r4, r0, #3
 800b26c:	f024 0403 	bic.w	r4, r4, #3
 800b270:	42a0      	cmp	r0, r4
 800b272:	d005      	beq.n	800b280 <_malloc_r+0xa8>
 800b274:	1a21      	subs	r1, r4, r0
 800b276:	4630      	mov	r0, r6
 800b278:	f000 f860 	bl	800b33c <_sbrk_r>
 800b27c:	3001      	adds	r0, #1
 800b27e:	d0cf      	beq.n	800b220 <_malloc_r+0x48>
 800b280:	6025      	str	r5, [r4, #0]
 800b282:	e7db      	b.n	800b23c <_malloc_r+0x64>
 800b284:	2000405c 	.word	0x2000405c
 800b288:	20004060 	.word	0x20004060

0800b28c <srand>:
 800b28c:	b538      	push	{r3, r4, r5, lr}
 800b28e:	4b0d      	ldr	r3, [pc, #52]	; (800b2c4 <srand+0x38>)
 800b290:	681c      	ldr	r4, [r3, #0]
 800b292:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b294:	4605      	mov	r5, r0
 800b296:	b97b      	cbnz	r3, 800b2b8 <srand+0x2c>
 800b298:	2018      	movs	r0, #24
 800b29a:	f7ff ff2b 	bl	800b0f4 <malloc>
 800b29e:	4a0a      	ldr	r2, [pc, #40]	; (800b2c8 <srand+0x3c>)
 800b2a0:	4b0a      	ldr	r3, [pc, #40]	; (800b2cc <srand+0x40>)
 800b2a2:	63a0      	str	r0, [r4, #56]	; 0x38
 800b2a4:	e9c0 2300 	strd	r2, r3, [r0]
 800b2a8:	4b09      	ldr	r3, [pc, #36]	; (800b2d0 <srand+0x44>)
 800b2aa:	6083      	str	r3, [r0, #8]
 800b2ac:	230b      	movs	r3, #11
 800b2ae:	8183      	strh	r3, [r0, #12]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b2b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	611d      	str	r5, [r3, #16]
 800b2be:	615a      	str	r2, [r3, #20]
 800b2c0:	bd38      	pop	{r3, r4, r5, pc}
 800b2c2:	bf00      	nop
 800b2c4:	20000030 	.word	0x20000030
 800b2c8:	abcd330e 	.word	0xabcd330e
 800b2cc:	e66d1234 	.word	0xe66d1234
 800b2d0:	0005deec 	.word	0x0005deec

0800b2d4 <rand>:
 800b2d4:	b538      	push	{r3, r4, r5, lr}
 800b2d6:	4b13      	ldr	r3, [pc, #76]	; (800b324 <rand+0x50>)
 800b2d8:	681c      	ldr	r4, [r3, #0]
 800b2da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b2dc:	b97b      	cbnz	r3, 800b2fe <rand+0x2a>
 800b2de:	2018      	movs	r0, #24
 800b2e0:	f7ff ff08 	bl	800b0f4 <malloc>
 800b2e4:	4a10      	ldr	r2, [pc, #64]	; (800b328 <rand+0x54>)
 800b2e6:	4b11      	ldr	r3, [pc, #68]	; (800b32c <rand+0x58>)
 800b2e8:	63a0      	str	r0, [r4, #56]	; 0x38
 800b2ea:	e9c0 2300 	strd	r2, r3, [r0]
 800b2ee:	4b10      	ldr	r3, [pc, #64]	; (800b330 <rand+0x5c>)
 800b2f0:	6083      	str	r3, [r0, #8]
 800b2f2:	230b      	movs	r3, #11
 800b2f4:	8183      	strh	r3, [r0, #12]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b2fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b300:	480c      	ldr	r0, [pc, #48]	; (800b334 <rand+0x60>)
 800b302:	690a      	ldr	r2, [r1, #16]
 800b304:	694b      	ldr	r3, [r1, #20]
 800b306:	4c0c      	ldr	r4, [pc, #48]	; (800b338 <rand+0x64>)
 800b308:	4350      	muls	r0, r2
 800b30a:	fb04 0003 	mla	r0, r4, r3, r0
 800b30e:	fba2 2304 	umull	r2, r3, r2, r4
 800b312:	4403      	add	r3, r0
 800b314:	1c54      	adds	r4, r2, #1
 800b316:	f143 0500 	adc.w	r5, r3, #0
 800b31a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800b31e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800b322:	bd38      	pop	{r3, r4, r5, pc}
 800b324:	20000030 	.word	0x20000030
 800b328:	abcd330e 	.word	0xabcd330e
 800b32c:	e66d1234 	.word	0xe66d1234
 800b330:	0005deec 	.word	0x0005deec
 800b334:	5851f42d 	.word	0x5851f42d
 800b338:	4c957f2d 	.word	0x4c957f2d

0800b33c <_sbrk_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	4c06      	ldr	r4, [pc, #24]	; (800b358 <_sbrk_r+0x1c>)
 800b340:	2300      	movs	r3, #0
 800b342:	4605      	mov	r5, r0
 800b344:	4608      	mov	r0, r1
 800b346:	6023      	str	r3, [r4, #0]
 800b348:	f7f5 fd38 	bl	8000dbc <_sbrk>
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	d102      	bne.n	800b356 <_sbrk_r+0x1a>
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	b103      	cbz	r3, 800b356 <_sbrk_r+0x1a>
 800b354:	602b      	str	r3, [r5, #0]
 800b356:	bd38      	pop	{r3, r4, r5, pc}
 800b358:	200047f4 	.word	0x200047f4

0800b35c <time>:
 800b35c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b35e:	4b0b      	ldr	r3, [pc, #44]	; (800b38c <time+0x30>)
 800b360:	4604      	mov	r4, r0
 800b362:	2200      	movs	r2, #0
 800b364:	4669      	mov	r1, sp
 800b366:	6818      	ldr	r0, [r3, #0]
 800b368:	f000 f812 	bl	800b390 <_gettimeofday_r>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	da05      	bge.n	800b37c <time+0x20>
 800b370:	f04f 32ff 	mov.w	r2, #4294967295
 800b374:	f04f 33ff 	mov.w	r3, #4294967295
 800b378:	e9cd 2300 	strd	r2, r3, [sp]
 800b37c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b380:	b10c      	cbz	r4, 800b386 <time+0x2a>
 800b382:	e9c4 0100 	strd	r0, r1, [r4]
 800b386:	b004      	add	sp, #16
 800b388:	bd10      	pop	{r4, pc}
 800b38a:	bf00      	nop
 800b38c:	20000030 	.word	0x20000030

0800b390 <_gettimeofday_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4c07      	ldr	r4, [pc, #28]	; (800b3b0 <_gettimeofday_r+0x20>)
 800b394:	2300      	movs	r3, #0
 800b396:	4605      	mov	r5, r0
 800b398:	4608      	mov	r0, r1
 800b39a:	4611      	mov	r1, r2
 800b39c:	6023      	str	r3, [r4, #0]
 800b39e:	f000 f80b 	bl	800b3b8 <_gettimeofday>
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	d102      	bne.n	800b3ac <_gettimeofday_r+0x1c>
 800b3a6:	6823      	ldr	r3, [r4, #0]
 800b3a8:	b103      	cbz	r3, 800b3ac <_gettimeofday_r+0x1c>
 800b3aa:	602b      	str	r3, [r5, #0]
 800b3ac:	bd38      	pop	{r3, r4, r5, pc}
 800b3ae:	bf00      	nop
 800b3b0:	200047f4 	.word	0x200047f4

0800b3b4 <__malloc_lock>:
 800b3b4:	4770      	bx	lr

0800b3b6 <__malloc_unlock>:
 800b3b6:	4770      	bx	lr

0800b3b8 <_gettimeofday>:
 800b3b8:	4b02      	ldr	r3, [pc, #8]	; (800b3c4 <_gettimeofday+0xc>)
 800b3ba:	2258      	movs	r2, #88	; 0x58
 800b3bc:	601a      	str	r2, [r3, #0]
 800b3be:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c2:	4770      	bx	lr
 800b3c4:	200047f4 	.word	0x200047f4

0800b3c8 <_init>:
 800b3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ca:	bf00      	nop
 800b3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ce:	bc08      	pop	{r3}
 800b3d0:	469e      	mov	lr, r3
 800b3d2:	4770      	bx	lr

0800b3d4 <_fini>:
 800b3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d6:	bf00      	nop
 800b3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3da:	bc08      	pop	{r3}
 800b3dc:	469e      	mov	lr, r3
 800b3de:	4770      	bx	lr
