
thread_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  0800feb0  0800feb0  0001feb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080103c0  080103c0  000309e0  2**0
                  CONTENTS
  4 .ARM          00000008  080103c0  080103c0  000203c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080103c8  080103c8  000309e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080103c8  080103c8  000203c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080103d0  080103d0  000203d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e0  20000000  080103d4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004788  200009e0  08010db4  000309e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005168  08010db4  00035168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000309e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002592d  00000000  00000000  00030a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000052a9  00000000  00000000  0005633d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019a0  00000000  00000000  0005b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001758  00000000  00000000  0005cf88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e2ae  00000000  00000000  0005e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a7a1  00000000  00000000  0007c98e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a194c  00000000  00000000  0009712f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138a7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b98  00000000  00000000  00138af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  00140690  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001406b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200009e0 	.word	0x200009e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fe94 	.word	0x0800fe94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200009e4 	.word	0x200009e4
 80001dc:	0800fe94 	.word	0x0800fe94

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b9ac 	b.w	8000f28 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f840 	bl	8000c5c <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2lz>:
 8000be8:	b538      	push	{r3, r4, r5, lr}
 8000bea:	2200      	movs	r2, #0
 8000bec:	2300      	movs	r3, #0
 8000bee:	4604      	mov	r4, r0
 8000bf0:	460d      	mov	r5, r1
 8000bf2:	f7ff ff7b 	bl	8000aec <__aeabi_dcmplt>
 8000bf6:	b928      	cbnz	r0, 8000c04 <__aeabi_d2lz+0x1c>
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	4629      	mov	r1, r5
 8000bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c00:	f000 b80a 	b.w	8000c18 <__aeabi_d2ulz>
 8000c04:	4620      	mov	r0, r4
 8000c06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c0a:	f000 f805 	bl	8000c18 <__aeabi_d2ulz>
 8000c0e:	4240      	negs	r0, r0
 8000c10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c14:	bd38      	pop	{r3, r4, r5, pc}
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2ulz>:
 8000c18:	b5d0      	push	{r4, r6, r7, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <__aeabi_d2ulz+0x3c>)
 8000c1e:	4606      	mov	r6, r0
 8000c20:	460f      	mov	r7, r1
 8000c22:	f7ff fcf1 	bl	8000608 <__aeabi_dmul>
 8000c26:	f000 f981 	bl	8000f2c <__aeabi_d2uiz>
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	f7ff fc72 	bl	8000514 <__aeabi_ui2d>
 8000c30:	2200      	movs	r2, #0
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <__aeabi_d2ulz+0x40>)
 8000c34:	f7ff fce8 	bl	8000608 <__aeabi_dmul>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	4639      	mov	r1, r7
 8000c40:	f7ff fb2a 	bl	8000298 <__aeabi_dsub>
 8000c44:	f000 f972 	bl	8000f2c <__aeabi_d2uiz>
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4623      	mov	r3, r4
 8000c4c:	4310      	orrs	r0, r2
 8000c4e:	4619      	mov	r1, r3
 8000c50:	bdd0      	pop	{r4, r6, r7, pc}
 8000c52:	bf00      	nop
 8000c54:	3df00000 	.word	0x3df00000
 8000c58:	41f00000 	.word	0x41f00000

08000c5c <__udivmoddi4>:
 8000c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c60:	9e08      	ldr	r6, [sp, #32]
 8000c62:	4604      	mov	r4, r0
 8000c64:	4688      	mov	r8, r1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d14b      	bne.n	8000d02 <__udivmoddi4+0xa6>
 8000c6a:	428a      	cmp	r2, r1
 8000c6c:	4615      	mov	r5, r2
 8000c6e:	d967      	bls.n	8000d40 <__udivmoddi4+0xe4>
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	b14a      	cbz	r2, 8000c8a <__udivmoddi4+0x2e>
 8000c76:	f1c2 0720 	rsb	r7, r2, #32
 8000c7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c82:	4095      	lsls	r5, r2
 8000c84:	ea47 0803 	orr.w	r8, r7, r3
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8e:	0c23      	lsrs	r3, r4, #16
 8000c90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c94:	fa1f fc85 	uxth.w	ip, r5
 8000c98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ca0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x60>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cae:	f080 811b 	bcs.w	8000ee8 <__udivmoddi4+0x28c>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 8118 	bls.w	8000ee8 <__udivmoddi4+0x28c>
 8000cb8:	3f02      	subs	r7, #2
 8000cba:	442b      	add	r3, r5
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cd0:	45a4      	cmp	ip, r4
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x8c>
 8000cd4:	192c      	adds	r4, r5, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	f080 8107 	bcs.w	8000eec <__udivmoddi4+0x290>
 8000cde:	45a4      	cmp	ip, r4
 8000ce0:	f240 8104 	bls.w	8000eec <__udivmoddi4+0x290>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	442c      	add	r4, r5
 8000ce8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cec:	eba4 040c 	sub.w	r4, r4, ip
 8000cf0:	2700      	movs	r7, #0
 8000cf2:	b11e      	cbz	r6, 8000cfc <__udivmoddi4+0xa0>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfc:	4639      	mov	r1, r7
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xbe>
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	f000 80eb 	beq.w	8000ee2 <__udivmoddi4+0x286>
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d12:	4638      	mov	r0, r7
 8000d14:	4639      	mov	r1, r7
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f783 	clz	r7, r3
 8000d1e:	2f00      	cmp	r7, #0
 8000d20:	d147      	bne.n	8000db2 <__udivmoddi4+0x156>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd0>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80fa 	bhi.w	8000f20 <__udivmoddi4+0x2c4>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	4698      	mov	r8, r3
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa0>
 8000d3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xe8>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 808f 	bne.w	8000e6c <__udivmoddi4+0x210>
 8000d4e:	1b49      	subs	r1, r1, r5
 8000d50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d54:	fa1f f885 	uxth.w	r8, r5
 8000d58:	2701      	movs	r7, #1
 8000d5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5e:	0c23      	lsrs	r3, r4, #16
 8000d60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb08 f10c 	mul.w	r1, r8, ip
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0x124>
 8000d70:	18eb      	adds	r3, r5, r3
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x122>
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	f200 80cd 	bhi.w	8000f18 <__udivmoddi4+0x2bc>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1a59      	subs	r1, r3, r1
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x14c>
 8000d98:	192c      	adds	r4, r5, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x14a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80b6 	bhi.w	8000f12 <__udivmoddi4+0x2b6>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e79f      	b.n	8000cf2 <__udivmoddi4+0x96>
 8000db2:	f1c7 0c20 	rsb	ip, r7, #32
 8000db6:	40bb      	lsls	r3, r7
 8000db8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dd0:	4325      	orrs	r5, r4
 8000dd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd6:	0c2c      	lsrs	r4, r5, #16
 8000dd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000ddc:	fa1f fa8e 	uxth.w	sl, lr
 8000de0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de4:	fb09 f40a 	mul.w	r4, r9, sl
 8000de8:	429c      	cmp	r4, r3
 8000dea:	fa02 f207 	lsl.w	r2, r2, r7
 8000dee:	fa00 f107 	lsl.w	r1, r0, r7
 8000df2:	d90b      	bls.n	8000e0c <__udivmoddi4+0x1b0>
 8000df4:	eb1e 0303 	adds.w	r3, lr, r3
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	f080 8087 	bcs.w	8000f0e <__udivmoddi4+0x2b2>
 8000e00:	429c      	cmp	r4, r3
 8000e02:	f240 8084 	bls.w	8000f0e <__udivmoddi4+0x2b2>
 8000e06:	f1a9 0902 	sub.w	r9, r9, #2
 8000e0a:	4473      	add	r3, lr
 8000e0c:	1b1b      	subs	r3, r3, r4
 8000e0e:	b2ad      	uxth	r5, r5
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3310 	mls	r3, r8, r0, r3
 8000e18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e20:	45a2      	cmp	sl, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x1da>
 8000e24:	eb1e 0404 	adds.w	r4, lr, r4
 8000e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2c:	d26b      	bcs.n	8000f06 <__udivmoddi4+0x2aa>
 8000e2e:	45a2      	cmp	sl, r4
 8000e30:	d969      	bls.n	8000f06 <__udivmoddi4+0x2aa>
 8000e32:	3802      	subs	r0, #2
 8000e34:	4474      	add	r4, lr
 8000e36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	eba4 040a 	sub.w	r4, r4, sl
 8000e42:	454c      	cmp	r4, r9
 8000e44:	46c2      	mov	sl, r8
 8000e46:	464b      	mov	r3, r9
 8000e48:	d354      	bcc.n	8000ef4 <__udivmoddi4+0x298>
 8000e4a:	d051      	beq.n	8000ef0 <__udivmoddi4+0x294>
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d069      	beq.n	8000f24 <__udivmoddi4+0x2c8>
 8000e50:	ebb1 050a 	subs.w	r5, r1, sl
 8000e54:	eb64 0403 	sbc.w	r4, r4, r3
 8000e58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e5c:	40fd      	lsrs	r5, r7
 8000e5e:	40fc      	lsrs	r4, r7
 8000e60:	ea4c 0505 	orr.w	r5, ip, r5
 8000e64:	e9c6 5400 	strd	r5, r4, [r6]
 8000e68:	2700      	movs	r7, #0
 8000e6a:	e747      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f703 	lsr.w	r7, r0, r3
 8000e74:	4095      	lsls	r5, r2
 8000e76:	fa01 f002 	lsl.w	r0, r1, r2
 8000e7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e82:	4338      	orrs	r0, r7
 8000e84:	0c01      	lsrs	r1, r0, #16
 8000e86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e8a:	fa1f f885 	uxth.w	r8, r5
 8000e8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e96:	fb07 f308 	mul.w	r3, r7, r8
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea0:	d907      	bls.n	8000eb2 <__udivmoddi4+0x256>
 8000ea2:	1869      	adds	r1, r5, r1
 8000ea4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea8:	d22f      	bcs.n	8000f0a <__udivmoddi4+0x2ae>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d92d      	bls.n	8000f0a <__udivmoddi4+0x2ae>
 8000eae:	3f02      	subs	r7, #2
 8000eb0:	4429      	add	r1, r5
 8000eb2:	1acb      	subs	r3, r1, r3
 8000eb4:	b281      	uxth	r1, r0
 8000eb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb00 f308 	mul.w	r3, r0, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x27e>
 8000eca:	1869      	adds	r1, r5, r1
 8000ecc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ed0:	d217      	bcs.n	8000f02 <__udivmoddi4+0x2a6>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d915      	bls.n	8000f02 <__udivmoddi4+0x2a6>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4429      	add	r1, r5
 8000eda:	1ac9      	subs	r1, r1, r3
 8000edc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ee0:	e73b      	b.n	8000d5a <__udivmoddi4+0xfe>
 8000ee2:	4637      	mov	r7, r6
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	e709      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000ee8:	4607      	mov	r7, r0
 8000eea:	e6e7      	b.n	8000cbc <__udivmoddi4+0x60>
 8000eec:	4618      	mov	r0, r3
 8000eee:	e6fb      	b.n	8000ce8 <__udivmoddi4+0x8c>
 8000ef0:	4541      	cmp	r1, r8
 8000ef2:	d2ab      	bcs.n	8000e4c <__udivmoddi4+0x1f0>
 8000ef4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef8:	eb69 020e 	sbc.w	r2, r9, lr
 8000efc:	3801      	subs	r0, #1
 8000efe:	4613      	mov	r3, r2
 8000f00:	e7a4      	b.n	8000e4c <__udivmoddi4+0x1f0>
 8000f02:	4660      	mov	r0, ip
 8000f04:	e7e9      	b.n	8000eda <__udivmoddi4+0x27e>
 8000f06:	4618      	mov	r0, r3
 8000f08:	e795      	b.n	8000e36 <__udivmoddi4+0x1da>
 8000f0a:	4667      	mov	r7, ip
 8000f0c:	e7d1      	b.n	8000eb2 <__udivmoddi4+0x256>
 8000f0e:	4681      	mov	r9, r0
 8000f10:	e77c      	b.n	8000e0c <__udivmoddi4+0x1b0>
 8000f12:	3802      	subs	r0, #2
 8000f14:	442c      	add	r4, r5
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0x14c>
 8000f18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f1c:	442b      	add	r3, r5
 8000f1e:	e72f      	b.n	8000d80 <__udivmoddi4+0x124>
 8000f20:	4638      	mov	r0, r7
 8000f22:	e708      	b.n	8000d36 <__udivmoddi4+0xda>
 8000f24:	4637      	mov	r7, r6
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0xa0>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <__aeabi_d2uiz>:
 8000f2c:	004a      	lsls	r2, r1, #1
 8000f2e:	d211      	bcs.n	8000f54 <__aeabi_d2uiz+0x28>
 8000f30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f34:	d211      	bcs.n	8000f5a <__aeabi_d2uiz+0x2e>
 8000f36:	d50d      	bpl.n	8000f54 <__aeabi_d2uiz+0x28>
 8000f38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f40:	d40e      	bmi.n	8000f60 <__aeabi_d2uiz+0x34>
 8000f42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000f52:	4770      	bx	lr
 8000f54:	f04f 0000 	mov.w	r0, #0
 8000f58:	4770      	bx	lr
 8000f5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f5e:	d102      	bne.n	8000f66 <__aeabi_d2uiz+0x3a>
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr

08000f6c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f72:	463b      	mov	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f80:	4a21      	ldr	r2, [pc, #132]	; (8001008 <MX_ADC1_Init+0x9c>)
 8000f82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_ADC1_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fae:	4a17      	ldr	r2, [pc, #92]	; (800100c <MX_ADC1_Init+0xa0>)
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fce:	f000 ff27 	bl	8001e20 <HAL_ADC_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fd8:	f000 fbb6 	bl	8001748 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_ADC1_Init+0x98>)
 8000fee:	f001 f875 	bl	80020dc <HAL_ADC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ff8:	f000 fba6 	bl	8001748 <Error_Handler>
  }

}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200049dc 	.word	0x200049dc
 8001008:	40012000 	.word	0x40012000
 800100c:	0f000001 	.word	0x0f000001

08001010 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a17      	ldr	r2, [pc, #92]	; (800108c <HAL_ADC_MspInit+0x7c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d127      	bne.n	8001082 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_ADC_MspInit+0x80>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a15      	ldr	r2, [pc, #84]	; (8001090 <HAL_ADC_MspInit+0x80>)
 800103c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <HAL_ADC_MspInit+0x80>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <HAL_ADC_MspInit+0x80>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_ADC_MspInit+0x80>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_ADC_MspInit+0x80>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800106a:	2302      	movs	r3, #2
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106e:	2303      	movs	r3, #3
 8001070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <HAL_ADC_MspInit+0x84>)
 800107e:	f001 fbb7 	bl	80027f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40012000 	.word	0x40012000
 8001090:	40023800 	.word	0x40023800
 8001094:	40020000 	.word	0x40020000

08001098 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010a4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d013      	beq.n	80010d8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010b4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80010b8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d00b      	beq.n	80010d8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010c0:	e000      	b.n	80010c4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80010c2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f9      	beq.n	80010c2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010ce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010d8:	687b      	ldr	r3, [r7, #4]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4a07      	ldr	r2, [pc, #28]	; (8001128 <vApplicationGetIdleTaskMemory+0x2c>)
 800110c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	4a06      	ldr	r2, [pc, #24]	; (800112c <vApplicationGetIdleTaskMemory+0x30>)
 8001112:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200009fc 	.word	0x200009fc
 800112c:	20000a50 	.word	0x20000a50

08001130 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001130:	b5b0      	push	{r4, r5, r7, lr}
 8001132:	b08e      	sub	sp, #56	; 0x38
 8001134:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of blink01 */
  osThreadDef(blink01, StartBlink01, osPriorityNormal, 0, 128);
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MX_FREERTOS_Init+0x58>)
 8001138:	f107 041c 	add.w	r4, r7, #28
 800113c:	461d      	mov	r5, r3
 800113e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001142:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001146:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink01Handle = osThreadCreate(osThread(blink01), NULL);
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f008 f950 	bl	80093f6 <osThreadCreate>
 8001156:	4602      	mov	r2, r0
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_FREERTOS_Init+0x5c>)
 800115a:	601a      	str	r2, [r3, #0]

  /* definition and creation of blink02 */
  osThreadDef(blink02, StartBlink02, osPriorityNormal, 0, 128);
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_FREERTOS_Init+0x60>)
 800115e:	463c      	mov	r4, r7
 8001160:	461d      	mov	r5, r3
 8001162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001166:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800116a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink02Handle = osThreadCreate(osThread(blink02), NULL);
 800116e:	463b      	mov	r3, r7
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f008 f93f 	bl	80093f6 <osThreadCreate>
 8001178:	4602      	mov	r2, r0
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_FREERTOS_Init+0x64>)
 800117c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800117e:	bf00      	nop
 8001180:	3738      	adds	r7, #56	; 0x38
 8001182:	46bd      	mov	sp, r7
 8001184:	bdb0      	pop	{r4, r5, r7, pc}
 8001186:	bf00      	nop
 8001188:	0800feb8 	.word	0x0800feb8
 800118c:	20004a64 	.word	0x20004a64
 8001190:	0800fedc 	.word	0x0800fedc
 8001194:	20004a68 	.word	0x20004a68

08001198 <StartBlink01>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void const * argument)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b08f      	sub	sp, #60	; 0x3c
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80011a0:	f00a fb5c 	bl	800b85c <MX_USB_HOST_Init>
  struct timespec ts;
  /* USER CODE BEGIN StartBlink01 */
  /* Infinite loop */
  for(;;)
  {
	srand(time(0));
 80011a4:	2000      	movs	r0, #0
 80011a6:	f00b f943 	bl	800c430 <time>
 80011aa:	4603      	mov	r3, r0
 80011ac:	460c      	mov	r4, r1
 80011ae:	4618      	mov	r0, r3
 80011b0:	f00b f8f8 	bl	800c3a4 <srand>
	int num = (rand() % (10000 - 100 + 1)) + 100;
 80011b4:	f00b f900 	bl	800c3b8 <rand>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <StartBlink01+0x88>)
 80011bc:	fb83 1302 	smull	r1, r3, r3, r2
 80011c0:	12d9      	asrs	r1, r3, #11
 80011c2:	17d3      	asrs	r3, r2, #31
 80011c4:	1acb      	subs	r3, r1, r3
 80011c6:	f242 61ad 	movw	r1, #9901	; 0x26ad
 80011ca:	fb01 f303 	mul.w	r3, r1, r3
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	3364      	adds	r3, #100	; 0x64
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 80011d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d8:	4812      	ldr	r0, [pc, #72]	; (8001224 <StartBlink01+0x8c>)
 80011da:	f001 fde3 	bl	8002da4 <HAL_GPIO_TogglePin>

	wr_czas_us time = czas_aktualny();
 80011de:	f000 fc9d 	bl	8001b1c <czas_aktualny>
 80011e2:	e9c7 0108 	strd	r0, r1, [r7, #32]
    wr_czas_do_ts(&ts, time);
 80011e6:	f107 0108 	add.w	r1, r7, #8
 80011ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011ee:	4608      	mov	r0, r1
 80011f0:	f000 fd1e 	bl	8001c30 <wr_czas_do_ts>
    wr_czas_us timeChanged = ts_do_wr_czas(&ts);
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fcc9 	bl	8001b90 <ts_do_wr_czas>
 80011fe:	e9c7 0106 	strd	r0, r1, [r7, #24]

    printf("startBlink01: time=%lld , timeChanged=%lld\n", time, timeChanged);
 8001202:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001206:	e9cd 3400 	strd	r3, r4, [sp]
 800120a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <StartBlink01+0x90>)
 8001210:	f00b f8b6 	bl	800c380 <printf>

	osDelay(num);
 8001214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001216:	4618      	mov	r0, r3
 8001218:	f008 f939 	bl	800948e <osDelay>
  {
 800121c:	e7c2      	b.n	80011a4 <StartBlink01+0xc>
 800121e:	bf00      	nop
 8001220:	34f3fa1b 	.word	0x34f3fa1b
 8001224:	40020c00 	.word	0x40020c00
 8001228:	0800fef8 	.word	0x0800fef8

0800122c <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void const * argument)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af02      	add	r7, sp, #8
 8001232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	srand(time(0));
 8001234:	2000      	movs	r0, #0
 8001236:	f00b f8fb 	bl	800c430 <time>
 800123a:	4603      	mov	r3, r0
 800123c:	460c      	mov	r4, r1
 800123e:	4618      	mov	r0, r3
 8001240:	f00b f8b0 	bl	800c3a4 <srand>
	int num = (rand() % (1000 - 100 + 1)) + 100;
 8001244:	f00b f8b8 	bl	800c3b8 <rand>
 8001248:	4603      	mov	r3, r0
 800124a:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <StartBlink02+0x90>)
 800124c:	fb82 1203 	smull	r1, r2, r2, r3
 8001250:	441a      	add	r2, r3
 8001252:	1251      	asrs	r1, r2, #9
 8001254:	17da      	asrs	r2, r3, #31
 8001256:	1a8a      	subs	r2, r1, r2
 8001258:	f240 3185 	movw	r1, #901	; 0x385
 800125c:	fb01 f202 	mul.w	r2, r1, r2
 8001260:	1a9a      	subs	r2, r3, r2
 8001262:	f102 0364 	add.w	r3, r2, #100	; 0x64
 8001266:	617b      	str	r3, [r7, #20]
    wr_czas_us timeMeasured = czas_aktualny();
 8001268:	f000 fc58 	bl	8001b1c <czas_aktualny>
 800126c:	4603      	mov	r3, r0
 800126e:	460c      	mov	r4, r1
 8001270:	e9c7 3402 	strd	r3, r4, [r7, #8]
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 8001274:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001278:	4811      	ldr	r0, [pc, #68]	; (80012c0 <StartBlink02+0x94>)
 800127a:	f001 fd93 	bl	8002da4 <HAL_GPIO_TogglePin>
	osDelay(num);
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	4618      	mov	r0, r3
 8001282:	f008 f904 	bl	800948e <osDelay>

    int32_t diff = roznica_czasu(&timeMeasured);
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fd1e 	bl	8001ccc <roznica_czasu>
 8001290:	6138      	str	r0, [r7, #16]
    printf("startBlink02: timeMeasured=%llu, delay=%d, difference=%ld\n", timeMeasured, num, diff);
 8001292:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	9201      	str	r2, [sp, #4]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	9200      	str	r2, [sp, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	4623      	mov	r3, r4
 80012a2:	4808      	ldr	r0, [pc, #32]	; (80012c4 <StartBlink02+0x98>)
 80012a4:	f00b f86c 	bl	800c380 <printf>
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13);
 80012a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <StartBlink02+0x94>)
 80012ae:	f001 fd79 	bl	8002da4 <HAL_GPIO_TogglePin>
	osDelay(10);
 80012b2:	200a      	movs	r0, #10
 80012b4:	f008 f8eb 	bl	800948e <osDelay>
  {
 80012b8:	e7bc      	b.n	8001234 <StartBlink02+0x8>
 80012ba:	bf00      	nop
 80012bc:	917952af 	.word	0x917952af
 80012c0:	40020c00 	.word	0x40020c00
 80012c4:	0800ff24 	.word	0x0800ff24

080012c8 <_write>:
  /* USER CODE END StartBlink02 */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
int _write(int file, char *ptr, int len) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  for(int i=0 ; i<len ; i++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e009      	b.n	80012ee <_write+0x26>
    ITM_SendChar((*ptr++));
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	60ba      	str	r2, [r7, #8]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fed8 	bl	8001098 <ITM_SendChar>
  for(int i=0 ; i<len ; i++)
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3301      	adds	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	dbf1      	blt.n	80012da <_write+0x12>
  return len;
 80012f6:	687b      	ldr	r3, [r7, #4]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	; 0x30
 8001304:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	4bb5      	ldr	r3, [pc, #724]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4ab4      	ldr	r2, [pc, #720]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 8001320:	f043 0310 	orr.w	r3, r3, #16
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4bb2      	ldr	r3, [pc, #712]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	61bb      	str	r3, [r7, #24]
 8001330:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	4bae      	ldr	r3, [pc, #696]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4aad      	ldr	r2, [pc, #692]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4bab      	ldr	r3, [pc, #684]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4ba7      	ldr	r3, [pc, #668]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4aa6      	ldr	r2, [pc, #664]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 8001358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4ba4      	ldr	r3, [pc, #656]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4ba0      	ldr	r3, [pc, #640]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a9f      	ldr	r2, [pc, #636]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b9d      	ldr	r3, [pc, #628]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	4b99      	ldr	r3, [pc, #612]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a98      	ldr	r2, [pc, #608]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b96      	ldr	r3, [pc, #600]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b92      	ldr	r3, [pc, #584]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a91      	ldr	r2, [pc, #580]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b8f      	ldr	r3, [pc, #572]	; (80015f0 <MX_GPIO_Init+0x2f0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2108      	movs	r1, #8
 80013c2:	488c      	ldr	r0, [pc, #560]	; (80015f4 <MX_GPIO_Init+0x2f4>)
 80013c4:	f001 fcbc 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	2101      	movs	r1, #1
 80013cc:	488a      	ldr	r0, [pc, #552]	; (80015f8 <MX_GPIO_Init+0x2f8>)
 80013ce:	f001 fcb7 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80013d2:	2200      	movs	r2, #0
 80013d4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80013d8:	4888      	ldr	r0, [pc, #544]	; (80015fc <MX_GPIO_Init+0x2fc>)
 80013da:	f001 fcb1 	bl	8002d40 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e4:	4886      	ldr	r0, [pc, #536]	; (8001600 <MX_GPIO_Init+0x300>)
 80013e6:	f001 fcab 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80013ea:	2304      	movs	r3, #4
 80013ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	487d      	ldr	r0, [pc, #500]	; (80015f4 <MX_GPIO_Init+0x2f4>)
 80013fe:	f001 f9f7 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001402:	2308      	movs	r3, #8
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	4876      	ldr	r0, [pc, #472]	; (80015f4 <MX_GPIO_Init+0x2f4>)
 800141a:	f001 f9e9 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800141e:	2332      	movs	r3, #50	; 0x32
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001422:	4b78      	ldr	r3, [pc, #480]	; (8001604 <MX_GPIO_Init+0x304>)
 8001424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	4870      	ldr	r0, [pc, #448]	; (80015f4 <MX_GPIO_Init+0x2f4>)
 8001432:	f001 f9dd 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE6 PE7 PE8 PE9 
                           PE10 PE11 PE12 PE13 
                           PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
 8001436:	f64f 73c1 	movw	r3, #65473	; 0xffc1
 800143a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800143c:	2303      	movs	r3, #3
 800143e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4619      	mov	r1, r3
 800144a:	486a      	ldr	r0, [pc, #424]	; (80015f4 <MX_GPIO_Init+0x2f4>)
 800144c:	f001 f9d0 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC1 PC2 PC4 
                           PC5 PC6 PC8 PC9 
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8001450:	f642 3376 	movw	r3, #11126	; 0x2b76
 8001454:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001456:	2303      	movs	r3, #3
 8001458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	4864      	ldr	r0, [pc, #400]	; (80015f8 <MX_GPIO_Init+0x2f8>)
 8001466:	f001 f9c3 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800146a:	2301      	movs	r3, #1
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	485d      	ldr	r0, [pc, #372]	; (80015f8 <MX_GPIO_Init+0x2f8>)
 8001482:	f001 f9b5 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001486:	2308      	movs	r3, #8
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001496:	2305      	movs	r3, #5
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4619      	mov	r1, r3
 80014a0:	4855      	ldr	r0, [pc, #340]	; (80015f8 <MX_GPIO_Init+0x2f8>)
 80014a2:	f001 f9a5 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014a6:	2301      	movs	r3, #1
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014aa:	4b56      	ldr	r3, [pc, #344]	; (8001604 <MX_GPIO_Init+0x304>)
 80014ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	4851      	ldr	r0, [pc, #324]	; (8001600 <MX_GPIO_Init+0x300>)
 80014ba:	f001 f999 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014be:	230c      	movs	r3, #12
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c2:	2303      	movs	r3, #3
 80014c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	484b      	ldr	r0, [pc, #300]	; (8001600 <MX_GPIO_Init+0x300>)
 80014d2:	f001 f98d 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014d6:	2310      	movs	r3, #16
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014e6:	2306      	movs	r3, #6
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	4619      	mov	r1, r3
 80014f0:	4843      	ldr	r0, [pc, #268]	; (8001600 <MX_GPIO_Init+0x300>)
 80014f2:	f001 f97d 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014f6:	23e0      	movs	r3, #224	; 0xe0
 80014f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001506:	2305      	movs	r3, #5
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	4619      	mov	r1, r3
 8001510:	483b      	ldr	r0, [pc, #236]	; (8001600 <MX_GPIO_Init+0x300>)
 8001512:	f001 f96d 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13 
                           PB14 PB15 PB4 PB5 
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13 
 8001516:	f24e 1337 	movw	r3, #57655	; 0xe137
 800151a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151c:	2303      	movs	r3, #3
 800151e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4619      	mov	r1, r3
 800152a:	4837      	ldr	r0, [pc, #220]	; (8001608 <MX_GPIO_Init+0x308>)
 800152c:	f001 f960 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001530:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001542:	2305      	movs	r3, #5
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4619      	mov	r1, r3
 800154c:	482e      	ldr	r0, [pc, #184]	; (8001608 <MX_GPIO_Init+0x308>)
 800154e:	f001 f94f 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD0 PD1 PD2 PD3 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001552:	f640 73cf 	movw	r3, #4047	; 0xfcf
 8001556:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001558:	2303      	movs	r3, #3
 800155a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	4619      	mov	r1, r3
 8001566:	4825      	ldr	r0, [pc, #148]	; (80015fc <MX_GPIO_Init+0x2fc>)
 8001568:	f001 f942 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800156c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001570:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	481d      	ldr	r0, [pc, #116]	; (80015fc <MX_GPIO_Init+0x2fc>)
 8001586:	f001 f933 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800158a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800159c:	2306      	movs	r3, #6
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	4814      	ldr	r0, [pc, #80]	; (80015f8 <MX_GPIO_Init+0x2f8>)
 80015a8:	f001 f922 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	480e      	ldr	r0, [pc, #56]	; (8001600 <MX_GPIO_Init+0x300>)
 80015c6:	f001 f913 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80015ca:	2320      	movs	r3, #32
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	4619      	mov	r1, r3
 80015dc:	4807      	ldr	r0, [pc, #28]	; (80015fc <MX_GPIO_Init+0x2fc>)
 80015de:	f001 f907 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80015e2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80015e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e8:	2312      	movs	r3, #18
 80015ea:	623b      	str	r3, [r7, #32]
 80015ec:	e00e      	b.n	800160c <MX_GPIO_Init+0x30c>
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	40020000 	.word	0x40020000
 8001604:	10120000 	.word	0x10120000
 8001608:	40020400 	.word	0x40020400
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160c:	2301      	movs	r3, #1
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001614:	2304      	movs	r3, #4
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	4803      	ldr	r0, [pc, #12]	; (800162c <MX_GPIO_Init+0x32c>)
 8001620:	f001 f8e6 	bl	80027f0 <HAL_GPIO_Init>

}
 8001624:	bf00      	nop
 8001626:	3730      	adds	r7, #48	; 0x30
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40020400 	.word	0x40020400

08001630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001634:	f000 fb90 	bl	8001d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001638:	f000 f80c 	bl	8001654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163c:	f7ff fe60 	bl	8001300 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001640:	f7ff fc94 	bl	8000f6c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001644:	f000 f9d8 	bl	80019f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8001648:	f7ff fd72 	bl	8001130 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800164c:	f007 fecc 	bl	80093e8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001650:	e7fe      	b.n	8001650 <main+0x20>
	...

08001654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b094      	sub	sp, #80	; 0x50
 8001658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165a:	f107 0320 	add.w	r3, r7, #32
 800165e:	2230      	movs	r2, #48	; 0x30
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f00a fe77 	bl	800c356 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	4b27      	ldr	r3, [pc, #156]	; (800171c <SystemClock_Config+0xc8>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	4a26      	ldr	r2, [pc, #152]	; (800171c <SystemClock_Config+0xc8>)
 8001682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001686:	6413      	str	r3, [r2, #64]	; 0x40
 8001688:	4b24      	ldr	r3, [pc, #144]	; (800171c <SystemClock_Config+0xc8>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	4b21      	ldr	r3, [pc, #132]	; (8001720 <SystemClock_Config+0xcc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a20      	ldr	r2, [pc, #128]	; (8001720 <SystemClock_Config+0xcc>)
 800169e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <SystemClock_Config+0xcc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b0:	2301      	movs	r3, #1
 80016b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ba:	2302      	movs	r3, #2
 80016bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016c4:	2304      	movs	r3, #4
 80016c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80016c8:	23c0      	movs	r3, #192	; 0xc0
 80016ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016cc:	2304      	movs	r3, #4
 80016ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80016d0:	2308      	movs	r3, #8
 80016d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d4:	f107 0320 	add.w	r3, r7, #32
 80016d8:	4618      	mov	r0, r3
 80016da:	f003 f889 	bl	80047f0 <HAL_RCC_OscConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016e4:	f000 f830 	bl	8001748 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e8:	230f      	movs	r3, #15
 80016ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ec:	2302      	movs	r3, #2
 80016ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	2103      	movs	r1, #3
 8001704:	4618      	mov	r0, r3
 8001706:	f003 fb93 	bl	8004e30 <HAL_RCC_ClockConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001710:	f000 f81a 	bl	8001748 <Error_Handler>
  }
}
 8001714:	bf00      	nop
 8001716:	3750      	adds	r7, #80	; 0x50
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800
 8001720:	40007000 	.word	0x40007000

08001724 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001736:	f000 fb31 	bl	8001d9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40014400 	.word	0x40014400

08001748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_MspInit+0x54>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a11      	ldr	r2, [pc, #68]	; (80017c0 <HAL_MspInit+0x54>)
 800177c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_MspInit+0x54>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_MspInit+0x54>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_MspInit+0x54>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_MspInit+0x54>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	210f      	movs	r1, #15
 80017ae:	f06f 0001 	mvn.w	r0, #1
 80017b2:	f000 ffd9 	bl	8002768 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800

080017c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08c      	sub	sp, #48	; 0x30
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80017d4:	2200      	movs	r2, #0
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	2019      	movs	r0, #25
 80017da:	f000 ffc5 	bl	8002768 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80017de:	2019      	movs	r0, #25
 80017e0:	f000 ffee 	bl	80027c0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <HAL_InitTick+0xa0>)
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <HAL_InitTick+0xa0>)
 80017ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f2:	6453      	str	r3, [r2, #68]	; 0x44
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <HAL_InitTick+0xa0>)
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001800:	f107 0210 	add.w	r2, r7, #16
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f003 fdaa 	bl	8005364 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001810:	f003 fd94 	bl	800533c <HAL_RCC_GetPCLK2Freq>
 8001814:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001818:	4a13      	ldr	r2, [pc, #76]	; (8001868 <HAL_InitTick+0xa4>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0c9b      	lsrs	r3, r3, #18
 8001820:	3b01      	subs	r3, #1
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_InitTick+0xa8>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <HAL_InitTick+0xac>)
 8001828:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_InitTick+0xa8>)
 800182c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001830:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <HAL_InitTick+0xa8>)
 8001834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001836:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_InitTick+0xa8>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_InitTick+0xa8>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001844:	4809      	ldr	r0, [pc, #36]	; (800186c <HAL_InitTick+0xa8>)
 8001846:	f003 fdbf 	bl	80053c8 <HAL_TIM_Base_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d104      	bne.n	800185a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001850:	4806      	ldr	r0, [pc, #24]	; (800186c <HAL_InitTick+0xa8>)
 8001852:	f003 fe65 	bl	8005520 <HAL_TIM_Base_Start_IT>
 8001856:	4603      	mov	r3, r0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3730      	adds	r7, #48	; 0x30
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40023800 	.word	0x40023800
 8001868:	431bde83 	.word	0x431bde83
 800186c:	20004a6c 	.word	0x20004a6c
 8001870:	40014400 	.word	0x40014400

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <MemManage_Handler+0x4>

0800188e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <BusFault_Handler+0x4>

08001894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <UsageFault_Handler+0x4>

0800189a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80018ae:	f003 fe97 	bl	80055e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20004a6c 	.word	0x20004a6c

080018bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <OTG_FS_IRQHandler+0x10>)
 80018c2:	f001 fd33 	bl	800332c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20004e94 	.word	0x20004e94

080018d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e00a      	b.n	80018f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018e2:	f3af 8000 	nop.w
 80018e6:	4601      	mov	r1, r0
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	60ba      	str	r2, [r7, #8]
 80018ee:	b2ca      	uxtb	r2, r1
 80018f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3301      	adds	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbf0      	blt.n	80018e2 <_read+0x12>
	}

return len;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_close>:
	}
	return len;
}

int _close(int file)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
	return -1;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001932:	605a      	str	r2, [r3, #4]
	return 0;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <_isatty>:

int _isatty(int file)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
	return 1;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
	return 0;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <_sbrk+0x50>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <_sbrk+0x16>
		heap_end = &end;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <_sbrk+0x50>)
 8001986:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <_sbrk+0x54>)
 8001988:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <_sbrk+0x50>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <_sbrk+0x50>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4413      	add	r3, r2
 8001998:	466a      	mov	r2, sp
 800199a:	4293      	cmp	r3, r2
 800199c:	d907      	bls.n	80019ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800199e:	f00a fa5f 	bl	800be60 <__errno>
 80019a2:	4602      	mov	r2, r0
 80019a4:	230c      	movs	r3, #12
 80019a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ac:	e006      	b.n	80019bc <_sbrk+0x48>
	}

	heap_end += incr;
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <_sbrk+0x50>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	4a03      	ldr	r2, [pc, #12]	; (80019c4 <_sbrk+0x50>)
 80019b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000c50 	.word	0x20000c50
 80019c8:	20005168 	.word	0x20005168

080019cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <SystemInit+0x28>)
 80019d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d6:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <SystemInit+0x28>)
 80019d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <SystemInit+0x28>)
 80019e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019e6:	609a      	str	r2, [r3, #8]
#endif
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_USART1_UART_Init+0x4c>)
 80019fe:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <MX_USART1_UART_Init+0x50>)
 8001a00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <MX_USART1_UART_Init+0x4c>)
 8001a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MX_USART1_UART_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_USART1_UART_Init+0x4c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <MX_USART1_UART_Init+0x4c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_USART1_UART_Init+0x4c>)
 8001a1e:	220c      	movs	r2, #12
 8001a20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <MX_USART1_UART_Init+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <MX_USART1_UART_Init+0x4c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_USART1_UART_Init+0x4c>)
 8001a30:	f003 ff9a 	bl	8005968 <HAL_UART_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a3a:	f7ff fe85 	bl	8001748 <Error_Handler>
  }

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20004a24 	.word	0x20004a24
 8001a48:	40011000 	.word	0x40011000

08001a4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a28      	ldr	r2, [pc, #160]	; (8001b0c <HAL_UART_MspInit+0xc0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d14a      	bne.n	8001b04 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_UART_MspInit+0xc4>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a26      	ldr	r2, [pc, #152]	; (8001b10 <HAL_UART_MspInit+0xc4>)
 8001a78:	f043 0310 	orr.w	r3, r3, #16
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <HAL_UART_MspInit+0xc4>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <HAL_UART_MspInit+0xc4>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a1f      	ldr	r2, [pc, #124]	; (8001b10 <HAL_UART_MspInit+0xc4>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <HAL_UART_MspInit+0xc4>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_UART_MspInit+0xc4>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <HAL_UART_MspInit+0xc4>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_UART_MspInit+0xc4>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4619      	mov	r1, r3
 8001ade:	480d      	ldr	r0, [pc, #52]	; (8001b14 <HAL_UART_MspInit+0xc8>)
 8001ae0:	f000 fe86 	bl	80027f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001af4:	2307      	movs	r3, #7
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	4806      	ldr	r0, [pc, #24]	; (8001b18 <HAL_UART_MspInit+0xcc>)
 8001b00:	f000 fe76 	bl	80027f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40011000 	.word	0x40011000
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40020400 	.word	0x40020400

08001b1c <czas_aktualny>:
#include "task.h"
#include "math.h"
#include "stdlib.h"

wr_czas_us czas_aktualny(void)
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
	vTaskSuspendAll();
 8001b22:	f008 fdb3 	bl	800a68c <vTaskSuspendAll>

	uint32_t clk = SystemCoreClock;
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <czas_aktualny+0x64>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	60fb      	str	r3, [r7, #12]
	uint32_t systickNs = SysTick->VAL % clk * (1000 * 1000 * 1000 / clk);
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <czas_aktualny+0x68>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	fbb3 f2f2 	udiv	r2, r3, r2
 8001b36:	68f9      	ldr	r1, [r7, #12]
 8001b38:	fb01 f202 	mul.w	r2, r1, r2
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	4912      	ldr	r1, [pc, #72]	; (8001b88 <czas_aktualny+0x6c>)
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	fbb1 f2f2 	udiv	r2, r1, r2
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	60bb      	str	r3, [r7, #8]
	uint32_t taskGetTickMs = xTaskGetTickCount();
 8001b4c:	f008 fe48 	bl	800a7e0 <xTaskGetTickCount>
 8001b50:	6078      	str	r0, [r7, #4]
	uint32_t currentTime = taskGetTickMs* 1000 + systickNs / 1000;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b58:	fb02 f203 	mul.w	r2, r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	490b      	ldr	r1, [pc, #44]	; (8001b8c <czas_aktualny+0x70>)
 8001b60:	fba1 1303 	umull	r1, r3, r1, r3
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	4413      	add	r3, r2
 8001b68:	603b      	str	r3, [r7, #0]

	xTaskResumeAll();
 8001b6a:	f008 fd9d 	bl	800a6a8 <xTaskResumeAll>
	return currentTime;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f04f 0400 	mov.w	r4, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	4621      	mov	r1, r4
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd90      	pop	{r4, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000000 	.word	0x20000000
 8001b84:	e000e010 	.word	0xe000e010
 8001b88:	3b9aca00 	.word	0x3b9aca00
 8001b8c:	10624dd3 	.word	0x10624dd3

08001b90 <ts_do_wr_czas>:

wr_czas_us ts_do_wr_czas(const struct timespec *ts)
{
 8001b90:	b4f0      	push	{r4, r5, r6, r7}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	wr_czas_us tsTimeNs = ts->tv_nsec / 1000;  // do micro
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4a23      	ldr	r2, [pc, #140]	; (8001c2c <ts_do_wr_czas+0x9c>)
 8001b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001ba2:	1192      	asrs	r2, r2, #6
 8001ba4:	17db      	asrs	r3, r3, #31
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001bac:	e9c7 3404 	strd	r3, r4, [r7, #16]
	wr_czas_us tsTimeS = ts->tv_sec * 1000 * 1000; // do micro
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001bb6:	462b      	mov	r3, r5
 8001bb8:	4634      	mov	r4, r6
 8001bba:	f04f 0100 	mov.w	r1, #0
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	0162      	lsls	r2, r4, #5
 8001bc4:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001bc8:	0159      	lsls	r1, r3, #5
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4614      	mov	r4, r2
 8001bce:	1b5b      	subs	r3, r3, r5
 8001bd0:	eb64 0406 	sbc.w	r4, r4, r6
 8001bd4:	f04f 0100 	mov.w	r1, #0
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	0262      	lsls	r2, r4, #9
 8001bde:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001be2:	0259      	lsls	r1, r3, #9
 8001be4:	460b      	mov	r3, r1
 8001be6:	4614      	mov	r4, r2
 8001be8:	195b      	adds	r3, r3, r5
 8001bea:	eb44 0406 	adc.w	r4, r4, r6
 8001bee:	f04f 0100 	mov.w	r1, #0
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	01a2      	lsls	r2, r4, #6
 8001bf8:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8001bfc:	0199      	lsls	r1, r3, #6
 8001bfe:	1ac9      	subs	r1, r1, r3
 8001c00:	eb62 0204 	sbc.w	r2, r2, r4
 8001c04:	194b      	adds	r3, r1, r5
 8001c06:	eb42 0406 	adc.w	r4, r2, r6
 8001c0a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return tsTimeNs + tsTimeS;
 8001c0e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001c12:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001c16:	185d      	adds	r5, r3, r1
 8001c18:	eb44 0602 	adc.w	r6, r4, r2
 8001c1c:	462b      	mov	r3, r5
 8001c1e:	4634      	mov	r4, r6
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	4621      	mov	r1, r4
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bcf0      	pop	{r4, r5, r6, r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	10624dd3 	.word	0x10624dd3

08001c30 <wr_czas_do_ts>:

void wr_czas_do_ts(struct timespec *ts, wr_czas_us tus)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	e9c7 2300 	strd	r2, r3, [r7]
	long timeInNs = tus * 1000; // do nano
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
	time_t sStruct = 0;
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	f04f 0400 	mov.w	r4, #0
 8001c50:	e9c7 3406 	strd	r3, r4, [r7, #24]
	long nsStruct = timeInNs % 999999999;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <wr_czas_do_ts+0x94>)
 8001c58:	fb82 1203 	smull	r1, r2, r2, r3
 8001c5c:	16d1      	asrs	r1, r2, #27
 8001c5e:	17da      	asrs	r2, r3, #31
 8001c60:	1a8a      	subs	r2, r1, r2
 8001c62:	4919      	ldr	r1, [pc, #100]	; (8001cc8 <wr_czas_do_ts+0x98>)
 8001c64:	fb01 f202 	mul.w	r2, r1, r2
 8001c68:	1a9b      	subs	r3, r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]

	if (timeInNs > 999999999)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <wr_czas_do_ts+0x98>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	dd14      	ble.n	8001c9e <wr_czas_do_ts+0x6e>
	{
		sStruct = floor(timeInNs / 999999999);
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <wr_czas_do_ts+0x94>)
 8001c78:	fb82 1203 	smull	r1, r2, r2, r3
 8001c7c:	16d2      	asrs	r2, r2, #27
 8001c7e:	17db      	asrs	r3, r3, #31
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fc56 	bl	8000534 <__aeabi_i2d>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	460c      	mov	r4, r1
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	4621      	mov	r1, r4
 8001c90:	f7fe ffaa 	bl	8000be8 <__aeabi_d2lz>
 8001c94:	4603      	mov	r3, r0
 8001c96:	460c      	mov	r4, r1
 8001c98:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001c9c:	e005      	b.n	8001caa <wr_czas_do_ts+0x7a>
	}
	else
	{
		sStruct = 0;
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	f04f 0400 	mov.w	r4, #0
 8001ca6:	e9c7 3406 	strd	r3, r4, [r7, #24]
	}

	ts->tv_sec = sStruct;
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001cb0:	e9c2 3400 	strd	r3, r4, [r2]
	ts->tv_nsec = nsStruct;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	609a      	str	r2, [r3, #8]
}
 8001cba:	bf00      	nop
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	225c17d1 	.word	0x225c17d1
 8001cc8:	3b9ac9ff 	.word	0x3b9ac9ff

08001ccc <roznica_czasu>:

int32_t roznica_czasu(const wr_czas_us *prev)
{
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	wr_czas_us current = czas_aktualny();
 8001cd4:	f7ff ff22 	bl	8001b1c <czas_aktualny>
 8001cd8:	e9c7 0106 	strd	r0, r1, [r7, #24]
	wr_czas_us diff = abs(*prev - current);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bfb8      	it	lt
 8001cec:	425b      	neglt	r3, r3
 8001cee:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001cf2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	int32_t returnedDiff = (int32_t)diff;
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	60fb      	str	r3, [r7, #12]
	return returnedDiff;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3724      	adds	r7, #36	; 0x24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd90      	pop	{r4, r7, pc}

08001d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d0a:	e003      	b.n	8001d14 <LoopCopyDataInit>

08001d0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d12:	3104      	adds	r1, #4

08001d14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d14:	480b      	ldr	r0, [pc, #44]	; (8001d44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d1c:	d3f6      	bcc.n	8001d0c <CopyDataInit>
  ldr  r2, =_sbss
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d20:	e002      	b.n	8001d28 <LoopFillZerobss>

08001d22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d24:	f842 3b04 	str.w	r3, [r2], #4

08001d28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d2c:	d3f9      	bcc.n	8001d22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d2e:	f7ff fe4d 	bl	80019cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d32:	f00a f89b 	bl	800be6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d36:	f7ff fc7b 	bl	8001630 <main>
  bx  lr    
 8001d3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d40:	080103d4 	.word	0x080103d4
  ldr  r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d48:	200009e0 	.word	0x200009e0
  ldr  r2, =_sbss
 8001d4c:	200009e0 	.word	0x200009e0
  ldr  r3, = _ebss
 8001d50:	20005168 	.word	0x20005168

08001d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC_IRQHandler>
	...

08001d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <HAL_Init+0x40>)
 8001d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <HAL_Init+0x40>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <HAL_Init+0x40>)
 8001d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <HAL_Init+0x40>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <HAL_Init+0x40>)
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d80:	2003      	movs	r0, #3
 8001d82:	f000 fcd1 	bl	8002728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d86:	2000      	movs	r0, #0
 8001d88:	f7ff fd1c 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d8c:	f7ff fcee 	bl	800176c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023c00 	.word	0x40023c00

08001d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_IncTick+0x20>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_IncTick+0x24>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <HAL_IncTick+0x24>)
 8001dae:	6013      	str	r3, [r2, #0]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	20004aac 	.word	0x20004aac

08001dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_GetTick+0x14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20004aac 	.word	0x20004aac

08001ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de4:	f7ff ffee 	bl	8001dc4 <HAL_GetTick>
 8001de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d005      	beq.n	8001e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_Delay+0x40>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e02:	bf00      	nop
 8001e04:	f7ff ffde 	bl	8001dc4 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d8f7      	bhi.n	8001e04 <HAL_Delay+0x28>
  {
  }
}
 8001e14:	bf00      	nop
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000008 	.word	0x20000008

08001e20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e147      	b.n	80020c6 <HAL_ADC_Init+0x2a6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4aa5      	ldr	r2, [pc, #660]	; (80020d0 <HAL_ADC_Init+0x2b0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d004      	beq.n	8001e4a <HAL_ADC_Init+0x2a>
 8001e40:	f240 1143 	movw	r1, #323	; 0x143
 8001e44:	48a3      	ldr	r0, [pc, #652]	; (80020d4 <HAL_ADC_Init+0x2b4>)
 8001e46:	f7ff fc86 	bl	8001756 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d013      	beq.n	8001e7a <HAL_ADC_Init+0x5a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5a:	d00e      	beq.n	8001e7a <HAL_ADC_Init+0x5a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e64:	d009      	beq.n	8001e7a <HAL_ADC_Init+0x5a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e6e:	d004      	beq.n	8001e7a <HAL_ADC_Init+0x5a>
 8001e70:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8001e74:	4897      	ldr	r0, [pc, #604]	; (80020d4 <HAL_ADC_Init+0x2b4>)
 8001e76:	f7ff fc6e 	bl	8001756 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d013      	beq.n	8001eaa <HAL_ADC_Init+0x8a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8a:	d00e      	beq.n	8001eaa <HAL_ADC_Init+0x8a>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e94:	d009      	beq.n	8001eaa <HAL_ADC_Init+0x8a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e9e:	d004      	beq.n	8001eaa <HAL_ADC_Init+0x8a>
 8001ea0:	f240 1145 	movw	r1, #325	; 0x145
 8001ea4:	488b      	ldr	r0, [pc, #556]	; (80020d4 <HAL_ADC_Init+0x2b4>)
 8001ea6:	f7ff fc56 	bl	8001756 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d008      	beq.n	8001ec4 <HAL_ADC_Init+0xa4>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d004      	beq.n	8001ec4 <HAL_ADC_Init+0xa4>
 8001eba:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8001ebe:	4885      	ldr	r0, [pc, #532]	; (80020d4 <HAL_ADC_Init+0x2b4>)
 8001ec0:	f7ff fc49 	bl	8001756 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7e1b      	ldrb	r3, [r3, #24]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d008      	beq.n	8001ede <HAL_ADC_Init+0xbe>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7e1b      	ldrb	r3, [r3, #24]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d004      	beq.n	8001ede <HAL_ADC_Init+0xbe>
 8001ed4:	f240 1147 	movw	r1, #327	; 0x147
 8001ed8:	487e      	ldr	r0, [pc, #504]	; (80020d4 <HAL_ADC_Init+0x2b4>)
 8001eda:	f7ff fc3c 	bl	8001756 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d054      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eee:	d04f      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ef8:	d04a      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f02:	d045      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f0c:	d040      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001f16:	d03b      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001f20:	d036      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8001f2a:	d031      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f34:	d02c      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8001f3e:	d027      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001f48:	d022      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8001f52:	d01d      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001f5c:	d018      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8001f66:	d013      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001f70:	d00e      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8001f7a:	d009      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	4a55      	ldr	r2, [pc, #340]	; (80020d8 <HAL_ADC_Init+0x2b8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d004      	beq.n	8001f90 <HAL_ADC_Init+0x170>
 8001f86:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001f8a:	4852      	ldr	r0, [pc, #328]	; (80020d4 <HAL_ADC_Init+0x2b4>)
 8001f8c:	f7ff fbe3 	bl	8001756 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d009      	beq.n	8001fac <HAL_ADC_Init+0x18c>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fa0:	d004      	beq.n	8001fac <HAL_ADC_Init+0x18c>
 8001fa2:	f240 1149 	movw	r1, #329	; 0x149
 8001fa6:	484b      	ldr	r0, [pc, #300]	; (80020d4 <HAL_ADC_Init+0x2b4>)
 8001fa8:	f7ff fbd5 	bl	8001756 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_ADC_Init+0x19c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	2b10      	cmp	r3, #16
 8001fba:	d904      	bls.n	8001fc6 <HAL_ADC_Init+0x1a6>
 8001fbc:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001fc0:	4844      	ldr	r0, [pc, #272]	; (80020d4 <HAL_ADC_Init+0x2b4>)
 8001fc2:	f7ff fbc8 	bl	8001756 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d009      	beq.n	8001fe4 <HAL_ADC_Init+0x1c4>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d004      	beq.n	8001fe4 <HAL_ADC_Init+0x1c4>
 8001fda:	f240 114b 	movw	r1, #331	; 0x14b
 8001fde:	483d      	ldr	r0, [pc, #244]	; (80020d4 <HAL_ADC_Init+0x2b4>)
 8001fe0:	f7ff fbb9 	bl	8001756 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d00c      	beq.n	8002006 <HAL_ADC_Init+0x1e6>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_ADC_Init+0x1e6>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d004      	beq.n	8002006 <HAL_ADC_Init+0x1e6>
 8001ffc:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8002000:	4834      	ldr	r0, [pc, #208]	; (80020d4 <HAL_ADC_Init+0x2b4>)
 8002002:	f7ff fba8 	bl	8001756 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3020 	ldrb.w	r3, [r3, #32]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d009      	beq.n	8002024 <HAL_ADC_Init+0x204>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d004      	beq.n	8002024 <HAL_ADC_Init+0x204>
 800201a:	f240 114d 	movw	r1, #333	; 0x14d
 800201e:	482d      	ldr	r0, [pc, #180]	; (80020d4 <HAL_ADC_Init+0x2b4>)
 8002020:	f7ff fb99 	bl	8001756 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	4a2b      	ldr	r2, [pc, #172]	; (80020d8 <HAL_ADC_Init+0x2b8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d017      	beq.n	800205e <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d013      	beq.n	800205e <HAL_ADC_Init+0x23e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800203e:	d00e      	beq.n	800205e <HAL_ADC_Init+0x23e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002048:	d009      	beq.n	800205e <HAL_ADC_Init+0x23e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002052:	d004      	beq.n	800205e <HAL_ADC_Init+0x23e>
 8002054:	f240 1151 	movw	r1, #337	; 0x151
 8002058:	481e      	ldr	r0, [pc, #120]	; (80020d4 <HAL_ADC_Init+0x2b4>)
 800205a:	f7ff fb7c 	bl	8001756 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_ADC_Init+0x25a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe ffd2 	bl	8001010 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	d118      	bne.n	80020b8 <HAL_ADC_Init+0x298>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800208e:	f023 0302 	bic.w	r3, r3, #2
 8002092:	f043 0202 	orr.w	r2, r3, #2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f98c 	bl	80023b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f023 0303 	bic.w	r3, r3, #3
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
 80020b6:	e001      	b.n	80020bc <HAL_ADC_Init+0x29c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40012000 	.word	0x40012000
 80020d4:	0800ff60 	.word	0x0800ff60
 80020d8:	0f000001 	.word	0x0f000001

080020dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b12      	cmp	r3, #18
 80020f0:	d904      	bls.n	80020fc <HAL_ADC_ConfigChannel+0x20>
 80020f2:	f44f 61cb 	mov.w	r1, #1624	; 0x658
 80020f6:	486f      	ldr	r0, [pc, #444]	; (80022b4 <HAL_ADC_ConfigChannel+0x1d8>)
 80020f8:	f7ff fb2d 	bl	8001756 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_ADC_ConfigChannel+0x30>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b10      	cmp	r3, #16
 800210a:	d904      	bls.n	8002116 <HAL_ADC_ConfigChannel+0x3a>
 800210c:	f240 6159 	movw	r1, #1625	; 0x659
 8002110:	4868      	ldr	r0, [pc, #416]	; (80022b4 <HAL_ADC_ConfigChannel+0x1d8>)
 8002112:	f7ff fb20 	bl	8001756 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d020      	beq.n	8002160 <HAL_ADC_ConfigChannel+0x84>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d01c      	beq.n	8002160 <HAL_ADC_ConfigChannel+0x84>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d018      	beq.n	8002160 <HAL_ADC_ConfigChannel+0x84>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d014      	beq.n	8002160 <HAL_ADC_ConfigChannel+0x84>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b04      	cmp	r3, #4
 800213c:	d010      	beq.n	8002160 <HAL_ADC_ConfigChannel+0x84>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b05      	cmp	r3, #5
 8002144:	d00c      	beq.n	8002160 <HAL_ADC_ConfigChannel+0x84>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b06      	cmp	r3, #6
 800214c:	d008      	beq.n	8002160 <HAL_ADC_ConfigChannel+0x84>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b07      	cmp	r3, #7
 8002154:	d004      	beq.n	8002160 <HAL_ADC_ConfigChannel+0x84>
 8002156:	f240 615a 	movw	r1, #1626	; 0x65a
 800215a:	4856      	ldr	r0, [pc, #344]	; (80022b4 <HAL_ADC_ConfigChannel+0x1d8>)
 800215c:	f7ff fafb 	bl	8001756 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_ADC_ConfigChannel+0x92>
 800216a:	2302      	movs	r3, #2
 800216c:	e115      	b.n	800239a <HAL_ADC_ConfigChannel+0x2be>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b09      	cmp	r3, #9
 800217c:	d925      	bls.n	80021ca <HAL_ADC_ConfigChannel+0xee>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68d9      	ldr	r1, [r3, #12]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	3b1e      	subs	r3, #30
 8002194:	2207      	movs	r2, #7
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	400a      	ands	r2, r1
 80021a2:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68d9      	ldr	r1, [r3, #12]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	4618      	mov	r0, r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	4403      	add	r3, r0
 80021bc:	3b1e      	subs	r3, #30
 80021be:	409a      	lsls	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	e022      	b.n	8002210 <HAL_ADC_ConfigChannel+0x134>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6919      	ldr	r1, [r3, #16]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	2207      	movs	r2, #7
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43da      	mvns	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	400a      	ands	r2, r1
 80021ec:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6919      	ldr	r1, [r3, #16]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	4603      	mov	r3, r0
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4403      	add	r3, r0
 8002206:	409a      	lsls	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b06      	cmp	r3, #6
 8002216:	d824      	bhi.n	8002262 <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3b05      	subs	r3, #5
 800222a:	221f      	movs	r2, #31
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43da      	mvns	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	400a      	ands	r2, r1
 8002238:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	b29b      	uxth	r3, r3
 8002246:	4618      	mov	r0, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	3b05      	subs	r3, #5
 8002254:	fa00 f203 	lsl.w	r2, r0, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	430a      	orrs	r2, r1
 800225e:	635a      	str	r2, [r3, #52]	; 0x34
 8002260:	e04e      	b.n	8002300 <HAL_ADC_ConfigChannel+0x224>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	d826      	bhi.n	80022b8 <HAL_ADC_ConfigChannel+0x1dc>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	3b23      	subs	r3, #35	; 0x23
 800227c:	221f      	movs	r2, #31
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	400a      	ands	r2, r1
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	4618      	mov	r0, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	3b23      	subs	r3, #35	; 0x23
 80022a6:	fa00 f203 	lsl.w	r2, r0, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
 80022b2:	e025      	b.n	8002300 <HAL_ADC_ConfigChannel+0x224>
 80022b4:	0800ff60 	.word	0x0800ff60
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	3b41      	subs	r3, #65	; 0x41
 80022ca:	221f      	movs	r2, #31
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43da      	mvns	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	400a      	ands	r2, r1
 80022d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	4618      	mov	r0, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	3b41      	subs	r3, #65	; 0x41
 80022f4:	fa00 f203 	lsl.w	r2, r0, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002300:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <HAL_ADC_ConfigChannel+0x2c8>)
 8002302:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <HAL_ADC_ConfigChannel+0x2cc>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10f      	bne.n	800232e <HAL_ADC_ConfigChannel+0x252>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b12      	cmp	r3, #18
 8002314:	d10b      	bne.n	800232e <HAL_ADC_ConfigChannel+0x252>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1d      	ldr	r2, [pc, #116]	; (80023a8 <HAL_ADC_ConfigChannel+0x2cc>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d12b      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x2b4>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <HAL_ADC_ConfigChannel+0x2d0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d003      	beq.n	800234a <HAL_ADC_ConfigChannel+0x26e>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b11      	cmp	r3, #17
 8002348:	d122      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x2b4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a11      	ldr	r2, [pc, #68]	; (80023ac <HAL_ADC_ConfigChannel+0x2d0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d111      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x2b4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800236c:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <HAL_ADC_ConfigChannel+0x2d4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <HAL_ADC_ConfigChannel+0x2d8>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0c9a      	lsrs	r2, r3, #18
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002382:	e002      	b.n	800238a <HAL_ADC_ConfigChannel+0x2ae>
      {
        counter--;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	3b01      	subs	r3, #1
 8002388:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f9      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x2a8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40012300 	.word	0x40012300
 80023a8:	40012000 	.word	0x40012000
 80023ac:	10000012 	.word	0x10000012
 80023b0:	20000000 	.word	0x20000000
 80023b4:	431bde83 	.word	0x431bde83

080023b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c0:	4b7f      	ldr	r3, [pc, #508]	; (80025c0 <ADC_Init+0x208>)
 80023c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	431a      	orrs	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	021a      	lsls	r2, r3, #8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002432:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6899      	ldr	r1, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	4a5e      	ldr	r2, [pc, #376]	; (80025c4 <ADC_Init+0x20c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d022      	beq.n	8002496 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800245e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6899      	ldr	r1, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6899      	ldr	r1, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	e00f      	b.n	80024b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0202 	bic.w	r2, r2, #2
 80024c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6899      	ldr	r1, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7e1b      	ldrb	r3, [r3, #24]
 80024d0:	005a      	lsls	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d028      	beq.n	8002536 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <ADC_Init+0x13c>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d904      	bls.n	80024fe <ADC_Init+0x146>
 80024f4:	f240 7175 	movw	r1, #1909	; 0x775
 80024f8:	4833      	ldr	r0, [pc, #204]	; (80025c8 <ADC_Init+0x210>)
 80024fa:	f7ff f92c 	bl	8001756 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800250c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800251c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	3b01      	subs	r3, #1
 800252a:	035a      	lsls	r2, r3, #13
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	e007      	b.n	8002546 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002544:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	3b01      	subs	r3, #1
 8002562:	051a      	lsls	r2, r3, #20
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800257a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6899      	ldr	r1, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002588:	025a      	lsls	r2, r3, #9
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6899      	ldr	r1, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	029a      	lsls	r2, r3, #10
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	609a      	str	r2, [r3, #8]
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40012300 	.word	0x40012300
 80025c4:	0f000001 	.word	0x0f000001
 80025c8:	0800ff60 	.word	0x0800ff60

080025cc <__NVIC_SetPriorityGrouping>:
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e8:	4013      	ands	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	60d3      	str	r3, [r2, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_GetPriorityGrouping>:
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <__NVIC_GetPriorityGrouping+0x18>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	f003 0307 	and.w	r3, r3, #7
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_EnableIRQ>:
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	db0b      	blt.n	800265a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	4907      	ldr	r1, [pc, #28]	; (8002668 <__NVIC_EnableIRQ+0x38>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	2001      	movs	r0, #1
 8002652:	fa00 f202 	lsl.w	r2, r0, r2
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000e100 	.word	0xe000e100

0800266c <__NVIC_SetPriority>:
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db0a      	blt.n	8002696 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	490c      	ldr	r1, [pc, #48]	; (80026b8 <__NVIC_SetPriority+0x4c>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	0112      	lsls	r2, r2, #4
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	440b      	add	r3, r1
 8002690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002694:	e00a      	b.n	80026ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4908      	ldr	r1, [pc, #32]	; (80026bc <__NVIC_SetPriority+0x50>)
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	3b04      	subs	r3, #4
 80026a4:	0112      	lsls	r2, r2, #4
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	440b      	add	r3, r1
 80026aa:	761a      	strb	r2, [r3, #24]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000e100 	.word	0xe000e100
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <NVIC_EncodePriority>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	; 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f1c3 0307 	rsb	r3, r3, #7
 80026da:	2b04      	cmp	r3, #4
 80026dc:	bf28      	it	cs
 80026de:	2304      	movcs	r3, #4
 80026e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d902      	bls.n	80026f0 <NVIC_EncodePriority+0x30>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3b03      	subs	r3, #3
 80026ee:	e000      	b.n	80026f2 <NVIC_EncodePriority+0x32>
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	f04f 32ff 	mov.w	r2, #4294967295
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	401a      	ands	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002708:	f04f 31ff 	mov.w	r1, #4294967295
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	43d9      	mvns	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	4313      	orrs	r3, r2
}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b07      	cmp	r3, #7
 8002734:	d00f      	beq.n	8002756 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b06      	cmp	r3, #6
 800273a:	d00c      	beq.n	8002756 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b05      	cmp	r3, #5
 8002740:	d009      	beq.n	8002756 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b04      	cmp	r3, #4
 8002746:	d006      	beq.n	8002756 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b03      	cmp	r3, #3
 800274c:	d003      	beq.n	8002756 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800274e:	2192      	movs	r1, #146	; 0x92
 8002750:	4804      	ldr	r0, [pc, #16]	; (8002764 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002752:	f7ff f800 	bl	8001756 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff ff38 	bl	80025cc <__NVIC_SetPriorityGrouping>
}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	0800ff98 	.word	0x0800ff98

08002768 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b0f      	cmp	r3, #15
 800277e:	d903      	bls.n	8002788 <HAL_NVIC_SetPriority+0x20>
 8002780:	21aa      	movs	r1, #170	; 0xaa
 8002782:	480e      	ldr	r0, [pc, #56]	; (80027bc <HAL_NVIC_SetPriority+0x54>)
 8002784:	f7fe ffe7 	bl	8001756 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b0f      	cmp	r3, #15
 800278c:	d903      	bls.n	8002796 <HAL_NVIC_SetPriority+0x2e>
 800278e:	21ab      	movs	r1, #171	; 0xab
 8002790:	480a      	ldr	r0, [pc, #40]	; (80027bc <HAL_NVIC_SetPriority+0x54>)
 8002792:	f7fe ffe0 	bl	8001756 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002796:	f7ff ff3d 	bl	8002614 <__NVIC_GetPriorityGrouping>
 800279a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	6978      	ldr	r0, [r7, #20]
 80027a2:	f7ff ff8d 	bl	80026c0 <NVIC_EncodePriority>
 80027a6:	4602      	mov	r2, r0
 80027a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ff5c 	bl	800266c <__NVIC_SetPriority>
}
 80027b4:	bf00      	nop
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	0800ff98 	.word	0x0800ff98

080027c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	da03      	bge.n	80027da <HAL_NVIC_EnableIRQ+0x1a>
 80027d2:	21be      	movs	r1, #190	; 0xbe
 80027d4:	4805      	ldr	r0, [pc, #20]	; (80027ec <HAL_NVIC_EnableIRQ+0x2c>)
 80027d6:	f7fe ffbe 	bl	8001756 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff ff26 	bl	8002630 <__NVIC_EnableIRQ>
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	0800ff98 	.word	0x0800ff98

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a3b      	ldr	r2, [pc, #236]	; (80028f8 <HAL_GPIO_Init+0x108>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d017      	beq.n	800283e <HAL_GPIO_Init+0x4e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a3a      	ldr	r2, [pc, #232]	; (80028fc <HAL_GPIO_Init+0x10c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d013      	beq.n	800283e <HAL_GPIO_Init+0x4e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a39      	ldr	r2, [pc, #228]	; (8002900 <HAL_GPIO_Init+0x110>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00f      	beq.n	800283e <HAL_GPIO_Init+0x4e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a38      	ldr	r2, [pc, #224]	; (8002904 <HAL_GPIO_Init+0x114>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00b      	beq.n	800283e <HAL_GPIO_Init+0x4e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a37      	ldr	r2, [pc, #220]	; (8002908 <HAL_GPIO_Init+0x118>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d007      	beq.n	800283e <HAL_GPIO_Init+0x4e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a36      	ldr	r2, [pc, #216]	; (800290c <HAL_GPIO_Init+0x11c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x4e>
 8002836:	21b3      	movs	r1, #179	; 0xb3
 8002838:	4835      	ldr	r0, [pc, #212]	; (8002910 <HAL_GPIO_Init+0x120>)
 800283a:	f7fe ff8c 	bl	8001756 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_GPIO_Init+0x64>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	041b      	lsls	r3, r3, #16
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x6c>
 8002854:	21b4      	movs	r1, #180	; 0xb4
 8002856:	482e      	ldr	r0, [pc, #184]	; (8002910 <HAL_GPIO_Init+0x120>)
 8002858:	f7fe ff7d 	bl	8001756 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d035      	beq.n	80028d0 <HAL_GPIO_Init+0xe0>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d031      	beq.n	80028d0 <HAL_GPIO_Init+0xe0>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b11      	cmp	r3, #17
 8002872:	d02d      	beq.n	80028d0 <HAL_GPIO_Init+0xe0>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d029      	beq.n	80028d0 <HAL_GPIO_Init+0xe0>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b12      	cmp	r3, #18
 8002882:	d025      	beq.n	80028d0 <HAL_GPIO_Init+0xe0>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a22      	ldr	r2, [pc, #136]	; (8002914 <HAL_GPIO_Init+0x124>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d020      	beq.n	80028d0 <HAL_GPIO_Init+0xe0>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4a21      	ldr	r2, [pc, #132]	; (8002918 <HAL_GPIO_Init+0x128>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d01b      	beq.n	80028d0 <HAL_GPIO_Init+0xe0>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a1f      	ldr	r2, [pc, #124]	; (800291c <HAL_GPIO_Init+0x12c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d016      	beq.n	80028d0 <HAL_GPIO_Init+0xe0>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4a1e      	ldr	r2, [pc, #120]	; (8002920 <HAL_GPIO_Init+0x130>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d011      	beq.n	80028d0 <HAL_GPIO_Init+0xe0>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <HAL_GPIO_Init+0x134>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d00c      	beq.n	80028d0 <HAL_GPIO_Init+0xe0>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <HAL_GPIO_Init+0x138>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d007      	beq.n	80028d0 <HAL_GPIO_Init+0xe0>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0xe0>
 80028c8:	21b5      	movs	r1, #181	; 0xb5
 80028ca:	4811      	ldr	r0, [pc, #68]	; (8002910 <HAL_GPIO_Init+0x120>)
 80028cc:	f7fe ff43 	bl	8001756 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00b      	beq.n	80028f0 <HAL_GPIO_Init+0x100>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d007      	beq.n	80028f0 <HAL_GPIO_Init+0x100>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x100>
 80028e8:	21b6      	movs	r1, #182	; 0xb6
 80028ea:	4809      	ldr	r0, [pc, #36]	; (8002910 <HAL_GPIO_Init+0x120>)
 80028ec:	f7fe ff33 	bl	8001756 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	e211      	b.n	8002d1a <HAL_GPIO_Init+0x52a>
 80028f6:	bf00      	nop
 80028f8:	40020000 	.word	0x40020000
 80028fc:	40020400 	.word	0x40020400
 8002900:	40020800 	.word	0x40020800
 8002904:	40020c00 	.word	0x40020c00
 8002908:	40021000 	.word	0x40021000
 800290c:	40021c00 	.word	0x40021c00
 8002910:	0800ffd4 	.word	0x0800ffd4
 8002914:	10110000 	.word	0x10110000
 8002918:	10210000 	.word	0x10210000
 800291c:	10310000 	.word	0x10310000
 8002920:	10120000 	.word	0x10120000
 8002924:	10220000 	.word	0x10220000
 8002928:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800292c:	2201      	movs	r2, #1
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	429a      	cmp	r2, r3
 8002946:	f040 81e5 	bne.w	8002d14 <HAL_GPIO_Init+0x524>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d00b      	beq.n	800296a <HAL_GPIO_Init+0x17a>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d007      	beq.n	800296a <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800295e:	2b11      	cmp	r3, #17
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x17a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b12      	cmp	r3, #18
 8002968:	d144      	bne.n	80029f4 <HAL_GPIO_Init+0x204>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00f      	beq.n	8002992 <HAL_GPIO_Init+0x1a2>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d00b      	beq.n	8002992 <HAL_GPIO_Init+0x1a2>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d007      	beq.n	8002992 <HAL_GPIO_Init+0x1a2>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b03      	cmp	r3, #3
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x1a2>
 800298a:	21c8      	movs	r1, #200	; 0xc8
 800298c:	489f      	ldr	r0, [pc, #636]	; (8002c0c <HAL_GPIO_Init+0x41c>)
 800298e:	f7fe fee2 	bl	8001756 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c8:	2201      	movs	r2, #1
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 0201 	and.w	r2, r3, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2203      	movs	r2, #3
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d004      	beq.n	8002a36 <HAL_GPIO_Init+0x246>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b12      	cmp	r3, #18
 8002a32:	f040 80a0 	bne.w	8002b76 <HAL_GPIO_Init+0x386>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d077      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b09      	cmp	r3, #9
 8002a44:	d073      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d06f      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d06b      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d067      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d063      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d05f      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d05b      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d057      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d053      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d04f      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d04b      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d047      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d043      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b05      	cmp	r3, #5
 8002aac:	d03f      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d03b      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d037      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d033      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d02f      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	d02b      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d027      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b07      	cmp	r3, #7
 8002ae4:	d023      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b07      	cmp	r3, #7
 8002aec:	d01f      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b07      	cmp	r3, #7
 8002af4:	d01b      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d017      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b0a      	cmp	r3, #10
 8002b04:	d013      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b09      	cmp	r3, #9
 8002b0c:	d00f      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b09      	cmp	r3, #9
 8002b14:	d00b      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	d007      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b0f      	cmp	r3, #15
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_Init+0x33e>
 8002b26:	21e0      	movs	r1, #224	; 0xe0
 8002b28:	4838      	ldr	r0, [pc, #224]	; (8002c0c <HAL_GPIO_Init+0x41c>)
 8002b2a:	f7fe fe14 	bl	8001756 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	08da      	lsrs	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3208      	adds	r2, #8
 8002b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	220f      	movs	r2, #15
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	08da      	lsrs	r2, r3, #3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3208      	adds	r2, #8
 8002b70:	69b9      	ldr	r1, [r7, #24]
 8002b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	2203      	movs	r2, #3
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0203 	and.w	r2, r3, #3
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80ae 	beq.w	8002d14 <HAL_GPIO_Init+0x524>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_GPIO_Init+0x420>)
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <HAL_GPIO_Init+0x420>)
 8002bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc6:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <HAL_GPIO_Init+0x420>)
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd4:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <HAL_GPIO_Init+0x424>)
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	089b      	lsrs	r3, r3, #2
 8002bda:	3302      	adds	r3, #2
 8002bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a07      	ldr	r2, [pc, #28]	; (8002c18 <HAL_GPIO_Init+0x428>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d025      	beq.n	8002c4c <HAL_GPIO_Init+0x45c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a06      	ldr	r2, [pc, #24]	; (8002c1c <HAL_GPIO_Init+0x42c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d01f      	beq.n	8002c48 <HAL_GPIO_Init+0x458>
 8002c08:	e00a      	b.n	8002c20 <HAL_GPIO_Init+0x430>
 8002c0a:	bf00      	nop
 8002c0c:	0800ffd4 	.word	0x0800ffd4
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40013800 	.word	0x40013800
 8002c18:	40020000 	.word	0x40020000
 8002c1c:	40020400 	.word	0x40020400
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a42      	ldr	r2, [pc, #264]	; (8002d2c <HAL_GPIO_Init+0x53c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00d      	beq.n	8002c44 <HAL_GPIO_Init+0x454>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a41      	ldr	r2, [pc, #260]	; (8002d30 <HAL_GPIO_Init+0x540>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d007      	beq.n	8002c40 <HAL_GPIO_Init+0x450>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a40      	ldr	r2, [pc, #256]	; (8002d34 <HAL_GPIO_Init+0x544>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d101      	bne.n	8002c3c <HAL_GPIO_Init+0x44c>
 8002c38:	2304      	movs	r3, #4
 8002c3a:	e008      	b.n	8002c4e <HAL_GPIO_Init+0x45e>
 8002c3c:	2307      	movs	r3, #7
 8002c3e:	e006      	b.n	8002c4e <HAL_GPIO_Init+0x45e>
 8002c40:	2303      	movs	r3, #3
 8002c42:	e004      	b.n	8002c4e <HAL_GPIO_Init+0x45e>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e002      	b.n	8002c4e <HAL_GPIO_Init+0x45e>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <HAL_GPIO_Init+0x45e>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	f002 0203 	and.w	r2, r2, #3
 8002c54:	0092      	lsls	r2, r2, #2
 8002c56:	4093      	lsls	r3, r2
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c5e:	4936      	ldr	r1, [pc, #216]	; (8002d38 <HAL_GPIO_Init+0x548>)
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	3302      	adds	r3, #2
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c6c:	4b33      	ldr	r3, [pc, #204]	; (8002d3c <HAL_GPIO_Init+0x54c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c90:	4a2a      	ldr	r2, [pc, #168]	; (8002d3c <HAL_GPIO_Init+0x54c>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c96:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <HAL_GPIO_Init+0x54c>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cba:	4a20      	ldr	r2, [pc, #128]	; (8002d3c <HAL_GPIO_Init+0x54c>)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cc0:	4b1e      	ldr	r3, [pc, #120]	; (8002d3c <HAL_GPIO_Init+0x54c>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ce4:	4a15      	ldr	r2, [pc, #84]	; (8002d3c <HAL_GPIO_Init+0x54c>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cea:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <HAL_GPIO_Init+0x54c>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x51e>
        {
          temp |= iocurrent;
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <HAL_GPIO_Init+0x54c>)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	3301      	adds	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	f67f ae05 	bls.w	800292c <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8002d22:	bf00      	nop
 8002d24:	3720      	adds	r7, #32
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40020800 	.word	0x40020800
 8002d30:	40020c00 	.word	0x40020c00
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40013800 	.word	0x40013800
 8002d3c:	40013c00 	.word	0x40013c00

08002d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	807b      	strh	r3, [r7, #2]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002d50:	887b      	ldrh	r3, [r7, #2]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d004      	beq.n	8002d60 <HAL_GPIO_WritePin+0x20>
 8002d56:	887b      	ldrh	r3, [r7, #2]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_GPIO_WritePin+0x2a>
 8002d60:	f240 119f 	movw	r1, #415	; 0x19f
 8002d64:	480e      	ldr	r0, [pc, #56]	; (8002da0 <HAL_GPIO_WritePin+0x60>)
 8002d66:	f7fe fcf6 	bl	8001756 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002d6a:	787b      	ldrb	r3, [r7, #1]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d007      	beq.n	8002d80 <HAL_GPIO_WritePin+0x40>
 8002d70:	787b      	ldrb	r3, [r7, #1]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d004      	beq.n	8002d80 <HAL_GPIO_WritePin+0x40>
 8002d76:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002d7a:	4809      	ldr	r0, [pc, #36]	; (8002da0 <HAL_GPIO_WritePin+0x60>)
 8002d7c:	f7fe fceb 	bl	8001756 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002d80:	787b      	ldrb	r3, [r7, #1]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d86:	887a      	ldrh	r2, [r7, #2]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d8c:	e003      	b.n	8002d96 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d8e:	887b      	ldrh	r3, [r7, #2]
 8002d90:	041a      	lsls	r2, r3, #16
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	619a      	str	r2, [r3, #24]
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	0800ffd4 	.word	0x0800ffd4

08002da4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002db0:	887b      	ldrh	r3, [r7, #2]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d004      	beq.n	8002dc0 <HAL_GPIO_TogglePin+0x1c>
 8002db6:	887b      	ldrh	r3, [r7, #2]
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	041b      	lsls	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <HAL_GPIO_TogglePin+0x26>
 8002dc0:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002dc4:	480a      	ldr	r0, [pc, #40]	; (8002df0 <HAL_GPIO_TogglePin+0x4c>)
 8002dc6:	f7fe fcc6 	bl	8001756 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	887b      	ldrh	r3, [r7, #2]
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	887b      	ldrh	r3, [r7, #2]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d104      	bne.n	8002de2 <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002dd8:	887b      	ldrh	r3, [r7, #2]
 8002dda:	041a      	lsls	r2, r3, #16
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002de0:	e002      	b.n	8002de8 <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8002de2:	887a      	ldrh	r2, [r7, #2]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	619a      	str	r2, [r3, #24]
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	0800ffd4 	.word	0x0800ffd4

08002df4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df6:	b08f      	sub	sp, #60	; 0x3c
 8002df8:	af0a      	add	r7, sp, #40	; 0x28
 8002dfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e05d      	b.n	8002ec2 <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e0e:	d003      	beq.n	8002e18 <HAL_HCD_Init+0x24>
 8002e10:	217a      	movs	r1, #122	; 0x7a
 8002e12:	482e      	ldr	r0, [pc, #184]	; (8002ecc <HAL_HCD_Init+0xd8>)
 8002e14:	f7fe fc9f 	bl	8001756 <assert_failed>

  USBx = hhcd->Instance;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f008 fd66 	bl	800b904 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f003 fa6c 	bl	8006334 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	603b      	str	r3, [r7, #0]
 8002e62:	687e      	ldr	r6, [r7, #4]
 8002e64:	466d      	mov	r5, sp
 8002e66:	f106 0410 	add.w	r4, r6, #16
 8002e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e76:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e7a:	1d33      	adds	r3, r6, #4
 8002e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e7e:	6838      	ldr	r0, [r7, #0]
 8002e80:	f003 f9e6 	bl	8006250 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2101      	movs	r1, #1
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f003 fa63 	bl	8006356 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	687e      	ldr	r6, [r7, #4]
 8002e98:	466d      	mov	r5, sp
 8002e9a:	f106 0410 	add.w	r4, r6, #16
 8002e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ea0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ea6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002eaa:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eae:	1d33      	adds	r3, r6, #4
 8002eb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eb2:	6838      	ldr	r0, [r7, #0]
 8002eb4:	f003 fb76 	bl	80065a4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	08010010 	.word	0x08010010

08002ed0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af04      	add	r7, sp, #16
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	4608      	mov	r0, r1
 8002eda:	4611      	mov	r1, r2
 8002edc:	461a      	mov	r2, r3
 8002ede:	4603      	mov	r3, r0
 8002ee0:	70fb      	strb	r3, [r7, #3]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	70bb      	strb	r3, [r7, #2]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_HCD_HC_Init+0x28>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e07f      	b.n	8002ff8 <HAL_HCD_HC_Init+0x128>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	440b      	add	r3, r1
 8002f0e:	333d      	adds	r3, #61	; 0x3d
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	440b      	add	r3, r1
 8002f22:	3338      	adds	r3, #56	; 0x38
 8002f24:	787a      	ldrb	r2, [r7, #1]
 8002f26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	440b      	add	r3, r1
 8002f36:	3340      	adds	r3, #64	; 0x40
 8002f38:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f3a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	440b      	add	r3, r1
 8002f4a:	3339      	adds	r3, #57	; 0x39
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	440b      	add	r3, r1
 8002f5e:	333f      	adds	r3, #63	; 0x3f
 8002f60:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002f64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	78bb      	ldrb	r3, [r7, #2]
 8002f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f6e:	b2d8      	uxtb	r0, r3
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	440b      	add	r3, r1
 8002f7c:	333a      	adds	r3, #58	; 0x3a
 8002f7e:	4602      	mov	r2, r0
 8002f80:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002f82:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	da0a      	bge.n	8002fa0 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	440b      	add	r3, r1
 8002f98:	333b      	adds	r3, #59	; 0x3b
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	e009      	b.n	8002fb4 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	440b      	add	r3, r1
 8002fae:	333b      	adds	r3, #59	; 0x3b
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	333c      	adds	r3, #60	; 0x3c
 8002fc4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002fc8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	787c      	ldrb	r4, [r7, #1]
 8002fd0:	78ba      	ldrb	r2, [r7, #2]
 8002fd2:	78f9      	ldrb	r1, [r7, #3]
 8002fd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002fd6:	9302      	str	r3, [sp, #8]
 8002fd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	4623      	mov	r3, r4
 8002fe6:	f003 fc5f 	bl	80068a8 <USB_HC_Init>
 8002fea:	4603      	mov	r3, r0
 8002fec:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd90      	pop	{r4, r7, pc}

08003000 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_HCD_HC_Halt+0x1e>
 800301a:	2302      	movs	r3, #2
 800301c:	e00f      	b.n	800303e <HAL_HCD_HC_Halt+0x3e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f003 fe99 	bl	8006d66 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	4608      	mov	r0, r1
 8003052:	4611      	mov	r1, r2
 8003054:	461a      	mov	r2, r3
 8003056:	4603      	mov	r3, r0
 8003058:	70fb      	strb	r3, [r7, #3]
 800305a:	460b      	mov	r3, r1
 800305c:	70bb      	strb	r3, [r7, #2]
 800305e:	4613      	mov	r3, r2
 8003060:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	333b      	adds	r3, #59	; 0x3b
 8003072:	78ba      	ldrb	r2, [r7, #2]
 8003074:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	440b      	add	r3, r1
 8003084:	333f      	adds	r3, #63	; 0x3f
 8003086:	787a      	ldrb	r2, [r7, #1]
 8003088:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800308a:	7c3b      	ldrb	r3, [r7, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d114      	bne.n	80030ba <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	440b      	add	r3, r1
 800309e:	3342      	adds	r3, #66	; 0x42
 80030a0:	2203      	movs	r2, #3
 80030a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	333d      	adds	r3, #61	; 0x3d
 80030b4:	7f3a      	ldrb	r2, [r7, #28]
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	e009      	b.n	80030ce <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	440b      	add	r3, r1
 80030c8:	3342      	adds	r3, #66	; 0x42
 80030ca:	2202      	movs	r2, #2
 80030cc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80030ce:	787b      	ldrb	r3, [r7, #1]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	f200 80d6 	bhi.w	8003282 <HAL_HCD_HC_SubmitRequest+0x23a>
 80030d6:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <HAL_HCD_HC_SubmitRequest+0x94>)
 80030d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030dc:	080030ed 	.word	0x080030ed
 80030e0:	0800326d 	.word	0x0800326d
 80030e4:	08003159 	.word	0x08003159
 80030e8:	080031e3 	.word	0x080031e3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80030ec:	7c3b      	ldrb	r3, [r7, #16]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	f040 80c9 	bne.w	8003286 <HAL_HCD_HC_SubmitRequest+0x23e>
 80030f4:	78bb      	ldrb	r3, [r7, #2]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f040 80c5 	bne.w	8003286 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80030fc:	8b3b      	ldrh	r3, [r7, #24]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	440b      	add	r3, r1
 8003110:	3351      	adds	r3, #81	; 0x51
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	440b      	add	r3, r1
 8003124:	3351      	adds	r3, #81	; 0x51
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10a      	bne.n	8003142 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	440b      	add	r3, r1
 800313a:	3342      	adds	r3, #66	; 0x42
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003140:	e0a1      	b.n	8003286 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	440b      	add	r3, r1
 8003150:	3342      	adds	r3, #66	; 0x42
 8003152:	2202      	movs	r2, #2
 8003154:	701a      	strb	r2, [r3, #0]
      break;
 8003156:	e096      	b.n	8003286 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003158:	78bb      	ldrb	r3, [r7, #2]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d120      	bne.n	80031a0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	440b      	add	r3, r1
 800316c:	3351      	adds	r3, #81	; 0x51
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10a      	bne.n	800318a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	440b      	add	r3, r1
 8003182:	3342      	adds	r3, #66	; 0x42
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003188:	e07e      	b.n	8003288 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	440b      	add	r3, r1
 8003198:	3342      	adds	r3, #66	; 0x42
 800319a:	2202      	movs	r2, #2
 800319c:	701a      	strb	r2, [r3, #0]
      break;
 800319e:	e073      	b.n	8003288 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	440b      	add	r3, r1
 80031ae:	3350      	adds	r3, #80	; 0x50
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10a      	bne.n	80031cc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	440b      	add	r3, r1
 80031c4:	3342      	adds	r3, #66	; 0x42
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]
      break;
 80031ca:	e05d      	b.n	8003288 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	440b      	add	r3, r1
 80031da:	3342      	adds	r3, #66	; 0x42
 80031dc:	2202      	movs	r2, #2
 80031de:	701a      	strb	r2, [r3, #0]
      break;
 80031e0:	e052      	b.n	8003288 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80031e2:	78bb      	ldrb	r3, [r7, #2]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d120      	bne.n	800322a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	440b      	add	r3, r1
 80031f6:	3351      	adds	r3, #81	; 0x51
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10a      	bne.n	8003214 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	3342      	adds	r3, #66	; 0x42
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003212:	e039      	b.n	8003288 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	440b      	add	r3, r1
 8003222:	3342      	adds	r3, #66	; 0x42
 8003224:	2202      	movs	r2, #2
 8003226:	701a      	strb	r2, [r3, #0]
      break;
 8003228:	e02e      	b.n	8003288 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	440b      	add	r3, r1
 8003238:	3350      	adds	r3, #80	; 0x50
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	3342      	adds	r3, #66	; 0x42
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
      break;
 8003254:	e018      	b.n	8003288 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	440b      	add	r3, r1
 8003264:	3342      	adds	r3, #66	; 0x42
 8003266:	2202      	movs	r2, #2
 8003268:	701a      	strb	r2, [r3, #0]
      break;
 800326a:	e00d      	b.n	8003288 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	440b      	add	r3, r1
 800327a:	3342      	adds	r3, #66	; 0x42
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]
      break;
 8003280:	e002      	b.n	8003288 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8003282:	bf00      	nop
 8003284:	e000      	b.n	8003288 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8003286:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	440b      	add	r3, r1
 8003296:	3344      	adds	r3, #68	; 0x44
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	8b39      	ldrh	r1, [r7, #24]
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4403      	add	r3, r0
 80032ac:	3348      	adds	r3, #72	; 0x48
 80032ae:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	440b      	add	r3, r1
 80032be:	335c      	adds	r3, #92	; 0x5c
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	440b      	add	r3, r1
 80032d2:	334c      	adds	r3, #76	; 0x4c
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	440b      	add	r3, r1
 80032e6:	3339      	adds	r3, #57	; 0x39
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	440b      	add	r3, r1
 80032fa:	335d      	adds	r3, #93	; 0x5d
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	3338      	adds	r3, #56	; 0x38
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	18d1      	adds	r1, r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	f003 fbce 	bl	8006abc <USB_HC_StartXfer>
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop

0800332c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f003 f8eb 	bl	800651e <USB_GetMode>
 8003348:	4603      	mov	r3, r0
 800334a:	2b01      	cmp	r3, #1
 800334c:	f040 80ef 	bne.w	800352e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f003 f8cf 	bl	80064f8 <USB_ReadInterrupts>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80e5 	beq.w	800352c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f003 f8c6 	bl	80064f8 <USB_ReadInterrupts>
 800336c:	4603      	mov	r3, r0
 800336e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003372:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003376:	d104      	bne.n	8003382 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003380:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f003 f8b6 	bl	80064f8 <USB_ReadInterrupts>
 800338c:	4603      	mov	r3, r0
 800338e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003396:	d104      	bne.n	80033a2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f003 f8a6 	bl	80064f8 <USB_ReadInterrupts>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033b6:	d104      	bne.n	80033c2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80033c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f003 f896 	bl	80064f8 <USB_ReadInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d103      	bne.n	80033de <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2202      	movs	r2, #2
 80033dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f003 f888 	bl	80064f8 <USB_ReadInterrupts>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033f2:	d115      	bne.n	8003420 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80033fc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d108      	bne.n	8003420 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f008 faf6 	bl	800ba00 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2101      	movs	r1, #1
 800341a:	4618      	mov	r0, r3
 800341c:	f003 f97e 	bl	800671c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f003 f867 	bl	80064f8 <USB_ReadInterrupts>
 800342a:	4603      	mov	r3, r0
 800342c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003434:	d102      	bne.n	800343c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f001 f966 	bl	8004708 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f003 f859 	bl	80064f8 <USB_ReadInterrupts>
 8003446:	4603      	mov	r3, r0
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b08      	cmp	r3, #8
 800344e:	d106      	bne.n	800345e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f008 fab9 	bl	800b9c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2208      	movs	r2, #8
 800345c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f003 f848 	bl	80064f8 <USB_ReadInterrupts>
 8003468:	4603      	mov	r3, r0
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003472:	d138      	bne.n	80034e6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f003 fc63 	bl	8006d44 <USB_HC_ReadInterrupt>
 800347e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	e025      	b.n	80034d2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d018      	beq.n	80034cc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b0:	d106      	bne.n	80034c0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	4619      	mov	r1, r3
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f8cf 	bl	800365c <HCD_HC_IN_IRQHandler>
 80034be:	e005      	b.n	80034cc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	4619      	mov	r1, r3
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fcfd 	bl	8003ec6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3301      	adds	r3, #1
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d3d4      	bcc.n	8003486 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f003 f804 	bl	80064f8 <USB_ReadInterrupts>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	2b10      	cmp	r3, #16
 80034f8:	d101      	bne.n	80034fe <HAL_HCD_IRQHandler+0x1d2>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_HCD_IRQHandler+0x1d4>
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d014      	beq.n	800352e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0210 	bic.w	r2, r2, #16
 8003512:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f001 f84b 	bl	80045b0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0210 	orr.w	r2, r2, #16
 8003528:	619a      	str	r2, [r3, #24]
 800352a:	e000      	b.n	800352e <HAL_HCD_IRQHandler+0x202>
      return;
 800352c:	bf00      	nop
    }
  }
}
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_HCD_Start+0x16>
 8003546:	2302      	movs	r3, #2
 8003548:	e013      	b.n	8003572 <HAL_HCD_Start+0x3e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f002 fedb 	bl	8006312 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2101      	movs	r1, #1
 8003562:	4618      	mov	r0, r3
 8003564:	f003 f93e 	bl	80067e4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_HCD_Stop+0x16>
 800358c:	2302      	movs	r3, #2
 800358e:	e00d      	b.n	80035ac <HAL_HCD_Stop+0x32>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f003 fd1d 	bl	8006fdc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f003 f8e5 	bl	8006790 <USB_ResetPort>
 80035c6:	4603      	mov	r3, r0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	440b      	add	r3, r1
 80035ea:	335c      	adds	r3, #92	; 0x5c
 80035ec:	781b      	ldrb	r3, [r3, #0]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003606:	78fa      	ldrb	r2, [r7, #3]
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	440b      	add	r3, r1
 8003614:	334c      	adds	r3, #76	; 0x4c
 8003616:	681b      	ldr	r3, [r3, #0]
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f003 f927 	bl	8006884 <USB_GetCurrentFrame>
 8003636:	4603      	mov	r3, r0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f003 f902 	bl	8006856 <USB_GetHostSpeed>
 8003652:	4603      	mov	r3, r0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4413      	add	r3, r2
 800367e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b04      	cmp	r3, #4
 800368a:	d119      	bne.n	80036c0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4413      	add	r3, r2
 8003694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003698:	461a      	mov	r2, r3
 800369a:	2304      	movs	r3, #4
 800369c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	0151      	lsls	r1, r2, #5
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	440a      	add	r2, r1
 80036b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036b8:	f043 0302 	orr.w	r3, r3, #2
 80036bc:	60d3      	str	r3, [r2, #12]
 80036be:	e0ce      	b.n	800385e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d6:	d12c      	bne.n	8003732 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e4:	461a      	mov	r2, r3
 80036e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	440b      	add	r3, r1
 80036fa:	335d      	adds	r3, #93	; 0x5d
 80036fc:	2207      	movs	r2, #7
 80036fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	0151      	lsls	r1, r2, #5
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	440a      	add	r2, r1
 8003716:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800371a:	f043 0302 	orr.w	r3, r3, #2
 800371e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	4611      	mov	r1, r2
 800372a:	4618      	mov	r0, r3
 800372c:	f003 fb1b 	bl	8006d66 <USB_HC_Halt>
 8003730:	e095      	b.n	800385e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4413      	add	r3, r2
 800373a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b20      	cmp	r3, #32
 8003746:	d109      	bne.n	800375c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4413      	add	r3, r2
 8003750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003754:	461a      	mov	r2, r3
 8003756:	2320      	movs	r3, #32
 8003758:	6093      	str	r3, [r2, #8]
 800375a:	e080      	b.n	800385e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4413      	add	r3, r2
 8003764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b08      	cmp	r3, #8
 8003770:	d134      	bne.n	80037dc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4413      	add	r3, r2
 800377a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	0151      	lsls	r1, r2, #5
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	440a      	add	r2, r1
 8003788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800378c:	f043 0302 	orr.w	r3, r3, #2
 8003790:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	440b      	add	r3, r1
 80037a0:	335d      	adds	r3, #93	; 0x5d
 80037a2:	2205      	movs	r2, #5
 80037a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b2:	461a      	mov	r2, r3
 80037b4:	2310      	movs	r3, #16
 80037b6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c4:	461a      	mov	r2, r3
 80037c6:	2308      	movs	r3, #8
 80037c8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f003 fac6 	bl	8006d66 <USB_HC_Halt>
 80037da:	e040      	b.n	800385e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f2:	d134      	bne.n	800385e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	0151      	lsls	r1, r2, #5
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	440a      	add	r2, r1
 800380a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800380e:	f043 0302 	orr.w	r3, r3, #2
 8003812:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	4611      	mov	r1, r2
 800381e:	4618      	mov	r0, r3
 8003820:	f003 faa1 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4413      	add	r3, r2
 800382c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003830:	461a      	mov	r2, r3
 8003832:	2310      	movs	r3, #16
 8003834:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	440b      	add	r3, r1
 8003844:	335d      	adds	r3, #93	; 0x5d
 8003846:	2208      	movs	r2, #8
 8003848:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4413      	add	r3, r2
 8003852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003856:	461a      	mov	r2, r3
 8003858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800385c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4413      	add	r3, r2
 8003866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003874:	d122      	bne.n	80038bc <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4413      	add	r3, r2
 800387e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	0151      	lsls	r1, r2, #5
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	440a      	add	r2, r1
 800388c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003890:	f043 0302 	orr.w	r3, r3, #2
 8003894:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	4611      	mov	r1, r2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f003 fa60 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b2:	461a      	mov	r2, r3
 80038b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038b8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80038ba:	e300      	b.n	8003ebe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	f040 80fd 	bne.w	8003ace <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01b      	beq.n	8003914 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	440b      	add	r3, r1
 80038ea:	3348      	adds	r3, #72	; 0x48
 80038ec:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	0159      	lsls	r1, r3, #5
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	440b      	add	r3, r1
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003900:	1ad1      	subs	r1, r2, r3
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4403      	add	r3, r0
 8003910:	334c      	adds	r3, #76	; 0x4c
 8003912:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	440b      	add	r3, r1
 8003922:	335d      	adds	r3, #93	; 0x5d
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	440b      	add	r3, r1
 8003936:	3358      	adds	r3, #88	; 0x58
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4413      	add	r3, r2
 8003944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003948:	461a      	mov	r2, r3
 800394a:	2301      	movs	r3, #1
 800394c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	440b      	add	r3, r1
 800395c:	333f      	adds	r3, #63	; 0x3f
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	440b      	add	r3, r1
 8003972:	333f      	adds	r3, #63	; 0x3f
 8003974:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003976:	2b02      	cmp	r3, #2
 8003978:	d121      	bne.n	80039be <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4413      	add	r3, r2
 8003982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	0151      	lsls	r1, r2, #5
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	440a      	add	r2, r1
 8003990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003994:	f043 0302 	orr.w	r3, r3, #2
 8003998:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f003 f9de 	bl	8006d66 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b6:	461a      	mov	r2, r3
 80039b8:	2310      	movs	r3, #16
 80039ba:	6093      	str	r3, [r2, #8]
 80039bc:	e070      	b.n	8003aa0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	440b      	add	r3, r1
 80039cc:	333f      	adds	r3, #63	; 0x3f
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d12a      	bne.n	8003a2a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	0151      	lsls	r1, r2, #5
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	440a      	add	r2, r1
 80039ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039f2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	440b      	add	r3, r1
 8003a02:	335c      	adds	r3, #92	; 0x5c
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	b2d8      	uxtb	r0, r3
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	440b      	add	r3, r1
 8003a1a:	335c      	adds	r3, #92	; 0x5c
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	4601      	mov	r1, r0
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f007 fffa 	bl	800ba1c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a28:	e03a      	b.n	8003aa0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	440b      	add	r3, r1
 8003a38:	333f      	adds	r3, #63	; 0x3f
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d12f      	bne.n	8003aa0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	440b      	add	r3, r1
 8003a4e:	335c      	adds	r3, #92	; 0x5c
 8003a50:	2201      	movs	r2, #1
 8003a52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	440b      	add	r3, r1
 8003a62:	3350      	adds	r3, #80	; 0x50
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	f083 0301 	eor.w	r3, r3, #1
 8003a6a:	b2d8      	uxtb	r0, r3
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	440b      	add	r3, r1
 8003a7a:	3350      	adds	r3, #80	; 0x50
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	b2d8      	uxtb	r0, r3
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	440b      	add	r3, r1
 8003a92:	335c      	adds	r3, #92	; 0x5c
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	4601      	mov	r1, r0
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f007 ffbe 	bl	800ba1c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	440b      	add	r3, r1
 8003aae:	3350      	adds	r3, #80	; 0x50
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	f083 0301 	eor.w	r3, r3, #1
 8003ab6:	b2d8      	uxtb	r0, r3
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	440b      	add	r3, r1
 8003ac6:	3350      	adds	r3, #80	; 0x50
 8003ac8:	4602      	mov	r2, r0
 8003aca:	701a      	strb	r2, [r3, #0]
}
 8003acc:	e1f7      	b.n	8003ebe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	f040 811a 	bne.w	8003d1a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	0151      	lsls	r1, r2, #5
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	440a      	add	r2, r1
 8003afc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b00:	f023 0302 	bic.w	r3, r3, #2
 8003b04:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	440b      	add	r3, r1
 8003b14:	335d      	adds	r3, #93	; 0x5d
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10a      	bne.n	8003b32 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	440b      	add	r3, r1
 8003b2a:	335c      	adds	r3, #92	; 0x5c
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	701a      	strb	r2, [r3, #0]
 8003b30:	e0d9      	b.n	8003ce6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	440b      	add	r3, r1
 8003b40:	335d      	adds	r3, #93	; 0x5d
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b05      	cmp	r3, #5
 8003b46:	d10a      	bne.n	8003b5e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	440b      	add	r3, r1
 8003b56:	335c      	adds	r3, #92	; 0x5c
 8003b58:	2205      	movs	r2, #5
 8003b5a:	701a      	strb	r2, [r3, #0]
 8003b5c:	e0c3      	b.n	8003ce6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	440b      	add	r3, r1
 8003b6c:	335d      	adds	r3, #93	; 0x5d
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b06      	cmp	r3, #6
 8003b72:	d00a      	beq.n	8003b8a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	440b      	add	r3, r1
 8003b82:	335d      	adds	r3, #93	; 0x5d
 8003b84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d156      	bne.n	8003c38 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	440b      	add	r3, r1
 8003b98:	3358      	adds	r3, #88	; 0x58
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	1c59      	adds	r1, r3, #1
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4403      	add	r3, r0
 8003bac:	3358      	adds	r3, #88	; 0x58
 8003bae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	440b      	add	r3, r1
 8003bbe:	3358      	adds	r3, #88	; 0x58
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d914      	bls.n	8003bf0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3358      	adds	r3, #88	; 0x58
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	440b      	add	r3, r1
 8003be8:	335c      	adds	r3, #92	; 0x5c
 8003bea:	2204      	movs	r2, #4
 8003bec:	701a      	strb	r2, [r3, #0]
 8003bee:	e009      	b.n	8003c04 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	440b      	add	r3, r1
 8003bfe:	335c      	adds	r3, #92	; 0x5c
 8003c00:	2202      	movs	r2, #2
 8003c02:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c1a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c22:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c30:	461a      	mov	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e056      	b.n	8003ce6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	440b      	add	r3, r1
 8003c46:	335d      	adds	r3, #93	; 0x5d
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d123      	bne.n	8003c96 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	440b      	add	r3, r1
 8003c5c:	335c      	adds	r3, #92	; 0x5c
 8003c5e:	2202      	movs	r2, #2
 8003c60:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c78:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c80:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	e027      	b.n	8003ce6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	440b      	add	r3, r1
 8003ca4:	335d      	adds	r3, #93	; 0x5d
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b07      	cmp	r3, #7
 8003caa:	d11c      	bne.n	8003ce6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	440b      	add	r3, r1
 8003cba:	3358      	adds	r3, #88	; 0x58
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	1c59      	adds	r1, r3, #1
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4403      	add	r3, r0
 8003cce:	3358      	adds	r3, #88	; 0x58
 8003cd0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	440b      	add	r3, r1
 8003ce0:	335c      	adds	r3, #92	; 0x5c
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	b2d8      	uxtb	r0, r3
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	440b      	add	r3, r1
 8003d0a:	335c      	adds	r3, #92	; 0x5c
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4601      	mov	r1, r0
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f007 fe82 	bl	800ba1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d18:	e0d1      	b.n	8003ebe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2c:	2b80      	cmp	r3, #128	; 0x80
 8003d2e:	d13e      	bne.n	8003dae <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	0151      	lsls	r1, r2, #5
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	440a      	add	r2, r1
 8003d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d4a:	f043 0302 	orr.w	r3, r3, #2
 8003d4e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	440b      	add	r3, r1
 8003d5e:	3358      	adds	r3, #88	; 0x58
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	1c59      	adds	r1, r3, #1
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4403      	add	r3, r0
 8003d72:	3358      	adds	r3, #88	; 0x58
 8003d74:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	440b      	add	r3, r1
 8003d84:	335d      	adds	r3, #93	; 0x5d
 8003d86:	2206      	movs	r2, #6
 8003d88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f002 ffe6 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da6:	461a      	mov	r2, r3
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	6093      	str	r3, [r2, #8]
}
 8003dac:	e087      	b.n	8003ebe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b10      	cmp	r3, #16
 8003dc2:	d17c      	bne.n	8003ebe <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	440b      	add	r3, r1
 8003dd2:	333f      	adds	r3, #63	; 0x3f
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d122      	bne.n	8003e20 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	440b      	add	r3, r1
 8003de8:	3358      	adds	r3, #88	; 0x58
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	0151      	lsls	r1, r2, #5
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	440a      	add	r2, r1
 8003e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e08:	f043 0302 	orr.w	r3, r3, #2
 8003e0c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	4611      	mov	r1, r2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f002 ffa4 	bl	8006d66 <USB_HC_Halt>
 8003e1e:	e045      	b.n	8003eac <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	440b      	add	r3, r1
 8003e2e:	333f      	adds	r3, #63	; 0x3f
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	440b      	add	r3, r1
 8003e44:	333f      	adds	r3, #63	; 0x3f
 8003e46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d12f      	bne.n	8003eac <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	440b      	add	r3, r1
 8003e5a:	3358      	adds	r3, #88	; 0x58
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d121      	bne.n	8003eac <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	440b      	add	r3, r1
 8003e76:	335d      	adds	r3, #93	; 0x5d
 8003e78:	2203      	movs	r2, #3
 8003e7a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	0151      	lsls	r1, r2, #5
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	440a      	add	r2, r1
 8003e92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e96:	f043 0302 	orr.w	r3, r3, #2
 8003e9a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f002 ff5d 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2310      	movs	r3, #16
 8003ebc:	6093      	str	r3, [r2, #8]
}
 8003ebe:	bf00      	nop
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b086      	sub	sp, #24
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d119      	bne.n	8003f2a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f02:	461a      	mov	r2, r3
 8003f04:	2304      	movs	r3, #4
 8003f06:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	0151      	lsls	r1, r2, #5
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	440a      	add	r2, r1
 8003f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f22:	f043 0302 	orr.w	r3, r3, #2
 8003f26:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003f28:	e33e      	b.n	80045a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d141      	bne.n	8003fc4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2320      	movs	r3, #32
 8003f50:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	440b      	add	r3, r1
 8003f60:	333d      	adds	r3, #61	; 0x3d
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	f040 831f 	bne.w	80045a8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	440b      	add	r3, r1
 8003f78:	333d      	adds	r3, #61	; 0x3d
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	440b      	add	r3, r1
 8003f8c:	335c      	adds	r3, #92	; 0x5c
 8003f8e:	2202      	movs	r2, #2
 8003f90:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	0151      	lsls	r1, r2, #5
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	440a      	add	r2, r1
 8003fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fac:	f043 0302 	orr.w	r3, r3, #2
 8003fb0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f002 fed2 	bl	8006d66 <USB_HC_Halt>
}
 8003fc2:	e2f1      	b.n	80045a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	d13f      	bne.n	800405a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	440b      	add	r3, r1
 8003fe8:	335d      	adds	r3, #93	; 0x5d
 8003fea:	2204      	movs	r2, #4
 8003fec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	440b      	add	r3, r1
 8003ffc:	333d      	adds	r3, #61	; 0x3d
 8003ffe:	2201      	movs	r2, #1
 8004000:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	440b      	add	r3, r1
 8004010:	3358      	adds	r3, #88	; 0x58
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4413      	add	r3, r2
 800401e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	0151      	lsls	r1, r2, #5
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	440a      	add	r2, r1
 800402c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004030:	f043 0302 	orr.w	r3, r3, #2
 8004034:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	4611      	mov	r1, r2
 8004040:	4618      	mov	r0, r3
 8004042:	f002 fe90 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4413      	add	r3, r2
 800404e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004052:	461a      	mov	r2, r3
 8004054:	2340      	movs	r3, #64	; 0x40
 8004056:	6093      	str	r3, [r2, #8]
}
 8004058:	e2a6      	b.n	80045a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4413      	add	r3, r2
 8004062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800406c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004070:	d122      	bne.n	80040b8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4413      	add	r3, r2
 800407a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	0151      	lsls	r1, r2, #5
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	440a      	add	r2, r1
 8004088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800408c:	f043 0302 	orr.w	r3, r3, #2
 8004090:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	4611      	mov	r1, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f002 fe62 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ae:	461a      	mov	r2, r3
 80040b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040b4:	6093      	str	r3, [r2, #8]
}
 80040b6:	e277      	b.n	80045a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d135      	bne.n	800413a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	440b      	add	r3, r1
 80040dc:	3358      	adds	r3, #88	; 0x58
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	0151      	lsls	r1, r2, #5
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	440a      	add	r2, r1
 80040f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040fc:	f043 0302 	orr.w	r3, r3, #2
 8004100:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	4611      	mov	r1, r2
 800410c:	4618      	mov	r0, r3
 800410e:	f002 fe2a 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4413      	add	r3, r2
 800411a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411e:	461a      	mov	r2, r3
 8004120:	2301      	movs	r3, #1
 8004122:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	440b      	add	r3, r1
 8004132:	335d      	adds	r3, #93	; 0x5d
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
}
 8004138:	e236      	b.n	80045a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4413      	add	r3, r2
 8004142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b08      	cmp	r3, #8
 800414e:	d12b      	bne.n	80041a8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4413      	add	r3, r2
 8004158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415c:	461a      	mov	r2, r3
 800415e:	2308      	movs	r3, #8
 8004160:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4413      	add	r3, r2
 800416a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	440a      	add	r2, r1
 8004178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800417c:	f043 0302 	orr.w	r3, r3, #2
 8004180:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f002 fdea 	bl	8006d66 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	440b      	add	r3, r1
 80041a0:	335d      	adds	r3, #93	; 0x5d
 80041a2:	2205      	movs	r2, #5
 80041a4:	701a      	strb	r2, [r3, #0]
}
 80041a6:	e1ff      	b.n	80045a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	2b10      	cmp	r3, #16
 80041bc:	d155      	bne.n	800426a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	440b      	add	r3, r1
 80041cc:	3358      	adds	r3, #88	; 0x58
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4613      	mov	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	440b      	add	r3, r1
 80041e0:	335d      	adds	r3, #93	; 0x5d
 80041e2:	2203      	movs	r2, #3
 80041e4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4613      	mov	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	440b      	add	r3, r1
 80041f4:	333d      	adds	r3, #61	; 0x3d
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d114      	bne.n	8004226 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	440b      	add	r3, r1
 800420a:	333c      	adds	r3, #60	; 0x3c
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d109      	bne.n	8004226 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	440b      	add	r3, r1
 8004220:	333d      	adds	r3, #61	; 0x3d
 8004222:	2201      	movs	r2, #1
 8004224:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4413      	add	r3, r2
 800422e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	0151      	lsls	r1, r2, #5
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	440a      	add	r2, r1
 800423c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004240:	f043 0302 	orr.w	r3, r3, #2
 8004244:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	4611      	mov	r1, r2
 8004250:	4618      	mov	r0, r3
 8004252:	f002 fd88 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4413      	add	r3, r2
 800425e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004262:	461a      	mov	r2, r3
 8004264:	2310      	movs	r3, #16
 8004266:	6093      	str	r3, [r2, #8]
}
 8004268:	e19e      	b.n	80045a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4413      	add	r3, r2
 8004272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427c:	2b80      	cmp	r3, #128	; 0x80
 800427e:	d12b      	bne.n	80042d8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4413      	add	r3, r2
 8004288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	0151      	lsls	r1, r2, #5
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	440a      	add	r2, r1
 8004296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800429a:	f043 0302 	orr.w	r3, r3, #2
 800429e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	4611      	mov	r1, r2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f002 fd5b 	bl	8006d66 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	440b      	add	r3, r1
 80042be:	335d      	adds	r3, #93	; 0x5d
 80042c0:	2206      	movs	r2, #6
 80042c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d0:	461a      	mov	r2, r3
 80042d2:	2380      	movs	r3, #128	; 0x80
 80042d4:	6093      	str	r3, [r2, #8]
}
 80042d6:	e167      	b.n	80045a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ee:	d135      	bne.n	800435c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	0151      	lsls	r1, r2, #5
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	440a      	add	r2, r1
 8004306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800430a:	f043 0302 	orr.w	r3, r3, #2
 800430e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	4611      	mov	r1, r2
 800431a:	4618      	mov	r0, r3
 800431c:	f002 fd23 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	4413      	add	r3, r2
 8004328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432c:	461a      	mov	r2, r3
 800432e:	2310      	movs	r3, #16
 8004330:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	4413      	add	r3, r2
 800433a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433e:	461a      	mov	r2, r3
 8004340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004344:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	440b      	add	r3, r1
 8004354:	335d      	adds	r3, #93	; 0x5d
 8004356:	2208      	movs	r2, #8
 8004358:	701a      	strb	r2, [r3, #0]
}
 800435a:	e125      	b.n	80045a8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4413      	add	r3, r2
 8004364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b02      	cmp	r3, #2
 8004370:	f040 811a 	bne.w	80045a8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4413      	add	r3, r2
 800437c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	0151      	lsls	r1, r2, #5
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	440a      	add	r2, r1
 800438a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800438e:	f023 0302 	bic.w	r3, r3, #2
 8004392:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	440b      	add	r3, r1
 80043a2:	335d      	adds	r3, #93	; 0x5d
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d137      	bne.n	800441a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	440b      	add	r3, r1
 80043b8:	335c      	adds	r3, #92	; 0x5c
 80043ba:	2201      	movs	r2, #1
 80043bc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	440b      	add	r3, r1
 80043cc:	333f      	adds	r3, #63	; 0x3f
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d00b      	beq.n	80043ec <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	440b      	add	r3, r1
 80043e2:	333f      	adds	r3, #63	; 0x3f
 80043e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	f040 80c5 	bne.w	8004576 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	440b      	add	r3, r1
 80043fa:	3351      	adds	r3, #81	; 0x51
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	f083 0301 	eor.w	r3, r3, #1
 8004402:	b2d8      	uxtb	r0, r3
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	440b      	add	r3, r1
 8004412:	3351      	adds	r3, #81	; 0x51
 8004414:	4602      	mov	r2, r0
 8004416:	701a      	strb	r2, [r3, #0]
 8004418:	e0ad      	b.n	8004576 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	440b      	add	r3, r1
 8004428:	335d      	adds	r3, #93	; 0x5d
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b03      	cmp	r3, #3
 800442e:	d10a      	bne.n	8004446 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	440b      	add	r3, r1
 800443e:	335c      	adds	r3, #92	; 0x5c
 8004440:	2202      	movs	r2, #2
 8004442:	701a      	strb	r2, [r3, #0]
 8004444:	e097      	b.n	8004576 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	440b      	add	r3, r1
 8004454:	335d      	adds	r3, #93	; 0x5d
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b04      	cmp	r3, #4
 800445a:	d10a      	bne.n	8004472 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	440b      	add	r3, r1
 800446a:	335c      	adds	r3, #92	; 0x5c
 800446c:	2202      	movs	r2, #2
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	e081      	b.n	8004576 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	440b      	add	r3, r1
 8004480:	335d      	adds	r3, #93	; 0x5d
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b05      	cmp	r3, #5
 8004486:	d10a      	bne.n	800449e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	440b      	add	r3, r1
 8004496:	335c      	adds	r3, #92	; 0x5c
 8004498:	2205      	movs	r2, #5
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e06b      	b.n	8004576 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	440b      	add	r3, r1
 80044ac:	335d      	adds	r3, #93	; 0x5d
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b06      	cmp	r3, #6
 80044b2:	d00a      	beq.n	80044ca <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	440b      	add	r3, r1
 80044c2:	335d      	adds	r3, #93	; 0x5d
 80044c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d155      	bne.n	8004576 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	440b      	add	r3, r1
 80044d8:	3358      	adds	r3, #88	; 0x58
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	1c59      	adds	r1, r3, #1
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	4403      	add	r3, r0
 80044ec:	3358      	adds	r3, #88	; 0x58
 80044ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	440b      	add	r3, r1
 80044fe:	3358      	adds	r3, #88	; 0x58
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d914      	bls.n	8004530 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4613      	mov	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	440b      	add	r3, r1
 8004514:	3358      	adds	r3, #88	; 0x58
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	440b      	add	r3, r1
 8004528:	335c      	adds	r3, #92	; 0x5c
 800452a:	2204      	movs	r2, #4
 800452c:	701a      	strb	r2, [r3, #0]
 800452e:	e009      	b.n	8004544 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	440b      	add	r3, r1
 800453e:	335c      	adds	r3, #92	; 0x5c
 8004540:	2202      	movs	r2, #2
 8004542:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	4413      	add	r3, r2
 800454c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800455a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004562:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4413      	add	r3, r2
 800456c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004570:	461a      	mov	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4413      	add	r3, r2
 800457e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004582:	461a      	mov	r2, r3
 8004584:	2302      	movs	r3, #2
 8004586:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	b2d8      	uxtb	r0, r3
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	440b      	add	r3, r1
 800459a:	335c      	adds	r3, #92	; 0x5c
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	4601      	mov	r1, r0
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f007 fa3a 	bl	800ba1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80045a8:	bf00      	nop
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08a      	sub	sp, #40	; 0x28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	0c5b      	lsrs	r3, r3, #17
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	091b      	lsrs	r3, r3, #4
 80045e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045e4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d003      	beq.n	80045f4 <HCD_RXQLVL_IRQHandler+0x44>
 80045ec:	2b05      	cmp	r3, #5
 80045ee:	f000 8082 	beq.w	80046f6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80045f2:	e083      	b.n	80046fc <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d07f      	beq.n	80046fa <HCD_RXQLVL_IRQHandler+0x14a>
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	440b      	add	r3, r1
 8004608:	3344      	adds	r3, #68	; 0x44
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d074      	beq.n	80046fa <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	440b      	add	r3, r1
 8004622:	3344      	adds	r3, #68	; 0x44
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	b292      	uxth	r2, r2
 800462a:	4619      	mov	r1, r3
 800462c:	f001 ff3b 	bl	80064a6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	440b      	add	r3, r1
 800463e:	3344      	adds	r3, #68	; 0x44
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	18d1      	adds	r1, r2, r3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4403      	add	r3, r0
 8004654:	3344      	adds	r3, #68	; 0x44
 8004656:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	440b      	add	r3, r1
 8004666:	334c      	adds	r3, #76	; 0x4c
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	18d1      	adds	r1, r2, r3
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	4403      	add	r3, r0
 800467c:	334c      	adds	r3, #76	; 0x4c
 800467e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	4413      	add	r3, r2
 8004688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <HCD_RXQLVL_IRQHandler+0x154>)
 8004690:	4013      	ands	r3, r2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d031      	beq.n	80046fa <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	4413      	add	r3, r2
 800469e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046ac:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046b4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c2:	461a      	mov	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	440b      	add	r3, r1
 80046d6:	3350      	adds	r3, #80	; 0x50
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	f083 0301 	eor.w	r3, r3, #1
 80046de:	b2d8      	uxtb	r0, r3
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4613      	mov	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	440b      	add	r3, r1
 80046ee:	3350      	adds	r3, #80	; 0x50
 80046f0:	4602      	mov	r2, r0
 80046f2:	701a      	strb	r2, [r3, #0]
      break;
 80046f4:	e001      	b.n	80046fa <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80046f6:	bf00      	nop
 80046f8:	e000      	b.n	80046fc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80046fa:	bf00      	nop
  }
}
 80046fc:	bf00      	nop
 80046fe:	3728      	adds	r7, #40	; 0x28
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	1ff80000 	.word	0x1ff80000

08004708 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004734:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b02      	cmp	r3, #2
 800473e:	d10b      	bne.n	8004758 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b01      	cmp	r3, #1
 8004748:	d102      	bne.n	8004750 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f007 f94a 	bl	800b9e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f043 0302 	orr.w	r3, r3, #2
 8004756:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b08      	cmp	r3, #8
 8004760:	d132      	bne.n	80047c8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f043 0308 	orr.w	r3, r3, #8
 8004768:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b04      	cmp	r3, #4
 8004772:	d126      	bne.n	80047c2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d113      	bne.n	80047a4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004782:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004786:	d106      	bne.n	8004796 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2102      	movs	r1, #2
 800478e:	4618      	mov	r0, r3
 8004790:	f001 ffc4 	bl	800671c <USB_InitFSLSPClkSel>
 8004794:	e011      	b.n	80047ba <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2101      	movs	r1, #1
 800479c:	4618      	mov	r0, r3
 800479e:	f001 ffbd 	bl	800671c <USB_InitFSLSPClkSel>
 80047a2:	e00a      	b.n	80047ba <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d106      	bne.n	80047ba <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047b2:	461a      	mov	r2, r3
 80047b4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80047b8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f007 f940 	bl	800ba40 <HAL_HCD_PortEnabled_Callback>
 80047c0:	e002      	b.n	80047c8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f007 f94a 	bl	800ba5c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d103      	bne.n	80047da <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f043 0320 	orr.w	r3, r3, #32
 80047d8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047e0:	461a      	mov	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6013      	str	r3, [r2, #0]
}
 80047e6:	bf00      	nop
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
	...

080047f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e30d      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b0f      	cmp	r3, #15
 8004808:	d903      	bls.n	8004812 <HAL_RCC_OscConfig+0x22>
 800480a:	21e8      	movs	r1, #232	; 0xe8
 800480c:	48a3      	ldr	r0, [pc, #652]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 800480e:	f7fc ffa2 	bl	8001756 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 8088 	beq.w	8004930 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00d      	beq.n	8004844 <HAL_RCC_OscConfig+0x54>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004830:	d008      	beq.n	8004844 <HAL_RCC_OscConfig+0x54>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800483a:	d003      	beq.n	8004844 <HAL_RCC_OscConfig+0x54>
 800483c:	21ed      	movs	r1, #237	; 0xed
 800483e:	4897      	ldr	r0, [pc, #604]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004840:	f7fc ff89 	bl	8001756 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004844:	4b96      	ldr	r3, [pc, #600]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 030c 	and.w	r3, r3, #12
 800484c:	2b04      	cmp	r3, #4
 800484e:	d00c      	beq.n	800486a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004850:	4b93      	ldr	r3, [pc, #588]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004858:	2b08      	cmp	r3, #8
 800485a:	d112      	bne.n	8004882 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800485c:	4b90      	ldr	r3, [pc, #576]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004868:	d10b      	bne.n	8004882 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800486a:	4b8d      	ldr	r3, [pc, #564]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d05b      	beq.n	800492e <HAL_RCC_OscConfig+0x13e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d157      	bne.n	800492e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e2cd      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488a:	d106      	bne.n	800489a <HAL_RCC_OscConfig+0xaa>
 800488c:	4b84      	ldr	r3, [pc, #528]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a83      	ldr	r2, [pc, #524]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 8004892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	e01d      	b.n	80048d6 <HAL_RCC_OscConfig+0xe6>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048a2:	d10c      	bne.n	80048be <HAL_RCC_OscConfig+0xce>
 80048a4:	4b7e      	ldr	r3, [pc, #504]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a7d      	ldr	r2, [pc, #500]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 80048aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	4b7b      	ldr	r3, [pc, #492]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a7a      	ldr	r2, [pc, #488]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 80048b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	e00b      	b.n	80048d6 <HAL_RCC_OscConfig+0xe6>
 80048be:	4b78      	ldr	r3, [pc, #480]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a77      	ldr	r2, [pc, #476]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 80048c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	4b75      	ldr	r3, [pc, #468]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a74      	ldr	r2, [pc, #464]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 80048d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d013      	beq.n	8004906 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048de:	f7fd fa71 	bl	8001dc4 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048e6:	f7fd fa6d 	bl	8001dc4 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b64      	cmp	r3, #100	; 0x64
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e292      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f8:	4b69      	ldr	r3, [pc, #420]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCC_OscConfig+0xf6>
 8004904:	e014      	b.n	8004930 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7fd fa5d 	bl	8001dc4 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800490e:	f7fd fa59 	bl	8001dc4 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b64      	cmp	r3, #100	; 0x64
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e27e      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004920:	4b5f      	ldr	r3, [pc, #380]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <HAL_RCC_OscConfig+0x11e>
 800492c:	e000      	b.n	8004930 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800492e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d079      	beq.n	8004a30 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_RCC_OscConfig+0x166>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d004      	beq.n	8004956 <HAL_RCC_OscConfig+0x166>
 800494c:	f240 111f 	movw	r1, #287	; 0x11f
 8004950:	4852      	ldr	r0, [pc, #328]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004952:	f7fc ff00 	bl	8001756 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b1f      	cmp	r3, #31
 800495c:	d904      	bls.n	8004968 <HAL_RCC_OscConfig+0x178>
 800495e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8004962:	484e      	ldr	r0, [pc, #312]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004964:	f7fc fef7 	bl	8001756 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004968:	4b4d      	ldr	r3, [pc, #308]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 030c 	and.w	r3, r3, #12
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00b      	beq.n	800498c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004974:	4b4a      	ldr	r3, [pc, #296]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800497c:	2b08      	cmp	r3, #8
 800497e:	d11c      	bne.n	80049ba <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004980:	4b47      	ldr	r3, [pc, #284]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d116      	bne.n	80049ba <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498c:	4b44      	ldr	r3, [pc, #272]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_RCC_OscConfig+0x1b4>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d001      	beq.n	80049a4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e23c      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a4:	4b3e      	ldr	r3, [pc, #248]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	493b      	ldr	r1, [pc, #236]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b8:	e03a      	b.n	8004a30 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d020      	beq.n	8004a04 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049c2:	4b38      	ldr	r3, [pc, #224]	; (8004aa4 <HAL_RCC_OscConfig+0x2b4>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fd f9fc 	bl	8001dc4 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049d0:	f7fd f9f8 	bl	8001dc4 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e21d      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e2:	4b2f      	ldr	r3, [pc, #188]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ee:	4b2c      	ldr	r3, [pc, #176]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4928      	ldr	r1, [pc, #160]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]
 8004a02:	e015      	b.n	8004a30 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a04:	4b27      	ldr	r3, [pc, #156]	; (8004aa4 <HAL_RCC_OscConfig+0x2b4>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0a:	f7fd f9db 	bl	8001dc4 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a12:	f7fd f9d7 	bl	8001dc4 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e1fc      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a24:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d046      	beq.n	8004aca <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_RCC_OscConfig+0x266>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d004      	beq.n	8004a56 <HAL_RCC_OscConfig+0x266>
 8004a4c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8004a50:	4812      	ldr	r0, [pc, #72]	; (8004a9c <HAL_RCC_OscConfig+0x2ac>)
 8004a52:	f7fc fe80 	bl	8001756 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d016      	beq.n	8004a8c <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a5e:	4b12      	ldr	r3, [pc, #72]	; (8004aa8 <HAL_RCC_OscConfig+0x2b8>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a64:	f7fd f9ae 	bl	8001dc4 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a6c:	f7fd f9aa 	bl	8001dc4 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e1cf      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7e:	4b08      	ldr	r3, [pc, #32]	; (8004aa0 <HAL_RCC_OscConfig+0x2b0>)
 8004a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0x27c>
 8004a8a:	e01e      	b.n	8004aca <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <HAL_RCC_OscConfig+0x2b8>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a92:	f7fd f997 	bl	8001dc4 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a98:	e011      	b.n	8004abe <HAL_RCC_OscConfig+0x2ce>
 8004a9a:	bf00      	nop
 8004a9c:	08010048 	.word	0x08010048
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	42470000 	.word	0x42470000
 8004aa8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aac:	f7fd f98a 	bl	8001dc4 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e1af      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004abe:	4b97      	ldr	r3, [pc, #604]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 80a8 	beq.w	8004c28 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00c      	beq.n	8004afe <HAL_RCC_OscConfig+0x30e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d008      	beq.n	8004afe <HAL_RCC_OscConfig+0x30e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b05      	cmp	r3, #5
 8004af2:	d004      	beq.n	8004afe <HAL_RCC_OscConfig+0x30e>
 8004af4:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004af8:	4889      	ldr	r0, [pc, #548]	; (8004d20 <HAL_RCC_OscConfig+0x530>)
 8004afa:	f7fc fe2c 	bl	8001756 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004afe:	4b87      	ldr	r3, [pc, #540]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10f      	bne.n	8004b2a <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60bb      	str	r3, [r7, #8]
 8004b0e:	4b83      	ldr	r3, [pc, #524]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	4a82      	ldr	r2, [pc, #520]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b18:	6413      	str	r3, [r2, #64]	; 0x40
 8004b1a:	4b80      	ldr	r3, [pc, #512]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b22:	60bb      	str	r3, [r7, #8]
 8004b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b26:	2301      	movs	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b2a:	4b7e      	ldr	r3, [pc, #504]	; (8004d24 <HAL_RCC_OscConfig+0x534>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d118      	bne.n	8004b68 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b36:	4b7b      	ldr	r3, [pc, #492]	; (8004d24 <HAL_RCC_OscConfig+0x534>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a7a      	ldr	r2, [pc, #488]	; (8004d24 <HAL_RCC_OscConfig+0x534>)
 8004b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b42:	f7fd f93f 	bl	8001dc4 <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4a:	f7fd f93b 	bl	8001dc4 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e160      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5c:	4b71      	ldr	r3, [pc, #452]	; (8004d24 <HAL_RCC_OscConfig+0x534>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0f0      	beq.n	8004b4a <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d106      	bne.n	8004b7e <HAL_RCC_OscConfig+0x38e>
 8004b70:	4b6a      	ldr	r3, [pc, #424]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b74:	4a69      	ldr	r2, [pc, #420]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7c:	e01c      	b.n	8004bb8 <HAL_RCC_OscConfig+0x3c8>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b05      	cmp	r3, #5
 8004b84:	d10c      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x3b0>
 8004b86:	4b65      	ldr	r3, [pc, #404]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	4a64      	ldr	r2, [pc, #400]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004b8c:	f043 0304 	orr.w	r3, r3, #4
 8004b90:	6713      	str	r3, [r2, #112]	; 0x70
 8004b92:	4b62      	ldr	r3, [pc, #392]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	4a61      	ldr	r2, [pc, #388]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004b98:	f043 0301 	orr.w	r3, r3, #1
 8004b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9e:	e00b      	b.n	8004bb8 <HAL_RCC_OscConfig+0x3c8>
 8004ba0:	4b5e      	ldr	r3, [pc, #376]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba4:	4a5d      	ldr	r2, [pc, #372]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004ba6:	f023 0301 	bic.w	r3, r3, #1
 8004baa:	6713      	str	r3, [r2, #112]	; 0x70
 8004bac:	4b5b      	ldr	r3, [pc, #364]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb0:	4a5a      	ldr	r2, [pc, #360]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004bb2:	f023 0304 	bic.w	r3, r3, #4
 8004bb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d015      	beq.n	8004bec <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc0:	f7fd f900 	bl	8001dc4 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc6:	e00a      	b.n	8004bde <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc8:	f7fd f8fc 	bl	8001dc4 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e11f      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bde:	4b4f      	ldr	r3, [pc, #316]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0ee      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x3d8>
 8004bea:	e014      	b.n	8004c16 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bec:	f7fd f8ea 	bl	8001dc4 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf2:	e00a      	b.n	8004c0a <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bf4:	f7fd f8e6 	bl	8001dc4 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e109      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c0a:	4b44      	ldr	r3, [pc, #272]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1ee      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c16:	7dfb      	ldrb	r3, [r7, #23]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d105      	bne.n	8004c28 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1c:	4b3f      	ldr	r3, [pc, #252]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	4a3e      	ldr	r2, [pc, #248]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00c      	beq.n	8004c4a <HAL_RCC_OscConfig+0x45a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d008      	beq.n	8004c4a <HAL_RCC_OscConfig+0x45a>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d004      	beq.n	8004c4a <HAL_RCC_OscConfig+0x45a>
 8004c40:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004c44:	4836      	ldr	r0, [pc, #216]	; (8004d20 <HAL_RCC_OscConfig+0x530>)
 8004c46:	f7fc fd86 	bl	8001756 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80e4 	beq.w	8004e1c <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c54:	4b31      	ldr	r3, [pc, #196]	; (8004d1c <HAL_RCC_OscConfig+0x52c>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	f000 80ae 	beq.w	8004dbe <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	f040 8092 	bne.w	8004d90 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d009      	beq.n	8004c88 <HAL_RCC_OscConfig+0x498>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c7c:	d004      	beq.n	8004c88 <HAL_RCC_OscConfig+0x498>
 8004c7e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004c82:	4827      	ldr	r0, [pc, #156]	; (8004d20 <HAL_RCC_OscConfig+0x530>)
 8004c84:	f7fc fd67 	bl	8001756 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	2b3f      	cmp	r3, #63	; 0x3f
 8004c8e:	d904      	bls.n	8004c9a <HAL_RCC_OscConfig+0x4aa>
 8004c90:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004c94:	4822      	ldr	r0, [pc, #136]	; (8004d20 <HAL_RCC_OscConfig+0x530>)
 8004c96:	f7fc fd5e 	bl	8001756 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	2bbf      	cmp	r3, #191	; 0xbf
 8004ca0:	d904      	bls.n	8004cac <HAL_RCC_OscConfig+0x4bc>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004caa:	d904      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x4c6>
 8004cac:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004cb0:	481b      	ldr	r0, [pc, #108]	; (8004d20 <HAL_RCC_OscConfig+0x530>)
 8004cb2:	f7fc fd50 	bl	8001756 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d010      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x4f0>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d00c      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x4f0>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	2b06      	cmp	r3, #6
 8004ccc:	d008      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x4f0>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d004      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x4f0>
 8004cd6:	f240 11db 	movw	r1, #475	; 0x1db
 8004cda:	4811      	ldr	r0, [pc, #68]	; (8004d20 <HAL_RCC_OscConfig+0x530>)
 8004cdc:	f7fc fd3b 	bl	8001756 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d903      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x500>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	2b0f      	cmp	r3, #15
 8004cee:	d904      	bls.n	8004cfa <HAL_RCC_OscConfig+0x50a>
 8004cf0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004cf4:	480a      	ldr	r0, [pc, #40]	; (8004d20 <HAL_RCC_OscConfig+0x530>)
 8004cf6:	f7fc fd2e 	bl	8001756 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <HAL_RCC_OscConfig+0x538>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d00:	f7fd f860 	bl	8001dc4 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d06:	e011      	b.n	8004d2c <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fd f85c 	bl	8001dc4 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d90a      	bls.n	8004d2c <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e081      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
 8004d1a:	bf00      	nop
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	08010048 	.word	0x08010048
 8004d24:	40007000 	.word	0x40007000
 8004d28:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2c:	4b3e      	ldr	r3, [pc, #248]	; (8004e28 <HAL_RCC_OscConfig+0x638>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e7      	bne.n	8004d08 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	019b      	lsls	r3, r3, #6
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	085b      	lsrs	r3, r3, #1
 8004d50:	3b01      	subs	r3, #1
 8004d52:	041b      	lsls	r3, r3, #16
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	061b      	lsls	r3, r3, #24
 8004d5c:	4932      	ldr	r1, [pc, #200]	; (8004e28 <HAL_RCC_OscConfig+0x638>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d62:	4b32      	ldr	r3, [pc, #200]	; (8004e2c <HAL_RCC_OscConfig+0x63c>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d68:	f7fd f82c 	bl	8001dc4 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d70:	f7fd f828 	bl	8001dc4 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e04d      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d82:	4b29      	ldr	r3, [pc, #164]	; (8004e28 <HAL_RCC_OscConfig+0x638>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f0      	beq.n	8004d70 <HAL_RCC_OscConfig+0x580>
 8004d8e:	e045      	b.n	8004e1c <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d90:	4b26      	ldr	r3, [pc, #152]	; (8004e2c <HAL_RCC_OscConfig+0x63c>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d96:	f7fd f815 	bl	8001dc4 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d9e:	f7fd f811 	bl	8001dc4 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e036      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db0:	4b1d      	ldr	r3, [pc, #116]	; (8004e28 <HAL_RCC_OscConfig+0x638>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1f0      	bne.n	8004d9e <HAL_RCC_OscConfig+0x5ae>
 8004dbc:	e02e      	b.n	8004e1c <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e029      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dca:	4b17      	ldr	r3, [pc, #92]	; (8004e28 <HAL_RCC_OscConfig+0x638>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d11c      	bne.n	8004e18 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d115      	bne.n	8004e18 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004df2:	4013      	ands	r3, r2
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d10d      	bne.n	8004e18 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d106      	bne.n	8004e18 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d001      	beq.n	8004e1c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	42470060 	.word	0x42470060

08004e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e174      	b.n	800512e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x24>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b0f      	cmp	r3, #15
 8004e52:	d904      	bls.n	8004e5e <HAL_RCC_ClockConfig+0x2e>
 8004e54:	f240 2151 	movw	r1, #593	; 0x251
 8004e58:	487b      	ldr	r0, [pc, #492]	; (8005048 <HAL_RCC_ClockConfig+0x218>)
 8004e5a:	f7fc fc7c 	bl	8001756 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d019      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x68>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d016      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x68>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d013      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x68>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d010      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x68>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d00d      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x68>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2b05      	cmp	r3, #5
 8004e80:	d00a      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x68>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b06      	cmp	r3, #6
 8004e86:	d007      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x68>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2b07      	cmp	r3, #7
 8004e8c:	d004      	beq.n	8004e98 <HAL_RCC_ClockConfig+0x68>
 8004e8e:	f240 2152 	movw	r1, #594	; 0x252
 8004e92:	486d      	ldr	r0, [pc, #436]	; (8005048 <HAL_RCC_ClockConfig+0x218>)
 8004e94:	f7fc fc5f 	bl	8001756 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e98:	4b6c      	ldr	r3, [pc, #432]	; (800504c <HAL_RCC_ClockConfig+0x21c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d90c      	bls.n	8004ec0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea6:	4b69      	ldr	r3, [pc, #420]	; (800504c <HAL_RCC_ClockConfig+0x21c>)
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eae:	4b67      	ldr	r3, [pc, #412]	; (800504c <HAL_RCC_ClockConfig+0x21c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e136      	b.n	800512e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d049      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ed8:	4b5d      	ldr	r3, [pc, #372]	; (8005050 <HAL_RCC_ClockConfig+0x220>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	4a5c      	ldr	r2, [pc, #368]	; (8005050 <HAL_RCC_ClockConfig+0x220>)
 8004ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ef0:	4b57      	ldr	r3, [pc, #348]	; (8005050 <HAL_RCC_ClockConfig+0x220>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4a56      	ldr	r2, [pc, #344]	; (8005050 <HAL_RCC_ClockConfig+0x220>)
 8004ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d024      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x11e>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	2b80      	cmp	r3, #128	; 0x80
 8004f0a:	d020      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x11e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	2b90      	cmp	r3, #144	; 0x90
 8004f12:	d01c      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x11e>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2ba0      	cmp	r3, #160	; 0xa0
 8004f1a:	d018      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x11e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2bb0      	cmp	r3, #176	; 0xb0
 8004f22:	d014      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x11e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2bc0      	cmp	r3, #192	; 0xc0
 8004f2a:	d010      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x11e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	2bd0      	cmp	r3, #208	; 0xd0
 8004f32:	d00c      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x11e>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2be0      	cmp	r3, #224	; 0xe0
 8004f3a:	d008      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x11e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2bf0      	cmp	r3, #240	; 0xf0
 8004f42:	d004      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x11e>
 8004f44:	f240 2175 	movw	r1, #629	; 0x275
 8004f48:	483f      	ldr	r0, [pc, #252]	; (8005048 <HAL_RCC_ClockConfig+0x218>)
 8004f4a:	f7fc fc04 	bl	8001756 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f4e:	4b40      	ldr	r3, [pc, #256]	; (8005050 <HAL_RCC_ClockConfig+0x220>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	493d      	ldr	r1, [pc, #244]	; (8005050 <HAL_RCC_ClockConfig+0x220>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d059      	beq.n	8005020 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d010      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x166>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d00c      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x166>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d008      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x166>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d004      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x166>
 8004f8c:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8004f90:	482d      	ldr	r0, [pc, #180]	; (8005048 <HAL_RCC_ClockConfig+0x218>)
 8004f92:	f7fc fbe0 	bl	8001756 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d107      	bne.n	8004fae <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9e:	4b2c      	ldr	r3, [pc, #176]	; (8005050 <HAL_RCC_ClockConfig+0x220>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d119      	bne.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e0bf      	b.n	800512e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d003      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d107      	bne.n	8004fce <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fbe:	4b24      	ldr	r3, [pc, #144]	; (8005050 <HAL_RCC_ClockConfig+0x220>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e0af      	b.n	800512e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fce:	4b20      	ldr	r3, [pc, #128]	; (8005050 <HAL_RCC_ClockConfig+0x220>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e0a7      	b.n	800512e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fde:	4b1c      	ldr	r3, [pc, #112]	; (8005050 <HAL_RCC_ClockConfig+0x220>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f023 0203 	bic.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	4919      	ldr	r1, [pc, #100]	; (8005050 <HAL_RCC_ClockConfig+0x220>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ff0:	f7fc fee8 	bl	8001dc4 <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff8:	f7fc fee4 	bl	8001dc4 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	; 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e08f      	b.n	800512e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500e:	4b10      	ldr	r3, [pc, #64]	; (8005050 <HAL_RCC_ClockConfig+0x220>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 020c 	and.w	r2, r3, #12
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	429a      	cmp	r2, r3
 800501e:	d1eb      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005020:	4b0a      	ldr	r3, [pc, #40]	; (800504c <HAL_RCC_ClockConfig+0x21c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d212      	bcs.n	8005054 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b07      	ldr	r3, [pc, #28]	; (800504c <HAL_RCC_ClockConfig+0x21c>)
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005036:	4b05      	ldr	r3, [pc, #20]	; (800504c <HAL_RCC_ClockConfig+0x21c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d007      	beq.n	8005054 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e072      	b.n	800512e <HAL_RCC_ClockConfig+0x2fe>
 8005048:	08010048 	.word	0x08010048
 800504c:	40023c00 	.word	0x40023c00
 8005050:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d025      	beq.n	80050ac <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d018      	beq.n	800509a <HAL_RCC_ClockConfig+0x26a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005070:	d013      	beq.n	800509a <HAL_RCC_ClockConfig+0x26a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800507a:	d00e      	beq.n	800509a <HAL_RCC_ClockConfig+0x26a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005084:	d009      	beq.n	800509a <HAL_RCC_ClockConfig+0x26a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800508e:	d004      	beq.n	800509a <HAL_RCC_ClockConfig+0x26a>
 8005090:	f240 21ba 	movw	r1, #698	; 0x2ba
 8005094:	4828      	ldr	r0, [pc, #160]	; (8005138 <HAL_RCC_ClockConfig+0x308>)
 8005096:	f7fc fb5e 	bl	8001756 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800509a:	4b28      	ldr	r3, [pc, #160]	; (800513c <HAL_RCC_ClockConfig+0x30c>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	4925      	ldr	r1, [pc, #148]	; (800513c <HAL_RCC_ClockConfig+0x30c>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d026      	beq.n	8005106 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d018      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x2c2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c8:	d013      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x2c2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80050d2:	d00e      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x2c2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80050dc:	d009      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x2c2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80050e6:	d004      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x2c2>
 80050e8:	f240 21c1 	movw	r1, #705	; 0x2c1
 80050ec:	4812      	ldr	r0, [pc, #72]	; (8005138 <HAL_RCC_ClockConfig+0x308>)
 80050ee:	f7fc fb32 	bl	8001756 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050f2:	4b12      	ldr	r3, [pc, #72]	; (800513c <HAL_RCC_ClockConfig+0x30c>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	490e      	ldr	r1, [pc, #56]	; (800513c <HAL_RCC_ClockConfig+0x30c>)
 8005102:	4313      	orrs	r3, r2
 8005104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005106:	f000 f821 	bl	800514c <HAL_RCC_GetSysClockFreq>
 800510a:	4601      	mov	r1, r0
 800510c:	4b0b      	ldr	r3, [pc, #44]	; (800513c <HAL_RCC_ClockConfig+0x30c>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	4a0a      	ldr	r2, [pc, #40]	; (8005140 <HAL_RCC_ClockConfig+0x310>)
 8005118:	5cd3      	ldrb	r3, [r2, r3]
 800511a:	fa21 f303 	lsr.w	r3, r1, r3
 800511e:	4a09      	ldr	r2, [pc, #36]	; (8005144 <HAL_RCC_ClockConfig+0x314>)
 8005120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005122:	4b09      	ldr	r3, [pc, #36]	; (8005148 <HAL_RCC_ClockConfig+0x318>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f7fc fb4c 	bl	80017c4 <HAL_InitTick>

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	08010048 	.word	0x08010048
 800513c:	40023800 	.word	0x40023800
 8005140:	08010138 	.word	0x08010138
 8005144:	20000000 	.word	0x20000000
 8005148:	20000004 	.word	0x20000004

0800514c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800514c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	607b      	str	r3, [r7, #4]
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	2300      	movs	r3, #0
 800515c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005162:	4b63      	ldr	r3, [pc, #396]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 030c 	and.w	r3, r3, #12
 800516a:	2b04      	cmp	r3, #4
 800516c:	d007      	beq.n	800517e <HAL_RCC_GetSysClockFreq+0x32>
 800516e:	2b08      	cmp	r3, #8
 8005170:	d008      	beq.n	8005184 <HAL_RCC_GetSysClockFreq+0x38>
 8005172:	2b00      	cmp	r3, #0
 8005174:	f040 80b4 	bne.w	80052e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005178:	4b5e      	ldr	r3, [pc, #376]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800517a:	60bb      	str	r3, [r7, #8]
       break;
 800517c:	e0b3      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800517e:	4b5e      	ldr	r3, [pc, #376]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005180:	60bb      	str	r3, [r7, #8]
      break;
 8005182:	e0b0      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005184:	4b5a      	ldr	r3, [pc, #360]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800518c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800518e:	4b58      	ldr	r3, [pc, #352]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d04a      	beq.n	8005230 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800519a:	4b55      	ldr	r3, [pc, #340]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	099b      	lsrs	r3, r3, #6
 80051a0:	f04f 0400 	mov.w	r4, #0
 80051a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	ea03 0501 	and.w	r5, r3, r1
 80051b0:	ea04 0602 	and.w	r6, r4, r2
 80051b4:	4629      	mov	r1, r5
 80051b6:	4632      	mov	r2, r6
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	f04f 0400 	mov.w	r4, #0
 80051c0:	0154      	lsls	r4, r2, #5
 80051c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80051c6:	014b      	lsls	r3, r1, #5
 80051c8:	4619      	mov	r1, r3
 80051ca:	4622      	mov	r2, r4
 80051cc:	1b49      	subs	r1, r1, r5
 80051ce:	eb62 0206 	sbc.w	r2, r2, r6
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	f04f 0400 	mov.w	r4, #0
 80051da:	0194      	lsls	r4, r2, #6
 80051dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80051e0:	018b      	lsls	r3, r1, #6
 80051e2:	1a5b      	subs	r3, r3, r1
 80051e4:	eb64 0402 	sbc.w	r4, r4, r2
 80051e8:	f04f 0100 	mov.w	r1, #0
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	00e2      	lsls	r2, r4, #3
 80051f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051f6:	00d9      	lsls	r1, r3, #3
 80051f8:	460b      	mov	r3, r1
 80051fa:	4614      	mov	r4, r2
 80051fc:	195b      	adds	r3, r3, r5
 80051fe:	eb44 0406 	adc.w	r4, r4, r6
 8005202:	f04f 0100 	mov.w	r1, #0
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	0262      	lsls	r2, r4, #9
 800520c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005210:	0259      	lsls	r1, r3, #9
 8005212:	460b      	mov	r3, r1
 8005214:	4614      	mov	r4, r2
 8005216:	4618      	mov	r0, r3
 8005218:	4621      	mov	r1, r4
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f04f 0400 	mov.w	r4, #0
 8005220:	461a      	mov	r2, r3
 8005222:	4623      	mov	r3, r4
 8005224:	f7fb fcc8 	bl	8000bb8 <__aeabi_uldivmod>
 8005228:	4603      	mov	r3, r0
 800522a:	460c      	mov	r4, r1
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	e049      	b.n	80052c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005230:	4b2f      	ldr	r3, [pc, #188]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	099b      	lsrs	r3, r3, #6
 8005236:	f04f 0400 	mov.w	r4, #0
 800523a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	ea03 0501 	and.w	r5, r3, r1
 8005246:	ea04 0602 	and.w	r6, r4, r2
 800524a:	4629      	mov	r1, r5
 800524c:	4632      	mov	r2, r6
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	f04f 0400 	mov.w	r4, #0
 8005256:	0154      	lsls	r4, r2, #5
 8005258:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800525c:	014b      	lsls	r3, r1, #5
 800525e:	4619      	mov	r1, r3
 8005260:	4622      	mov	r2, r4
 8005262:	1b49      	subs	r1, r1, r5
 8005264:	eb62 0206 	sbc.w	r2, r2, r6
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	f04f 0400 	mov.w	r4, #0
 8005270:	0194      	lsls	r4, r2, #6
 8005272:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005276:	018b      	lsls	r3, r1, #6
 8005278:	1a5b      	subs	r3, r3, r1
 800527a:	eb64 0402 	sbc.w	r4, r4, r2
 800527e:	f04f 0100 	mov.w	r1, #0
 8005282:	f04f 0200 	mov.w	r2, #0
 8005286:	00e2      	lsls	r2, r4, #3
 8005288:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800528c:	00d9      	lsls	r1, r3, #3
 800528e:	460b      	mov	r3, r1
 8005290:	4614      	mov	r4, r2
 8005292:	195b      	adds	r3, r3, r5
 8005294:	eb44 0406 	adc.w	r4, r4, r6
 8005298:	f04f 0100 	mov.w	r1, #0
 800529c:	f04f 0200 	mov.w	r2, #0
 80052a0:	02a2      	lsls	r2, r4, #10
 80052a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80052a6:	0299      	lsls	r1, r3, #10
 80052a8:	460b      	mov	r3, r1
 80052aa:	4614      	mov	r4, r2
 80052ac:	4618      	mov	r0, r3
 80052ae:	4621      	mov	r1, r4
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f04f 0400 	mov.w	r4, #0
 80052b6:	461a      	mov	r2, r3
 80052b8:	4623      	mov	r3, r4
 80052ba:	f7fb fc7d 	bl	8000bb8 <__aeabi_uldivmod>
 80052be:	4603      	mov	r3, r0
 80052c0:	460c      	mov	r4, r1
 80052c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052c4:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	0c1b      	lsrs	r3, r3, #16
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	3301      	adds	r3, #1
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052dc:	60bb      	str	r3, [r7, #8]
      break;
 80052de:	e002      	b.n	80052e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052e0:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80052e2:	60bb      	str	r3, [r7, #8]
      break;
 80052e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052e6:	68bb      	ldr	r3, [r7, #8]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052f0:	40023800 	.word	0x40023800
 80052f4:	00f42400 	.word	0x00f42400
 80052f8:	007a1200 	.word	0x007a1200

080052fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005300:	4b03      	ldr	r3, [pc, #12]	; (8005310 <HAL_RCC_GetHCLKFreq+0x14>)
 8005302:	681b      	ldr	r3, [r3, #0]
}
 8005304:	4618      	mov	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000000 	.word	0x20000000

08005314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005318:	f7ff fff0 	bl	80052fc <HAL_RCC_GetHCLKFreq>
 800531c:	4601      	mov	r1, r0
 800531e:	4b05      	ldr	r3, [pc, #20]	; (8005334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	0a9b      	lsrs	r3, r3, #10
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	4a03      	ldr	r2, [pc, #12]	; (8005338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800532a:	5cd3      	ldrb	r3, [r2, r3]
 800532c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40023800 	.word	0x40023800
 8005338:	08010148 	.word	0x08010148

0800533c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005340:	f7ff ffdc 	bl	80052fc <HAL_RCC_GetHCLKFreq>
 8005344:	4601      	mov	r1, r0
 8005346:	4b05      	ldr	r3, [pc, #20]	; (800535c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	0b5b      	lsrs	r3, r3, #13
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	4a03      	ldr	r2, [pc, #12]	; (8005360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005352:	5cd3      	ldrb	r3, [r2, r3]
 8005354:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005358:	4618      	mov	r0, r3
 800535a:	bd80      	pop	{r7, pc}
 800535c:	40023800 	.word	0x40023800
 8005360:	08010148 	.word	0x08010148

08005364 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	220f      	movs	r2, #15
 8005372:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005374:	4b12      	ldr	r3, [pc, #72]	; (80053c0 <HAL_RCC_GetClockConfig+0x5c>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 0203 	and.w	r2, r3, #3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005380:	4b0f      	ldr	r3, [pc, #60]	; (80053c0 <HAL_RCC_GetClockConfig+0x5c>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800538c:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <HAL_RCC_GetClockConfig+0x5c>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005398:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <HAL_RCC_GetClockConfig+0x5c>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	08db      	lsrs	r3, r3, #3
 800539e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053a6:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <HAL_RCC_GetClockConfig+0x60>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 020f 	and.w	r2, r3, #15
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	601a      	str	r2, [r3, #0]
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40023800 	.word	0x40023800
 80053c4:	40023c00 	.word	0x40023c00

080053c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e083      	b.n	80054e2 <HAL_TIM_Base_Init+0x11a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a43      	ldr	r2, [pc, #268]	; (80054ec <HAL_TIM_Base_Init+0x124>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d027      	beq.n	8005434 <HAL_TIM_Base_Init+0x6c>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ec:	d022      	beq.n	8005434 <HAL_TIM_Base_Init+0x6c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a3f      	ldr	r2, [pc, #252]	; (80054f0 <HAL_TIM_Base_Init+0x128>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d01d      	beq.n	8005434 <HAL_TIM_Base_Init+0x6c>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a3d      	ldr	r2, [pc, #244]	; (80054f4 <HAL_TIM_Base_Init+0x12c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d018      	beq.n	8005434 <HAL_TIM_Base_Init+0x6c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a3c      	ldr	r2, [pc, #240]	; (80054f8 <HAL_TIM_Base_Init+0x130>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <HAL_TIM_Base_Init+0x6c>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a3a      	ldr	r2, [pc, #232]	; (80054fc <HAL_TIM_Base_Init+0x134>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <HAL_TIM_Base_Init+0x6c>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a39      	ldr	r2, [pc, #228]	; (8005500 <HAL_TIM_Base_Init+0x138>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d009      	beq.n	8005434 <HAL_TIM_Base_Init+0x6c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a37      	ldr	r2, [pc, #220]	; (8005504 <HAL_TIM_Base_Init+0x13c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_TIM_Base_Init+0x6c>
 800542a:	f44f 7189 	mov.w	r1, #274	; 0x112
 800542e:	4836      	ldr	r0, [pc, #216]	; (8005508 <HAL_TIM_Base_Init+0x140>)
 8005430:	f7fc f991 	bl	8001756 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d014      	beq.n	8005466 <HAL_TIM_Base_Init+0x9e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	2b10      	cmp	r3, #16
 8005442:	d010      	beq.n	8005466 <HAL_TIM_Base_Init+0x9e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2b20      	cmp	r3, #32
 800544a:	d00c      	beq.n	8005466 <HAL_TIM_Base_Init+0x9e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b40      	cmp	r3, #64	; 0x40
 8005452:	d008      	beq.n	8005466 <HAL_TIM_Base_Init+0x9e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2b60      	cmp	r3, #96	; 0x60
 800545a:	d004      	beq.n	8005466 <HAL_TIM_Base_Init+0x9e>
 800545c:	f240 1113 	movw	r1, #275	; 0x113
 8005460:	4829      	ldr	r0, [pc, #164]	; (8005508 <HAL_TIM_Base_Init+0x140>)
 8005462:	f7fc f978 	bl	8001756 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00e      	beq.n	800548c <HAL_TIM_Base_Init+0xc4>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005476:	d009      	beq.n	800548c <HAL_TIM_Base_Init+0xc4>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005480:	d004      	beq.n	800548c <HAL_TIM_Base_Init+0xc4>
 8005482:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005486:	4820      	ldr	r0, [pc, #128]	; (8005508 <HAL_TIM_Base_Init+0x140>)
 8005488:	f7fc f965 	bl	8001756 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d008      	beq.n	80054a6 <HAL_TIM_Base_Init+0xde>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	2b80      	cmp	r3, #128	; 0x80
 800549a:	d004      	beq.n	80054a6 <HAL_TIM_Base_Init+0xde>
 800549c:	f240 1115 	movw	r1, #277	; 0x115
 80054a0:	4819      	ldr	r0, [pc, #100]	; (8005508 <HAL_TIM_Base_Init+0x140>)
 80054a2:	f7fc f958 	bl	8001756 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f826 	bl	800550c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3304      	adds	r3, #4
 80054d0:	4619      	mov	r1, r3
 80054d2:	4610      	mov	r0, r2
 80054d4:	f000 f9b4 	bl	8005840 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40000400 	.word	0x40000400
 80054f4:	40000800 	.word	0x40000800
 80054f8:	40000c00 	.word	0x40000c00
 80054fc:	40014000 	.word	0x40014000
 8005500:	40014400 	.word	0x40014400
 8005504:	40014800 	.word	0x40014800
 8005508:	08010080 	.word	0x08010080

0800550c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a24      	ldr	r2, [pc, #144]	; (80055c0 <HAL_TIM_Base_Start_IT+0xa0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d027      	beq.n	8005582 <HAL_TIM_Base_Start_IT+0x62>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553a:	d022      	beq.n	8005582 <HAL_TIM_Base_Start_IT+0x62>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a20      	ldr	r2, [pc, #128]	; (80055c4 <HAL_TIM_Base_Start_IT+0xa4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d01d      	beq.n	8005582 <HAL_TIM_Base_Start_IT+0x62>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <HAL_TIM_Base_Start_IT+0xa8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d018      	beq.n	8005582 <HAL_TIM_Base_Start_IT+0x62>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1d      	ldr	r2, [pc, #116]	; (80055cc <HAL_TIM_Base_Start_IT+0xac>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d013      	beq.n	8005582 <HAL_TIM_Base_Start_IT+0x62>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a1c      	ldr	r2, [pc, #112]	; (80055d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00e      	beq.n	8005582 <HAL_TIM_Base_Start_IT+0x62>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1a      	ldr	r2, [pc, #104]	; (80055d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d009      	beq.n	8005582 <HAL_TIM_Base_Start_IT+0x62>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a19      	ldr	r2, [pc, #100]	; (80055d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d004      	beq.n	8005582 <HAL_TIM_Base_Start_IT+0x62>
 8005578:	f240 11b9 	movw	r1, #441	; 0x1b9
 800557c:	4817      	ldr	r0, [pc, #92]	; (80055dc <HAL_TIM_Base_Start_IT+0xbc>)
 800557e:	f7fc f8ea 	bl	8001756 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f042 0201 	orr.w	r2, r2, #1
 8005590:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b06      	cmp	r3, #6
 80055a2:	d007      	beq.n	80055b4 <HAL_TIM_Base_Start_IT+0x94>
  {
    __HAL_TIM_ENABLE(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40000400 	.word	0x40000400
 80055c8:	40000800 	.word	0x40000800
 80055cc:	40000c00 	.word	0x40000c00
 80055d0:	40014000 	.word	0x40014000
 80055d4:	40014400 	.word	0x40014400
 80055d8:	40014800 	.word	0x40014800
 80055dc:	08010080 	.word	0x08010080

080055e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d122      	bne.n	800563c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b02      	cmp	r3, #2
 8005602:	d11b      	bne.n	800563c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0202 	mvn.w	r2, #2
 800560c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f8ee 	bl	8005804 <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f8e0 	bl	80057f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f8f1 	bl	8005818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b04      	cmp	r3, #4
 8005648:	d122      	bne.n	8005690 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b04      	cmp	r3, #4
 8005656:	d11b      	bne.n	8005690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0204 	mvn.w	r2, #4
 8005660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2202      	movs	r2, #2
 8005666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f8c4 	bl	8005804 <HAL_TIM_IC_CaptureCallback>
 800567c:	e005      	b.n	800568a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f8b6 	bl	80057f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f8c7 	bl	8005818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b08      	cmp	r3, #8
 800569c:	d122      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d11b      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0208 	mvn.w	r2, #8
 80056b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2204      	movs	r2, #4
 80056ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f89a 	bl	8005804 <HAL_TIM_IC_CaptureCallback>
 80056d0:	e005      	b.n	80056de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f88c 	bl	80057f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f89d 	bl	8005818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	2b10      	cmp	r3, #16
 80056f0:	d122      	bne.n	8005738 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d11b      	bne.n	8005738 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0210 	mvn.w	r2, #16
 8005708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2208      	movs	r2, #8
 800570e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f870 	bl	8005804 <HAL_TIM_IC_CaptureCallback>
 8005724:	e005      	b.n	8005732 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f862 	bl	80057f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f873 	bl	8005818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b01      	cmp	r3, #1
 8005744:	d10e      	bne.n	8005764 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b01      	cmp	r3, #1
 8005752:	d107      	bne.n	8005764 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0201 	mvn.w	r2, #1
 800575c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fb ffe0 	bl	8001724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	d10e      	bne.n	8005790 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577c:	2b80      	cmp	r3, #128	; 0x80
 800577e:	d107      	bne.n	8005790 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f8e2 	bl	8005954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	d10e      	bne.n	80057bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d107      	bne.n	80057bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f838 	bl	800582c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d10e      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d107      	bne.n	80057e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0220 	mvn.w	r2, #32
 80057e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f8ac 	bl	8005940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057e8:	bf00      	nop
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a34      	ldr	r2, [pc, #208]	; (8005924 <TIM_Base_SetConfig+0xe4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00f      	beq.n	8005878 <TIM_Base_SetConfig+0x38>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585e:	d00b      	beq.n	8005878 <TIM_Base_SetConfig+0x38>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a31      	ldr	r2, [pc, #196]	; (8005928 <TIM_Base_SetConfig+0xe8>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d007      	beq.n	8005878 <TIM_Base_SetConfig+0x38>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a30      	ldr	r2, [pc, #192]	; (800592c <TIM_Base_SetConfig+0xec>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_Base_SetConfig+0x38>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a2f      	ldr	r2, [pc, #188]	; (8005930 <TIM_Base_SetConfig+0xf0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d108      	bne.n	800588a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a25      	ldr	r2, [pc, #148]	; (8005924 <TIM_Base_SetConfig+0xe4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01b      	beq.n	80058ca <TIM_Base_SetConfig+0x8a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005898:	d017      	beq.n	80058ca <TIM_Base_SetConfig+0x8a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a22      	ldr	r2, [pc, #136]	; (8005928 <TIM_Base_SetConfig+0xe8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d013      	beq.n	80058ca <TIM_Base_SetConfig+0x8a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a21      	ldr	r2, [pc, #132]	; (800592c <TIM_Base_SetConfig+0xec>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00f      	beq.n	80058ca <TIM_Base_SetConfig+0x8a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a20      	ldr	r2, [pc, #128]	; (8005930 <TIM_Base_SetConfig+0xf0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00b      	beq.n	80058ca <TIM_Base_SetConfig+0x8a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a1f      	ldr	r2, [pc, #124]	; (8005934 <TIM_Base_SetConfig+0xf4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d007      	beq.n	80058ca <TIM_Base_SetConfig+0x8a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a1e      	ldr	r2, [pc, #120]	; (8005938 <TIM_Base_SetConfig+0xf8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d003      	beq.n	80058ca <TIM_Base_SetConfig+0x8a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a1d      	ldr	r2, [pc, #116]	; (800593c <TIM_Base_SetConfig+0xfc>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d108      	bne.n	80058dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a08      	ldr	r2, [pc, #32]	; (8005924 <TIM_Base_SetConfig+0xe4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d103      	bne.n	8005910 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	615a      	str	r2, [r3, #20]
}
 8005916:	bf00      	nop
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40010000 	.word	0x40010000
 8005928:	40000400 	.word	0x40000400
 800592c:	40000800 	.word	0x40000800
 8005930:	40000c00 	.word	0x40000c00
 8005934:	40014000 	.word	0x40014000
 8005938:	40014400 	.word	0x40014400
 800593c:	40014800 	.word	0x40014800

08005940 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e0a0      	b.n	8005abc <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d02c      	beq.n	80059dc <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a4f      	ldr	r2, [pc, #316]	; (8005ac4 <HAL_UART_Init+0x15c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00e      	beq.n	80059aa <HAL_UART_Init+0x42>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a4d      	ldr	r2, [pc, #308]	; (8005ac8 <HAL_UART_Init+0x160>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d009      	beq.n	80059aa <HAL_UART_Init+0x42>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a4c      	ldr	r2, [pc, #304]	; (8005acc <HAL_UART_Init+0x164>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d004      	beq.n	80059aa <HAL_UART_Init+0x42>
 80059a0:	f240 114b 	movw	r1, #331	; 0x14b
 80059a4:	484a      	ldr	r0, [pc, #296]	; (8005ad0 <HAL_UART_Init+0x168>)
 80059a6:	f7fb fed6 	bl	8001756 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d028      	beq.n	8005a04 <HAL_UART_Init+0x9c>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ba:	d023      	beq.n	8005a04 <HAL_UART_Init+0x9c>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c4:	d01e      	beq.n	8005a04 <HAL_UART_Init+0x9c>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ce:	d019      	beq.n	8005a04 <HAL_UART_Init+0x9c>
 80059d0:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80059d4:	483e      	ldr	r0, [pc, #248]	; (8005ad0 <HAL_UART_Init+0x168>)
 80059d6:	f7fb febe 	bl	8001756 <assert_failed>
 80059da:	e013      	b.n	8005a04 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a38      	ldr	r2, [pc, #224]	; (8005ac4 <HAL_UART_Init+0x15c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d00e      	beq.n	8005a04 <HAL_UART_Init+0x9c>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a37      	ldr	r2, [pc, #220]	; (8005ac8 <HAL_UART_Init+0x160>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d009      	beq.n	8005a04 <HAL_UART_Init+0x9c>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a35      	ldr	r2, [pc, #212]	; (8005acc <HAL_UART_Init+0x164>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d004      	beq.n	8005a04 <HAL_UART_Init+0x9c>
 80059fa:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80059fe:	4834      	ldr	r0, [pc, #208]	; (8005ad0 <HAL_UART_Init+0x168>)
 8005a00:	f7fb fea9 	bl	8001756 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d009      	beq.n	8005a20 <HAL_UART_Init+0xb8>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a14:	d004      	beq.n	8005a20 <HAL_UART_Init+0xb8>
 8005a16:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8005a1a:	482d      	ldr	r0, [pc, #180]	; (8005ad0 <HAL_UART_Init+0x168>)
 8005a1c:	f7fb fe9b 	bl	8001756 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d009      	beq.n	8005a3c <HAL_UART_Init+0xd4>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a30:	d004      	beq.n	8005a3c <HAL_UART_Init+0xd4>
 8005a32:	f240 1153 	movw	r1, #339	; 0x153
 8005a36:	4826      	ldr	r0, [pc, #152]	; (8005ad0 <HAL_UART_Init+0x168>)
 8005a38:	f7fb fe8d 	bl	8001756 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7fb fffb 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2224      	movs	r2, #36	; 0x24
 8005a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a6c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f830 	bl	8005ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691a      	ldr	r2, [r3, #16]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695a      	ldr	r2, [r3, #20]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a92:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aa2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40011000 	.word	0x40011000
 8005ac8:	40004400 	.word	0x40004400
 8005acc:	40011400 	.word	0x40011400
 8005ad0:	080100b8 	.word	0x080100b8

08005ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad8:	b085      	sub	sp, #20
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	4a9a      	ldr	r2, [pc, #616]	; (8005d4c <UART_SetConfig+0x278>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d904      	bls.n	8005af2 <UART_SetConfig+0x1e>
 8005ae8:	f640 31fb 	movw	r1, #3067	; 0xbfb
 8005aec:	4898      	ldr	r0, [pc, #608]	; (8005d50 <UART_SetConfig+0x27c>)
 8005aee:	f7fb fe32 	bl	8001756 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d009      	beq.n	8005b0e <UART_SetConfig+0x3a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b02:	d004      	beq.n	8005b0e <UART_SetConfig+0x3a>
 8005b04:	f640 31fc 	movw	r1, #3068	; 0xbfc
 8005b08:	4891      	ldr	r0, [pc, #580]	; (8005d50 <UART_SetConfig+0x27c>)
 8005b0a:	f7fb fe24 	bl	8001756 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00e      	beq.n	8005b34 <UART_SetConfig+0x60>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1e:	d009      	beq.n	8005b34 <UART_SetConfig+0x60>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b28:	d004      	beq.n	8005b34 <UART_SetConfig+0x60>
 8005b2a:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8005b2e:	4888      	ldr	r0, [pc, #544]	; (8005d50 <UART_SetConfig+0x27c>)
 8005b30:	f7fb fe11 	bl	8001756 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	695a      	ldr	r2, [r3, #20]
 8005b38:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d103      	bne.n	8005b4a <UART_SetConfig+0x76>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d104      	bne.n	8005b54 <UART_SetConfig+0x80>
 8005b4a:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8005b4e:	4880      	ldr	r0, [pc, #512]	; (8005d50 <UART_SetConfig+0x27c>)
 8005b50:	f7fb fe01 	bl	8001756 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b8c:	f023 030c 	bic.w	r3, r3, #12
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6812      	ldr	r2, [r2, #0]
 8005b94:	68f9      	ldr	r1, [r7, #12]
 8005b96:	430b      	orrs	r3, r1
 8005b98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699a      	ldr	r2, [r3, #24]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb8:	f040 818f 	bne.w	8005eda <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a64      	ldr	r2, [pc, #400]	; (8005d54 <UART_SetConfig+0x280>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d005      	beq.n	8005bd2 <UART_SetConfig+0xfe>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a63      	ldr	r2, [pc, #396]	; (8005d58 <UART_SetConfig+0x284>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	f040 80c7 	bne.w	8005d60 <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bd2:	f7ff fbb3 	bl	800533c <HAL_RCC_GetPCLK2Freq>
 8005bd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	461d      	mov	r5, r3
 8005bdc:	f04f 0600 	mov.w	r6, #0
 8005be0:	46a8      	mov	r8, r5
 8005be2:	46b1      	mov	r9, r6
 8005be4:	eb18 0308 	adds.w	r3, r8, r8
 8005be8:	eb49 0409 	adc.w	r4, r9, r9
 8005bec:	4698      	mov	r8, r3
 8005bee:	46a1      	mov	r9, r4
 8005bf0:	eb18 0805 	adds.w	r8, r8, r5
 8005bf4:	eb49 0906 	adc.w	r9, r9, r6
 8005bf8:	f04f 0100 	mov.w	r1, #0
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c0c:	4688      	mov	r8, r1
 8005c0e:	4691      	mov	r9, r2
 8005c10:	eb18 0005 	adds.w	r0, r8, r5
 8005c14:	eb49 0106 	adc.w	r1, r9, r6
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	461d      	mov	r5, r3
 8005c1e:	f04f 0600 	mov.w	r6, #0
 8005c22:	196b      	adds	r3, r5, r5
 8005c24:	eb46 0406 	adc.w	r4, r6, r6
 8005c28:	461a      	mov	r2, r3
 8005c2a:	4623      	mov	r3, r4
 8005c2c:	f7fa ffc4 	bl	8000bb8 <__aeabi_uldivmod>
 8005c30:	4603      	mov	r3, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	461a      	mov	r2, r3
 8005c36:	4b49      	ldr	r3, [pc, #292]	; (8005d5c <UART_SetConfig+0x288>)
 8005c38:	fba3 2302 	umull	r2, r3, r3, r2
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	461d      	mov	r5, r3
 8005c46:	f04f 0600 	mov.w	r6, #0
 8005c4a:	46a9      	mov	r9, r5
 8005c4c:	46b2      	mov	sl, r6
 8005c4e:	eb19 0309 	adds.w	r3, r9, r9
 8005c52:	eb4a 040a 	adc.w	r4, sl, sl
 8005c56:	4699      	mov	r9, r3
 8005c58:	46a2      	mov	sl, r4
 8005c5a:	eb19 0905 	adds.w	r9, r9, r5
 8005c5e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c62:	f04f 0100 	mov.w	r1, #0
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c76:	4689      	mov	r9, r1
 8005c78:	4692      	mov	sl, r2
 8005c7a:	eb19 0005 	adds.w	r0, r9, r5
 8005c7e:	eb4a 0106 	adc.w	r1, sl, r6
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	461d      	mov	r5, r3
 8005c88:	f04f 0600 	mov.w	r6, #0
 8005c8c:	196b      	adds	r3, r5, r5
 8005c8e:	eb46 0406 	adc.w	r4, r6, r6
 8005c92:	461a      	mov	r2, r3
 8005c94:	4623      	mov	r3, r4
 8005c96:	f7fa ff8f 	bl	8000bb8 <__aeabi_uldivmod>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	4b2e      	ldr	r3, [pc, #184]	; (8005d5c <UART_SetConfig+0x288>)
 8005ca2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca6:	095b      	lsrs	r3, r3, #5
 8005ca8:	2164      	movs	r1, #100	; 0x64
 8005caa:	fb01 f303 	mul.w	r3, r1, r3
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	3332      	adds	r3, #50	; 0x32
 8005cb4:	4a29      	ldr	r2, [pc, #164]	; (8005d5c <UART_SetConfig+0x288>)
 8005cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cc2:	4498      	add	r8, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	461d      	mov	r5, r3
 8005cc8:	f04f 0600 	mov.w	r6, #0
 8005ccc:	46a9      	mov	r9, r5
 8005cce:	46b2      	mov	sl, r6
 8005cd0:	eb19 0309 	adds.w	r3, r9, r9
 8005cd4:	eb4a 040a 	adc.w	r4, sl, sl
 8005cd8:	4699      	mov	r9, r3
 8005cda:	46a2      	mov	sl, r4
 8005cdc:	eb19 0905 	adds.w	r9, r9, r5
 8005ce0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ce4:	f04f 0100 	mov.w	r1, #0
 8005ce8:	f04f 0200 	mov.w	r2, #0
 8005cec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cf0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cf4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cf8:	4689      	mov	r9, r1
 8005cfa:	4692      	mov	sl, r2
 8005cfc:	eb19 0005 	adds.w	r0, r9, r5
 8005d00:	eb4a 0106 	adc.w	r1, sl, r6
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	461d      	mov	r5, r3
 8005d0a:	f04f 0600 	mov.w	r6, #0
 8005d0e:	196b      	adds	r3, r5, r5
 8005d10:	eb46 0406 	adc.w	r4, r6, r6
 8005d14:	461a      	mov	r2, r3
 8005d16:	4623      	mov	r3, r4
 8005d18:	f7fa ff4e 	bl	8000bb8 <__aeabi_uldivmod>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	461a      	mov	r2, r3
 8005d22:	4b0e      	ldr	r3, [pc, #56]	; (8005d5c <UART_SetConfig+0x288>)
 8005d24:	fba3 1302 	umull	r1, r3, r3, r2
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	2164      	movs	r1, #100	; 0x64
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	3332      	adds	r3, #50	; 0x32
 8005d36:	4a09      	ldr	r2, [pc, #36]	; (8005d5c <UART_SetConfig+0x288>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	f003 0207 	and.w	r2, r3, #7
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4442      	add	r2, r8
 8005d48:	609a      	str	r2, [r3, #8]
 8005d4a:	e27a      	b.n	8006242 <UART_SetConfig+0x76e>
 8005d4c:	00a037a0 	.word	0x00a037a0
 8005d50:	080100b8 	.word	0x080100b8
 8005d54:	40011000 	.word	0x40011000
 8005d58:	40011400 	.word	0x40011400
 8005d5c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d60:	f7ff fad8 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
 8005d64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	461d      	mov	r5, r3
 8005d6a:	f04f 0600 	mov.w	r6, #0
 8005d6e:	46a8      	mov	r8, r5
 8005d70:	46b1      	mov	r9, r6
 8005d72:	eb18 0308 	adds.w	r3, r8, r8
 8005d76:	eb49 0409 	adc.w	r4, r9, r9
 8005d7a:	4698      	mov	r8, r3
 8005d7c:	46a1      	mov	r9, r4
 8005d7e:	eb18 0805 	adds.w	r8, r8, r5
 8005d82:	eb49 0906 	adc.w	r9, r9, r6
 8005d86:	f04f 0100 	mov.w	r1, #0
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d9a:	4688      	mov	r8, r1
 8005d9c:	4691      	mov	r9, r2
 8005d9e:	eb18 0005 	adds.w	r0, r8, r5
 8005da2:	eb49 0106 	adc.w	r1, r9, r6
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	461d      	mov	r5, r3
 8005dac:	f04f 0600 	mov.w	r6, #0
 8005db0:	196b      	adds	r3, r5, r5
 8005db2:	eb46 0406 	adc.w	r4, r6, r6
 8005db6:	461a      	mov	r2, r3
 8005db8:	4623      	mov	r3, r4
 8005dba:	f7fa fefd 	bl	8000bb8 <__aeabi_uldivmod>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	460c      	mov	r4, r1
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	4bb3      	ldr	r3, [pc, #716]	; (8006094 <UART_SetConfig+0x5c0>)
 8005dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dca:	095b      	lsrs	r3, r3, #5
 8005dcc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	461d      	mov	r5, r3
 8005dd4:	f04f 0600 	mov.w	r6, #0
 8005dd8:	46a9      	mov	r9, r5
 8005dda:	46b2      	mov	sl, r6
 8005ddc:	eb19 0309 	adds.w	r3, r9, r9
 8005de0:	eb4a 040a 	adc.w	r4, sl, sl
 8005de4:	4699      	mov	r9, r3
 8005de6:	46a2      	mov	sl, r4
 8005de8:	eb19 0905 	adds.w	r9, r9, r5
 8005dec:	eb4a 0a06 	adc.w	sl, sl, r6
 8005df0:	f04f 0100 	mov.w	r1, #0
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e04:	4689      	mov	r9, r1
 8005e06:	4692      	mov	sl, r2
 8005e08:	eb19 0005 	adds.w	r0, r9, r5
 8005e0c:	eb4a 0106 	adc.w	r1, sl, r6
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	461d      	mov	r5, r3
 8005e16:	f04f 0600 	mov.w	r6, #0
 8005e1a:	196b      	adds	r3, r5, r5
 8005e1c:	eb46 0406 	adc.w	r4, r6, r6
 8005e20:	461a      	mov	r2, r3
 8005e22:	4623      	mov	r3, r4
 8005e24:	f7fa fec8 	bl	8000bb8 <__aeabi_uldivmod>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4b99      	ldr	r3, [pc, #612]	; (8006094 <UART_SetConfig+0x5c0>)
 8005e30:	fba3 1302 	umull	r1, r3, r3, r2
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	2164      	movs	r1, #100	; 0x64
 8005e38:	fb01 f303 	mul.w	r3, r1, r3
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	3332      	adds	r3, #50	; 0x32
 8005e42:	4a94      	ldr	r2, [pc, #592]	; (8006094 <UART_SetConfig+0x5c0>)
 8005e44:	fba2 2303 	umull	r2, r3, r2, r3
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e50:	4498      	add	r8, r3
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	461d      	mov	r5, r3
 8005e56:	f04f 0600 	mov.w	r6, #0
 8005e5a:	46a9      	mov	r9, r5
 8005e5c:	46b2      	mov	sl, r6
 8005e5e:	eb19 0309 	adds.w	r3, r9, r9
 8005e62:	eb4a 040a 	adc.w	r4, sl, sl
 8005e66:	4699      	mov	r9, r3
 8005e68:	46a2      	mov	sl, r4
 8005e6a:	eb19 0905 	adds.w	r9, r9, r5
 8005e6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e72:	f04f 0100 	mov.w	r1, #0
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e86:	4689      	mov	r9, r1
 8005e88:	4692      	mov	sl, r2
 8005e8a:	eb19 0005 	adds.w	r0, r9, r5
 8005e8e:	eb4a 0106 	adc.w	r1, sl, r6
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	461d      	mov	r5, r3
 8005e98:	f04f 0600 	mov.w	r6, #0
 8005e9c:	196b      	adds	r3, r5, r5
 8005e9e:	eb46 0406 	adc.w	r4, r6, r6
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	4623      	mov	r3, r4
 8005ea6:	f7fa fe87 	bl	8000bb8 <__aeabi_uldivmod>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	460c      	mov	r4, r1
 8005eae:	461a      	mov	r2, r3
 8005eb0:	4b78      	ldr	r3, [pc, #480]	; (8006094 <UART_SetConfig+0x5c0>)
 8005eb2:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb6:	095b      	lsrs	r3, r3, #5
 8005eb8:	2164      	movs	r1, #100	; 0x64
 8005eba:	fb01 f303 	mul.w	r3, r1, r3
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	3332      	adds	r3, #50	; 0x32
 8005ec4:	4a73      	ldr	r2, [pc, #460]	; (8006094 <UART_SetConfig+0x5c0>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	095b      	lsrs	r3, r3, #5
 8005ecc:	f003 0207 	and.w	r2, r3, #7
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4442      	add	r2, r8
 8005ed6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005ed8:	e1b3      	b.n	8006242 <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a6e      	ldr	r2, [pc, #440]	; (8006098 <UART_SetConfig+0x5c4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d005      	beq.n	8005ef0 <UART_SetConfig+0x41c>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a6c      	ldr	r2, [pc, #432]	; (800609c <UART_SetConfig+0x5c8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	f040 80d8 	bne.w	80060a0 <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ef0:	f7ff fa24 	bl	800533c <HAL_RCC_GetPCLK2Freq>
 8005ef4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	469a      	mov	sl, r3
 8005efa:	f04f 0b00 	mov.w	fp, #0
 8005efe:	46d0      	mov	r8, sl
 8005f00:	46d9      	mov	r9, fp
 8005f02:	eb18 0308 	adds.w	r3, r8, r8
 8005f06:	eb49 0409 	adc.w	r4, r9, r9
 8005f0a:	4698      	mov	r8, r3
 8005f0c:	46a1      	mov	r9, r4
 8005f0e:	eb18 080a 	adds.w	r8, r8, sl
 8005f12:	eb49 090b 	adc.w	r9, r9, fp
 8005f16:	f04f 0100 	mov.w	r1, #0
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f22:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f2a:	4688      	mov	r8, r1
 8005f2c:	4691      	mov	r9, r2
 8005f2e:	eb1a 0508 	adds.w	r5, sl, r8
 8005f32:	eb4b 0609 	adc.w	r6, fp, r9
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	f04f 0200 	mov.w	r2, #0
 8005f40:	f04f 0300 	mov.w	r3, #0
 8005f44:	f04f 0400 	mov.w	r4, #0
 8005f48:	0094      	lsls	r4, r2, #2
 8005f4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f4e:	008b      	lsls	r3, r1, #2
 8005f50:	461a      	mov	r2, r3
 8005f52:	4623      	mov	r3, r4
 8005f54:	4628      	mov	r0, r5
 8005f56:	4631      	mov	r1, r6
 8005f58:	f7fa fe2e 	bl	8000bb8 <__aeabi_uldivmod>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	460c      	mov	r4, r1
 8005f60:	461a      	mov	r2, r3
 8005f62:	4b4c      	ldr	r3, [pc, #304]	; (8006094 <UART_SetConfig+0x5c0>)
 8005f64:	fba3 2302 	umull	r2, r3, r3, r2
 8005f68:	095b      	lsrs	r3, r3, #5
 8005f6a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	469b      	mov	fp, r3
 8005f72:	f04f 0c00 	mov.w	ip, #0
 8005f76:	46d9      	mov	r9, fp
 8005f78:	46e2      	mov	sl, ip
 8005f7a:	eb19 0309 	adds.w	r3, r9, r9
 8005f7e:	eb4a 040a 	adc.w	r4, sl, sl
 8005f82:	4699      	mov	r9, r3
 8005f84:	46a2      	mov	sl, r4
 8005f86:	eb19 090b 	adds.w	r9, r9, fp
 8005f8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f8e:	f04f 0100 	mov.w	r1, #0
 8005f92:	f04f 0200 	mov.w	r2, #0
 8005f96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fa2:	4689      	mov	r9, r1
 8005fa4:	4692      	mov	sl, r2
 8005fa6:	eb1b 0509 	adds.w	r5, fp, r9
 8005faa:	eb4c 060a 	adc.w	r6, ip, sl
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	f04f 0400 	mov.w	r4, #0
 8005fc0:	0094      	lsls	r4, r2, #2
 8005fc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fc6:	008b      	lsls	r3, r1, #2
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4623      	mov	r3, r4
 8005fcc:	4628      	mov	r0, r5
 8005fce:	4631      	mov	r1, r6
 8005fd0:	f7fa fdf2 	bl	8000bb8 <__aeabi_uldivmod>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4b2e      	ldr	r3, [pc, #184]	; (8006094 <UART_SetConfig+0x5c0>)
 8005fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	2164      	movs	r1, #100	; 0x64
 8005fe4:	fb01 f303 	mul.w	r3, r1, r3
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	3332      	adds	r3, #50	; 0x32
 8005fee:	4a29      	ldr	r2, [pc, #164]	; (8006094 <UART_SetConfig+0x5c0>)
 8005ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ffa:	4498      	add	r8, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	469b      	mov	fp, r3
 8006000:	f04f 0c00 	mov.w	ip, #0
 8006004:	46d9      	mov	r9, fp
 8006006:	46e2      	mov	sl, ip
 8006008:	eb19 0309 	adds.w	r3, r9, r9
 800600c:	eb4a 040a 	adc.w	r4, sl, sl
 8006010:	4699      	mov	r9, r3
 8006012:	46a2      	mov	sl, r4
 8006014:	eb19 090b 	adds.w	r9, r9, fp
 8006018:	eb4a 0a0c 	adc.w	sl, sl, ip
 800601c:	f04f 0100 	mov.w	r1, #0
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006028:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800602c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006030:	4689      	mov	r9, r1
 8006032:	4692      	mov	sl, r2
 8006034:	eb1b 0509 	adds.w	r5, fp, r9
 8006038:	eb4c 060a 	adc.w	r6, ip, sl
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	4619      	mov	r1, r3
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	f04f 0400 	mov.w	r4, #0
 800604e:	0094      	lsls	r4, r2, #2
 8006050:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006054:	008b      	lsls	r3, r1, #2
 8006056:	461a      	mov	r2, r3
 8006058:	4623      	mov	r3, r4
 800605a:	4628      	mov	r0, r5
 800605c:	4631      	mov	r1, r6
 800605e:	f7fa fdab 	bl	8000bb8 <__aeabi_uldivmod>
 8006062:	4603      	mov	r3, r0
 8006064:	460c      	mov	r4, r1
 8006066:	461a      	mov	r2, r3
 8006068:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <UART_SetConfig+0x5c0>)
 800606a:	fba3 1302 	umull	r1, r3, r3, r2
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	2164      	movs	r1, #100	; 0x64
 8006072:	fb01 f303 	mul.w	r3, r1, r3
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	3332      	adds	r3, #50	; 0x32
 800607c:	4a05      	ldr	r2, [pc, #20]	; (8006094 <UART_SetConfig+0x5c0>)
 800607e:	fba2 2303 	umull	r2, r3, r2, r3
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	f003 020f 	and.w	r2, r3, #15
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4442      	add	r2, r8
 800608e:	609a      	str	r2, [r3, #8]
 8006090:	e0d7      	b.n	8006242 <UART_SetConfig+0x76e>
 8006092:	bf00      	nop
 8006094:	51eb851f 	.word	0x51eb851f
 8006098:	40011000 	.word	0x40011000
 800609c:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 80060a0:	f7ff f938 	bl	8005314 <HAL_RCC_GetPCLK1Freq>
 80060a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	469a      	mov	sl, r3
 80060aa:	f04f 0b00 	mov.w	fp, #0
 80060ae:	46d0      	mov	r8, sl
 80060b0:	46d9      	mov	r9, fp
 80060b2:	eb18 0308 	adds.w	r3, r8, r8
 80060b6:	eb49 0409 	adc.w	r4, r9, r9
 80060ba:	4698      	mov	r8, r3
 80060bc:	46a1      	mov	r9, r4
 80060be:	eb18 080a 	adds.w	r8, r8, sl
 80060c2:	eb49 090b 	adc.w	r9, r9, fp
 80060c6:	f04f 0100 	mov.w	r1, #0
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060da:	4688      	mov	r8, r1
 80060dc:	4691      	mov	r9, r2
 80060de:	eb1a 0508 	adds.w	r5, sl, r8
 80060e2:	eb4b 0609 	adc.w	r6, fp, r9
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	4619      	mov	r1, r3
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	f04f 0400 	mov.w	r4, #0
 80060f8:	0094      	lsls	r4, r2, #2
 80060fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060fe:	008b      	lsls	r3, r1, #2
 8006100:	461a      	mov	r2, r3
 8006102:	4623      	mov	r3, r4
 8006104:	4628      	mov	r0, r5
 8006106:	4631      	mov	r1, r6
 8006108:	f7fa fd56 	bl	8000bb8 <__aeabi_uldivmod>
 800610c:	4603      	mov	r3, r0
 800610e:	460c      	mov	r4, r1
 8006110:	461a      	mov	r2, r3
 8006112:	4b4e      	ldr	r3, [pc, #312]	; (800624c <UART_SetConfig+0x778>)
 8006114:	fba3 2302 	umull	r2, r3, r3, r2
 8006118:	095b      	lsrs	r3, r3, #5
 800611a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	469b      	mov	fp, r3
 8006122:	f04f 0c00 	mov.w	ip, #0
 8006126:	46d9      	mov	r9, fp
 8006128:	46e2      	mov	sl, ip
 800612a:	eb19 0309 	adds.w	r3, r9, r9
 800612e:	eb4a 040a 	adc.w	r4, sl, sl
 8006132:	4699      	mov	r9, r3
 8006134:	46a2      	mov	sl, r4
 8006136:	eb19 090b 	adds.w	r9, r9, fp
 800613a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800613e:	f04f 0100 	mov.w	r1, #0
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800614a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800614e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006152:	4689      	mov	r9, r1
 8006154:	4692      	mov	sl, r2
 8006156:	eb1b 0509 	adds.w	r5, fp, r9
 800615a:	eb4c 060a 	adc.w	r6, ip, sl
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	4619      	mov	r1, r3
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	f04f 0400 	mov.w	r4, #0
 8006170:	0094      	lsls	r4, r2, #2
 8006172:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006176:	008b      	lsls	r3, r1, #2
 8006178:	461a      	mov	r2, r3
 800617a:	4623      	mov	r3, r4
 800617c:	4628      	mov	r0, r5
 800617e:	4631      	mov	r1, r6
 8006180:	f7fa fd1a 	bl	8000bb8 <__aeabi_uldivmod>
 8006184:	4603      	mov	r3, r0
 8006186:	460c      	mov	r4, r1
 8006188:	461a      	mov	r2, r3
 800618a:	4b30      	ldr	r3, [pc, #192]	; (800624c <UART_SetConfig+0x778>)
 800618c:	fba3 1302 	umull	r1, r3, r3, r2
 8006190:	095b      	lsrs	r3, r3, #5
 8006192:	2164      	movs	r1, #100	; 0x64
 8006194:	fb01 f303 	mul.w	r3, r1, r3
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	3332      	adds	r3, #50	; 0x32
 800619e:	4a2b      	ldr	r2, [pc, #172]	; (800624c <UART_SetConfig+0x778>)
 80061a0:	fba2 2303 	umull	r2, r3, r2, r3
 80061a4:	095b      	lsrs	r3, r3, #5
 80061a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061aa:	4498      	add	r8, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	469b      	mov	fp, r3
 80061b0:	f04f 0c00 	mov.w	ip, #0
 80061b4:	46d9      	mov	r9, fp
 80061b6:	46e2      	mov	sl, ip
 80061b8:	eb19 0309 	adds.w	r3, r9, r9
 80061bc:	eb4a 040a 	adc.w	r4, sl, sl
 80061c0:	4699      	mov	r9, r3
 80061c2:	46a2      	mov	sl, r4
 80061c4:	eb19 090b 	adds.w	r9, r9, fp
 80061c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061cc:	f04f 0100 	mov.w	r1, #0
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061e0:	4689      	mov	r9, r1
 80061e2:	4692      	mov	sl, r2
 80061e4:	eb1b 0509 	adds.w	r5, fp, r9
 80061e8:	eb4c 060a 	adc.w	r6, ip, sl
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	4619      	mov	r1, r3
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	f04f 0300 	mov.w	r3, #0
 80061fa:	f04f 0400 	mov.w	r4, #0
 80061fe:	0094      	lsls	r4, r2, #2
 8006200:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006204:	008b      	lsls	r3, r1, #2
 8006206:	461a      	mov	r2, r3
 8006208:	4623      	mov	r3, r4
 800620a:	4628      	mov	r0, r5
 800620c:	4631      	mov	r1, r6
 800620e:	f7fa fcd3 	bl	8000bb8 <__aeabi_uldivmod>
 8006212:	4603      	mov	r3, r0
 8006214:	460c      	mov	r4, r1
 8006216:	461a      	mov	r2, r3
 8006218:	4b0c      	ldr	r3, [pc, #48]	; (800624c <UART_SetConfig+0x778>)
 800621a:	fba3 1302 	umull	r1, r3, r3, r2
 800621e:	095b      	lsrs	r3, r3, #5
 8006220:	2164      	movs	r1, #100	; 0x64
 8006222:	fb01 f303 	mul.w	r3, r1, r3
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	3332      	adds	r3, #50	; 0x32
 800622c:	4a07      	ldr	r2, [pc, #28]	; (800624c <UART_SetConfig+0x778>)
 800622e:	fba2 2303 	umull	r2, r3, r2, r3
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	f003 020f 	and.w	r2, r3, #15
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4442      	add	r2, r8
 800623e:	609a      	str	r2, [r3, #8]
}
 8006240:	e7ff      	b.n	8006242 <UART_SetConfig+0x76e>
 8006242:	bf00      	nop
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624c:	51eb851f 	.word	0x51eb851f

08006250 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006250:	b084      	sub	sp, #16
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	f107 001c 	add.w	r0, r7, #28
 800625e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	2b01      	cmp	r3, #1
 8006266:	d122      	bne.n	80062ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800627c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006292:	2b01      	cmp	r3, #1
 8006294:	d105      	bne.n	80062a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f94a 	bl	800653c <USB_CoreReset>
 80062a8:	4603      	mov	r3, r0
 80062aa:	73fb      	strb	r3, [r7, #15]
 80062ac:	e01a      	b.n	80062e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f93e 	bl	800653c <USB_CoreReset>
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	639a      	str	r2, [r3, #56]	; 0x38
 80062d6:	e005      	b.n	80062e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d10b      	bne.n	8006302 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f043 0206 	orr.w	r2, r3, #6
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f043 0220 	orr.w	r2, r3, #32
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006302:	7bfb      	ldrb	r3, [r7, #15]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800630e:	b004      	add	sp, #16
 8006310:	4770      	bx	lr

08006312 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f043 0201 	orr.w	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f023 0201 	bic.w	r2, r3, #1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	460b      	mov	r3, r1
 8006360:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800636e:	78fb      	ldrb	r3, [r7, #3]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d106      	bne.n	8006382 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	60da      	str	r2, [r3, #12]
 8006380:	e00b      	b.n	800639a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d106      	bne.n	8006396 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	60da      	str	r2, [r3, #12]
 8006394:	e001      	b.n	800639a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e003      	b.n	80063a2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800639a:	2032      	movs	r0, #50	; 0x32
 800639c:	f7fb fd1e 	bl	8001ddc <HAL_Delay>

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	019b      	lsls	r3, r3, #6
 80063be:	f043 0220 	orr.w	r2, r3, #32
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3301      	adds	r3, #1
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4a09      	ldr	r2, [pc, #36]	; (80063f4 <USB_FlushTxFifo+0x48>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d901      	bls.n	80063d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e006      	b.n	80063e6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	d0f0      	beq.n	80063c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	00030d40 	.word	0x00030d40

080063f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2210      	movs	r2, #16
 8006408:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3301      	adds	r3, #1
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4a09      	ldr	r2, [pc, #36]	; (8006438 <USB_FlushRxFifo+0x40>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d901      	bls.n	800641c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e006      	b.n	800642a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f003 0310 	and.w	r3, r3, #16
 8006424:	2b10      	cmp	r3, #16
 8006426:	d0f0      	beq.n	800640a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	00030d40 	.word	0x00030d40

0800643c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800643c:	b480      	push	{r7}
 800643e:	b089      	sub	sp, #36	; 0x24
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	4611      	mov	r1, r2
 8006448:	461a      	mov	r2, r3
 800644a:	460b      	mov	r3, r1
 800644c:	71fb      	strb	r3, [r7, #7]
 800644e:	4613      	mov	r3, r2
 8006450:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800645a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800645e:	2b00      	cmp	r3, #0
 8006460:	d11a      	bne.n	8006498 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006462:	88bb      	ldrh	r3, [r7, #4]
 8006464:	3303      	adds	r3, #3
 8006466:	089b      	lsrs	r3, r3, #2
 8006468:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800646a:	2300      	movs	r3, #0
 800646c:	61bb      	str	r3, [r7, #24]
 800646e:	e00f      	b.n	8006490 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	031a      	lsls	r2, r3, #12
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	4413      	add	r3, r2
 8006478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647c:	461a      	mov	r2, r3
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	3304      	adds	r3, #4
 8006488:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	3301      	adds	r3, #1
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	429a      	cmp	r2, r3
 8006496:	d3eb      	bcc.n	8006470 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3724      	adds	r7, #36	; 0x24
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b089      	sub	sp, #36	; 0x24
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	4613      	mov	r3, r2
 80064b2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80064bc:	88fb      	ldrh	r3, [r7, #6]
 80064be:	3303      	adds	r3, #3
 80064c0:	089b      	lsrs	r3, r3, #2
 80064c2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80064c4:	2300      	movs	r3, #0
 80064c6:	61bb      	str	r3, [r7, #24]
 80064c8:	e00b      	b.n	80064e2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	601a      	str	r2, [r3, #0]
    pDest++;
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	3304      	adds	r3, #4
 80064da:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	3301      	adds	r3, #1
 80064e0:	61bb      	str	r3, [r7, #24]
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d3ef      	bcc.n	80064ca <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80064ea:	69fb      	ldr	r3, [r7, #28]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3724      	adds	r7, #36	; 0x24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4013      	ands	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006510:	68fb      	ldr	r3, [r7, #12]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	f003 0301 	and.w	r3, r3, #1
}
 800652e:	4618      	mov	r0, r3
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
	...

0800653c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a13      	ldr	r2, [pc, #76]	; (80065a0 <USB_CoreReset+0x64>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d901      	bls.n	800655a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e01b      	b.n	8006592 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	daf2      	bge.n	8006548 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f043 0201 	orr.w	r2, r3, #1
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3301      	adds	r3, #1
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4a09      	ldr	r2, [pc, #36]	; (80065a0 <USB_CoreReset+0x64>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d901      	bls.n	8006584 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e006      	b.n	8006592 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b01      	cmp	r3, #1
 800658e:	d0f0      	beq.n	8006572 <USB_CoreReset+0x36>

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3714      	adds	r7, #20
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	00030d40 	.word	0x00030d40

080065a4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065a4:	b084      	sub	sp, #16
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	f107 001c 	add.w	r0, r7, #28
 80065b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065c0:	461a      	mov	r2, r3
 80065c2:	2300      	movs	r3, #0
 80065c4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d018      	beq.n	8006628 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d10a      	bne.n	8006612 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800660a:	f043 0304 	orr.w	r3, r3, #4
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	e014      	b.n	800663c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006620:	f023 0304 	bic.w	r3, r3, #4
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	e009      	b.n	800663c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006636:	f023 0304 	bic.w	r3, r3, #4
 800663a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800663c:	2110      	movs	r1, #16
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7ff feb4 	bl	80063ac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7ff fed7 	bl	80063f8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800664a:	2300      	movs	r3, #0
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	e015      	b.n	800667c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4413      	add	r3, r2
 8006658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665c:	461a      	mov	r2, r3
 800665e:	f04f 33ff 	mov.w	r3, #4294967295
 8006662:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4413      	add	r3, r2
 800666c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006670:	461a      	mov	r2, r3
 8006672:	2300      	movs	r3, #0
 8006674:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3301      	adds	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	429a      	cmp	r2, r3
 8006682:	d3e5      	bcc.n	8006650 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006684:	2101      	movs	r1, #1
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f8ac 	bl	80067e4 <USB_DriveVbus>

  HAL_Delay(200U);
 800668c:	20c8      	movs	r0, #200	; 0xc8
 800668e:	f7fb fba5 	bl	8001ddc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f04f 32ff 	mov.w	r2, #4294967295
 800669e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00b      	beq.n	80066c4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066b2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a14      	ldr	r2, [pc, #80]	; (8006708 <USB_HostInit+0x164>)
 80066b8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a13      	ldr	r2, [pc, #76]	; (800670c <USB_HostInit+0x168>)
 80066be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80066c2:	e009      	b.n	80066d8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2280      	movs	r2, #128	; 0x80
 80066c8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a10      	ldr	r2, [pc, #64]	; (8006710 <USB_HostInit+0x16c>)
 80066ce:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a10      	ldr	r2, [pc, #64]	; (8006714 <USB_HostInit+0x170>)
 80066d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d105      	bne.n	80066ea <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	f043 0210 	orr.w	r2, r3, #16
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	699a      	ldr	r2, [r3, #24]
 80066ee:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <USB_HostInit+0x174>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006702:	b004      	add	sp, #16
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	01000200 	.word	0x01000200
 800670c:	00e00300 	.word	0x00e00300
 8006710:	00600080 	.word	0x00600080
 8006714:	004000e0 	.word	0x004000e0
 8006718:	a3200008 	.word	0xa3200008

0800671c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800673a:	f023 0303 	bic.w	r3, r3, #3
 800673e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	68f9      	ldr	r1, [r7, #12]
 8006750:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006754:	4313      	orrs	r3, r2
 8006756:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d107      	bne.n	800676e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006764:	461a      	mov	r2, r3
 8006766:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800676a:	6053      	str	r3, [r2, #4]
 800676c:	e009      	b.n	8006782 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	2b02      	cmp	r3, #2
 8006772:	d106      	bne.n	8006782 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800677a:	461a      	mov	r2, r3
 800677c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006780:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80067b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067be:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80067c0:	2064      	movs	r0, #100	; 0x64
 80067c2:	f7fb fb0b 	bl	8001ddc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80067d4:	200a      	movs	r0, #10
 80067d6:	f7fb fb01 	bl	8001ddc <HAL_Delay>

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006808:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d109      	bne.n	8006828 <USB_DriveVbus+0x44>
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d106      	bne.n	8006828 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006822:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006826:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800682e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006832:	d109      	bne.n	8006848 <USB_DriveVbus+0x64>
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d106      	bne.n	8006848 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006846:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006856:	b480      	push	{r7}
 8006858:	b085      	sub	sp, #20
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	0c5b      	lsrs	r3, r3, #17
 8006874:	f003 0303 	and.w	r3, r3, #3
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	b29b      	uxth	r3, r3
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
	...

080068a8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	4608      	mov	r0, r1
 80068b2:	4611      	mov	r1, r2
 80068b4:	461a      	mov	r2, r3
 80068b6:	4603      	mov	r3, r0
 80068b8:	70fb      	strb	r3, [r7, #3]
 80068ba:	460b      	mov	r3, r1
 80068bc:	70bb      	strb	r3, [r7, #2]
 80068be:	4613      	mov	r3, r2
 80068c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d6:	461a      	mov	r2, r3
 80068d8:	f04f 33ff 	mov.w	r3, #4294967295
 80068dc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80068de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d87e      	bhi.n	80069e4 <USB_HC_Init+0x13c>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <USB_HC_Init+0x44>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	080068fd 	.word	0x080068fd
 80068f0:	080069a7 	.word	0x080069a7
 80068f4:	080068fd 	.word	0x080068fd
 80068f8:	08006969 	.word	0x08006969
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4413      	add	r3, r2
 8006904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006908:	461a      	mov	r2, r3
 800690a:	f240 439d 	movw	r3, #1181	; 0x49d
 800690e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006910:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006914:	2b00      	cmp	r3, #0
 8006916:	da10      	bge.n	800693a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	4413      	add	r3, r2
 8006920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	78fa      	ldrb	r2, [r7, #3]
 8006928:	0151      	lsls	r1, r2, #5
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	440a      	add	r2, r1
 800692e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006936:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006938:	e057      	b.n	80069ea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006942:	2b00      	cmp	r3, #0
 8006944:	d051      	beq.n	80069ea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	4413      	add	r3, r2
 800694e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	78fa      	ldrb	r2, [r7, #3]
 8006956:	0151      	lsls	r1, r2, #5
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	440a      	add	r2, r1
 800695c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006960:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006964:	60d3      	str	r3, [r2, #12]
      break;
 8006966:	e040      	b.n	80069ea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006968:	78fb      	ldrb	r3, [r7, #3]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4413      	add	r3, r2
 8006970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006974:	461a      	mov	r2, r3
 8006976:	f240 639d 	movw	r3, #1693	; 0x69d
 800697a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800697c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006980:	2b00      	cmp	r3, #0
 8006982:	da34      	bge.n	80069ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	4413      	add	r3, r2
 800698c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	78fa      	ldrb	r2, [r7, #3]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	440a      	add	r2, r1
 800699a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800699e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069a2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80069a4:	e023      	b.n	80069ee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80069a6:	78fb      	ldrb	r3, [r7, #3]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b2:	461a      	mov	r2, r3
 80069b4:	f240 2325 	movw	r3, #549	; 0x225
 80069b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80069ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	da17      	bge.n	80069f2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	78fa      	ldrb	r2, [r7, #3]
 80069d2:	0151      	lsls	r1, r2, #5
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	440a      	add	r2, r1
 80069d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069dc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80069e0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80069e2:	e006      	b.n	80069f2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	75fb      	strb	r3, [r7, #23]
      break;
 80069e8:	e004      	b.n	80069f4 <USB_HC_Init+0x14c>
      break;
 80069ea:	bf00      	nop
 80069ec:	e002      	b.n	80069f4 <USB_HC_Init+0x14c>
      break;
 80069ee:	bf00      	nop
 80069f0:	e000      	b.n	80069f4 <USB_HC_Init+0x14c>
      break;
 80069f2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069fa:	699a      	ldr	r2, [r3, #24]
 80069fc:	78fb      	ldrb	r3, [r7, #3]
 80069fe:	f003 030f 	and.w	r3, r3, #15
 8006a02:	2101      	movs	r1, #1
 8006a04:	fa01 f303 	lsl.w	r3, r1, r3
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006a1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	da03      	bge.n	8006a2e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a2a:	613b      	str	r3, [r7, #16]
 8006a2c:	e001      	b.n	8006a32 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006a32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d103      	bne.n	8006a42 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006a3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	e001      	b.n	8006a46 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a46:	787b      	ldrb	r3, [r7, #1]
 8006a48:	059b      	lsls	r3, r3, #22
 8006a4a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a4e:	78bb      	ldrb	r3, [r7, #2]
 8006a50:	02db      	lsls	r3, r3, #11
 8006a52:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a56:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a5c:	049b      	lsls	r3, r3, #18
 8006a5e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a62:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a66:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a6a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a70:	78fb      	ldrb	r3, [r7, #3]
 8006a72:	0159      	lsls	r1, r3, #5
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	440b      	add	r3, r1
 8006a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a82:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006a84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	d10f      	bne.n	8006aac <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006a8c:	78fb      	ldrb	r3, [r7, #3]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	78fa      	ldrb	r2, [r7, #3]
 8006a9c:	0151      	lsls	r1, r2, #5
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	440a      	add	r2, r1
 8006aa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006aaa:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop

08006abc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08c      	sub	sp, #48	; 0x30
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	785b      	ldrb	r3, [r3, #1]
 8006ad2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ad8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d028      	beq.n	8006b38 <USB_HC_StartXfer+0x7c>
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	791b      	ldrb	r3, [r3, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d124      	bne.n	8006b38 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10b      	bne.n	8006b0c <USB_HC_StartXfer+0x50>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	795b      	ldrb	r3, [r3, #5]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d107      	bne.n	8006b0c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	4619      	mov	r1, r3
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 fa2e 	bl	8006f64 <USB_DoPing>
      return HAL_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	e112      	b.n	8006d32 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8006b0c:	79fb      	ldrb	r3, [r7, #7]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d112      	bne.n	8006b38 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	69fa      	ldr	r2, [r7, #28]
 8006b22:	0151      	lsls	r1, r2, #5
 8006b24:	6a3a      	ldr	r2, [r7, #32]
 8006b26:	440a      	add	r2, r1
 8006b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b2c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006b30:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2200      	movs	r2, #0
 8006b36:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d018      	beq.n	8006b72 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	8912      	ldrh	r2, [r2, #8]
 8006b48:	4413      	add	r3, r2
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	8912      	ldrh	r2, [r2, #8]
 8006b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b54:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006b56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b58:	8b7b      	ldrh	r3, [r7, #26]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d90b      	bls.n	8006b76 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006b5e:	8b7b      	ldrh	r3, [r7, #26]
 8006b60:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006b62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	8912      	ldrh	r2, [r2, #8]
 8006b68:	fb02 f203 	mul.w	r2, r2, r3
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	611a      	str	r2, [r3, #16]
 8006b70:	e001      	b.n	8006b76 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006b72:	2301      	movs	r3, #1
 8006b74:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	78db      	ldrb	r3, [r3, #3]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d006      	beq.n	8006b8c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006b7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	8912      	ldrh	r2, [r2, #8]
 8006b84:	fb02 f203 	mul.w	r2, r2, r3
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b96:	04d9      	lsls	r1, r3, #19
 8006b98:	4b68      	ldr	r3, [pc, #416]	; (8006d3c <USB_HC_StartXfer+0x280>)
 8006b9a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b9c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	7a9b      	ldrb	r3, [r3, #10]
 8006ba2:	075b      	lsls	r3, r3, #29
 8006ba4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ba8:	69f9      	ldr	r1, [r7, #28]
 8006baa:	0148      	lsls	r0, r1, #5
 8006bac:	6a39      	ldr	r1, [r7, #32]
 8006bae:	4401      	add	r1, r0
 8006bb0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bb4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bb6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d009      	beq.n	8006bd2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	68d9      	ldr	r1, [r3, #12]
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bce:	460a      	mov	r2, r1
 8006bd0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	bf0c      	ite	eq
 8006be2:	2301      	moveq	r3, #1
 8006be4:	2300      	movne	r3, #0
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	0151      	lsls	r1, r2, #5
 8006bfc:	6a3a      	ldr	r2, [r7, #32]
 8006bfe:	440a      	add	r2, r1
 8006c00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c08:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	7e7b      	ldrb	r3, [r7, #25]
 8006c1a:	075b      	lsls	r3, r3, #29
 8006c1c:	69f9      	ldr	r1, [r7, #28]
 8006c1e:	0148      	lsls	r0, r1, #5
 8006c20:	6a39      	ldr	r1, [r7, #32]
 8006c22:	4401      	add	r1, r0
 8006c24:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a41      	ldr	r2, [pc, #260]	; (8006d40 <USB_HC_StartXfer+0x284>)
 8006c3c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c3e:	4b40      	ldr	r3, [pc, #256]	; (8006d40 <USB_HC_StartXfer+0x284>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c46:	4a3e      	ldr	r2, [pc, #248]	; (8006d40 <USB_HC_StartXfer+0x284>)
 8006c48:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	78db      	ldrb	r3, [r3, #3]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d006      	beq.n	8006c60 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006c52:	4b3b      	ldr	r3, [pc, #236]	; (8006d40 <USB_HC_StartXfer+0x284>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c5a:	4a39      	ldr	r2, [pc, #228]	; (8006d40 <USB_HC_StartXfer+0x284>)
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	e005      	b.n	8006c6c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006c60:	4b37      	ldr	r3, [pc, #220]	; (8006d40 <USB_HC_StartXfer+0x284>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c68:	4a35      	ldr	r2, [pc, #212]	; (8006d40 <USB_HC_StartXfer+0x284>)
 8006c6a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c6c:	4b34      	ldr	r3, [pc, #208]	; (8006d40 <USB_HC_StartXfer+0x284>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c74:	4a32      	ldr	r2, [pc, #200]	; (8006d40 <USB_HC_StartXfer+0x284>)
 8006c76:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c84:	461a      	mov	r2, r3
 8006c86:	4b2e      	ldr	r3, [pc, #184]	; (8006d40 <USB_HC_StartXfer+0x284>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d14e      	bne.n	8006d30 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	78db      	ldrb	r3, [r3, #3]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d14a      	bne.n	8006d30 <USB_HC_StartXfer+0x274>
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d046      	beq.n	8006d30 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	79db      	ldrb	r3, [r3, #7]
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d830      	bhi.n	8006d0c <USB_HC_StartXfer+0x250>
 8006caa:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <USB_HC_StartXfer+0x1f4>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006cc1 	.word	0x08006cc1
 8006cb4:	08006ce5 	.word	0x08006ce5
 8006cb8:	08006cc1 	.word	0x08006cc1
 8006cbc:	08006ce5 	.word	0x08006ce5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	3303      	adds	r3, #3
 8006cc6:	089b      	lsrs	r3, r3, #2
 8006cc8:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006cca:	8afa      	ldrh	r2, [r7, #22]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d91c      	bls.n	8006d10 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	f043 0220 	orr.w	r2, r3, #32
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	619a      	str	r2, [r3, #24]
          }
          break;
 8006ce2:	e015      	b.n	8006d10 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	3303      	adds	r3, #3
 8006cea:	089b      	lsrs	r3, r3, #2
 8006cec:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006cee:	8afa      	ldrh	r2, [r7, #22]
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d90a      	bls.n	8006d14 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	619a      	str	r2, [r3, #24]
          }
          break;
 8006d0a:	e003      	b.n	8006d14 <USB_HC_StartXfer+0x258>

        default:
          break;
 8006d0c:	bf00      	nop
 8006d0e:	e002      	b.n	8006d16 <USB_HC_StartXfer+0x25a>
          break;
 8006d10:	bf00      	nop
 8006d12:	e000      	b.n	8006d16 <USB_HC_StartXfer+0x25a>
          break;
 8006d14:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	68d9      	ldr	r1, [r3, #12]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	785a      	ldrb	r2, [r3, #1]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	b298      	uxth	r0, r3
 8006d24:	2300      	movs	r3, #0
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	4603      	mov	r3, r0
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff fb86 	bl	800643c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3728      	adds	r7, #40	; 0x28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	1ff80000 	.word	0x1ff80000
 8006d40:	20000c54 	.word	0x20000c54

08006d44 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	b29b      	uxth	r3, r3
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b087      	sub	sp, #28
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	0c9b      	lsrs	r3, r3, #18
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <USB_HC_Halt+0x3a>
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d16c      	bne.n	8006e7a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	0151      	lsls	r1, r2, #5
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	440a      	add	r2, r1
 8006db6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dbe:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d143      	bne.n	8006e54 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006de6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e0a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	0151      	lsls	r1, r2, #5
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	440a      	add	r2, r1
 8006e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e2a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e38:	d81d      	bhi.n	8006e76 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e50:	d0ec      	beq.n	8006e2c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e52:	e080      	b.n	8006f56 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	0151      	lsls	r1, r2, #5
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	440a      	add	r2, r1
 8006e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e72:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e74:	e06f      	b.n	8006f56 <USB_HC_Halt+0x1f0>
          break;
 8006e76:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e78:	e06d      	b.n	8006f56 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	0151      	lsls	r1, r2, #5
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	440a      	add	r2, r1
 8006e90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e98:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d143      	bne.n	8006f32 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	0151      	lsls	r1, r2, #5
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	440a      	add	r2, r1
 8006ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ec8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	0151      	lsls	r1, r2, #5
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	440a      	add	r2, r1
 8006ee0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ee4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ee8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	0151      	lsls	r1, r2, #5
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	440a      	add	r2, r1
 8006f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f08:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f16:	d81d      	bhi.n	8006f54 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f2e:	d0ec      	beq.n	8006f0a <USB_HC_Halt+0x1a4>
 8006f30:	e011      	b.n	8006f56 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	0151      	lsls	r1, r2, #5
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	440a      	add	r2, r1
 8006f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	e000      	b.n	8006f56 <USB_HC_Halt+0x1f0>
          break;
 8006f54:	bf00      	nop
    }
  }

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	371c      	adds	r7, #28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006f74:	78fb      	ldrb	r3, [r7, #3]
 8006f76:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	04da      	lsls	r2, r3, #19
 8006f80:	4b15      	ldr	r3, [pc, #84]	; (8006fd8 <USB_DoPing+0x74>)
 8006f82:	4013      	ands	r3, r2
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	0151      	lsls	r1, r2, #5
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	440a      	add	r2, r1
 8006f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f94:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fac:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fb4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	1ff80000 	.word	0x1ff80000

08006fdc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff f9a1 	bl	8006334 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006ff2:	2110      	movs	r1, #16
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff f9d9 	bl	80063ac <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff f9fc 	bl	80063f8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007000:	2300      	movs	r3, #0
 8007002:	613b      	str	r3, [r7, #16]
 8007004:	e01f      	b.n	8007046 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800701c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007024:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800702c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4413      	add	r3, r2
 8007036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800703a:	461a      	mov	r2, r3
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	3301      	adds	r3, #1
 8007044:	613b      	str	r3, [r7, #16]
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b0f      	cmp	r3, #15
 800704a:	d9dc      	bls.n	8007006 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800704c:	2300      	movs	r3, #0
 800704e:	613b      	str	r3, [r7, #16]
 8007050:	e034      	b.n	80070bc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4413      	add	r3, r2
 800705a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007068:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007070:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007078:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	4413      	add	r3, r2
 8007082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007086:	461a      	mov	r2, r3
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	3301      	adds	r3, #1
 8007090:	617b      	str	r3, [r7, #20]
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007098:	d80c      	bhi.n	80070b4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070b0:	d0ec      	beq.n	800708c <USB_StopHost+0xb0>
 80070b2:	e000      	b.n	80070b6 <USB_StopHost+0xda>
        break;
 80070b4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	3301      	adds	r3, #1
 80070ba:	613b      	str	r3, [r7, #16]
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	2b0f      	cmp	r3, #15
 80070c0:	d9c7      	bls.n	8007052 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070c8:	461a      	mov	r2, r3
 80070ca:	f04f 33ff 	mov.w	r3, #4294967295
 80070ce:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f04f 32ff 	mov.w	r2, #4294967295
 80070d6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff f91a 	bl	8006312 <USB_EnableGlobalInt>

  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3718      	adds	r7, #24
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80070e8:	b590      	push	{r4, r7, lr}
 80070ea:	b089      	sub	sp, #36	; 0x24
 80070ec:	af04      	add	r7, sp, #16
 80070ee:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80070f0:	2301      	movs	r3, #1
 80070f2:	2202      	movs	r2, #2
 80070f4:	2102      	movs	r1, #2
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fcba 	bl	8007a70 <USBH_FindInterface>
 80070fc:	4603      	mov	r3, r0
 80070fe:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007100:	7bfb      	ldrb	r3, [r7, #15]
 8007102:	2bff      	cmp	r3, #255	; 0xff
 8007104:	d002      	beq.n	800710c <USBH_CDC_InterfaceInit+0x24>
 8007106:	7bfb      	ldrb	r3, [r7, #15]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d901      	bls.n	8007110 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800710c:	2302      	movs	r3, #2
 800710e:	e13d      	b.n	800738c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fc8f 	bl	8007a38 <USBH_SelectInterface>
 800711a:	4603      	mov	r3, r0
 800711c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007124:	2302      	movs	r3, #2
 8007126:	e131      	b.n	800738c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800712e:	2050      	movs	r0, #80	; 0x50
 8007130:	f004 fec0 	bl	800beb4 <malloc>
 8007134:	4603      	mov	r3, r0
 8007136:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007148:	2302      	movs	r3, #2
 800714a:	e11f      	b.n	800738c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800714c:	2250      	movs	r2, #80	; 0x50
 800714e:	2100      	movs	r1, #0
 8007150:	68b8      	ldr	r0, [r7, #8]
 8007152:	f005 f900 	bl	800c356 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	211a      	movs	r1, #26
 800715c:	fb01 f303 	mul.w	r3, r1, r3
 8007160:	4413      	add	r3, r2
 8007162:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	b25b      	sxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	da15      	bge.n	800719a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800716e:	7bfb      	ldrb	r3, [r7, #15]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	211a      	movs	r1, #26
 8007174:	fb01 f303 	mul.w	r3, r1, r3
 8007178:	4413      	add	r3, r2
 800717a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800717e:	781a      	ldrb	r2, [r3, #0]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	211a      	movs	r1, #26
 800718a:	fb01 f303 	mul.w	r3, r1, r3
 800718e:	4413      	add	r3, r2
 8007190:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007194:	881a      	ldrh	r2, [r3, #0]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	785b      	ldrb	r3, [r3, #1]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f002 f894 	bl	80092ce <USBH_AllocPipe>
 80071a6:	4603      	mov	r3, r0
 80071a8:	461a      	mov	r2, r3
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	7819      	ldrb	r1, [r3, #0]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	7858      	ldrb	r0, [r3, #1]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	8952      	ldrh	r2, [r2, #10]
 80071c6:	9202      	str	r2, [sp, #8]
 80071c8:	2203      	movs	r2, #3
 80071ca:	9201      	str	r2, [sp, #4]
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	4623      	mov	r3, r4
 80071d0:	4602      	mov	r2, r0
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f002 f84c 	bl	8009270 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2200      	movs	r2, #0
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f004 fdb7 	bl	800bd54 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80071e6:	2300      	movs	r3, #0
 80071e8:	2200      	movs	r2, #0
 80071ea:	210a      	movs	r1, #10
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fc3f 	bl	8007a70 <USBH_FindInterface>
 80071f2:	4603      	mov	r3, r0
 80071f4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	2bff      	cmp	r3, #255	; 0xff
 80071fa:	d002      	beq.n	8007202 <USBH_CDC_InterfaceInit+0x11a>
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d901      	bls.n	8007206 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007202:	2302      	movs	r3, #2
 8007204:	e0c2      	b.n	800738c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	211a      	movs	r1, #26
 800720c:	fb01 f303 	mul.w	r3, r1, r3
 8007210:	4413      	add	r3, r2
 8007212:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	b25b      	sxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	da16      	bge.n	800724c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	211a      	movs	r1, #26
 8007224:	fb01 f303 	mul.w	r3, r1, r3
 8007228:	4413      	add	r3, r2
 800722a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800722e:	781a      	ldrb	r2, [r3, #0]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	211a      	movs	r1, #26
 800723a:	fb01 f303 	mul.w	r3, r1, r3
 800723e:	4413      	add	r3, r2
 8007240:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007244:	881a      	ldrh	r2, [r3, #0]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	835a      	strh	r2, [r3, #26]
 800724a:	e015      	b.n	8007278 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	211a      	movs	r1, #26
 8007252:	fb01 f303 	mul.w	r3, r1, r3
 8007256:	4413      	add	r3, r2
 8007258:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800725c:	781a      	ldrb	r2, [r3, #0]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007262:	7bfb      	ldrb	r3, [r7, #15]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	211a      	movs	r1, #26
 8007268:	fb01 f303 	mul.w	r3, r1, r3
 800726c:	4413      	add	r3, r2
 800726e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007272:	881a      	ldrh	r2, [r3, #0]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007278:	7bfb      	ldrb	r3, [r7, #15]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	211a      	movs	r1, #26
 800727e:	fb01 f303 	mul.w	r3, r1, r3
 8007282:	4413      	add	r3, r2
 8007284:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	b25b      	sxtb	r3, r3
 800728c:	2b00      	cmp	r3, #0
 800728e:	da16      	bge.n	80072be <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	211a      	movs	r1, #26
 8007296:	fb01 f303 	mul.w	r3, r1, r3
 800729a:	4413      	add	r3, r2
 800729c:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072a0:	781a      	ldrb	r2, [r3, #0]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	211a      	movs	r1, #26
 80072ac:	fb01 f303 	mul.w	r3, r1, r3
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072b6:	881a      	ldrh	r2, [r3, #0]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	835a      	strh	r2, [r3, #26]
 80072bc:	e015      	b.n	80072ea <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	211a      	movs	r1, #26
 80072c4:	fb01 f303 	mul.w	r3, r1, r3
 80072c8:	4413      	add	r3, r2
 80072ca:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072ce:	781a      	ldrb	r2, [r3, #0]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	211a      	movs	r1, #26
 80072da:	fb01 f303 	mul.w	r3, r1, r3
 80072de:	4413      	add	r3, r2
 80072e0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072e4:	881a      	ldrh	r2, [r3, #0]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	7b9b      	ldrb	r3, [r3, #14]
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 ffec 	bl	80092ce <USBH_AllocPipe>
 80072f6:	4603      	mov	r3, r0
 80072f8:	461a      	mov	r2, r3
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	7bdb      	ldrb	r3, [r3, #15]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 ffe2 	bl	80092ce <USBH_AllocPipe>
 800730a:	4603      	mov	r3, r0
 800730c:	461a      	mov	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	7b59      	ldrb	r1, [r3, #13]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	7b98      	ldrb	r0, [r3, #14]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	8b12      	ldrh	r2, [r2, #24]
 800732a:	9202      	str	r2, [sp, #8]
 800732c:	2202      	movs	r2, #2
 800732e:	9201      	str	r2, [sp, #4]
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	4623      	mov	r3, r4
 8007334:	4602      	mov	r2, r0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f001 ff9a 	bl	8009270 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	7b19      	ldrb	r1, [r3, #12]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	7bd8      	ldrb	r0, [r3, #15]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	8b52      	ldrh	r2, [r2, #26]
 8007354:	9202      	str	r2, [sp, #8]
 8007356:	2202      	movs	r2, #2
 8007358:	9201      	str	r2, [sp, #4]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	4623      	mov	r3, r4
 800735e:	4602      	mov	r2, r0
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 ff85 	bl	8009270 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	7b5b      	ldrb	r3, [r3, #13]
 8007372:	2200      	movs	r2, #0
 8007374:	4619      	mov	r1, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f004 fcec 	bl	800bd54 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	7b1b      	ldrb	r3, [r3, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f004 fce5 	bl	800bd54 <USBH_LL_SetToggle>

  return USBH_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	bd90      	pop	{r4, r7, pc}

08007394 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00e      	beq.n	80073cc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	4619      	mov	r1, r3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f001 ff7a 	bl	80092ae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 ffa5 	bl	8009310 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	7b1b      	ldrb	r3, [r3, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00e      	beq.n	80073f2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	7b1b      	ldrb	r3, [r3, #12]
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f001 ff67 	bl	80092ae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	7b1b      	ldrb	r3, [r3, #12]
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f001 ff92 	bl	8009310 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	7b5b      	ldrb	r3, [r3, #13]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00e      	beq.n	8007418 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	7b5b      	ldrb	r3, [r3, #13]
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 ff54 	bl	80092ae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	7b5b      	ldrb	r3, [r3, #13]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f001 ff7f 	bl	8009310 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00b      	beq.n	800743c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	4618      	mov	r0, r3
 800742e:	f004 fd49 	bl	800bec4 <free>
    phost->pActiveClass->pData = 0U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007438:	2200      	movs	r2, #0
 800743a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3340      	adds	r3, #64	; 0x40
 800745c:	4619      	mov	r1, r3
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f8b1 	bl	80075c6 <GetLineCoding>
 8007464:	4603      	mov	r3, r0
 8007466:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007468:	7afb      	ldrb	r3, [r7, #11]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d105      	bne.n	800747a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007474:	2102      	movs	r1, #2
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800747a:	7afb      	ldrb	r3, [r7, #11]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800748c:	2301      	movs	r3, #1
 800748e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	d877      	bhi.n	8007598 <USBH_CDC_Process+0x114>
 80074a8:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <USBH_CDC_Process+0x2c>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	080074c5 	.word	0x080074c5
 80074b4:	080074cb 	.word	0x080074cb
 80074b8:	080074fb 	.word	0x080074fb
 80074bc:	0800756f 	.word	0x0800756f
 80074c0:	0800757d 	.word	0x0800757d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	73fb      	strb	r3, [r7, #15]
      break;
 80074c8:	e06d      	b.n	80075a6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f897 	bl	8007604 <SetLineCoding>
 80074d6:	4603      	mov	r3, r0
 80074d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d104      	bne.n	80074ea <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80074e8:	e058      	b.n	800759c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d055      	beq.n	800759c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2204      	movs	r2, #4
 80074f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80074f8:	e050      	b.n	800759c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	3340      	adds	r3, #64	; 0x40
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f860 	bl	80075c6 <GetLineCoding>
 8007506:	4603      	mov	r3, r0
 8007508:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d126      	bne.n	800755e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007522:	791b      	ldrb	r3, [r3, #4]
 8007524:	429a      	cmp	r2, r3
 8007526:	d13b      	bne.n	80075a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007532:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007534:	429a      	cmp	r2, r3
 8007536:	d133      	bne.n	80075a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007542:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007544:	429a      	cmp	r2, r3
 8007546:	d12b      	bne.n	80075a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007550:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007552:	429a      	cmp	r2, r3
 8007554:	d124      	bne.n	80075a0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f984 	bl	8007864 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800755c:	e020      	b.n	80075a0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800755e:	7bbb      	ldrb	r3, [r7, #14]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d01d      	beq.n	80075a0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2204      	movs	r2, #4
 8007568:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800756c:	e018      	b.n	80075a0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f867 	bl	8007642 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f8f8 	bl	800776a <CDC_ProcessReception>
      break;
 800757a:	e014      	b.n	80075a6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800757c:	2100      	movs	r1, #0
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 f953 	bl	800882a <USBH_ClrFeature>
 8007584:	4603      	mov	r3, r0
 8007586:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007596:	e005      	b.n	80075a4 <USBH_CDC_Process+0x120>

    default:
      break;
 8007598:	bf00      	nop
 800759a:	e004      	b.n	80075a6 <USBH_CDC_Process+0x122>
      break;
 800759c:	bf00      	nop
 800759e:	e002      	b.n	80075a6 <USBH_CDC_Process+0x122>
      break;
 80075a0:	bf00      	nop
 80075a2:	e000      	b.n	80075a6 <USBH_CDC_Process+0x122>
      break;
 80075a4:	bf00      	nop

  }

  return status;
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	22a1      	movs	r2, #161	; 0xa1
 80075d4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2221      	movs	r2, #33	; 0x21
 80075da:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2207      	movs	r2, #7
 80075ec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2207      	movs	r2, #7
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 faf8 	bl	8008bea <USBH_CtlReq>
 80075fa:	4603      	mov	r3, r0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2221      	movs	r2, #33	; 0x21
 8007612:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2220      	movs	r2, #32
 8007618:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2207      	movs	r2, #7
 800762a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2207      	movs	r2, #7
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f001 fad9 	bl	8008bea <USBH_CtlReq>
 8007638:	4603      	mov	r3, r0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b086      	sub	sp, #24
 8007646:	af02      	add	r7, sp, #8
 8007648:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007654:	2300      	movs	r3, #0
 8007656:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800765e:	2b01      	cmp	r3, #1
 8007660:	d002      	beq.n	8007668 <CDC_ProcessTransmission+0x26>
 8007662:	2b02      	cmp	r3, #2
 8007664:	d025      	beq.n	80076b2 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007666:	e07c      	b.n	8007762 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	8b12      	ldrh	r2, [r2, #24]
 8007670:	4293      	cmp	r3, r2
 8007672:	d90c      	bls.n	800768e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	69d9      	ldr	r1, [r3, #28]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	8b1a      	ldrh	r2, [r3, #24]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	7b58      	ldrb	r0, [r3, #13]
 8007680:	2301      	movs	r3, #1
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	4603      	mov	r3, r0
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 fdaf 	bl	80091ea <USBH_BulkSendData>
 800768c:	e00c      	b.n	80076a8 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007696:	b29a      	uxth	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	7b58      	ldrb	r0, [r3, #13]
 800769c:	2301      	movs	r3, #1
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	4603      	mov	r3, r0
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f001 fda1 	bl	80091ea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2202      	movs	r2, #2
 80076ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80076b0:	e057      	b.n	8007762 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	7b5b      	ldrb	r3, [r3, #13]
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f004 fb21 	bl	800bd00 <USBH_LL_GetURBState>
 80076be:	4603      	mov	r3, r0
 80076c0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80076c2:	7afb      	ldrb	r3, [r7, #11]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d136      	bne.n	8007736 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	8b12      	ldrh	r2, [r2, #24]
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d90e      	bls.n	80076f2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	8b12      	ldrh	r2, [r2, #24]
 80076dc:	1a9a      	subs	r2, r3, r2
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	8b12      	ldrh	r2, [r2, #24]
 80076ea:	441a      	add	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	61da      	str	r2, [r3, #28]
 80076f0:	e002      	b.n	80076f8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d004      	beq.n	800770a <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8007708:	e006      	b.n	8007718 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f892 	bl	800783c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2204      	movs	r2, #4
 800771c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800772c:	2200      	movs	r2, #0
 800772e:	4619      	mov	r1, r3
 8007730:	f001 feea 	bl	8009508 <osMessagePut>
      break;
 8007734:	e014      	b.n	8007760 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8007736:	7afb      	ldrb	r3, [r7, #11]
 8007738:	2b02      	cmp	r3, #2
 800773a:	d111      	bne.n	8007760 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2204      	movs	r2, #4
 8007748:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007758:	2200      	movs	r2, #0
 800775a:	4619      	mov	r1, r3
 800775c:	f001 fed4 	bl	8009508 <osMessagePut>
      break;
 8007760:	bf00      	nop
  }
}
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b086      	sub	sp, #24
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800777c:	2300      	movs	r3, #0
 800777e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007786:	2b03      	cmp	r3, #3
 8007788:	d002      	beq.n	8007790 <CDC_ProcessReception+0x26>
 800778a:	2b04      	cmp	r3, #4
 800778c:	d00e      	beq.n	80077ac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800778e:	e051      	b.n	8007834 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	6a19      	ldr	r1, [r3, #32]
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	8b5a      	ldrh	r2, [r3, #26]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	7b1b      	ldrb	r3, [r3, #12]
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f001 fd49 	bl	8009234 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2204      	movs	r2, #4
 80077a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80077aa:	e043      	b.n	8007834 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	7b1b      	ldrb	r3, [r3, #12]
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f004 faa4 	bl	800bd00 <USBH_LL_GetURBState>
 80077b8:	4603      	mov	r3, r0
 80077ba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80077bc:	7cfb      	ldrb	r3, [r7, #19]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d137      	bne.n	8007832 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	7b1b      	ldrb	r3, [r3, #12]
 80077c6:	4619      	mov	r1, r3
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f004 fa07 	bl	800bbdc <USBH_LL_GetLastXferSize>
 80077ce:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d016      	beq.n	8007808 <CDC_ProcessReception+0x9e>
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	8b5b      	ldrh	r3, [r3, #26]
 80077de:	461a      	mov	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d910      	bls.n	8007808 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	1ad2      	subs	r2, r2, r3
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	6a1a      	ldr	r2, [r3, #32]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	441a      	add	r2, r3
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2203      	movs	r2, #3
 8007802:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8007806:	e006      	b.n	8007816 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f81d 	bl	8007850 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2204      	movs	r2, #4
 800781a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800782a:	2200      	movs	r2, #0
 800782c:	4619      	mov	r1, r3
 800782e:	f001 fe6b 	bl	8009508 <osMessagePut>
      break;
 8007832:	bf00      	nop
  }
}
 8007834:	bf00      	nop
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007878:	b5b0      	push	{r4, r5, r7, lr}
 800787a:	b090      	sub	sp, #64	; 0x40
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4613      	mov	r3, r2
 8007884:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800788c:	2302      	movs	r3, #2
 800788e:	e04d      	b.n	800792c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	79fa      	ldrb	r2, [r7, #7]
 8007894:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 f847 	bl	800793c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d003      	beq.n	80078dc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80078dc:	4b15      	ldr	r3, [pc, #84]	; (8007934 <USBH_Init+0xbc>)
 80078de:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80078e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 80078e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078ec:	2100      	movs	r1, #0
 80078ee:	4618      	mov	r0, r3
 80078f0:	f001 fde1 	bl	80094b6 <osMessageCreate>
 80078f4:	4602      	mov	r2, r0
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80078fc:	4b0e      	ldr	r3, [pc, #56]	; (8007938 <USBH_Init+0xc0>)
 80078fe:	f107 0414 	add.w	r4, r7, #20
 8007902:	461d      	mov	r5, r3
 8007904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007908:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800790c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8007910:	f107 0314 	add.w	r3, r7, #20
 8007914:	68f9      	ldr	r1, [r7, #12]
 8007916:	4618      	mov	r0, r3
 8007918:	f001 fd6d 	bl	80093f6 <osThreadCreate>
 800791c:	4602      	mov	r2, r0
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f004 f8a7 	bl	800ba78 <USBH_LL_Init>

  return USBH_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3740      	adds	r7, #64	; 0x40
 8007930:	46bd      	mov	sp, r7
 8007932:	bdb0      	pop	{r4, r5, r7, pc}
 8007934:	080100f8 	.word	0x080100f8
 8007938:	08010114 	.word	0x08010114

0800793c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007948:	2300      	movs	r3, #0
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	e009      	b.n	8007962 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	33e0      	adds	r3, #224	; 0xe0
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	2200      	movs	r2, #0
 800795a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3301      	adds	r3, #1
 8007960:	60fb      	str	r3, [r7, #12]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2b0e      	cmp	r3, #14
 8007966:	d9f2      	bls.n	800794e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007968:	2300      	movs	r3, #0
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	e009      	b.n	8007982 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4413      	add	r3, r2
 8007974:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007978:	2200      	movs	r2, #0
 800797a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3301      	adds	r3, #1
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007988:	d3f1      	bcc.n	800796e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2240      	movs	r2, #64	; 0x40
 80079ae:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d016      	beq.n	8007a26 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10e      	bne.n	8007a20 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a08:	1c59      	adds	r1, r3, #1
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	33de      	adds	r3, #222	; 0xde
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73fb      	strb	r3, [r7, #15]
 8007a1e:	e004      	b.n	8007a2a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007a20:	2302      	movs	r3, #2
 8007a22:	73fb      	strb	r3, [r7, #15]
 8007a24:	e001      	b.n	8007a2a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007a26:	2302      	movs	r3, #2
 8007a28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007a4e:	78fa      	ldrb	r2, [r7, #3]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d204      	bcs.n	8007a5e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	78fa      	ldrb	r2, [r7, #3]
 8007a58:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007a5c:	e001      	b.n	8007a62 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007a5e:	2302      	movs	r3, #2
 8007a60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	4608      	mov	r0, r1
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	4603      	mov	r3, r0
 8007a80:	70fb      	strb	r3, [r7, #3]
 8007a82:	460b      	mov	r3, r1
 8007a84:	70bb      	strb	r3, [r7, #2]
 8007a86:	4613      	mov	r3, r2
 8007a88:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007a98:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a9a:	e025      	b.n	8007ae8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
 8007a9e:	221a      	movs	r2, #26
 8007aa0:	fb02 f303 	mul.w	r3, r2, r3
 8007aa4:	3308      	adds	r3, #8
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	3302      	adds	r3, #2
 8007aac:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	795b      	ldrb	r3, [r3, #5]
 8007ab2:	78fa      	ldrb	r2, [r7, #3]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d002      	beq.n	8007abe <USBH_FindInterface+0x4e>
 8007ab8:	78fb      	ldrb	r3, [r7, #3]
 8007aba:	2bff      	cmp	r3, #255	; 0xff
 8007abc:	d111      	bne.n	8007ae2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ac2:	78ba      	ldrb	r2, [r7, #2]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d002      	beq.n	8007ace <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ac8:	78bb      	ldrb	r3, [r7, #2]
 8007aca:	2bff      	cmp	r3, #255	; 0xff
 8007acc:	d109      	bne.n	8007ae2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ad2:	787a      	ldrb	r2, [r7, #1]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d002      	beq.n	8007ade <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ad8:	787b      	ldrb	r3, [r7, #1]
 8007ada:	2bff      	cmp	r3, #255	; 0xff
 8007adc:	d101      	bne.n	8007ae2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007ade:	7dfb      	ldrb	r3, [r7, #23]
 8007ae0:	e006      	b.n	8007af0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d9d6      	bls.n	8007a9c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007aee:	23ff      	movs	r3, #255	; 0xff
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	371c      	adds	r7, #28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f003 fff3 	bl	800baf0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f004 f90a 	bl	800bd26 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b088      	sub	sp, #32
 8007b20:	af04      	add	r7, sp, #16
 8007b22:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007b24:	2302      	movs	r3, #2
 8007b26:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d102      	bne.n	8007b3e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2203      	movs	r2, #3
 8007b3c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b0b      	cmp	r3, #11
 8007b46:	f200 823c 	bhi.w	8007fc2 <USBH_Process+0x4a6>
 8007b4a:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <USBH_Process+0x34>)
 8007b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b50:	08007b81 	.word	0x08007b81
 8007b54:	08007bcf 	.word	0x08007bcf
 8007b58:	08007c53 	.word	0x08007c53
 8007b5c:	08007f41 	.word	0x08007f41
 8007b60:	08007fc3 	.word	0x08007fc3
 8007b64:	08007d13 	.word	0x08007d13
 8007b68:	08007ecb 	.word	0x08007ecb
 8007b6c:	08007d65 	.word	0x08007d65
 8007b70:	08007da1 	.word	0x08007da1
 8007b74:	08007ddb 	.word	0x08007ddb
 8007b78:	08007e23 	.word	0x08007e23
 8007b7c:	08007f29 	.word	0x08007f29
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 821c 	beq.w	8007fc6 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007b94:	20c8      	movs	r0, #200	; 0xc8
 8007b96:	f004 f910 	bl	800bdba <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f004 f803 	bl	800bba6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	f001 fc9e 	bl	8009508 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007bcc:	e1fb      	b.n	8007fc6 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d107      	bne.n	8007be8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	701a      	strb	r2, [r3, #0]
 8007be6:	e025      	b.n	8007c34 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007bee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bf2:	d914      	bls.n	8007c1e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d903      	bls.n	8007c16 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	220d      	movs	r2, #13
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	e00e      	b.n	8007c34 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	701a      	strb	r2, [r3, #0]
 8007c1c:	e00a      	b.n	8007c34 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c24:	f103 020a 	add.w	r2, r3, #10
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007c2e:	200a      	movs	r0, #10
 8007c30:	f004 f8c3 	bl	800bdba <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	f001 fc5c 	bl	8009508 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c50:	e1c0      	b.n	8007fd4 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d005      	beq.n	8007c68 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c62:	2104      	movs	r1, #4
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007c68:	2064      	movs	r0, #100	; 0x64
 8007c6a:	f004 f8a6 	bl	800bdba <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f003 ff74 	bl	800bb5c <USBH_LL_GetSpeed>
 8007c74:	4603      	mov	r3, r0
 8007c76:	461a      	mov	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2205      	movs	r2, #5
 8007c82:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007c84:	2100      	movs	r1, #0
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f001 fb21 	bl	80092ce <USBH_AllocPipe>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	461a      	mov	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007c94:	2180      	movs	r1, #128	; 0x80
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 fb19 	bl	80092ce <USBH_AllocPipe>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	7919      	ldrb	r1, [r3, #4]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007cb8:	b292      	uxth	r2, r2
 8007cba:	9202      	str	r2, [sp, #8]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	9201      	str	r2, [sp, #4]
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2280      	movs	r2, #128	; 0x80
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f001 fad2 	bl	8009270 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	7959      	ldrb	r1, [r3, #5]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ce0:	b292      	uxth	r2, r2
 8007ce2:	9202      	str	r2, [sp, #8]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	9201      	str	r2, [sp, #4]
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	4603      	mov	r3, r0
 8007cec:	2200      	movs	r2, #0
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f001 fabe 	bl	8009270 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d08:	2200      	movs	r2, #0
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	f001 fbfc 	bl	8009508 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d10:	e160      	b.n	8007fd4 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f964 	bl	8007fe0 <USBH_HandleEnum>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f040 8152 	bne.w	8007fca <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d103      	bne.n	8007d40 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2208      	movs	r2, #8
 8007d3c:	701a      	strb	r2, [r3, #0]
 8007d3e:	e002      	b.n	8007d46 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2207      	movs	r2, #7
 8007d44:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2205      	movs	r2, #5
 8007d4a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	f001 fbd3 	bl	8009508 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d62:	e132      	b.n	8007fca <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 812f 	beq.w	8007fce <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d76:	2101      	movs	r1, #1
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2208      	movs	r2, #8
 8007d80:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2205      	movs	r2, #5
 8007d86:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007d96:	2200      	movs	r2, #0
 8007d98:	4619      	mov	r1, r3
 8007d9a:	f001 fbb5 	bl	8009508 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007d9e:	e116      	b.n	8007fce <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fcf6 	bl	800879c <USBH_SetCfg>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d102      	bne.n	8007dbc <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2209      	movs	r2, #9
 8007dba:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	f001 fb98 	bl	8009508 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007dd8:	e0fc      	b.n	8007fd4 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007de0:	f003 0320 	and.w	r3, r3, #32
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00a      	beq.n	8007dfe <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007de8:	2101      	movs	r1, #1
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fcf9 	bl	80087e2 <USBH_SetFeature>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d106      	bne.n	8007e04 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	220a      	movs	r2, #10
 8007dfa:	701a      	strb	r2, [r3, #0]
 8007dfc:	e002      	b.n	8007e04 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	220a      	movs	r2, #10
 8007e02:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	f001 fb74 	bl	8009508 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e20:	e0d8      	b.n	8007fd4 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d03f      	beq.n	8007eac <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e34:	2300      	movs	r3, #0
 8007e36:	73fb      	strb	r3, [r7, #15]
 8007e38:	e016      	b.n	8007e68 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007e3a:	7bfa      	ldrb	r2, [r7, #15]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	32de      	adds	r2, #222	; 0xde
 8007e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e44:	791a      	ldrb	r2, [r3, #4]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d108      	bne.n	8007e62 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007e50:	7bfa      	ldrb	r2, [r7, #15]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	32de      	adds	r2, #222	; 0xde
 8007e56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007e60:	e005      	b.n	8007e6e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	3301      	adds	r3, #1
 8007e66:	73fb      	strb	r3, [r7, #15]
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d0e5      	beq.n	8007e3a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d016      	beq.n	8007ea6 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	4798      	blx	r3
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2206      	movs	r2, #6
 8007e8e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e96:	2103      	movs	r1, #3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	4798      	blx	r3
 8007e9c:	e006      	b.n	8007eac <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	220d      	movs	r2, #13
 8007ea2:	701a      	strb	r2, [r3, #0]
 8007ea4:	e002      	b.n	8007eac <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	220d      	movs	r2, #13
 8007eaa:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2205      	movs	r2, #5
 8007eb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	f001 fb20 	bl	8009508 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ec8:	e084      	b.n	8007fd4 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d017      	beq.n	8007f04 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	4798      	blx	r3
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d103      	bne.n	8007ef4 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	220b      	movs	r2, #11
 8007ef0:	701a      	strb	r2, [r3, #0]
 8007ef2:	e00a      	b.n	8007f0a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d106      	bne.n	8007f0a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	220d      	movs	r2, #13
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	e002      	b.n	8007f0a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	220d      	movs	r2, #13
 8007f08:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2205      	movs	r2, #5
 8007f0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007f1e:	2200      	movs	r2, #0
 8007f20:	4619      	mov	r1, r3
 8007f22:	f001 faf1 	bl	8009508 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f26:	e055      	b.n	8007fd4 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d04f      	beq.n	8007fd2 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	4798      	blx	r3
      }
      break;
 8007f3e:	e048      	b.n	8007fd2 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7ff fcf7 	bl	800793c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d009      	beq.n	8007f6c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f7c:	2105      	movs	r1, #5
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d107      	bne.n	8007f9e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff fdb0 	bl	8007afc <USBH_Start>
 8007f9c:	e002      	b.n	8007fa4 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f003 fda6 	bl	800baf0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007fb8:	2200      	movs	r2, #0
 8007fba:	4619      	mov	r1, r3
 8007fbc:	f001 faa4 	bl	8009508 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007fc0:	e008      	b.n	8007fd4 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8007fc2:	bf00      	nop
 8007fc4:	e006      	b.n	8007fd4 <USBH_Process+0x4b8>
      break;
 8007fc6:	bf00      	nop
 8007fc8:	e004      	b.n	8007fd4 <USBH_Process+0x4b8>
      break;
 8007fca:	bf00      	nop
 8007fcc:	e002      	b.n	8007fd4 <USBH_Process+0x4b8>
    break;
 8007fce:	bf00      	nop
 8007fd0:	e000      	b.n	8007fd4 <USBH_Process+0x4b8>
      break;
 8007fd2:	bf00      	nop
  }
  return USBH_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop

08007fe0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b088      	sub	sp, #32
 8007fe4:	af04      	add	r7, sp, #16
 8007fe6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007fec:	2301      	movs	r3, #1
 8007fee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	785b      	ldrb	r3, [r3, #1]
 8007ff4:	2b07      	cmp	r3, #7
 8007ff6:	f200 8208 	bhi.w	800840a <USBH_HandleEnum+0x42a>
 8007ffa:	a201      	add	r2, pc, #4	; (adr r2, 8008000 <USBH_HandleEnum+0x20>)
 8007ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008000:	08008021 	.word	0x08008021
 8008004:	080080df 	.word	0x080080df
 8008008:	08008149 	.word	0x08008149
 800800c:	080081d7 	.word	0x080081d7
 8008010:	08008241 	.word	0x08008241
 8008014:	080082b1 	.word	0x080082b1
 8008018:	0800834d 	.word	0x0800834d
 800801c:	080083cb 	.word	0x080083cb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008020:	2108      	movs	r1, #8
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 faea 	bl	80085fc <USBH_Get_DevDesc>
 8008028:	4603      	mov	r3, r0
 800802a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d130      	bne.n	8008094 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	7919      	ldrb	r1, [r3, #4]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008056:	b292      	uxth	r2, r2
 8008058:	9202      	str	r2, [sp, #8]
 800805a:	2200      	movs	r2, #0
 800805c:	9201      	str	r2, [sp, #4]
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	4603      	mov	r3, r0
 8008062:	2280      	movs	r2, #128	; 0x80
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 f903 	bl	8009270 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	7959      	ldrb	r1, [r3, #5]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800807e:	b292      	uxth	r2, r2
 8008080:	9202      	str	r2, [sp, #8]
 8008082:	2200      	movs	r2, #0
 8008084:	9201      	str	r2, [sp, #4]
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	4603      	mov	r3, r0
 800808a:	2200      	movs	r2, #0
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f001 f8ef 	bl	8009270 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008092:	e1bc      	b.n	800840e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	2b03      	cmp	r3, #3
 8008098:	f040 81b9 	bne.w	800840e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080a2:	3301      	adds	r3, #1
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d903      	bls.n	80080be <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	220d      	movs	r2, #13
 80080ba:	701a      	strb	r2, [r3, #0]
      break;
 80080bc:	e1a7      	b.n	800840e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	795b      	ldrb	r3, [r3, #5]
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 f923 	bl	8009310 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	791b      	ldrb	r3, [r3, #4]
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f001 f91d 	bl	8009310 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	701a      	strb	r2, [r3, #0]
      break;
 80080dc:	e197      	b.n	800840e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80080de:	2112      	movs	r1, #18
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fa8b 	bl	80085fc <USBH_Get_DevDesc>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d103      	bne.n	80080f8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080f6:	e18c      	b.n	8008412 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	f040 8189 	bne.w	8008412 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008106:	3301      	adds	r3, #1
 8008108:	b2da      	uxtb	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008116:	2b03      	cmp	r3, #3
 8008118:	d903      	bls.n	8008122 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	220d      	movs	r2, #13
 800811e:	701a      	strb	r2, [r3, #0]
      break;
 8008120:	e177      	b.n	8008412 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	795b      	ldrb	r3, [r3, #5]
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f001 f8f1 	bl	8009310 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	791b      	ldrb	r3, [r3, #4]
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 f8eb 	bl	8009310 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	701a      	strb	r2, [r3, #0]
      break;
 8008146:	e164      	b.n	8008412 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008148:	2101      	movs	r1, #1
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fb02 	bl	8008754 <USBH_SetAddress>
 8008150:	4603      	mov	r3, r0
 8008152:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008154:	7bbb      	ldrb	r3, [r7, #14]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d132      	bne.n	80081c0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800815a:	2002      	movs	r0, #2
 800815c:	f003 fe2d 	bl	800bdba <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2203      	movs	r2, #3
 800816c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	7919      	ldrb	r1, [r3, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008182:	b292      	uxth	r2, r2
 8008184:	9202      	str	r2, [sp, #8]
 8008186:	2200      	movs	r2, #0
 8008188:	9201      	str	r2, [sp, #4]
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	4603      	mov	r3, r0
 800818e:	2280      	movs	r2, #128	; 0x80
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 f86d 	bl	8009270 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	7959      	ldrb	r1, [r3, #5]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081aa:	b292      	uxth	r2, r2
 80081ac:	9202      	str	r2, [sp, #8]
 80081ae:	2200      	movs	r2, #0
 80081b0:	9201      	str	r2, [sp, #4]
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	4603      	mov	r3, r0
 80081b6:	2200      	movs	r2, #0
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 f859 	bl	8009270 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081be:	e12a      	b.n	8008416 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	f040 8127 	bne.w	8008416 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	220d      	movs	r2, #13
 80081cc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	705a      	strb	r2, [r3, #1]
      break;
 80081d4:	e11f      	b.n	8008416 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80081d6:	2109      	movs	r1, #9
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fa37 	bl	800864c <USBH_Get_CfgDesc>
 80081de:	4603      	mov	r3, r0
 80081e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d103      	bne.n	80081f0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2204      	movs	r2, #4
 80081ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081ee:	e114      	b.n	800841a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	f040 8111 	bne.w	800841a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081fe:	3301      	adds	r3, #1
 8008200:	b2da      	uxtb	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800820e:	2b03      	cmp	r3, #3
 8008210:	d903      	bls.n	800821a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	220d      	movs	r2, #13
 8008216:	701a      	strb	r2, [r3, #0]
      break;
 8008218:	e0ff      	b.n	800841a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	795b      	ldrb	r3, [r3, #5]
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f001 f875 	bl	8009310 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	791b      	ldrb	r3, [r3, #4]
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f001 f86f 	bl	8009310 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	701a      	strb	r2, [r3, #0]
      break;
 800823e:	e0ec      	b.n	800841a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f9ff 	bl	800864c <USBH_Get_CfgDesc>
 800824e:	4603      	mov	r3, r0
 8008250:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d103      	bne.n	8008260 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2205      	movs	r2, #5
 800825c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800825e:	e0de      	b.n	800841e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	2b03      	cmp	r3, #3
 8008264:	f040 80db 	bne.w	800841e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800826e:	3301      	adds	r3, #1
 8008270:	b2da      	uxtb	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800827e:	2b03      	cmp	r3, #3
 8008280:	d903      	bls.n	800828a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	220d      	movs	r2, #13
 8008286:	701a      	strb	r2, [r3, #0]
      break;
 8008288:	e0c9      	b.n	800841e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	795b      	ldrb	r3, [r3, #5]
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 f83d 	bl	8009310 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	791b      	ldrb	r3, [r3, #4]
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f001 f837 	bl	8009310 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]
      break;
 80082ae:	e0b6      	b.n	800841e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d036      	beq.n	8008328 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082c6:	23ff      	movs	r3, #255	; 0xff
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f9e3 	bl	8008694 <USBH_Get_StringDesc>
 80082ce:	4603      	mov	r3, r0
 80082d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d111      	bne.n	80082fc <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2206      	movs	r2, #6
 80082dc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2205      	movs	r2, #5
 80082e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80082f2:	2200      	movs	r2, #0
 80082f4:	4619      	mov	r1, r3
 80082f6:	f001 f907 	bl	8009508 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80082fa:	e092      	b.n	8008422 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082fc:	7bbb      	ldrb	r3, [r7, #14]
 80082fe:	2b03      	cmp	r3, #3
 8008300:	f040 808f 	bne.w	8008422 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2206      	movs	r2, #6
 8008308:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2205      	movs	r2, #5
 800830e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800831e:	2200      	movs	r2, #0
 8008320:	4619      	mov	r1, r3
 8008322:	f001 f8f1 	bl	8009508 <osMessagePut>
      break;
 8008326:	e07c      	b.n	8008422 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2206      	movs	r2, #6
 800832c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2205      	movs	r2, #5
 8008332:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008342:	2200      	movs	r2, #0
 8008344:	4619      	mov	r1, r3
 8008346:	f001 f8df 	bl	8009508 <osMessagePut>
      break;
 800834a:	e06a      	b.n	8008422 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008352:	2b00      	cmp	r3, #0
 8008354:	d027      	beq.n	80083a6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008362:	23ff      	movs	r3, #255	; 0xff
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f995 	bl	8008694 <USBH_Get_StringDesc>
 800836a:	4603      	mov	r3, r0
 800836c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800836e:	7bbb      	ldrb	r3, [r7, #14]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d103      	bne.n	800837c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2207      	movs	r2, #7
 8008378:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800837a:	e054      	b.n	8008426 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800837c:	7bbb      	ldrb	r3, [r7, #14]
 800837e:	2b03      	cmp	r3, #3
 8008380:	d151      	bne.n	8008426 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2207      	movs	r2, #7
 8008386:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2205      	movs	r2, #5
 800838c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800839c:	2200      	movs	r2, #0
 800839e:	4619      	mov	r1, r3
 80083a0:	f001 f8b2 	bl	8009508 <osMessagePut>
      break;
 80083a4:	e03f      	b.n	8008426 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2207      	movs	r2, #7
 80083aa:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2205      	movs	r2, #5
 80083b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80083c0:	2200      	movs	r2, #0
 80083c2:	4619      	mov	r1, r3
 80083c4:	f001 f8a0 	bl	8009508 <osMessagePut>
      break;
 80083c8:	e02d      	b.n	8008426 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d017      	beq.n	8008404 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80083e0:	23ff      	movs	r3, #255	; 0xff
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f956 	bl	8008694 <USBH_Get_StringDesc>
 80083e8:	4603      	mov	r3, r0
 80083ea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d102      	bne.n	80083f8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80083f6:	e018      	b.n	800842a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d115      	bne.n	800842a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 80083fe:	2300      	movs	r3, #0
 8008400:	73fb      	strb	r3, [r7, #15]
      break;
 8008402:	e012      	b.n	800842a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]
      break;
 8008408:	e00f      	b.n	800842a <USBH_HandleEnum+0x44a>

    default:
      break;
 800840a:	bf00      	nop
 800840c:	e00e      	b.n	800842c <USBH_HandleEnum+0x44c>
      break;
 800840e:	bf00      	nop
 8008410:	e00c      	b.n	800842c <USBH_HandleEnum+0x44c>
      break;
 8008412:	bf00      	nop
 8008414:	e00a      	b.n	800842c <USBH_HandleEnum+0x44c>
      break;
 8008416:	bf00      	nop
 8008418:	e008      	b.n	800842c <USBH_HandleEnum+0x44c>
      break;
 800841a:	bf00      	nop
 800841c:	e006      	b.n	800842c <USBH_HandleEnum+0x44c>
      break;
 800841e:	bf00      	nop
 8008420:	e004      	b.n	800842c <USBH_HandleEnum+0x44c>
      break;
 8008422:	bf00      	nop
 8008424:	e002      	b.n	800842c <USBH_HandleEnum+0x44c>
      break;
 8008426:	bf00      	nop
 8008428:	e000      	b.n	800842c <USBH_HandleEnum+0x44c>
      break;
 800842a:	bf00      	nop
  }
  return Status;
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop

08008438 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800844a:	bf00      	nop
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b082      	sub	sp, #8
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008464:	1c5a      	adds	r2, r3, #1
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f804 	bl	800847a <USBH_HandleSof>
}
 8008472:	bf00      	nop
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b082      	sub	sp, #8
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b0b      	cmp	r3, #11
 800848a:	d10a      	bne.n	80084a2 <USBH_HandleSof+0x28>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008492:	2b00      	cmp	r3, #0
 8008494:	d005      	beq.n	80084a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	4798      	blx	r3
  }
}
 80084a2:	bf00      	nop
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80084ce:	2200      	movs	r2, #0
 80084d0:	4619      	mov	r1, r3
 80084d2:	f001 f819 	bl	8009508 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80084d6:	bf00      	nop
}
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80084de:	b480      	push	{r7}
 80084e0:	b083      	sub	sp, #12
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80084ee:	bf00      	nop
}
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b082      	sub	sp, #8
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800852e:	2200      	movs	r2, #0
 8008530:	4619      	mov	r1, r3
 8008532:	f000 ffe9 	bl	8009508 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3708      	adds	r7, #8
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f003 fae0 	bl	800bb26 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	791b      	ldrb	r3, [r3, #4]
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fecf 	bl	8009310 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	795b      	ldrb	r3, [r3, #5]
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fec9 	bl	8009310 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008592:	2200      	movs	r2, #0
 8008594:	4619      	mov	r1, r3
 8008596:	f000 ffb7 	bl	8009508 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 80085b2:	f107 030c 	add.w	r3, r7, #12
 80085b6:	f04f 32ff 	mov.w	r2, #4294967295
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 ffe4 	bl	8009588 <osMessageGet>
    if (event.status == osEventMessage)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b10      	cmp	r3, #16
 80085c4:	d1f2      	bne.n	80085ac <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7ff faa8 	bl	8007b1c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80085cc:	e7ee      	b.n	80085ac <USBH_Process_OS+0x8>

080085ce <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80085ea:	2200      	movs	r2, #0
 80085ec:	4619      	mov	r1, r3
 80085ee:	f000 ff8b 	bl	8009508 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af02      	add	r7, sp, #8
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	b29b      	uxth	r3, r3
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	4613      	mov	r3, r2
 8008616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800861a:	2100      	movs	r1, #0
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f864 	bl	80086ea <USBH_GetDescriptor>
 8008622:	4603      	mov	r3, r0
 8008624:	73fb      	strb	r3, [r7, #15]
 8008626:	7bfb      	ldrb	r3, [r7, #15]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10a      	bne.n	8008642 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008638:	78fa      	ldrb	r2, [r7, #3]
 800863a:	b292      	uxth	r2, r2
 800863c:	4619      	mov	r1, r3
 800863e:	f000 f918 	bl	8008872 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008642:	7bfb      	ldrb	r3, [r7, #15]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af02      	add	r7, sp, #8
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	331c      	adds	r3, #28
 800865c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800865e:	887b      	ldrh	r3, [r7, #2]
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008668:	2100      	movs	r1, #0
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f83d 	bl	80086ea <USBH_GetDescriptor>
 8008670:	4603      	mov	r3, r0
 8008672:	72fb      	strb	r3, [r7, #11]
 8008674:	7afb      	ldrb	r3, [r7, #11]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d107      	bne.n	800868a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008680:	887a      	ldrh	r2, [r7, #2]
 8008682:	68f9      	ldr	r1, [r7, #12]
 8008684:	4618      	mov	r0, r3
 8008686:	f000 f964 	bl	8008952 <USBH_ParseCfgDesc>
  }

  return status;
 800868a:	7afb      	ldrb	r3, [r7, #11]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b088      	sub	sp, #32
 8008698:	af02      	add	r7, sp, #8
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	607a      	str	r2, [r7, #4]
 800869e:	461a      	mov	r2, r3
 80086a0:	460b      	mov	r3, r1
 80086a2:	72fb      	strb	r3, [r7, #11]
 80086a4:	4613      	mov	r3, r2
 80086a6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80086a8:	7afb      	ldrb	r3, [r7, #11]
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80086b0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80086b8:	893b      	ldrh	r3, [r7, #8]
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	460b      	mov	r3, r1
 80086be:	2100      	movs	r1, #0
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 f812 	bl	80086ea <USBH_GetDescriptor>
 80086c6:	4603      	mov	r3, r0
 80086c8:	75fb      	strb	r3, [r7, #23]
 80086ca:	7dfb      	ldrb	r3, [r7, #23]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d107      	bne.n	80086e0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80086d6:	893a      	ldrh	r2, [r7, #8]
 80086d8:	6879      	ldr	r1, [r7, #4]
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 fa37 	bl	8008b4e <USBH_ParseStringDesc>
  }

  return status;
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	60f8      	str	r0, [r7, #12]
 80086f2:	607b      	str	r3, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	72fb      	strb	r3, [r7, #11]
 80086f8:	4613      	mov	r3, r2
 80086fa:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	789b      	ldrb	r3, [r3, #2]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d11c      	bne.n	800873e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008704:	7afb      	ldrb	r3, [r7, #11]
 8008706:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800870a:	b2da      	uxtb	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2206      	movs	r2, #6
 8008714:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	893a      	ldrh	r2, [r7, #8]
 800871a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800871c:	893b      	ldrh	r3, [r7, #8]
 800871e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008726:	d104      	bne.n	8008732 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f240 4209 	movw	r2, #1033	; 0x409
 800872e:	829a      	strh	r2, [r3, #20]
 8008730:	e002      	b.n	8008738 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	8b3a      	ldrh	r2, [r7, #24]
 800873c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800873e:	8b3b      	ldrh	r3, [r7, #24]
 8008740:	461a      	mov	r2, r3
 8008742:	6879      	ldr	r1, [r7, #4]
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 fa50 	bl	8008bea <USBH_CtlReq>
 800874a:	4603      	mov	r3, r0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	789b      	ldrb	r3, [r3, #2]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d10f      	bne.n	8008788 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2205      	movs	r2, #5
 8008772:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	b29a      	uxth	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008788:	2200      	movs	r2, #0
 800878a:	2100      	movs	r1, #0
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fa2c 	bl	8008bea <USBH_CtlReq>
 8008792:	4603      	mov	r3, r0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	789b      	ldrb	r3, [r3, #2]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d10e      	bne.n	80087ce <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2209      	movs	r2, #9
 80087ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	887a      	ldrh	r2, [r7, #2]
 80087c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80087ce:	2200      	movs	r2, #0
 80087d0:	2100      	movs	r1, #0
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fa09 	bl	8008bea <USBH_CtlReq>
 80087d8:	4603      	mov	r3, r0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	460b      	mov	r3, r1
 80087ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	789b      	ldrb	r3, [r3, #2]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d10f      	bne.n	8008816 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2203      	movs	r2, #3
 8008800:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008802:	78fb      	ldrb	r3, [r7, #3]
 8008804:	b29a      	uxth	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008816:	2200      	movs	r2, #0
 8008818:	2100      	movs	r1, #0
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f9e5 	bl	8008bea <USBH_CtlReq>
 8008820:	4603      	mov	r3, r0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b082      	sub	sp, #8
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	460b      	mov	r3, r1
 8008834:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	789b      	ldrb	r3, [r3, #2]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d10f      	bne.n	800885e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2202      	movs	r2, #2
 8008842:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	b29a      	uxth	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800885e:	2200      	movs	r2, #0
 8008860:	2100      	movs	r1, #0
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f9c1 	bl	8008bea <USBH_CtlReq>
 8008868:	4603      	mov	r3, r0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008872:	b480      	push	{r7}
 8008874:	b085      	sub	sp, #20
 8008876:	af00      	add	r7, sp, #0
 8008878:	60f8      	str	r0, [r7, #12]
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	4613      	mov	r3, r2
 800887e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	781a      	ldrb	r2, [r3, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	785a      	ldrb	r2, [r3, #1]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	3302      	adds	r3, #2
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	b29a      	uxth	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	3303      	adds	r3, #3
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	021b      	lsls	r3, r3, #8
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	4313      	orrs	r3, r2
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	791a      	ldrb	r2, [r3, #4]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	795a      	ldrb	r2, [r3, #5]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	799a      	ldrb	r2, [r3, #6]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	79da      	ldrb	r2, [r3, #7]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80088cc:	88fb      	ldrh	r3, [r7, #6]
 80088ce:	2b08      	cmp	r3, #8
 80088d0:	d939      	bls.n	8008946 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	3308      	adds	r3, #8
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	b29a      	uxth	r2, r3
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	3309      	adds	r3, #9
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	021b      	lsls	r3, r3, #8
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	4313      	orrs	r3, r2
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	330a      	adds	r3, #10
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	330b      	adds	r3, #11
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	021b      	lsls	r3, r3, #8
 8008900:	b29b      	uxth	r3, r3
 8008902:	4313      	orrs	r3, r2
 8008904:	b29a      	uxth	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	330c      	adds	r3, #12
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	b29a      	uxth	r2, r3
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	330d      	adds	r3, #13
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	b29b      	uxth	r3, r3
 800891a:	021b      	lsls	r3, r3, #8
 800891c:	b29b      	uxth	r3, r3
 800891e:	4313      	orrs	r3, r2
 8008920:	b29a      	uxth	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	7b9a      	ldrb	r2, [r3, #14]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	7bda      	ldrb	r2, [r3, #15]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	7c1a      	ldrb	r2, [r3, #16]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	7c5a      	ldrb	r2, [r3, #17]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	745a      	strb	r2, [r3, #17]
  }
}
 8008946:	bf00      	nop
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b08a      	sub	sp, #40	; 0x28
 8008956:	af00      	add	r7, sp, #0
 8008958:	60f8      	str	r0, [r7, #12]
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	4613      	mov	r3, r2
 800895e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008964:	2300      	movs	r3, #0
 8008966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800896a:	2300      	movs	r3, #0
 800896c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	781a      	ldrb	r2, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	785a      	ldrb	r2, [r3, #1]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	3302      	adds	r3, #2
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	b29a      	uxth	r2, r3
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	3303      	adds	r3, #3
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	b29b      	uxth	r3, r3
 8008994:	021b      	lsls	r3, r3, #8
 8008996:	b29b      	uxth	r3, r3
 8008998:	4313      	orrs	r3, r2
 800899a:	b29a      	uxth	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	791a      	ldrb	r2, [r3, #4]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	795a      	ldrb	r2, [r3, #5]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	799a      	ldrb	r2, [r3, #6]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	79da      	ldrb	r2, [r3, #7]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	7a1a      	ldrb	r2, [r3, #8]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80089c8:	88fb      	ldrh	r3, [r7, #6]
 80089ca:	2b09      	cmp	r3, #9
 80089cc:	d95f      	bls.n	8008a8e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80089ce:	2309      	movs	r3, #9
 80089d0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80089d6:	e051      	b.n	8008a7c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80089d8:	f107 0316 	add.w	r3, r7, #22
 80089dc:	4619      	mov	r1, r3
 80089de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089e0:	f000 f8e8 	bl	8008bb4 <USBH_GetNextDesc>
 80089e4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	785b      	ldrb	r3, [r3, #1]
 80089ea:	2b04      	cmp	r3, #4
 80089ec:	d146      	bne.n	8008a7c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80089ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089f2:	221a      	movs	r2, #26
 80089f4:	fb02 f303 	mul.w	r3, r2, r3
 80089f8:	3308      	adds	r3, #8
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	4413      	add	r3, r2
 80089fe:	3302      	adds	r3, #2
 8008a00:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008a02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a04:	69f8      	ldr	r0, [r7, #28]
 8008a06:	f000 f846 	bl	8008a96 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a14:	e022      	b.n	8008a5c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a16:	f107 0316 	add.w	r3, r7, #22
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a1e:	f000 f8c9 	bl	8008bb4 <USBH_GetNextDesc>
 8008a22:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	785b      	ldrb	r3, [r3, #1]
 8008a28:	2b05      	cmp	r3, #5
 8008a2a:	d117      	bne.n	8008a5c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008a2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008a34:	3201      	adds	r2, #1
 8008a36:	00d2      	lsls	r2, r2, #3
 8008a38:	211a      	movs	r1, #26
 8008a3a:	fb01 f303 	mul.w	r3, r1, r3
 8008a3e:	4413      	add	r3, r2
 8008a40:	3308      	adds	r3, #8
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	4413      	add	r3, r2
 8008a46:	3304      	adds	r3, #4
 8008a48:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008a4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a4c:	69b8      	ldr	r0, [r7, #24]
 8008a4e:	f000 f851 	bl	8008af4 <USBH_ParseEPDesc>
            ep_ix++;
 8008a52:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008a56:	3301      	adds	r3, #1
 8008a58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	791b      	ldrb	r3, [r3, #4]
 8008a60:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d204      	bcs.n	8008a72 <USBH_ParseCfgDesc+0x120>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	885a      	ldrh	r2, [r3, #2]
 8008a6c:	8afb      	ldrh	r3, [r7, #22]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d8d1      	bhi.n	8008a16 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008a72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a76:	3301      	adds	r3, #1
 8008a78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d804      	bhi.n	8008a8e <USBH_ParseCfgDesc+0x13c>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	885a      	ldrh	r2, [r3, #2]
 8008a88:	8afb      	ldrh	r3, [r7, #22]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d8a4      	bhi.n	80089d8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008a8e:	bf00      	nop
 8008a90:	3728      	adds	r7, #40	; 0x28
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781a      	ldrb	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	785a      	ldrb	r2, [r3, #1]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	789a      	ldrb	r2, [r3, #2]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	78da      	ldrb	r2, [r3, #3]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	791a      	ldrb	r2, [r3, #4]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	795a      	ldrb	r2, [r3, #5]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	799a      	ldrb	r2, [r3, #6]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	79da      	ldrb	r2, [r3, #7]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	7a1a      	ldrb	r2, [r3, #8]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	721a      	strb	r2, [r3, #8]
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	781a      	ldrb	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	785a      	ldrb	r2, [r3, #1]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	789a      	ldrb	r2, [r3, #2]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	78da      	ldrb	r2, [r3, #3]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	3304      	adds	r3, #4
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	3305      	adds	r3, #5
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	021b      	lsls	r3, r3, #8
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	4313      	orrs	r3, r2
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	799a      	ldrb	r2, [r3, #6]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	719a      	strb	r2, [r3, #6]
}
 8008b42:	bf00      	nop
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b087      	sub	sp, #28
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d120      	bne.n	8008ba8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	1e9a      	subs	r2, r3, #2
 8008b6c:	88fb      	ldrh	r3, [r7, #6]
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	bf28      	it	cs
 8008b72:	4613      	movcs	r3, r2
 8008b74:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	3302      	adds	r3, #2
 8008b7a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	82fb      	strh	r3, [r7, #22]
 8008b80:	e00b      	b.n	8008b9a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008b82:	8afb      	ldrh	r3, [r7, #22]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	4413      	add	r3, r2
 8008b88:	781a      	ldrb	r2, [r3, #0]
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	3301      	adds	r3, #1
 8008b92:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008b94:	8afb      	ldrh	r3, [r7, #22]
 8008b96:	3302      	adds	r3, #2
 8008b98:	82fb      	strh	r3, [r7, #22]
 8008b9a:	8afa      	ldrh	r2, [r7, #22]
 8008b9c:	8abb      	ldrh	r3, [r7, #20]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d3ef      	bcc.n	8008b82 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	701a      	strb	r2, [r3, #0]
  }
}
 8008ba8:	bf00      	nop
 8008baa:	371c      	adds	r7, #28
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	881a      	ldrh	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	4413      	add	r3, r2
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4413      	add	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b086      	sub	sp, #24
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	60f8      	str	r0, [r7, #12]
 8008bf2:	60b9      	str	r1, [r7, #8]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	789b      	ldrb	r3, [r3, #2]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d002      	beq.n	8008c0a <USBH_CtlReq+0x20>
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d01d      	beq.n	8008c44 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008c08:	e043      	b.n	8008c92 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	88fa      	ldrh	r2, [r7, #6]
 8008c14:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008c22:	2301      	movs	r3, #1
 8008c24:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2203      	movs	r2, #3
 8008c2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	f000 fc63 	bl	8009508 <osMessagePut>
      break;
 8008c42:	e026      	b.n	8008c92 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f000 f829 	bl	8008c9c <USBH_HandleControl>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <USBH_CtlReq+0x70>
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	2b03      	cmp	r3, #3
 8008c58:	d106      	bne.n	8008c68 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	761a      	strb	r2, [r3, #24]
 8008c66:	e005      	b.n	8008c74 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d102      	bne.n	8008c74 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2201      	movs	r2, #1
 8008c72:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2203      	movs	r2, #3
 8008c78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008c88:	2200      	movs	r2, #0
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	f000 fc3c 	bl	8009508 <osMessagePut>
      break;
 8008c90:	bf00      	nop
  }
  return status;
 8008c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3718      	adds	r7, #24
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af02      	add	r7, sp, #8
 8008ca2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	7e1b      	ldrb	r3, [r3, #24]
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	2b0a      	cmp	r3, #10
 8008cb4:	f200 822b 	bhi.w	800910e <USBH_HandleControl+0x472>
 8008cb8:	a201      	add	r2, pc, #4	; (adr r2, 8008cc0 <USBH_HandleControl+0x24>)
 8008cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbe:	bf00      	nop
 8008cc0:	08008ced 	.word	0x08008ced
 8008cc4:	08008d07 	.word	0x08008d07
 8008cc8:	08008da9 	.word	0x08008da9
 8008ccc:	08008dcf 	.word	0x08008dcf
 8008cd0:	08008e5b 	.word	0x08008e5b
 8008cd4:	08008e87 	.word	0x08008e87
 8008cd8:	08008f49 	.word	0x08008f49
 8008cdc:	08008f6b 	.word	0x08008f6b
 8008ce0:	08008ffd 	.word	0x08008ffd
 8008ce4:	08009025 	.word	0x08009025
 8008ce8:	080090b7 	.word	0x080090b7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f103 0110 	add.w	r1, r3, #16
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	795b      	ldrb	r3, [r3, #5]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fa19 	bl	8009130 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2202      	movs	r2, #2
 8008d02:	761a      	strb	r2, [r3, #24]
      break;
 8008d04:	e20e      	b.n	8009124 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	795b      	ldrb	r3, [r3, #5]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f002 fff7 	bl	800bd00 <USBH_LL_GetURBState>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d16:	7bbb      	ldrb	r3, [r7, #14]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d12c      	bne.n	8008d76 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	7c1b      	ldrb	r3, [r3, #16]
 8008d20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d24:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	8adb      	ldrh	r3, [r3, #22]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008d2e:	7b7b      	ldrb	r3, [r7, #13]
 8008d30:	2b80      	cmp	r3, #128	; 0x80
 8008d32:	d103      	bne.n	8008d3c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2203      	movs	r2, #3
 8008d38:	761a      	strb	r2, [r3, #24]
 8008d3a:	e00d      	b.n	8008d58 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2205      	movs	r2, #5
 8008d40:	761a      	strb	r2, [r3, #24]
 8008d42:	e009      	b.n	8008d58 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008d44:	7b7b      	ldrb	r3, [r7, #13]
 8008d46:	2b80      	cmp	r3, #128	; 0x80
 8008d48:	d103      	bne.n	8008d52 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2209      	movs	r2, #9
 8008d4e:	761a      	strb	r2, [r3, #24]
 8008d50:	e002      	b.n	8008d58 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2207      	movs	r2, #7
 8008d56:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2203      	movs	r2, #3
 8008d5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	4619      	mov	r1, r3
 8008d70:	f000 fbca 	bl	8009508 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d74:	e1cd      	b.n	8009112 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008d76:	7bbb      	ldrb	r3, [r7, #14]
 8008d78:	2b04      	cmp	r3, #4
 8008d7a:	d003      	beq.n	8008d84 <USBH_HandleControl+0xe8>
 8008d7c:	7bbb      	ldrb	r3, [r7, #14]
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	f040 81c7 	bne.w	8009112 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	220b      	movs	r2, #11
 8008d88:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2203      	movs	r2, #3
 8008d8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d9e:	2200      	movs	r2, #0
 8008da0:	4619      	mov	r1, r3
 8008da2:	f000 fbb1 	bl	8009508 <osMessagePut>
      break;
 8008da6:	e1b4      	b.n	8009112 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6899      	ldr	r1, [r3, #8]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	899a      	ldrh	r2, [r3, #12]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	791b      	ldrb	r3, [r3, #4]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f9f4 	bl	80091ae <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2204      	movs	r2, #4
 8008dca:	761a      	strb	r2, [r3, #24]
      break;
 8008dcc:	e1aa      	b.n	8009124 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	791b      	ldrb	r3, [r3, #4]
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f002 ff93 	bl	800bd00 <USBH_LL_GetURBState>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008dde:	7bbb      	ldrb	r3, [r7, #14]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d110      	bne.n	8008e06 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2209      	movs	r2, #9
 8008de8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2203      	movs	r2, #3
 8008dee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008dfe:	2200      	movs	r2, #0
 8008e00:	4619      	mov	r1, r3
 8008e02:	f000 fb81 	bl	8009508 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008e06:	7bbb      	ldrb	r3, [r7, #14]
 8008e08:	2b05      	cmp	r3, #5
 8008e0a:	d110      	bne.n	8008e2e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2203      	movs	r2, #3
 8008e14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e24:	2200      	movs	r2, #0
 8008e26:	4619      	mov	r1, r3
 8008e28:	f000 fb6e 	bl	8009508 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e2c:	e173      	b.n	8009116 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	2b04      	cmp	r3, #4
 8008e32:	f040 8170 	bne.w	8009116 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	220b      	movs	r2, #11
 8008e3a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2203      	movs	r2, #3
 8008e40:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e50:	2200      	movs	r2, #0
 8008e52:	4619      	mov	r1, r3
 8008e54:	f000 fb58 	bl	8009508 <osMessagePut>
      break;
 8008e58:	e15d      	b.n	8009116 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6899      	ldr	r1, [r3, #8]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	899a      	ldrh	r2, [r3, #12]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7958      	ldrb	r0, [r3, #5]
 8008e66:	2301      	movs	r3, #1
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f979 	bl	8009164 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2206      	movs	r2, #6
 8008e82:	761a      	strb	r2, [r3, #24]
      break;
 8008e84:	e14e      	b.n	8009124 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	795b      	ldrb	r3, [r3, #5]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f002 ff37 	bl	800bd00 <USBH_LL_GetURBState>
 8008e92:	4603      	mov	r3, r0
 8008e94:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e96:	7bbb      	ldrb	r3, [r7, #14]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d111      	bne.n	8008ec0 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2207      	movs	r2, #7
 8008ea0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2203      	movs	r2, #3
 8008ea6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	4619      	mov	r1, r3
 8008eba:	f000 fb25 	bl	8009508 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ebe:	e12c      	b.n	800911a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8008ec0:	7bbb      	ldrb	r3, [r7, #14]
 8008ec2:	2b05      	cmp	r3, #5
 8008ec4:	d113      	bne.n	8008eee <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	220c      	movs	r2, #12
 8008eca:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2203      	movs	r2, #3
 8008ed4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	f000 fb0e 	bl	8009508 <osMessagePut>
      break;
 8008eec:	e115      	b.n	800911a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008eee:	7bbb      	ldrb	r3, [r7, #14]
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d111      	bne.n	8008f18 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2205      	movs	r2, #5
 8008ef8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2203      	movs	r2, #3
 8008efe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f0e:	2200      	movs	r2, #0
 8008f10:	4619      	mov	r1, r3
 8008f12:	f000 faf9 	bl	8009508 <osMessagePut>
      break;
 8008f16:	e100      	b.n	800911a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	f040 80fd 	bne.w	800911a <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	220b      	movs	r2, #11
 8008f24:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008f26:	2302      	movs	r3, #2
 8008f28:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2203      	movs	r2, #3
 8008f2e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f3e:	2200      	movs	r2, #0
 8008f40:	4619      	mov	r1, r3
 8008f42:	f000 fae1 	bl	8009508 <osMessagePut>
      break;
 8008f46:	e0e8      	b.n	800911a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	791b      	ldrb	r3, [r3, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	2100      	movs	r1, #0
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f92c 	bl	80091ae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2208      	movs	r2, #8
 8008f66:	761a      	strb	r2, [r3, #24]

      break;
 8008f68:	e0dc      	b.n	8009124 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	791b      	ldrb	r3, [r3, #4]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f002 fec5 	bl	800bd00 <USBH_LL_GetURBState>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d113      	bne.n	8008fa8 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	220d      	movs	r2, #13
 8008f84:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2203      	movs	r2, #3
 8008f8e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	f000 fab1 	bl	8009508 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008fa6:	e0ba      	b.n	800911e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	d111      	bne.n	8008fd2 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	220b      	movs	r2, #11
 8008fb2:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2203      	movs	r2, #3
 8008fb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008fc8:	2200      	movs	r2, #0
 8008fca:	4619      	mov	r1, r3
 8008fcc:	f000 fa9c 	bl	8009508 <osMessagePut>
      break;
 8008fd0:	e0a5      	b.n	800911e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	2b05      	cmp	r3, #5
 8008fd6:	f040 80a2 	bne.w	800911e <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2203      	movs	r2, #3
 8008fe2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	f000 fa87 	bl	8009508 <osMessagePut>
      break;
 8008ffa:	e090      	b.n	800911e <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	795a      	ldrb	r2, [r3, #5]
 8009000:	2301      	movs	r3, #1
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	4613      	mov	r3, r2
 8009006:	2200      	movs	r2, #0
 8009008:	2100      	movs	r1, #0
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f8aa 	bl	8009164 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009016:	b29a      	uxth	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	220a      	movs	r2, #10
 8009020:	761a      	strb	r2, [r3, #24]
      break;
 8009022:	e07f      	b.n	8009124 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	795b      	ldrb	r3, [r3, #5]
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f002 fe68 	bl	800bd00 <USBH_LL_GetURBState>
 8009030:	4603      	mov	r3, r0
 8009032:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009034:	7bbb      	ldrb	r3, [r7, #14]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d113      	bne.n	8009062 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	220d      	movs	r2, #13
 8009042:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2203      	movs	r2, #3
 8009048:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009058:	2200      	movs	r2, #0
 800905a:	4619      	mov	r1, r3
 800905c:	f000 fa54 	bl	8009508 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009060:	e05f      	b.n	8009122 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009062:	7bbb      	ldrb	r3, [r7, #14]
 8009064:	2b02      	cmp	r3, #2
 8009066:	d111      	bne.n	800908c <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2209      	movs	r2, #9
 800906c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2203      	movs	r2, #3
 8009072:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009082:	2200      	movs	r2, #0
 8009084:	4619      	mov	r1, r3
 8009086:	f000 fa3f 	bl	8009508 <osMessagePut>
      break;
 800908a:	e04a      	b.n	8009122 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800908c:	7bbb      	ldrb	r3, [r7, #14]
 800908e:	2b04      	cmp	r3, #4
 8009090:	d147      	bne.n	8009122 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	220b      	movs	r2, #11
 8009096:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2203      	movs	r2, #3
 800909c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80090ac:	2200      	movs	r2, #0
 80090ae:	4619      	mov	r1, r3
 80090b0:	f000 fa2a 	bl	8009508 <osMessagePut>
      break;
 80090b4:	e035      	b.n	8009122 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	7e5b      	ldrb	r3, [r3, #25]
 80090ba:	3301      	adds	r3, #1
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	765a      	strb	r2, [r3, #25]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	7e5b      	ldrb	r3, [r3, #25]
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d806      	bhi.n	80090d8 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80090d6:	e025      	b.n	8009124 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090de:	2106      	movs	r1, #6
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	795b      	ldrb	r3, [r3, #5]
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f90d 	bl	8009310 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	791b      	ldrb	r3, [r3, #4]
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f907 	bl	8009310 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009108:	2302      	movs	r3, #2
 800910a:	73fb      	strb	r3, [r7, #15]
      break;
 800910c:	e00a      	b.n	8009124 <USBH_HandleControl+0x488>

    default:
      break;
 800910e:	bf00      	nop
 8009110:	e008      	b.n	8009124 <USBH_HandleControl+0x488>
      break;
 8009112:	bf00      	nop
 8009114:	e006      	b.n	8009124 <USBH_HandleControl+0x488>
      break;
 8009116:	bf00      	nop
 8009118:	e004      	b.n	8009124 <USBH_HandleControl+0x488>
      break;
 800911a:	bf00      	nop
 800911c:	e002      	b.n	8009124 <USBH_HandleControl+0x488>
      break;
 800911e:	bf00      	nop
 8009120:	e000      	b.n	8009124 <USBH_HandleControl+0x488>
      break;
 8009122:	bf00      	nop
  }

  return status;
 8009124:	7bfb      	ldrb	r3, [r7, #15]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop

08009130 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af04      	add	r7, sp, #16
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	4613      	mov	r3, r2
 800913c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800913e:	79f9      	ldrb	r1, [r7, #7]
 8009140:	2300      	movs	r3, #0
 8009142:	9303      	str	r3, [sp, #12]
 8009144:	2308      	movs	r3, #8
 8009146:	9302      	str	r3, [sp, #8]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	9301      	str	r3, [sp, #4]
 800914c:	2300      	movs	r3, #0
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	2300      	movs	r3, #0
 8009152:	2200      	movs	r2, #0
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f002 fda2 	bl	800bc9e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b088      	sub	sp, #32
 8009168:	af04      	add	r7, sp, #16
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	4611      	mov	r1, r2
 8009170:	461a      	mov	r2, r3
 8009172:	460b      	mov	r3, r1
 8009174:	80fb      	strh	r3, [r7, #6]
 8009176:	4613      	mov	r3, r2
 8009178:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009184:	2300      	movs	r3, #0
 8009186:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009188:	7979      	ldrb	r1, [r7, #5]
 800918a:	7e3b      	ldrb	r3, [r7, #24]
 800918c:	9303      	str	r3, [sp, #12]
 800918e:	88fb      	ldrh	r3, [r7, #6]
 8009190:	9302      	str	r3, [sp, #8]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	9301      	str	r3, [sp, #4]
 8009196:	2301      	movs	r3, #1
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	2300      	movs	r3, #0
 800919c:	2200      	movs	r2, #0
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f002 fd7d 	bl	800bc9e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b088      	sub	sp, #32
 80091b2:	af04      	add	r7, sp, #16
 80091b4:	60f8      	str	r0, [r7, #12]
 80091b6:	60b9      	str	r1, [r7, #8]
 80091b8:	4611      	mov	r1, r2
 80091ba:	461a      	mov	r2, r3
 80091bc:	460b      	mov	r3, r1
 80091be:	80fb      	strh	r3, [r7, #6]
 80091c0:	4613      	mov	r3, r2
 80091c2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80091c4:	7979      	ldrb	r1, [r7, #5]
 80091c6:	2300      	movs	r3, #0
 80091c8:	9303      	str	r3, [sp, #12]
 80091ca:	88fb      	ldrh	r3, [r7, #6]
 80091cc:	9302      	str	r3, [sp, #8]
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	2301      	movs	r3, #1
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	2300      	movs	r3, #0
 80091d8:	2201      	movs	r2, #1
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f002 fd5f 	bl	800bc9e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80091e0:	2300      	movs	r3, #0

}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b088      	sub	sp, #32
 80091ee:	af04      	add	r7, sp, #16
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	4611      	mov	r1, r2
 80091f6:	461a      	mov	r2, r3
 80091f8:	460b      	mov	r3, r1
 80091fa:	80fb      	strh	r3, [r7, #6]
 80091fc:	4613      	mov	r3, r2
 80091fe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800920a:	2300      	movs	r3, #0
 800920c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800920e:	7979      	ldrb	r1, [r7, #5]
 8009210:	7e3b      	ldrb	r3, [r7, #24]
 8009212:	9303      	str	r3, [sp, #12]
 8009214:	88fb      	ldrh	r3, [r7, #6]
 8009216:	9302      	str	r3, [sp, #8]
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	9301      	str	r3, [sp, #4]
 800921c:	2301      	movs	r3, #1
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	2302      	movs	r3, #2
 8009222:	2200      	movs	r2, #0
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f002 fd3a 	bl	800bc9e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b088      	sub	sp, #32
 8009238:	af04      	add	r7, sp, #16
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	4611      	mov	r1, r2
 8009240:	461a      	mov	r2, r3
 8009242:	460b      	mov	r3, r1
 8009244:	80fb      	strh	r3, [r7, #6]
 8009246:	4613      	mov	r3, r2
 8009248:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800924a:	7979      	ldrb	r1, [r7, #5]
 800924c:	2300      	movs	r3, #0
 800924e:	9303      	str	r3, [sp, #12]
 8009250:	88fb      	ldrh	r3, [r7, #6]
 8009252:	9302      	str	r3, [sp, #8]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	2301      	movs	r3, #1
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	2302      	movs	r3, #2
 800925e:	2201      	movs	r2, #1
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f002 fd1c 	bl	800bc9e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b086      	sub	sp, #24
 8009274:	af04      	add	r7, sp, #16
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	4608      	mov	r0, r1
 800927a:	4611      	mov	r1, r2
 800927c:	461a      	mov	r2, r3
 800927e:	4603      	mov	r3, r0
 8009280:	70fb      	strb	r3, [r7, #3]
 8009282:	460b      	mov	r3, r1
 8009284:	70bb      	strb	r3, [r7, #2]
 8009286:	4613      	mov	r3, r2
 8009288:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800928a:	7878      	ldrb	r0, [r7, #1]
 800928c:	78ba      	ldrb	r2, [r7, #2]
 800928e:	78f9      	ldrb	r1, [r7, #3]
 8009290:	8b3b      	ldrh	r3, [r7, #24]
 8009292:	9302      	str	r3, [sp, #8]
 8009294:	7d3b      	ldrb	r3, [r7, #20]
 8009296:	9301      	str	r3, [sp, #4]
 8009298:	7c3b      	ldrb	r3, [r7, #16]
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	4603      	mov	r3, r0
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f002 fcaf 	bl	800bc02 <USBH_LL_OpenPipe>

  return USBH_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b082      	sub	sp, #8
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	460b      	mov	r3, r1
 80092b8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80092ba:	78fb      	ldrb	r3, [r7, #3]
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f002 fcce 	bl	800bc60 <USBH_LL_ClosePipe>

  return USBH_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	460b      	mov	r3, r1
 80092d8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f836 	bl	800934c <USBH_GetFreePipe>
 80092e0:	4603      	mov	r3, r0
 80092e2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80092e4:	89fb      	ldrh	r3, [r7, #14]
 80092e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d00a      	beq.n	8009304 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80092ee:	78fa      	ldrb	r2, [r7, #3]
 80092f0:	89fb      	ldrh	r3, [r7, #14]
 80092f2:	f003 030f 	and.w	r3, r3, #15
 80092f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80092fa:	6879      	ldr	r1, [r7, #4]
 80092fc:	33e0      	adds	r3, #224	; 0xe0
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	440b      	add	r3, r1
 8009302:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009304:	89fb      	ldrh	r3, [r7, #14]
 8009306:	b2db      	uxtb	r3, r3
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800931c:	78fb      	ldrb	r3, [r7, #3]
 800931e:	2b0a      	cmp	r3, #10
 8009320:	d80d      	bhi.n	800933e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009322:	78fb      	ldrb	r3, [r7, #3]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	33e0      	adds	r3, #224	; 0xe0
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	4413      	add	r3, r2
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	78fb      	ldrb	r3, [r7, #3]
 8009330:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009334:	6879      	ldr	r1, [r7, #4]
 8009336:	33e0      	adds	r3, #224	; 0xe0
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	440b      	add	r3, r1
 800933c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009354:	2300      	movs	r3, #0
 8009356:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009358:	2300      	movs	r3, #0
 800935a:	73fb      	strb	r3, [r7, #15]
 800935c:	e00f      	b.n	800937e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800935e:	7bfb      	ldrb	r3, [r7, #15]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	33e0      	adds	r3, #224	; 0xe0
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4413      	add	r3, r2
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d102      	bne.n	8009378 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009372:	7bfb      	ldrb	r3, [r7, #15]
 8009374:	b29b      	uxth	r3, r3
 8009376:	e007      	b.n	8009388 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	3301      	adds	r3, #1
 800937c:	73fb      	strb	r3, [r7, #15]
 800937e:	7bfb      	ldrb	r3, [r7, #15]
 8009380:	2b0a      	cmp	r3, #10
 8009382:	d9ec      	bls.n	800935e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009384:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009388:	4618      	mov	r0, r3
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800939e:	2300      	movs	r3, #0
 80093a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80093a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80093a6:	2b84      	cmp	r3, #132	; 0x84
 80093a8:	d005      	beq.n	80093b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80093aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4413      	add	r3, r2
 80093b2:	3303      	adds	r3, #3
 80093b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80093b6:	68fb      	ldr	r3, [r7, #12]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093ca:	f3ef 8305 	mrs	r3, IPSR
 80093ce:	607b      	str	r3, [r7, #4]
  return(result);
 80093d0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	bf14      	ite	ne
 80093d6:	2301      	movne	r3, #1
 80093d8:	2300      	moveq	r3, #0
 80093da:	b2db      	uxtb	r3, r3
}
 80093dc:	4618      	mov	r0, r3
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80093ec:	f001 f8f0 	bl	800a5d0 <vTaskStartScheduler>
  
  return osOK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80093f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093f8:	b089      	sub	sp, #36	; 0x24
 80093fa:	af04      	add	r7, sp, #16
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d020      	beq.n	800944a <osThreadCreate+0x54>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d01c      	beq.n	800944a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	685c      	ldr	r4, [r3, #4]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681d      	ldr	r5, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	691e      	ldr	r6, [r3, #16]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009422:	4618      	mov	r0, r3
 8009424:	f7ff ffb6 	bl	8009394 <makeFreeRtosPriority>
 8009428:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009432:	9202      	str	r2, [sp, #8]
 8009434:	9301      	str	r3, [sp, #4]
 8009436:	9100      	str	r1, [sp, #0]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	4632      	mov	r2, r6
 800943c:	4629      	mov	r1, r5
 800943e:	4620      	mov	r0, r4
 8009440:	f000 fefb 	bl	800a23a <xTaskCreateStatic>
 8009444:	4603      	mov	r3, r0
 8009446:	60fb      	str	r3, [r7, #12]
 8009448:	e01c      	b.n	8009484 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	685c      	ldr	r4, [r3, #4]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009456:	b29e      	uxth	r6, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800945e:	4618      	mov	r0, r3
 8009460:	f7ff ff98 	bl	8009394 <makeFreeRtosPriority>
 8009464:	4602      	mov	r2, r0
 8009466:	f107 030c 	add.w	r3, r7, #12
 800946a:	9301      	str	r3, [sp, #4]
 800946c:	9200      	str	r2, [sp, #0]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	4632      	mov	r2, r6
 8009472:	4629      	mov	r1, r5
 8009474:	4620      	mov	r0, r4
 8009476:	f000 ff3a 	bl	800a2ee <xTaskCreate>
 800947a:	4603      	mov	r3, r0
 800947c:	2b01      	cmp	r3, #1
 800947e:	d001      	beq.n	8009484 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009480:	2300      	movs	r3, #0
 8009482:	e000      	b.n	8009486 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009484:	68fb      	ldr	r3, [r7, #12]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800948e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <osDelay+0x16>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	e000      	b.n	80094a6 <osDelay+0x18>
 80094a4:	2301      	movs	r3, #1
 80094a6:	4618      	mov	r0, r3
 80094a8:	f001 f85e 	bl	800a568 <vTaskDelay>
  
  return osOK;
 80094ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80094b6:	b590      	push	{r4, r7, lr}
 80094b8:	b085      	sub	sp, #20
 80094ba:	af02      	add	r7, sp, #8
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d012      	beq.n	80094ee <osMessageCreate+0x38>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00e      	beq.n	80094ee <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6818      	ldr	r0, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6859      	ldr	r1, [r3, #4]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689a      	ldr	r2, [r3, #8]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	68dc      	ldr	r4, [r3, #12]
 80094e0:	2300      	movs	r3, #0
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	4623      	mov	r3, r4
 80094e6:	f000 f9df 	bl	80098a8 <xQueueGenericCreateStatic>
 80094ea:	4603      	mov	r3, r0
 80094ec:	e008      	b.n	8009500 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6818      	ldr	r0, [r3, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	4619      	mov	r1, r3
 80094fa:	f000 fa48 	bl	800998e <xQueueGenericCreate>
 80094fe:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	bd90      	pop	{r4, r7, pc}

08009508 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009514:	2300      	movs	r3, #0
 8009516:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <osMessagePut+0x1e>
    ticks = 1;
 8009522:	2301      	movs	r3, #1
 8009524:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009526:	f7ff ff4d 	bl	80093c4 <inHandlerMode>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d018      	beq.n	8009562 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009530:	f107 0210 	add.w	r2, r7, #16
 8009534:	f107 0108 	add.w	r1, r7, #8
 8009538:	2300      	movs	r3, #0
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f000 fb80 	bl	8009c40 <xQueueGenericSendFromISR>
 8009540:	4603      	mov	r3, r0
 8009542:	2b01      	cmp	r3, #1
 8009544:	d001      	beq.n	800954a <osMessagePut+0x42>
      return osErrorOS;
 8009546:	23ff      	movs	r3, #255	; 0xff
 8009548:	e018      	b.n	800957c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d014      	beq.n	800957a <osMessagePut+0x72>
 8009550:	4b0c      	ldr	r3, [pc, #48]	; (8009584 <osMessagePut+0x7c>)
 8009552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009556:	601a      	str	r2, [r3, #0]
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	e00b      	b.n	800957a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009562:	f107 0108 	add.w	r1, r7, #8
 8009566:	2300      	movs	r3, #0
 8009568:	697a      	ldr	r2, [r7, #20]
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f000 fa6e 	bl	8009a4c <xQueueGenericSend>
 8009570:	4603      	mov	r3, r0
 8009572:	2b01      	cmp	r3, #1
 8009574:	d001      	beq.n	800957a <osMessagePut+0x72>
      return osErrorOS;
 8009576:	23ff      	movs	r3, #255	; 0xff
 8009578:	e000      	b.n	800957c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	e000ed04 	.word	0xe000ed04

08009588 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009588:	b590      	push	{r4, r7, lr}
 800958a:	b08b      	sub	sp, #44	; 0x2c
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10a      	bne.n	80095b8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80095a2:	2380      	movs	r3, #128	; 0x80
 80095a4:	617b      	str	r3, [r7, #20]
    return event;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	461c      	mov	r4, r3
 80095aa:	f107 0314 	add.w	r3, r7, #20
 80095ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80095b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80095b6:	e054      	b.n	8009662 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80095b8:	2300      	movs	r3, #0
 80095ba:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c6:	d103      	bne.n	80095d0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80095c8:	f04f 33ff 	mov.w	r3, #4294967295
 80095cc:	627b      	str	r3, [r7, #36]	; 0x24
 80095ce:	e009      	b.n	80095e4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d006      	beq.n	80095e4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80095da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <osMessageGet+0x5c>
      ticks = 1;
 80095e0:	2301      	movs	r3, #1
 80095e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80095e4:	f7ff feee 	bl	80093c4 <inHandlerMode>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d01c      	beq.n	8009628 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80095ee:	f107 0220 	add.w	r2, r7, #32
 80095f2:	f107 0314 	add.w	r3, r7, #20
 80095f6:	3304      	adds	r3, #4
 80095f8:	4619      	mov	r1, r3
 80095fa:	68b8      	ldr	r0, [r7, #8]
 80095fc:	f000 fc90 	bl	8009f20 <xQueueReceiveFromISR>
 8009600:	4603      	mov	r3, r0
 8009602:	2b01      	cmp	r3, #1
 8009604:	d102      	bne.n	800960c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009606:	2310      	movs	r3, #16
 8009608:	617b      	str	r3, [r7, #20]
 800960a:	e001      	b.n	8009610 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800960c:	2300      	movs	r3, #0
 800960e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009610:	6a3b      	ldr	r3, [r7, #32]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d01d      	beq.n	8009652 <osMessageGet+0xca>
 8009616:	4b15      	ldr	r3, [pc, #84]	; (800966c <osMessageGet+0xe4>)
 8009618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800961c:	601a      	str	r2, [r3, #0]
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	e014      	b.n	8009652 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009628:	f107 0314 	add.w	r3, r7, #20
 800962c:	3304      	adds	r3, #4
 800962e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009630:	4619      	mov	r1, r3
 8009632:	68b8      	ldr	r0, [r7, #8]
 8009634:	f000 fb98 	bl	8009d68 <xQueueReceive>
 8009638:	4603      	mov	r3, r0
 800963a:	2b01      	cmp	r3, #1
 800963c:	d102      	bne.n	8009644 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800963e:	2310      	movs	r3, #16
 8009640:	617b      	str	r3, [r7, #20]
 8009642:	e006      	b.n	8009652 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009646:	2b00      	cmp	r3, #0
 8009648:	d101      	bne.n	800964e <osMessageGet+0xc6>
 800964a:	2300      	movs	r3, #0
 800964c:	e000      	b.n	8009650 <osMessageGet+0xc8>
 800964e:	2340      	movs	r3, #64	; 0x40
 8009650:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	461c      	mov	r4, r3
 8009656:	f107 0314 	add.w	r3, r7, #20
 800965a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800965e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	372c      	adds	r7, #44	; 0x2c
 8009666:	46bd      	mov	sp, r7
 8009668:	bd90      	pop	{r4, r7, pc}
 800966a:	bf00      	nop
 800966c:	e000ed04 	.word	0xe000ed04

08009670 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f103 0208 	add.w	r2, r3, #8
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f04f 32ff 	mov.w	r2, #4294967295
 8009688:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f103 0208 	add.w	r2, r3, #8
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f103 0208 	add.w	r2, r3, #8
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80096be:	bf00      	nop
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80096ca:	b480      	push	{r7}
 80096cc:	b085      	sub	sp, #20
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	689a      	ldr	r2, [r3, #8]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	683a      	ldr	r2, [r7, #0]
 80096ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	683a      	ldr	r2, [r7, #0]
 80096f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	601a      	str	r2, [r3, #0]
}
 8009706:	bf00      	nop
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009712:	b480      	push	{r7}
 8009714:	b085      	sub	sp, #20
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009728:	d103      	bne.n	8009732 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	60fb      	str	r3, [r7, #12]
 8009730:	e00c      	b.n	800974c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	3308      	adds	r3, #8
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	e002      	b.n	8009740 <vListInsert+0x2e>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	60fb      	str	r3, [r7, #12]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68ba      	ldr	r2, [r7, #8]
 8009748:	429a      	cmp	r2, r3
 800974a:	d2f6      	bcs.n	800973a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	683a      	ldr	r2, [r7, #0]
 800975a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	683a      	ldr	r2, [r7, #0]
 8009766:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	1c5a      	adds	r2, r3, #1
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	601a      	str	r2, [r3, #0]
}
 8009778:	bf00      	nop
 800977a:	3714      	adds	r7, #20
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	6892      	ldr	r2, [r2, #8]
 800979a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	6852      	ldr	r2, [r2, #4]
 80097a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d103      	bne.n	80097b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	689a      	ldr	r2, [r3, #8]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	1e5a      	subs	r2, r3, #1
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d109      	bne.n	8009800 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80097ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	60bb      	str	r3, [r7, #8]
 80097fe:	e7fe      	b.n	80097fe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009800:	f001 fd3c 	bl	800b27c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800980c:	68f9      	ldr	r1, [r7, #12]
 800980e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009810:	fb01 f303 	mul.w	r3, r1, r3
 8009814:	441a      	add	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009830:	3b01      	subs	r3, #1
 8009832:	68f9      	ldr	r1, [r7, #12]
 8009834:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009836:	fb01 f303 	mul.w	r3, r1, r3
 800983a:	441a      	add	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	22ff      	movs	r2, #255	; 0xff
 8009844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	22ff      	movs	r2, #255	; 0xff
 800984c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d114      	bne.n	8009880 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d01a      	beq.n	8009894 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3310      	adds	r3, #16
 8009862:	4618      	mov	r0, r3
 8009864:	f001 f928 	bl	800aab8 <xTaskRemoveFromEventList>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d012      	beq.n	8009894 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800986e:	4b0d      	ldr	r3, [pc, #52]	; (80098a4 <xQueueGenericReset+0xcc>)
 8009870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	f3bf 8f4f 	dsb	sy
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	e009      	b.n	8009894 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	3310      	adds	r3, #16
 8009884:	4618      	mov	r0, r3
 8009886:	f7ff fef3 	bl	8009670 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3324      	adds	r3, #36	; 0x24
 800988e:	4618      	mov	r0, r3
 8009890:	f7ff feee 	bl	8009670 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009894:	f001 fd20 	bl	800b2d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009898:	2301      	movs	r3, #1
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	e000ed04 	.word	0xe000ed04

080098a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08e      	sub	sp, #56	; 0x38
 80098ac:	af02      	add	r7, sp, #8
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
 80098b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d109      	bne.n	80098d0 <xQueueGenericCreateStatic+0x28>
 80098bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80098ce:	e7fe      	b.n	80098ce <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d109      	bne.n	80098ea <xQueueGenericCreateStatic+0x42>
 80098d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	627b      	str	r3, [r7, #36]	; 0x24
 80098e8:	e7fe      	b.n	80098e8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <xQueueGenericCreateStatic+0x4e>
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <xQueueGenericCreateStatic+0x52>
 80098f6:	2301      	movs	r3, #1
 80098f8:	e000      	b.n	80098fc <xQueueGenericCreateStatic+0x54>
 80098fa:	2300      	movs	r3, #0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d109      	bne.n	8009914 <xQueueGenericCreateStatic+0x6c>
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	623b      	str	r3, [r7, #32]
 8009912:	e7fe      	b.n	8009912 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d102      	bne.n	8009920 <xQueueGenericCreateStatic+0x78>
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d101      	bne.n	8009924 <xQueueGenericCreateStatic+0x7c>
 8009920:	2301      	movs	r3, #1
 8009922:	e000      	b.n	8009926 <xQueueGenericCreateStatic+0x7e>
 8009924:	2300      	movs	r3, #0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d109      	bne.n	800993e <xQueueGenericCreateStatic+0x96>
 800992a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992e:	f383 8811 	msr	BASEPRI, r3
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	61fb      	str	r3, [r7, #28]
 800993c:	e7fe      	b.n	800993c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800993e:	2348      	movs	r3, #72	; 0x48
 8009940:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	2b48      	cmp	r3, #72	; 0x48
 8009946:	d009      	beq.n	800995c <xQueueGenericCreateStatic+0xb4>
 8009948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	61bb      	str	r3, [r7, #24]
 800995a:	e7fe      	b.n	800995a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800995c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00d      	beq.n	8009984 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009970:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	4613      	mov	r3, r2
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	68b9      	ldr	r1, [r7, #8]
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f000 f844 	bl	8009a0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009986:	4618      	mov	r0, r3
 8009988:	3730      	adds	r7, #48	; 0x30
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800998e:	b580      	push	{r7, lr}
 8009990:	b08a      	sub	sp, #40	; 0x28
 8009992:	af02      	add	r7, sp, #8
 8009994:	60f8      	str	r0, [r7, #12]
 8009996:	60b9      	str	r1, [r7, #8]
 8009998:	4613      	mov	r3, r2
 800999a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d109      	bne.n	80099b6 <xQueueGenericCreate+0x28>
 80099a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a6:	f383 8811 	msr	BASEPRI, r3
 80099aa:	f3bf 8f6f 	isb	sy
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	613b      	str	r3, [r7, #16]
 80099b4:	e7fe      	b.n	80099b4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d102      	bne.n	80099c2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	61fb      	str	r3, [r7, #28]
 80099c0:	e004      	b.n	80099cc <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	68ba      	ldr	r2, [r7, #8]
 80099c6:	fb02 f303 	mul.w	r3, r2, r3
 80099ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	3348      	adds	r3, #72	; 0x48
 80099d0:	4618      	mov	r0, r3
 80099d2:	f001 fd6d 	bl	800b4b0 <pvPortMalloc>
 80099d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d011      	beq.n	8009a02 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	3348      	adds	r3, #72	; 0x48
 80099e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80099f0:	79fa      	ldrb	r2, [r7, #7]
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	4613      	mov	r3, r2
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f000 f805 	bl	8009a0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a02:	69bb      	ldr	r3, [r7, #24]
	}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3720      	adds	r7, #32
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
 8009a18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d103      	bne.n	8009a28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	69ba      	ldr	r2, [r7, #24]
 8009a24:	601a      	str	r2, [r3, #0]
 8009a26:	e002      	b.n	8009a2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009a3a:	2101      	movs	r1, #1
 8009a3c:	69b8      	ldr	r0, [r7, #24]
 8009a3e:	f7ff fecb 	bl	80097d8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009a42:	bf00      	nop
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
	...

08009a4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b08e      	sub	sp, #56	; 0x38
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
 8009a58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d109      	bne.n	8009a7c <xQueueGenericSend+0x30>
 8009a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a7a:	e7fe      	b.n	8009a7a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d103      	bne.n	8009a8a <xQueueGenericSend+0x3e>
 8009a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d101      	bne.n	8009a8e <xQueueGenericSend+0x42>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e000      	b.n	8009a90 <xQueueGenericSend+0x44>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d109      	bne.n	8009aa8 <xQueueGenericSend+0x5c>
 8009a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8009aa6:	e7fe      	b.n	8009aa6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d103      	bne.n	8009ab6 <xQueueGenericSend+0x6a>
 8009aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d101      	bne.n	8009aba <xQueueGenericSend+0x6e>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e000      	b.n	8009abc <xQueueGenericSend+0x70>
 8009aba:	2300      	movs	r3, #0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d109      	bne.n	8009ad4 <xQueueGenericSend+0x88>
 8009ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac4:	f383 8811 	msr	BASEPRI, r3
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	f3bf 8f4f 	dsb	sy
 8009ad0:	623b      	str	r3, [r7, #32]
 8009ad2:	e7fe      	b.n	8009ad2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ad4:	f001 f9a6 	bl	800ae24 <xTaskGetSchedulerState>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d102      	bne.n	8009ae4 <xQueueGenericSend+0x98>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d101      	bne.n	8009ae8 <xQueueGenericSend+0x9c>
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e000      	b.n	8009aea <xQueueGenericSend+0x9e>
 8009ae8:	2300      	movs	r3, #0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d109      	bne.n	8009b02 <xQueueGenericSend+0xb6>
 8009aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	61fb      	str	r3, [r7, #28]
 8009b00:	e7fe      	b.n	8009b00 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b02:	f001 fbbb 	bl	800b27c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d302      	bcc.n	8009b18 <xQueueGenericSend+0xcc>
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d129      	bne.n	8009b6c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	68b9      	ldr	r1, [r7, #8]
 8009b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b1e:	f000 fa7c 	bl	800a01a <prvCopyDataToQueue>
 8009b22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d010      	beq.n	8009b4e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2e:	3324      	adds	r3, #36	; 0x24
 8009b30:	4618      	mov	r0, r3
 8009b32:	f000 ffc1 	bl	800aab8 <xTaskRemoveFromEventList>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d013      	beq.n	8009b64 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009b3c:	4b3f      	ldr	r3, [pc, #252]	; (8009c3c <xQueueGenericSend+0x1f0>)
 8009b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	e00a      	b.n	8009b64 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d007      	beq.n	8009b64 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009b54:	4b39      	ldr	r3, [pc, #228]	; (8009c3c <xQueueGenericSend+0x1f0>)
 8009b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009b64:	f001 fbb8 	bl	800b2d8 <vPortExitCritical>
				return pdPASS;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e063      	b.n	8009c34 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d103      	bne.n	8009b7a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b72:	f001 fbb1 	bl	800b2d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009b76:	2300      	movs	r3, #0
 8009b78:	e05c      	b.n	8009c34 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d106      	bne.n	8009b8e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b80:	f107 0314 	add.w	r3, r7, #20
 8009b84:	4618      	mov	r0, r3
 8009b86:	f000 fff9 	bl	800ab7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b8e:	f001 fba3 	bl	800b2d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b92:	f000 fd7b 	bl	800a68c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b96:	f001 fb71 	bl	800b27c <vPortEnterCritical>
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ba0:	b25b      	sxtb	r3, r3
 8009ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba6:	d103      	bne.n	8009bb0 <xQueueGenericSend+0x164>
 8009ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009baa:	2200      	movs	r2, #0
 8009bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bb6:	b25b      	sxtb	r3, r3
 8009bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbc:	d103      	bne.n	8009bc6 <xQueueGenericSend+0x17a>
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bc6:	f001 fb87 	bl	800b2d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bca:	1d3a      	adds	r2, r7, #4
 8009bcc:	f107 0314 	add.w	r3, r7, #20
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f000 ffe8 	bl	800aba8 <xTaskCheckForTimeOut>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d124      	bne.n	8009c28 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009bde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009be0:	f000 fb13 	bl	800a20a <prvIsQueueFull>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d018      	beq.n	8009c1c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bec:	3310      	adds	r3, #16
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 ff3c 	bl	800aa70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bfa:	f000 fa9e 	bl	800a13a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009bfe:	f000 fd53 	bl	800a6a8 <xTaskResumeAll>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f47f af7c 	bne.w	8009b02 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009c0a:	4b0c      	ldr	r3, [pc, #48]	; (8009c3c <xQueueGenericSend+0x1f0>)
 8009c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	e772      	b.n	8009b02 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c1e:	f000 fa8c 	bl	800a13a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c22:	f000 fd41 	bl	800a6a8 <xTaskResumeAll>
 8009c26:	e76c      	b.n	8009b02 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c2a:	f000 fa86 	bl	800a13a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c2e:	f000 fd3b 	bl	800a6a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009c32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3738      	adds	r7, #56	; 0x38
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	e000ed04 	.word	0xe000ed04

08009c40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b08e      	sub	sp, #56	; 0x38
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
 8009c4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d109      	bne.n	8009c6c <xQueueGenericSendFromISR+0x2c>
 8009c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	627b      	str	r3, [r7, #36]	; 0x24
 8009c6a:	e7fe      	b.n	8009c6a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d103      	bne.n	8009c7a <xQueueGenericSendFromISR+0x3a>
 8009c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <xQueueGenericSendFromISR+0x3e>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e000      	b.n	8009c80 <xQueueGenericSendFromISR+0x40>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d109      	bne.n	8009c98 <xQueueGenericSendFromISR+0x58>
 8009c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	623b      	str	r3, [r7, #32]
 8009c96:	e7fe      	b.n	8009c96 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d103      	bne.n	8009ca6 <xQueueGenericSendFromISR+0x66>
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d101      	bne.n	8009caa <xQueueGenericSendFromISR+0x6a>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e000      	b.n	8009cac <xQueueGenericSendFromISR+0x6c>
 8009caa:	2300      	movs	r3, #0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d109      	bne.n	8009cc4 <xQueueGenericSendFromISR+0x84>
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	61fb      	str	r3, [r7, #28]
 8009cc2:	e7fe      	b.n	8009cc2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cc4:	f001 fbb6 	bl	800b434 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009cc8:	f3ef 8211 	mrs	r2, BASEPRI
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	61ba      	str	r2, [r7, #24]
 8009cde:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ce0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d302      	bcc.n	8009cf6 <xQueueGenericSendFromISR+0xb6>
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d12c      	bne.n	8009d50 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d00:	683a      	ldr	r2, [r7, #0]
 8009d02:	68b9      	ldr	r1, [r7, #8]
 8009d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d06:	f000 f988 	bl	800a01a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009d0a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d12:	d112      	bne.n	8009d3a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d016      	beq.n	8009d4a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1e:	3324      	adds	r3, #36	; 0x24
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 fec9 	bl	800aab8 <xTaskRemoveFromEventList>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00e      	beq.n	8009d4a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00b      	beq.n	8009d4a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	601a      	str	r2, [r3, #0]
 8009d38:	e007      	b.n	8009d4a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d3e:	3301      	adds	r3, #1
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	b25a      	sxtb	r2, r3
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009d4e:	e001      	b.n	8009d54 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009d50:	2300      	movs	r3, #0
 8009d52:	637b      	str	r3, [r7, #52]	; 0x34
 8009d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d56:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3738      	adds	r7, #56	; 0x38
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b08c      	sub	sp, #48	; 0x30
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d74:	2300      	movs	r3, #0
 8009d76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d109      	bne.n	8009d96 <xQueueReceive+0x2e>
	__asm volatile
 8009d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	623b      	str	r3, [r7, #32]
 8009d94:	e7fe      	b.n	8009d94 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d103      	bne.n	8009da4 <xQueueReceive+0x3c>
 8009d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d101      	bne.n	8009da8 <xQueueReceive+0x40>
 8009da4:	2301      	movs	r3, #1
 8009da6:	e000      	b.n	8009daa <xQueueReceive+0x42>
 8009da8:	2300      	movs	r3, #0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d109      	bne.n	8009dc2 <xQueueReceive+0x5a>
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	61fb      	str	r3, [r7, #28]
 8009dc0:	e7fe      	b.n	8009dc0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dc2:	f001 f82f 	bl	800ae24 <xTaskGetSchedulerState>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d102      	bne.n	8009dd2 <xQueueReceive+0x6a>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d101      	bne.n	8009dd6 <xQueueReceive+0x6e>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e000      	b.n	8009dd8 <xQueueReceive+0x70>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d109      	bne.n	8009df0 <xQueueReceive+0x88>
 8009ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de0:	f383 8811 	msr	BASEPRI, r3
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	61bb      	str	r3, [r7, #24]
 8009dee:	e7fe      	b.n	8009dee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009df0:	f001 fa44 	bl	800b27c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d01f      	beq.n	8009e40 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e00:	68b9      	ldr	r1, [r7, #8]
 8009e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e04:	f000 f973 	bl	800a0ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	1e5a      	subs	r2, r3, #1
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00f      	beq.n	8009e38 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1a:	3310      	adds	r3, #16
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 fe4b 	bl	800aab8 <xTaskRemoveFromEventList>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d007      	beq.n	8009e38 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009e28:	4b3c      	ldr	r3, [pc, #240]	; (8009f1c <xQueueReceive+0x1b4>)
 8009e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e2e:	601a      	str	r2, [r3, #0]
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009e38:	f001 fa4e 	bl	800b2d8 <vPortExitCritical>
				return pdPASS;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e069      	b.n	8009f14 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d103      	bne.n	8009e4e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e46:	f001 fa47 	bl	800b2d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	e062      	b.n	8009f14 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d106      	bne.n	8009e62 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e54:	f107 0310 	add.w	r3, r7, #16
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f000 fe8f 	bl	800ab7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e62:	f001 fa39 	bl	800b2d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e66:	f000 fc11 	bl	800a68c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e6a:	f001 fa07 	bl	800b27c <vPortEnterCritical>
 8009e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e74:	b25b      	sxtb	r3, r3
 8009e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7a:	d103      	bne.n	8009e84 <xQueueReceive+0x11c>
 8009e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e8a:	b25b      	sxtb	r3, r3
 8009e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e90:	d103      	bne.n	8009e9a <xQueueReceive+0x132>
 8009e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e9a:	f001 fa1d 	bl	800b2d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e9e:	1d3a      	adds	r2, r7, #4
 8009ea0:	f107 0310 	add.w	r3, r7, #16
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 fe7e 	bl	800aba8 <xTaskCheckForTimeOut>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d123      	bne.n	8009efa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eb4:	f000 f993 	bl	800a1de <prvIsQueueEmpty>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d017      	beq.n	8009eee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec0:	3324      	adds	r3, #36	; 0x24
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 fdd2 	bl	800aa70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ece:	f000 f934 	bl	800a13a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ed2:	f000 fbe9 	bl	800a6a8 <xTaskResumeAll>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d189      	bne.n	8009df0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009edc:	4b0f      	ldr	r3, [pc, #60]	; (8009f1c <xQueueReceive+0x1b4>)
 8009ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	f3bf 8f4f 	dsb	sy
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	e780      	b.n	8009df0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ef0:	f000 f923 	bl	800a13a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ef4:	f000 fbd8 	bl	800a6a8 <xTaskResumeAll>
 8009ef8:	e77a      	b.n	8009df0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009efc:	f000 f91d 	bl	800a13a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f00:	f000 fbd2 	bl	800a6a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f06:	f000 f96a 	bl	800a1de <prvIsQueueEmpty>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f43f af6f 	beq.w	8009df0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3730      	adds	r7, #48	; 0x30
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	e000ed04 	.word	0xe000ed04

08009f20 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08e      	sub	sp, #56	; 0x38
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d109      	bne.n	8009f4a <xQueueReceiveFromISR+0x2a>
 8009f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3a:	f383 8811 	msr	BASEPRI, r3
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f3bf 8f4f 	dsb	sy
 8009f46:	623b      	str	r3, [r7, #32]
 8009f48:	e7fe      	b.n	8009f48 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d103      	bne.n	8009f58 <xQueueReceiveFromISR+0x38>
 8009f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d101      	bne.n	8009f5c <xQueueReceiveFromISR+0x3c>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e000      	b.n	8009f5e <xQueueReceiveFromISR+0x3e>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d109      	bne.n	8009f76 <xQueueReceiveFromISR+0x56>
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	61fb      	str	r3, [r7, #28]
 8009f74:	e7fe      	b.n	8009f74 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f76:	f001 fa5d 	bl	800b434 <vPortValidateInterruptPriority>
	__asm volatile
 8009f7a:	f3ef 8211 	mrs	r2, BASEPRI
 8009f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	61ba      	str	r2, [r7, #24]
 8009f90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009f92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d02f      	beq.n	800a002 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009fac:	68b9      	ldr	r1, [r7, #8]
 8009fae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fb0:	f000 f89d 	bl	800a0ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb6:	1e5a      	subs	r2, r3, #1
 8009fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009fbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc4:	d112      	bne.n	8009fec <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d016      	beq.n	8009ffc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd0:	3310      	adds	r3, #16
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f000 fd70 	bl	800aab8 <xTaskRemoveFromEventList>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00e      	beq.n	8009ffc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00b      	beq.n	8009ffc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	e007      	b.n	8009ffc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	b25a      	sxtb	r2, r3
 8009ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	637b      	str	r3, [r7, #52]	; 0x34
 800a000:	e001      	b.n	800a006 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800a002:	2300      	movs	r3, #0
 800a004:	637b      	str	r3, [r7, #52]	; 0x34
 800a006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a008:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a012:	4618      	mov	r0, r3
 800a014:	3738      	adds	r7, #56	; 0x38
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b086      	sub	sp, #24
 800a01e:	af00      	add	r7, sp, #0
 800a020:	60f8      	str	r0, [r7, #12]
 800a022:	60b9      	str	r1, [r7, #8]
 800a024:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a026:	2300      	movs	r3, #0
 800a028:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10d      	bne.n	800a054 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d14d      	bne.n	800a0dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	4618      	mov	r0, r3
 800a046:	f000 ff0b 	bl	800ae60 <xTaskPriorityDisinherit>
 800a04a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2200      	movs	r2, #0
 800a050:	609a      	str	r2, [r3, #8]
 800a052:	e043      	b.n	800a0dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d119      	bne.n	800a08e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6858      	ldr	r0, [r3, #4]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a062:	461a      	mov	r2, r3
 800a064:	68b9      	ldr	r1, [r7, #8]
 800a066:	f002 f96b 	bl	800c340 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a072:	441a      	add	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	429a      	cmp	r2, r3
 800a082:	d32b      	bcc.n	800a0dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	605a      	str	r2, [r3, #4]
 800a08c:	e026      	b.n	800a0dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	68d8      	ldr	r0, [r3, #12]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a096:	461a      	mov	r2, r3
 800a098:	68b9      	ldr	r1, [r7, #8]
 800a09a:	f002 f951 	bl	800c340 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	68da      	ldr	r2, [r3, #12]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a6:	425b      	negs	r3, r3
 800a0a8:	441a      	add	r2, r3
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	68da      	ldr	r2, [r3, #12]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d207      	bcs.n	800a0ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	689a      	ldr	r2, [r3, #8]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c2:	425b      	negs	r3, r3
 800a0c4:	441a      	add	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d105      	bne.n	800a0dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d002      	beq.n	800a0dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	1c5a      	adds	r2, r3, #1
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a0e4:	697b      	ldr	r3, [r7, #20]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3718      	adds	r7, #24
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b082      	sub	sp, #8
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d018      	beq.n	800a132 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	68da      	ldr	r2, [r3, #12]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a108:	441a      	add	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	68da      	ldr	r2, [r3, #12]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	429a      	cmp	r2, r3
 800a118:	d303      	bcc.n	800a122 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68d9      	ldr	r1, [r3, #12]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12a:	461a      	mov	r2, r3
 800a12c:	6838      	ldr	r0, [r7, #0]
 800a12e:	f002 f907 	bl	800c340 <memcpy>
	}
}
 800a132:	bf00      	nop
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b084      	sub	sp, #16
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a142:	f001 f89b 	bl	800b27c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a14c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a14e:	e011      	b.n	800a174 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a154:	2b00      	cmp	r3, #0
 800a156:	d012      	beq.n	800a17e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	3324      	adds	r3, #36	; 0x24
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 fcab 	bl	800aab8 <xTaskRemoveFromEventList>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d001      	beq.n	800a16c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a168:	f000 fd7e 	bl	800ac68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
 800a16e:	3b01      	subs	r3, #1
 800a170:	b2db      	uxtb	r3, r3
 800a172:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	dce9      	bgt.n	800a150 <prvUnlockQueue+0x16>
 800a17c:	e000      	b.n	800a180 <prvUnlockQueue+0x46>
					break;
 800a17e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	22ff      	movs	r2, #255	; 0xff
 800a184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a188:	f001 f8a6 	bl	800b2d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a18c:	f001 f876 	bl	800b27c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a196:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a198:	e011      	b.n	800a1be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d012      	beq.n	800a1c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	3310      	adds	r3, #16
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 fc86 	bl	800aab8 <xTaskRemoveFromEventList>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a1b2:	f000 fd59 	bl	800ac68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a1b6:	7bbb      	ldrb	r3, [r7, #14]
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	dce9      	bgt.n	800a19a <prvUnlockQueue+0x60>
 800a1c6:	e000      	b.n	800a1ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a1c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	22ff      	movs	r2, #255	; 0xff
 800a1ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a1d2:	f001 f881 	bl	800b2d8 <vPortExitCritical>
}
 800a1d6:	bf00      	nop
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1e6:	f001 f849 	bl	800b27c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d102      	bne.n	800a1f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	60fb      	str	r3, [r7, #12]
 800a1f6:	e001      	b.n	800a1fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1fc:	f001 f86c 	bl	800b2d8 <vPortExitCritical>

	return xReturn;
 800a200:	68fb      	ldr	r3, [r7, #12]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a212:	f001 f833 	bl	800b27c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a21e:	429a      	cmp	r2, r3
 800a220:	d102      	bne.n	800a228 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a222:	2301      	movs	r3, #1
 800a224:	60fb      	str	r3, [r7, #12]
 800a226:	e001      	b.n	800a22c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a228:	2300      	movs	r3, #0
 800a22a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a22c:	f001 f854 	bl	800b2d8 <vPortExitCritical>

	return xReturn;
 800a230:	68fb      	ldr	r3, [r7, #12]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b08e      	sub	sp, #56	; 0x38
 800a23e:	af04      	add	r7, sp, #16
 800a240:	60f8      	str	r0, [r7, #12]
 800a242:	60b9      	str	r1, [r7, #8]
 800a244:	607a      	str	r2, [r7, #4]
 800a246:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d109      	bne.n	800a262 <xTaskCreateStatic+0x28>
	__asm volatile
 800a24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	623b      	str	r3, [r7, #32]
 800a260:	e7fe      	b.n	800a260 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a264:	2b00      	cmp	r3, #0
 800a266:	d109      	bne.n	800a27c <xTaskCreateStatic+0x42>
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	61fb      	str	r3, [r7, #28]
 800a27a:	e7fe      	b.n	800a27a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a27c:	2354      	movs	r3, #84	; 0x54
 800a27e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	2b54      	cmp	r3, #84	; 0x54
 800a284:	d009      	beq.n	800a29a <xTaskCreateStatic+0x60>
 800a286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	61bb      	str	r3, [r7, #24]
 800a298:	e7fe      	b.n	800a298 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a29a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d01e      	beq.n	800a2e0 <xTaskCreateStatic+0xa6>
 800a2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d01b      	beq.n	800a2e0 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	9303      	str	r3, [sp, #12]
 800a2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c0:	9302      	str	r3, [sp, #8]
 800a2c2:	f107 0314 	add.w	r3, r7, #20
 800a2c6:	9301      	str	r3, [sp, #4]
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	68b9      	ldr	r1, [r7, #8]
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f000 f850 	bl	800a378 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2da:	f000 f8db 	bl	800a494 <prvAddNewTaskToReadyList>
 800a2de:	e001      	b.n	800a2e4 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a2e4:	697b      	ldr	r3, [r7, #20]
	}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3728      	adds	r7, #40	; 0x28
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b08c      	sub	sp, #48	; 0x30
 800a2f2:	af04      	add	r7, sp, #16
 800a2f4:	60f8      	str	r0, [r7, #12]
 800a2f6:	60b9      	str	r1, [r7, #8]
 800a2f8:	603b      	str	r3, [r7, #0]
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a2fe:	88fb      	ldrh	r3, [r7, #6]
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	4618      	mov	r0, r3
 800a304:	f001 f8d4 	bl	800b4b0 <pvPortMalloc>
 800a308:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00e      	beq.n	800a32e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a310:	2054      	movs	r0, #84	; 0x54
 800a312:	f001 f8cd 	bl	800b4b0 <pvPortMalloc>
 800a316:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	631a      	str	r2, [r3, #48]	; 0x30
 800a324:	e005      	b.n	800a332 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a326:	6978      	ldr	r0, [r7, #20]
 800a328:	f001 f984 	bl	800b634 <vPortFree>
 800a32c:	e001      	b.n	800a332 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a32e:	2300      	movs	r3, #0
 800a330:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d017      	beq.n	800a368 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a340:	88fa      	ldrh	r2, [r7, #6]
 800a342:	2300      	movs	r3, #0
 800a344:	9303      	str	r3, [sp, #12]
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	9302      	str	r3, [sp, #8]
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	68b9      	ldr	r1, [r7, #8]
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f000 f80e 	bl	800a378 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a35c:	69f8      	ldr	r0, [r7, #28]
 800a35e:	f000 f899 	bl	800a494 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a362:	2301      	movs	r3, #1
 800a364:	61bb      	str	r3, [r7, #24]
 800a366:	e002      	b.n	800a36e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a368:	f04f 33ff 	mov.w	r3, #4294967295
 800a36c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a36e:	69bb      	ldr	r3, [r7, #24]
	}
 800a370:	4618      	mov	r0, r3
 800a372:	3720      	adds	r7, #32
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b088      	sub	sp, #32
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
 800a384:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a388:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	461a      	mov	r2, r3
 800a390:	21a5      	movs	r1, #165	; 0xa5
 800a392:	f001 ffe0 	bl	800c356 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4413      	add	r3, r2
 800a3a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	f023 0307 	bic.w	r3, r3, #7
 800a3ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	f003 0307 	and.w	r3, r3, #7
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d009      	beq.n	800a3ce <prvInitialiseNewTask+0x56>
 800a3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3be:	f383 8811 	msr	BASEPRI, r3
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	f3bf 8f4f 	dsb	sy
 800a3ca:	617b      	str	r3, [r7, #20]
 800a3cc:	e7fe      	b.n	800a3cc <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d01f      	beq.n	800a414 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	61fb      	str	r3, [r7, #28]
 800a3d8:	e012      	b.n	800a400 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	4413      	add	r3, r2
 800a3e0:	7819      	ldrb	r1, [r3, #0]
 800a3e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	3334      	adds	r3, #52	; 0x34
 800a3ea:	460a      	mov	r2, r1
 800a3ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d006      	beq.n	800a408 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	61fb      	str	r3, [r7, #28]
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	2b0f      	cmp	r3, #15
 800a404:	d9e9      	bls.n	800a3da <prvInitialiseNewTask+0x62>
 800a406:	e000      	b.n	800a40a <prvInitialiseNewTask+0x92>
			{
				break;
 800a408:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a412:	e003      	b.n	800a41c <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a416:	2200      	movs	r2, #0
 800a418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	2b06      	cmp	r3, #6
 800a420:	d901      	bls.n	800a426 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a422:	2306      	movs	r3, #6
 800a424:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a42a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a430:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	2200      	movs	r2, #0
 800a436:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43a:	3304      	adds	r3, #4
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7ff f937 	bl	80096b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a444:	3318      	adds	r3, #24
 800a446:	4618      	mov	r0, r3
 800a448:	f7ff f932 	bl	80096b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a450:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a454:	f1c3 0207 	rsb	r2, r3, #7
 800a458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a460:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a464:	2200      	movs	r2, #0
 800a466:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46a:	2200      	movs	r2, #0
 800a46c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	68f9      	ldr	r1, [r7, #12]
 800a474:	69b8      	ldr	r0, [r7, #24]
 800a476:	f000 fddd 	bl	800b034 <pxPortInitialiseStack>
 800a47a:	4602      	mov	r2, r0
 800a47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a482:	2b00      	cmp	r3, #0
 800a484:	d002      	beq.n	800a48c <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a48a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a48c:	bf00      	nop
 800a48e:	3720      	adds	r7, #32
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a49c:	f000 feee 	bl	800b27c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a4a0:	4b2a      	ldr	r3, [pc, #168]	; (800a54c <prvAddNewTaskToReadyList+0xb8>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	4a29      	ldr	r2, [pc, #164]	; (800a54c <prvAddNewTaskToReadyList+0xb8>)
 800a4a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a4aa:	4b29      	ldr	r3, [pc, #164]	; (800a550 <prvAddNewTaskToReadyList+0xbc>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d109      	bne.n	800a4c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a4b2:	4a27      	ldr	r2, [pc, #156]	; (800a550 <prvAddNewTaskToReadyList+0xbc>)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a4b8:	4b24      	ldr	r3, [pc, #144]	; (800a54c <prvAddNewTaskToReadyList+0xb8>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d110      	bne.n	800a4e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a4c0:	f000 fbf6 	bl	800acb0 <prvInitialiseTaskLists>
 800a4c4:	e00d      	b.n	800a4e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a4c6:	4b23      	ldr	r3, [pc, #140]	; (800a554 <prvAddNewTaskToReadyList+0xc0>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d109      	bne.n	800a4e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a4ce:	4b20      	ldr	r3, [pc, #128]	; (800a550 <prvAddNewTaskToReadyList+0xbc>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d802      	bhi.n	800a4e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a4dc:	4a1c      	ldr	r2, [pc, #112]	; (800a550 <prvAddNewTaskToReadyList+0xbc>)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a4e2:	4b1d      	ldr	r3, [pc, #116]	; (800a558 <prvAddNewTaskToReadyList+0xc4>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	4a1b      	ldr	r2, [pc, #108]	; (800a558 <prvAddNewTaskToReadyList+0xc4>)
 800a4ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	409a      	lsls	r2, r3
 800a4f4:	4b19      	ldr	r3, [pc, #100]	; (800a55c <prvAddNewTaskToReadyList+0xc8>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	4a18      	ldr	r2, [pc, #96]	; (800a55c <prvAddNewTaskToReadyList+0xc8>)
 800a4fc:	6013      	str	r3, [r2, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a502:	4613      	mov	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4413      	add	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4a15      	ldr	r2, [pc, #84]	; (800a560 <prvAddNewTaskToReadyList+0xcc>)
 800a50c:	441a      	add	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3304      	adds	r3, #4
 800a512:	4619      	mov	r1, r3
 800a514:	4610      	mov	r0, r2
 800a516:	f7ff f8d8 	bl	80096ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a51a:	f000 fedd 	bl	800b2d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a51e:	4b0d      	ldr	r3, [pc, #52]	; (800a554 <prvAddNewTaskToReadyList+0xc0>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00e      	beq.n	800a544 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a526:	4b0a      	ldr	r3, [pc, #40]	; (800a550 <prvAddNewTaskToReadyList+0xbc>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a530:	429a      	cmp	r2, r3
 800a532:	d207      	bcs.n	800a544 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a534:	4b0b      	ldr	r3, [pc, #44]	; (800a564 <prvAddNewTaskToReadyList+0xd0>)
 800a536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	f3bf 8f4f 	dsb	sy
 800a540:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	20000d58 	.word	0x20000d58
 800a550:	20000c58 	.word	0x20000c58
 800a554:	20000d64 	.word	0x20000d64
 800a558:	20000d74 	.word	0x20000d74
 800a55c:	20000d60 	.word	0x20000d60
 800a560:	20000c5c 	.word	0x20000c5c
 800a564:	e000ed04 	.word	0xe000ed04

0800a568 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a570:	2300      	movs	r3, #0
 800a572:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d016      	beq.n	800a5a8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a57a:	4b13      	ldr	r3, [pc, #76]	; (800a5c8 <vTaskDelay+0x60>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d009      	beq.n	800a596 <vTaskDelay+0x2e>
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	60bb      	str	r3, [r7, #8]
 800a594:	e7fe      	b.n	800a594 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a596:	f000 f879 	bl	800a68c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a59a:	2100      	movs	r1, #0
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fce3 	bl	800af68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a5a2:	f000 f881 	bl	800a6a8 <xTaskResumeAll>
 800a5a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d107      	bne.n	800a5be <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a5ae:	4b07      	ldr	r3, [pc, #28]	; (800a5cc <vTaskDelay+0x64>)
 800a5b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5b4:	601a      	str	r2, [r3, #0]
 800a5b6:	f3bf 8f4f 	dsb	sy
 800a5ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a5be:	bf00      	nop
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	20000d80 	.word	0x20000d80
 800a5cc:	e000ed04 	.word	0xe000ed04

0800a5d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b08a      	sub	sp, #40	; 0x28
 800a5d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a5de:	463a      	mov	r2, r7
 800a5e0:	1d39      	adds	r1, r7, #4
 800a5e2:	f107 0308 	add.w	r3, r7, #8
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7f6 fd88 	bl	80010fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a5ec:	6839      	ldr	r1, [r7, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	9202      	str	r2, [sp, #8]
 800a5f4:	9301      	str	r3, [sp, #4]
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	460a      	mov	r2, r1
 800a5fe:	491d      	ldr	r1, [pc, #116]	; (800a674 <vTaskStartScheduler+0xa4>)
 800a600:	481d      	ldr	r0, [pc, #116]	; (800a678 <vTaskStartScheduler+0xa8>)
 800a602:	f7ff fe1a 	bl	800a23a <xTaskCreateStatic>
 800a606:	4602      	mov	r2, r0
 800a608:	4b1c      	ldr	r3, [pc, #112]	; (800a67c <vTaskStartScheduler+0xac>)
 800a60a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a60c:	4b1b      	ldr	r3, [pc, #108]	; (800a67c <vTaskStartScheduler+0xac>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d002      	beq.n	800a61a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a614:	2301      	movs	r3, #1
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	e001      	b.n	800a61e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a61a:	2300      	movs	r3, #0
 800a61c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d115      	bne.n	800a650 <vTaskStartScheduler+0x80>
 800a624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a636:	4b12      	ldr	r3, [pc, #72]	; (800a680 <vTaskStartScheduler+0xb0>)
 800a638:	f04f 32ff 	mov.w	r2, #4294967295
 800a63c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a63e:	4b11      	ldr	r3, [pc, #68]	; (800a684 <vTaskStartScheduler+0xb4>)
 800a640:	2201      	movs	r2, #1
 800a642:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a644:	4b10      	ldr	r3, [pc, #64]	; (800a688 <vTaskStartScheduler+0xb8>)
 800a646:	2200      	movs	r2, #0
 800a648:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a64a:	f000 fd79 	bl	800b140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a64e:	e00d      	b.n	800a66c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a656:	d109      	bne.n	800a66c <vTaskStartScheduler+0x9c>
 800a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	60fb      	str	r3, [r7, #12]
 800a66a:	e7fe      	b.n	800a66a <vTaskStartScheduler+0x9a>
}
 800a66c:	bf00      	nop
 800a66e:	3718      	adds	r7, #24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	08010130 	.word	0x08010130
 800a678:	0800ac81 	.word	0x0800ac81
 800a67c:	20000d7c 	.word	0x20000d7c
 800a680:	20000d78 	.word	0x20000d78
 800a684:	20000d64 	.word	0x20000d64
 800a688:	20000d5c 	.word	0x20000d5c

0800a68c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a68c:	b480      	push	{r7}
 800a68e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a690:	4b04      	ldr	r3, [pc, #16]	; (800a6a4 <vTaskSuspendAll+0x18>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	3301      	adds	r3, #1
 800a696:	4a03      	ldr	r2, [pc, #12]	; (800a6a4 <vTaskSuspendAll+0x18>)
 800a698:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a69a:	bf00      	nop
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	20000d80 	.word	0x20000d80

0800a6a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a6b6:	4b41      	ldr	r3, [pc, #260]	; (800a7bc <xTaskResumeAll+0x114>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d109      	bne.n	800a6d2 <xTaskResumeAll+0x2a>
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	603b      	str	r3, [r7, #0]
 800a6d0:	e7fe      	b.n	800a6d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a6d2:	f000 fdd3 	bl	800b27c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a6d6:	4b39      	ldr	r3, [pc, #228]	; (800a7bc <xTaskResumeAll+0x114>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	4a37      	ldr	r2, [pc, #220]	; (800a7bc <xTaskResumeAll+0x114>)
 800a6de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6e0:	4b36      	ldr	r3, [pc, #216]	; (800a7bc <xTaskResumeAll+0x114>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d161      	bne.n	800a7ac <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a6e8:	4b35      	ldr	r3, [pc, #212]	; (800a7c0 <xTaskResumeAll+0x118>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d05d      	beq.n	800a7ac <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6f0:	e02e      	b.n	800a750 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6f2:	4b34      	ldr	r3, [pc, #208]	; (800a7c4 <xTaskResumeAll+0x11c>)
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	3318      	adds	r3, #24
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7ff f840 	bl	8009784 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	3304      	adds	r3, #4
 800a708:	4618      	mov	r0, r3
 800a70a:	f7ff f83b 	bl	8009784 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a712:	2201      	movs	r2, #1
 800a714:	409a      	lsls	r2, r3
 800a716:	4b2c      	ldr	r3, [pc, #176]	; (800a7c8 <xTaskResumeAll+0x120>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	4a2a      	ldr	r2, [pc, #168]	; (800a7c8 <xTaskResumeAll+0x120>)
 800a71e:	6013      	str	r3, [r2, #0]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a724:	4613      	mov	r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4413      	add	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4a27      	ldr	r2, [pc, #156]	; (800a7cc <xTaskResumeAll+0x124>)
 800a72e:	441a      	add	r2, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	3304      	adds	r3, #4
 800a734:	4619      	mov	r1, r3
 800a736:	4610      	mov	r0, r2
 800a738:	f7fe ffc7 	bl	80096ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a740:	4b23      	ldr	r3, [pc, #140]	; (800a7d0 <xTaskResumeAll+0x128>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a746:	429a      	cmp	r2, r3
 800a748:	d302      	bcc.n	800a750 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a74a:	4b22      	ldr	r3, [pc, #136]	; (800a7d4 <xTaskResumeAll+0x12c>)
 800a74c:	2201      	movs	r2, #1
 800a74e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a750:	4b1c      	ldr	r3, [pc, #112]	; (800a7c4 <xTaskResumeAll+0x11c>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1cc      	bne.n	800a6f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d001      	beq.n	800a762 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a75e:	f000 fb41 	bl	800ade4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a762:	4b1d      	ldr	r3, [pc, #116]	; (800a7d8 <xTaskResumeAll+0x130>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d010      	beq.n	800a790 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a76e:	f000 f847 	bl	800a800 <xTaskIncrementTick>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d002      	beq.n	800a77e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a778:	4b16      	ldr	r3, [pc, #88]	; (800a7d4 <xTaskResumeAll+0x12c>)
 800a77a:	2201      	movs	r2, #1
 800a77c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	3b01      	subs	r3, #1
 800a782:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1f1      	bne.n	800a76e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a78a:	4b13      	ldr	r3, [pc, #76]	; (800a7d8 <xTaskResumeAll+0x130>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a790:	4b10      	ldr	r3, [pc, #64]	; (800a7d4 <xTaskResumeAll+0x12c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d009      	beq.n	800a7ac <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a798:	2301      	movs	r3, #1
 800a79a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a79c:	4b0f      	ldr	r3, [pc, #60]	; (800a7dc <xTaskResumeAll+0x134>)
 800a79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7a2:	601a      	str	r2, [r3, #0]
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7ac:	f000 fd94 	bl	800b2d8 <vPortExitCritical>

	return xAlreadyYielded;
 800a7b0:	68bb      	ldr	r3, [r7, #8]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000d80 	.word	0x20000d80
 800a7c0:	20000d58 	.word	0x20000d58
 800a7c4:	20000d18 	.word	0x20000d18
 800a7c8:	20000d60 	.word	0x20000d60
 800a7cc:	20000c5c 	.word	0x20000c5c
 800a7d0:	20000c58 	.word	0x20000c58
 800a7d4:	20000d6c 	.word	0x20000d6c
 800a7d8:	20000d68 	.word	0x20000d68
 800a7dc:	e000ed04 	.word	0xe000ed04

0800a7e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a7e6:	4b05      	ldr	r3, [pc, #20]	; (800a7fc <xTaskGetTickCount+0x1c>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a7ec:	687b      	ldr	r3, [r7, #4]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	370c      	adds	r7, #12
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	20000d5c 	.word	0x20000d5c

0800a800 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b086      	sub	sp, #24
 800a804:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a806:	2300      	movs	r3, #0
 800a808:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a80a:	4b4e      	ldr	r3, [pc, #312]	; (800a944 <xTaskIncrementTick+0x144>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f040 8087 	bne.w	800a922 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a814:	4b4c      	ldr	r3, [pc, #304]	; (800a948 <xTaskIncrementTick+0x148>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	3301      	adds	r3, #1
 800a81a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a81c:	4a4a      	ldr	r2, [pc, #296]	; (800a948 <xTaskIncrementTick+0x148>)
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d11f      	bne.n	800a868 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a828:	4b48      	ldr	r3, [pc, #288]	; (800a94c <xTaskIncrementTick+0x14c>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d009      	beq.n	800a846 <xTaskIncrementTick+0x46>
 800a832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a836:	f383 8811 	msr	BASEPRI, r3
 800a83a:	f3bf 8f6f 	isb	sy
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	603b      	str	r3, [r7, #0]
 800a844:	e7fe      	b.n	800a844 <xTaskIncrementTick+0x44>
 800a846:	4b41      	ldr	r3, [pc, #260]	; (800a94c <xTaskIncrementTick+0x14c>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	4b40      	ldr	r3, [pc, #256]	; (800a950 <xTaskIncrementTick+0x150>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a3e      	ldr	r2, [pc, #248]	; (800a94c <xTaskIncrementTick+0x14c>)
 800a852:	6013      	str	r3, [r2, #0]
 800a854:	4a3e      	ldr	r2, [pc, #248]	; (800a950 <xTaskIncrementTick+0x150>)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6013      	str	r3, [r2, #0]
 800a85a:	4b3e      	ldr	r3, [pc, #248]	; (800a954 <xTaskIncrementTick+0x154>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	3301      	adds	r3, #1
 800a860:	4a3c      	ldr	r2, [pc, #240]	; (800a954 <xTaskIncrementTick+0x154>)
 800a862:	6013      	str	r3, [r2, #0]
 800a864:	f000 fabe 	bl	800ade4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a868:	4b3b      	ldr	r3, [pc, #236]	; (800a958 <xTaskIncrementTick+0x158>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d348      	bcc.n	800a904 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a872:	4b36      	ldr	r3, [pc, #216]	; (800a94c <xTaskIncrementTick+0x14c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d104      	bne.n	800a886 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a87c:	4b36      	ldr	r3, [pc, #216]	; (800a958 <xTaskIncrementTick+0x158>)
 800a87e:	f04f 32ff 	mov.w	r2, #4294967295
 800a882:	601a      	str	r2, [r3, #0]
					break;
 800a884:	e03e      	b.n	800a904 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a886:	4b31      	ldr	r3, [pc, #196]	; (800a94c <xTaskIncrementTick+0x14c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a896:	693a      	ldr	r2, [r7, #16]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d203      	bcs.n	800a8a6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a89e:	4a2e      	ldr	r2, [pc, #184]	; (800a958 <xTaskIncrementTick+0x158>)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a8a4:	e02e      	b.n	800a904 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	3304      	adds	r3, #4
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fe ff6a 	bl	8009784 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d004      	beq.n	800a8c2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	3318      	adds	r3, #24
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fe ff61 	bl	8009784 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	409a      	lsls	r2, r3
 800a8ca:	4b24      	ldr	r3, [pc, #144]	; (800a95c <xTaskIncrementTick+0x15c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	4a22      	ldr	r2, [pc, #136]	; (800a95c <xTaskIncrementTick+0x15c>)
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d8:	4613      	mov	r3, r2
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	4413      	add	r3, r2
 800a8de:	009b      	lsls	r3, r3, #2
 800a8e0:	4a1f      	ldr	r2, [pc, #124]	; (800a960 <xTaskIncrementTick+0x160>)
 800a8e2:	441a      	add	r2, r3
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	4610      	mov	r0, r2
 800a8ec:	f7fe feed 	bl	80096ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f4:	4b1b      	ldr	r3, [pc, #108]	; (800a964 <xTaskIncrementTick+0x164>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d3b9      	bcc.n	800a872 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a8fe:	2301      	movs	r3, #1
 800a900:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a902:	e7b6      	b.n	800a872 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a904:	4b17      	ldr	r3, [pc, #92]	; (800a964 <xTaskIncrementTick+0x164>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a90a:	4915      	ldr	r1, [pc, #84]	; (800a960 <xTaskIncrementTick+0x160>)
 800a90c:	4613      	mov	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4413      	add	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	440b      	add	r3, r1
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d907      	bls.n	800a92c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800a91c:	2301      	movs	r3, #1
 800a91e:	617b      	str	r3, [r7, #20]
 800a920:	e004      	b.n	800a92c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a922:	4b11      	ldr	r3, [pc, #68]	; (800a968 <xTaskIncrementTick+0x168>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3301      	adds	r3, #1
 800a928:	4a0f      	ldr	r2, [pc, #60]	; (800a968 <xTaskIncrementTick+0x168>)
 800a92a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a92c:	4b0f      	ldr	r3, [pc, #60]	; (800a96c <xTaskIncrementTick+0x16c>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800a934:	2301      	movs	r3, #1
 800a936:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a938:	697b      	ldr	r3, [r7, #20]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3718      	adds	r7, #24
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	20000d80 	.word	0x20000d80
 800a948:	20000d5c 	.word	0x20000d5c
 800a94c:	20000d10 	.word	0x20000d10
 800a950:	20000d14 	.word	0x20000d14
 800a954:	20000d70 	.word	0x20000d70
 800a958:	20000d78 	.word	0x20000d78
 800a95c:	20000d60 	.word	0x20000d60
 800a960:	20000c5c 	.word	0x20000c5c
 800a964:	20000c58 	.word	0x20000c58
 800a968:	20000d68 	.word	0x20000d68
 800a96c:	20000d6c 	.word	0x20000d6c

0800a970 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a976:	4b39      	ldr	r3, [pc, #228]	; (800aa5c <vTaskSwitchContext+0xec>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d003      	beq.n	800a986 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a97e:	4b38      	ldr	r3, [pc, #224]	; (800aa60 <vTaskSwitchContext+0xf0>)
 800a980:	2201      	movs	r2, #1
 800a982:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a984:	e065      	b.n	800aa52 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800a986:	4b36      	ldr	r3, [pc, #216]	; (800aa60 <vTaskSwitchContext+0xf0>)
 800a988:	2200      	movs	r2, #0
 800a98a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800a98c:	4b35      	ldr	r3, [pc, #212]	; (800aa64 <vTaskSwitchContext+0xf4>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a992:	61fb      	str	r3, [r7, #28]
 800a994:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800a998:	61bb      	str	r3, [r7, #24]
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	69ba      	ldr	r2, [r7, #24]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d111      	bne.n	800a9c8 <vTaskSwitchContext+0x58>
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	3304      	adds	r3, #4
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	69ba      	ldr	r2, [r7, #24]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d10b      	bne.n	800a9c8 <vTaskSwitchContext+0x58>
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	3308      	adds	r3, #8
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	69ba      	ldr	r2, [r7, #24]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d105      	bne.n	800a9c8 <vTaskSwitchContext+0x58>
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	330c      	adds	r3, #12
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	69ba      	ldr	r2, [r7, #24]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d008      	beq.n	800a9da <vTaskSwitchContext+0x6a>
 800a9c8:	4b26      	ldr	r3, [pc, #152]	; (800aa64 <vTaskSwitchContext+0xf4>)
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	4b25      	ldr	r3, [pc, #148]	; (800aa64 <vTaskSwitchContext+0xf4>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3334      	adds	r3, #52	; 0x34
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	4610      	mov	r0, r2
 800a9d6:	f7f6 fb86 	bl	80010e6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9da:	4b23      	ldr	r3, [pc, #140]	; (800aa68 <vTaskSwitchContext+0xf8>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	fab3 f383 	clz	r3, r3
 800a9e6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a9e8:	7afb      	ldrb	r3, [r7, #11]
 800a9ea:	f1c3 031f 	rsb	r3, r3, #31
 800a9ee:	617b      	str	r3, [r7, #20]
 800a9f0:	491e      	ldr	r1, [pc, #120]	; (800aa6c <vTaskSwitchContext+0xfc>)
 800a9f2:	697a      	ldr	r2, [r7, #20]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	440b      	add	r3, r1
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d109      	bne.n	800aa18 <vTaskSwitchContext+0xa8>
	__asm volatile
 800aa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	607b      	str	r3, [r7, #4]
 800aa16:	e7fe      	b.n	800aa16 <vTaskSwitchContext+0xa6>
 800aa18:	697a      	ldr	r2, [r7, #20]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4413      	add	r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4a12      	ldr	r2, [pc, #72]	; (800aa6c <vTaskSwitchContext+0xfc>)
 800aa24:	4413      	add	r3, r2
 800aa26:	613b      	str	r3, [r7, #16]
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	605a      	str	r2, [r3, #4]
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	685a      	ldr	r2, [r3, #4]
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	3308      	adds	r3, #8
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d104      	bne.n	800aa48 <vTaskSwitchContext+0xd8>
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	685a      	ldr	r2, [r3, #4]
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	605a      	str	r2, [r3, #4]
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	4a05      	ldr	r2, [pc, #20]	; (800aa64 <vTaskSwitchContext+0xf4>)
 800aa50:	6013      	str	r3, [r2, #0]
}
 800aa52:	bf00      	nop
 800aa54:	3720      	adds	r7, #32
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20000d80 	.word	0x20000d80
 800aa60:	20000d6c 	.word	0x20000d6c
 800aa64:	20000c58 	.word	0x20000c58
 800aa68:	20000d60 	.word	0x20000d60
 800aa6c:	20000c5c 	.word	0x20000c5c

0800aa70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d109      	bne.n	800aa94 <vTaskPlaceOnEventList+0x24>
 800aa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	60fb      	str	r3, [r7, #12]
 800aa92:	e7fe      	b.n	800aa92 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa94:	4b07      	ldr	r3, [pc, #28]	; (800aab4 <vTaskPlaceOnEventList+0x44>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	3318      	adds	r3, #24
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7fe fe38 	bl	8009712 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aaa2:	2101      	movs	r1, #1
 800aaa4:	6838      	ldr	r0, [r7, #0]
 800aaa6:	f000 fa5f 	bl	800af68 <prvAddCurrentTaskToDelayedList>
}
 800aaaa:	bf00      	nop
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	20000c58 	.word	0x20000c58

0800aab8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d109      	bne.n	800aae2 <xTaskRemoveFromEventList+0x2a>
 800aace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	60fb      	str	r3, [r7, #12]
 800aae0:	e7fe      	b.n	800aae0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	3318      	adds	r3, #24
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fe fe4c 	bl	8009784 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaec:	4b1d      	ldr	r3, [pc, #116]	; (800ab64 <xTaskRemoveFromEventList+0xac>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d11c      	bne.n	800ab2e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fe fe43 	bl	8009784 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab02:	2201      	movs	r2, #1
 800ab04:	409a      	lsls	r2, r3
 800ab06:	4b18      	ldr	r3, [pc, #96]	; (800ab68 <xTaskRemoveFromEventList+0xb0>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	4a16      	ldr	r2, [pc, #88]	; (800ab68 <xTaskRemoveFromEventList+0xb0>)
 800ab0e:	6013      	str	r3, [r2, #0]
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab14:	4613      	mov	r3, r2
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	4413      	add	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4a13      	ldr	r2, [pc, #76]	; (800ab6c <xTaskRemoveFromEventList+0xb4>)
 800ab1e:	441a      	add	r2, r3
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	3304      	adds	r3, #4
 800ab24:	4619      	mov	r1, r3
 800ab26:	4610      	mov	r0, r2
 800ab28:	f7fe fdcf 	bl	80096ca <vListInsertEnd>
 800ab2c:	e005      	b.n	800ab3a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	3318      	adds	r3, #24
 800ab32:	4619      	mov	r1, r3
 800ab34:	480e      	ldr	r0, [pc, #56]	; (800ab70 <xTaskRemoveFromEventList+0xb8>)
 800ab36:	f7fe fdc8 	bl	80096ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3e:	4b0d      	ldr	r3, [pc, #52]	; (800ab74 <xTaskRemoveFromEventList+0xbc>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d905      	bls.n	800ab54 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab4c:	4b0a      	ldr	r3, [pc, #40]	; (800ab78 <xTaskRemoveFromEventList+0xc0>)
 800ab4e:	2201      	movs	r2, #1
 800ab50:	601a      	str	r2, [r3, #0]
 800ab52:	e001      	b.n	800ab58 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800ab54:	2300      	movs	r3, #0
 800ab56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab58:	697b      	ldr	r3, [r7, #20]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3718      	adds	r7, #24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	20000d80 	.word	0x20000d80
 800ab68:	20000d60 	.word	0x20000d60
 800ab6c:	20000c5c 	.word	0x20000c5c
 800ab70:	20000d18 	.word	0x20000d18
 800ab74:	20000c58 	.word	0x20000c58
 800ab78:	20000d6c 	.word	0x20000d6c

0800ab7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab84:	4b06      	ldr	r3, [pc, #24]	; (800aba0 <vTaskInternalSetTimeOutState+0x24>)
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab8c:	4b05      	ldr	r3, [pc, #20]	; (800aba4 <vTaskInternalSetTimeOutState+0x28>)
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	605a      	str	r2, [r3, #4]
}
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	20000d70 	.word	0x20000d70
 800aba4:	20000d5c 	.word	0x20000d5c

0800aba8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b088      	sub	sp, #32
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d109      	bne.n	800abcc <xTaskCheckForTimeOut+0x24>
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	613b      	str	r3, [r7, #16]
 800abca:	e7fe      	b.n	800abca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d109      	bne.n	800abe6 <xTaskCheckForTimeOut+0x3e>
 800abd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd6:	f383 8811 	msr	BASEPRI, r3
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	e7fe      	b.n	800abe4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800abe6:	f000 fb49 	bl	800b27c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800abea:	4b1d      	ldr	r3, [pc, #116]	; (800ac60 <xTaskCheckForTimeOut+0xb8>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	69ba      	ldr	r2, [r7, #24]
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac02:	d102      	bne.n	800ac0a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ac04:	2300      	movs	r3, #0
 800ac06:	61fb      	str	r3, [r7, #28]
 800ac08:	e023      	b.n	800ac52 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	4b15      	ldr	r3, [pc, #84]	; (800ac64 <xTaskCheckForTimeOut+0xbc>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d007      	beq.n	800ac26 <xTaskCheckForTimeOut+0x7e>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	69ba      	ldr	r2, [r7, #24]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d302      	bcc.n	800ac26 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ac20:	2301      	movs	r3, #1
 800ac22:	61fb      	str	r3, [r7, #28]
 800ac24:	e015      	b.n	800ac52 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d20b      	bcs.n	800ac48 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	1ad2      	subs	r2, r2, r3
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7ff ff9d 	bl	800ab7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac42:	2300      	movs	r3, #0
 800ac44:	61fb      	str	r3, [r7, #28]
 800ac46:	e004      	b.n	800ac52 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac52:	f000 fb41 	bl	800b2d8 <vPortExitCritical>

	return xReturn;
 800ac56:	69fb      	ldr	r3, [r7, #28]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3720      	adds	r7, #32
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	20000d5c 	.word	0x20000d5c
 800ac64:	20000d70 	.word	0x20000d70

0800ac68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac68:	b480      	push	{r7}
 800ac6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac6c:	4b03      	ldr	r3, [pc, #12]	; (800ac7c <vTaskMissedYield+0x14>)
 800ac6e:	2201      	movs	r2, #1
 800ac70:	601a      	str	r2, [r3, #0]
}
 800ac72:	bf00      	nop
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	20000d6c 	.word	0x20000d6c

0800ac80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac88:	f000 f852 	bl	800ad30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac8c:	4b06      	ldr	r3, [pc, #24]	; (800aca8 <prvIdleTask+0x28>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d9f9      	bls.n	800ac88 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac94:	4b05      	ldr	r3, [pc, #20]	; (800acac <prvIdleTask+0x2c>)
 800ac96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac9a:	601a      	str	r2, [r3, #0]
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aca4:	e7f0      	b.n	800ac88 <prvIdleTask+0x8>
 800aca6:	bf00      	nop
 800aca8:	20000c5c 	.word	0x20000c5c
 800acac:	e000ed04 	.word	0xe000ed04

0800acb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800acb6:	2300      	movs	r3, #0
 800acb8:	607b      	str	r3, [r7, #4]
 800acba:	e00c      	b.n	800acd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	4613      	mov	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	4413      	add	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	4a12      	ldr	r2, [pc, #72]	; (800ad10 <prvInitialiseTaskLists+0x60>)
 800acc8:	4413      	add	r3, r2
 800acca:	4618      	mov	r0, r3
 800accc:	f7fe fcd0 	bl	8009670 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	3301      	adds	r3, #1
 800acd4:	607b      	str	r3, [r7, #4]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b06      	cmp	r3, #6
 800acda:	d9ef      	bls.n	800acbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800acdc:	480d      	ldr	r0, [pc, #52]	; (800ad14 <prvInitialiseTaskLists+0x64>)
 800acde:	f7fe fcc7 	bl	8009670 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ace2:	480d      	ldr	r0, [pc, #52]	; (800ad18 <prvInitialiseTaskLists+0x68>)
 800ace4:	f7fe fcc4 	bl	8009670 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ace8:	480c      	ldr	r0, [pc, #48]	; (800ad1c <prvInitialiseTaskLists+0x6c>)
 800acea:	f7fe fcc1 	bl	8009670 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800acee:	480c      	ldr	r0, [pc, #48]	; (800ad20 <prvInitialiseTaskLists+0x70>)
 800acf0:	f7fe fcbe 	bl	8009670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800acf4:	480b      	ldr	r0, [pc, #44]	; (800ad24 <prvInitialiseTaskLists+0x74>)
 800acf6:	f7fe fcbb 	bl	8009670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800acfa:	4b0b      	ldr	r3, [pc, #44]	; (800ad28 <prvInitialiseTaskLists+0x78>)
 800acfc:	4a05      	ldr	r2, [pc, #20]	; (800ad14 <prvInitialiseTaskLists+0x64>)
 800acfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ad00:	4b0a      	ldr	r3, [pc, #40]	; (800ad2c <prvInitialiseTaskLists+0x7c>)
 800ad02:	4a05      	ldr	r2, [pc, #20]	; (800ad18 <prvInitialiseTaskLists+0x68>)
 800ad04:	601a      	str	r2, [r3, #0]
}
 800ad06:	bf00      	nop
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	20000c5c 	.word	0x20000c5c
 800ad14:	20000ce8 	.word	0x20000ce8
 800ad18:	20000cfc 	.word	0x20000cfc
 800ad1c:	20000d18 	.word	0x20000d18
 800ad20:	20000d2c 	.word	0x20000d2c
 800ad24:	20000d44 	.word	0x20000d44
 800ad28:	20000d10 	.word	0x20000d10
 800ad2c:	20000d14 	.word	0x20000d14

0800ad30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad36:	e019      	b.n	800ad6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad38:	f000 faa0 	bl	800b27c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad3c:	4b0f      	ldr	r3, [pc, #60]	; (800ad7c <prvCheckTasksWaitingTermination+0x4c>)
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	3304      	adds	r3, #4
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7fe fd1b 	bl	8009784 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad4e:	4b0c      	ldr	r3, [pc, #48]	; (800ad80 <prvCheckTasksWaitingTermination+0x50>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	3b01      	subs	r3, #1
 800ad54:	4a0a      	ldr	r2, [pc, #40]	; (800ad80 <prvCheckTasksWaitingTermination+0x50>)
 800ad56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad58:	4b0a      	ldr	r3, [pc, #40]	; (800ad84 <prvCheckTasksWaitingTermination+0x54>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	4a09      	ldr	r2, [pc, #36]	; (800ad84 <prvCheckTasksWaitingTermination+0x54>)
 800ad60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad62:	f000 fab9 	bl	800b2d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 f80e 	bl	800ad88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad6c:	4b05      	ldr	r3, [pc, #20]	; (800ad84 <prvCheckTasksWaitingTermination+0x54>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d1e1      	bne.n	800ad38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad74:	bf00      	nop
 800ad76:	3708      	adds	r7, #8
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	20000d2c 	.word	0x20000d2c
 800ad80:	20000d58 	.word	0x20000d58
 800ad84:	20000d40 	.word	0x20000d40

0800ad88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d108      	bne.n	800adac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 fc48 	bl	800b634 <vPortFree>
				vPortFree( pxTCB );
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 fc45 	bl	800b634 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800adaa:	e017      	b.n	800addc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d103      	bne.n	800adbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fc3c 	bl	800b634 <vPortFree>
	}
 800adbc:	e00e      	b.n	800addc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d009      	beq.n	800addc <prvDeleteTCB+0x54>
 800adc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	60fb      	str	r3, [r7, #12]
 800adda:	e7fe      	b.n	800adda <prvDeleteTCB+0x52>
	}
 800addc:	bf00      	nop
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adea:	4b0c      	ldr	r3, [pc, #48]	; (800ae1c <prvResetNextTaskUnblockTime+0x38>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d104      	bne.n	800adfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800adf4:	4b0a      	ldr	r3, [pc, #40]	; (800ae20 <prvResetNextTaskUnblockTime+0x3c>)
 800adf6:	f04f 32ff 	mov.w	r2, #4294967295
 800adfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800adfc:	e008      	b.n	800ae10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adfe:	4b07      	ldr	r3, [pc, #28]	; (800ae1c <prvResetNextTaskUnblockTime+0x38>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	4a04      	ldr	r2, [pc, #16]	; (800ae20 <prvResetNextTaskUnblockTime+0x3c>)
 800ae0e:	6013      	str	r3, [r2, #0]
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	20000d10 	.word	0x20000d10
 800ae20:	20000d78 	.word	0x20000d78

0800ae24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae2a:	4b0b      	ldr	r3, [pc, #44]	; (800ae58 <xTaskGetSchedulerState+0x34>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d102      	bne.n	800ae38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae32:	2301      	movs	r3, #1
 800ae34:	607b      	str	r3, [r7, #4]
 800ae36:	e008      	b.n	800ae4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae38:	4b08      	ldr	r3, [pc, #32]	; (800ae5c <xTaskGetSchedulerState+0x38>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d102      	bne.n	800ae46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae40:	2302      	movs	r3, #2
 800ae42:	607b      	str	r3, [r7, #4]
 800ae44:	e001      	b.n	800ae4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae46:	2300      	movs	r3, #0
 800ae48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae4a:	687b      	ldr	r3, [r7, #4]
	}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr
 800ae58:	20000d64 	.word	0x20000d64
 800ae5c:	20000d80 	.word	0x20000d80

0800ae60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d06c      	beq.n	800af50 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae76:	4b39      	ldr	r3, [pc, #228]	; (800af5c <xTaskPriorityDisinherit+0xfc>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	693a      	ldr	r2, [r7, #16]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d009      	beq.n	800ae94 <xTaskPriorityDisinherit+0x34>
 800ae80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	60fb      	str	r3, [r7, #12]
 800ae92:	e7fe      	b.n	800ae92 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d109      	bne.n	800aeb0 <xTaskPriorityDisinherit+0x50>
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	60bb      	str	r3, [r7, #8]
 800aeae:	e7fe      	b.n	800aeae <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aeb4:	1e5a      	subs	r2, r3, #1
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d044      	beq.n	800af50 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d140      	bne.n	800af50 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	3304      	adds	r3, #4
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fe fc56 	bl	8009784 <uxListRemove>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d115      	bne.n	800af0a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee2:	491f      	ldr	r1, [pc, #124]	; (800af60 <xTaskPriorityDisinherit+0x100>)
 800aee4:	4613      	mov	r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4413      	add	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	440b      	add	r3, r1
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d10a      	bne.n	800af0a <xTaskPriorityDisinherit+0xaa>
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef8:	2201      	movs	r2, #1
 800aefa:	fa02 f303 	lsl.w	r3, r2, r3
 800aefe:	43da      	mvns	r2, r3
 800af00:	4b18      	ldr	r3, [pc, #96]	; (800af64 <xTaskPriorityDisinherit+0x104>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4013      	ands	r3, r2
 800af06:	4a17      	ldr	r2, [pc, #92]	; (800af64 <xTaskPriorityDisinherit+0x104>)
 800af08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af16:	f1c3 0207 	rsb	r2, r3, #7
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af22:	2201      	movs	r2, #1
 800af24:	409a      	lsls	r2, r3
 800af26:	4b0f      	ldr	r3, [pc, #60]	; (800af64 <xTaskPriorityDisinherit+0x104>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4313      	orrs	r3, r2
 800af2c:	4a0d      	ldr	r2, [pc, #52]	; (800af64 <xTaskPriorityDisinherit+0x104>)
 800af2e:	6013      	str	r3, [r2, #0]
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af34:	4613      	mov	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4413      	add	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4a08      	ldr	r2, [pc, #32]	; (800af60 <xTaskPriorityDisinherit+0x100>)
 800af3e:	441a      	add	r2, r3
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	3304      	adds	r3, #4
 800af44:	4619      	mov	r1, r3
 800af46:	4610      	mov	r0, r2
 800af48:	f7fe fbbf 	bl	80096ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af4c:	2301      	movs	r3, #1
 800af4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af50:	697b      	ldr	r3, [r7, #20]
	}
 800af52:	4618      	mov	r0, r3
 800af54:	3718      	adds	r7, #24
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	20000c58 	.word	0x20000c58
 800af60:	20000c5c 	.word	0x20000c5c
 800af64:	20000d60 	.word	0x20000d60

0800af68 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800af72:	4b29      	ldr	r3, [pc, #164]	; (800b018 <prvAddCurrentTaskToDelayedList+0xb0>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af78:	4b28      	ldr	r3, [pc, #160]	; (800b01c <prvAddCurrentTaskToDelayedList+0xb4>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	3304      	adds	r3, #4
 800af7e:	4618      	mov	r0, r3
 800af80:	f7fe fc00 	bl	8009784 <uxListRemove>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10b      	bne.n	800afa2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800af8a:	4b24      	ldr	r3, [pc, #144]	; (800b01c <prvAddCurrentTaskToDelayedList+0xb4>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af90:	2201      	movs	r2, #1
 800af92:	fa02 f303 	lsl.w	r3, r2, r3
 800af96:	43da      	mvns	r2, r3
 800af98:	4b21      	ldr	r3, [pc, #132]	; (800b020 <prvAddCurrentTaskToDelayedList+0xb8>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4013      	ands	r3, r2
 800af9e:	4a20      	ldr	r2, [pc, #128]	; (800b020 <prvAddCurrentTaskToDelayedList+0xb8>)
 800afa0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa8:	d10a      	bne.n	800afc0 <prvAddCurrentTaskToDelayedList+0x58>
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d007      	beq.n	800afc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afb0:	4b1a      	ldr	r3, [pc, #104]	; (800b01c <prvAddCurrentTaskToDelayedList+0xb4>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	3304      	adds	r3, #4
 800afb6:	4619      	mov	r1, r3
 800afb8:	481a      	ldr	r0, [pc, #104]	; (800b024 <prvAddCurrentTaskToDelayedList+0xbc>)
 800afba:	f7fe fb86 	bl	80096ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800afbe:	e026      	b.n	800b00e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4413      	add	r3, r2
 800afc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800afc8:	4b14      	ldr	r3, [pc, #80]	; (800b01c <prvAddCurrentTaskToDelayedList+0xb4>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68ba      	ldr	r2, [r7, #8]
 800afce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d209      	bcs.n	800afec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afd8:	4b13      	ldr	r3, [pc, #76]	; (800b028 <prvAddCurrentTaskToDelayedList+0xc0>)
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	4b0f      	ldr	r3, [pc, #60]	; (800b01c <prvAddCurrentTaskToDelayedList+0xb4>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	3304      	adds	r3, #4
 800afe2:	4619      	mov	r1, r3
 800afe4:	4610      	mov	r0, r2
 800afe6:	f7fe fb94 	bl	8009712 <vListInsert>
}
 800afea:	e010      	b.n	800b00e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afec:	4b0f      	ldr	r3, [pc, #60]	; (800b02c <prvAddCurrentTaskToDelayedList+0xc4>)
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	4b0a      	ldr	r3, [pc, #40]	; (800b01c <prvAddCurrentTaskToDelayedList+0xb4>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	3304      	adds	r3, #4
 800aff6:	4619      	mov	r1, r3
 800aff8:	4610      	mov	r0, r2
 800affa:	f7fe fb8a 	bl	8009712 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800affe:	4b0c      	ldr	r3, [pc, #48]	; (800b030 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	429a      	cmp	r2, r3
 800b006:	d202      	bcs.n	800b00e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b008:	4a09      	ldr	r2, [pc, #36]	; (800b030 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	6013      	str	r3, [r2, #0]
}
 800b00e:	bf00      	nop
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	20000d5c 	.word	0x20000d5c
 800b01c:	20000c58 	.word	0x20000c58
 800b020:	20000d60 	.word	0x20000d60
 800b024:	20000d44 	.word	0x20000d44
 800b028:	20000d14 	.word	0x20000d14
 800b02c:	20000d10 	.word	0x20000d10
 800b030:	20000d78 	.word	0x20000d78

0800b034 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b034:	b480      	push	{r7}
 800b036:	b085      	sub	sp, #20
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	3b04      	subs	r3, #4
 800b044:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b04c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	3b04      	subs	r3, #4
 800b052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	f023 0201 	bic.w	r2, r3, #1
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	3b04      	subs	r3, #4
 800b062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b064:	4a0c      	ldr	r2, [pc, #48]	; (800b098 <pxPortInitialiseStack+0x64>)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	3b14      	subs	r3, #20
 800b06e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	3b04      	subs	r3, #4
 800b07a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f06f 0202 	mvn.w	r2, #2
 800b082:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	3b20      	subs	r3, #32
 800b088:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b08a:	68fb      	ldr	r3, [r7, #12]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	0800b09d 	.word	0x0800b09d

0800b09c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b0a6:	4b11      	ldr	r3, [pc, #68]	; (800b0ec <prvTaskExitError+0x50>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ae:	d009      	beq.n	800b0c4 <prvTaskExitError+0x28>
 800b0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b4:	f383 8811 	msr	BASEPRI, r3
 800b0b8:	f3bf 8f6f 	isb	sy
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	60fb      	str	r3, [r7, #12]
 800b0c2:	e7fe      	b.n	800b0c2 <prvTaskExitError+0x26>
 800b0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c8:	f383 8811 	msr	BASEPRI, r3
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b0d6:	bf00      	nop
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d0fc      	beq.n	800b0d8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b0de:	bf00      	nop
 800b0e0:	3714      	adds	r7, #20
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	2000002c 	.word	0x2000002c

0800b0f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b0f0:	4b07      	ldr	r3, [pc, #28]	; (800b110 <pxCurrentTCBConst2>)
 800b0f2:	6819      	ldr	r1, [r3, #0]
 800b0f4:	6808      	ldr	r0, [r1, #0]
 800b0f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fa:	f380 8809 	msr	PSP, r0
 800b0fe:	f3bf 8f6f 	isb	sy
 800b102:	f04f 0000 	mov.w	r0, #0
 800b106:	f380 8811 	msr	BASEPRI, r0
 800b10a:	4770      	bx	lr
 800b10c:	f3af 8000 	nop.w

0800b110 <pxCurrentTCBConst2>:
 800b110:	20000c58 	.word	0x20000c58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b114:	bf00      	nop
 800b116:	bf00      	nop

0800b118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b118:	4808      	ldr	r0, [pc, #32]	; (800b13c <prvPortStartFirstTask+0x24>)
 800b11a:	6800      	ldr	r0, [r0, #0]
 800b11c:	6800      	ldr	r0, [r0, #0]
 800b11e:	f380 8808 	msr	MSP, r0
 800b122:	f04f 0000 	mov.w	r0, #0
 800b126:	f380 8814 	msr	CONTROL, r0
 800b12a:	b662      	cpsie	i
 800b12c:	b661      	cpsie	f
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	df00      	svc	0
 800b138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b13a:	bf00      	nop
 800b13c:	e000ed08 	.word	0xe000ed08

0800b140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b146:	4b44      	ldr	r3, [pc, #272]	; (800b258 <xPortStartScheduler+0x118>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a44      	ldr	r2, [pc, #272]	; (800b25c <xPortStartScheduler+0x11c>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d109      	bne.n	800b164 <xPortStartScheduler+0x24>
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	613b      	str	r3, [r7, #16]
 800b162:	e7fe      	b.n	800b162 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b164:	4b3c      	ldr	r3, [pc, #240]	; (800b258 <xPortStartScheduler+0x118>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a3d      	ldr	r2, [pc, #244]	; (800b260 <xPortStartScheduler+0x120>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d109      	bne.n	800b182 <xPortStartScheduler+0x42>
 800b16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	60fb      	str	r3, [r7, #12]
 800b180:	e7fe      	b.n	800b180 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b182:	4b38      	ldr	r3, [pc, #224]	; (800b264 <xPortStartScheduler+0x124>)
 800b184:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	22ff      	movs	r2, #255	; 0xff
 800b192:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b19c:	78fb      	ldrb	r3, [r7, #3]
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b1a4:	b2da      	uxtb	r2, r3
 800b1a6:	4b30      	ldr	r3, [pc, #192]	; (800b268 <xPortStartScheduler+0x128>)
 800b1a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b1aa:	4b30      	ldr	r3, [pc, #192]	; (800b26c <xPortStartScheduler+0x12c>)
 800b1ac:	2207      	movs	r2, #7
 800b1ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1b0:	e009      	b.n	800b1c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b1b2:	4b2e      	ldr	r3, [pc, #184]	; (800b26c <xPortStartScheduler+0x12c>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	4a2c      	ldr	r2, [pc, #176]	; (800b26c <xPortStartScheduler+0x12c>)
 800b1ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b1bc:	78fb      	ldrb	r3, [r7, #3]
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	005b      	lsls	r3, r3, #1
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1c6:	78fb      	ldrb	r3, [r7, #3]
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ce:	2b80      	cmp	r3, #128	; 0x80
 800b1d0:	d0ef      	beq.n	800b1b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b1d2:	4b26      	ldr	r3, [pc, #152]	; (800b26c <xPortStartScheduler+0x12c>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f1c3 0307 	rsb	r3, r3, #7
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	d009      	beq.n	800b1f2 <xPortStartScheduler+0xb2>
 800b1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	60bb      	str	r3, [r7, #8]
 800b1f0:	e7fe      	b.n	800b1f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b1f2:	4b1e      	ldr	r3, [pc, #120]	; (800b26c <xPortStartScheduler+0x12c>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	021b      	lsls	r3, r3, #8
 800b1f8:	4a1c      	ldr	r2, [pc, #112]	; (800b26c <xPortStartScheduler+0x12c>)
 800b1fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b1fc:	4b1b      	ldr	r3, [pc, #108]	; (800b26c <xPortStartScheduler+0x12c>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b204:	4a19      	ldr	r2, [pc, #100]	; (800b26c <xPortStartScheduler+0x12c>)
 800b206:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b210:	4b17      	ldr	r3, [pc, #92]	; (800b270 <xPortStartScheduler+0x130>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a16      	ldr	r2, [pc, #88]	; (800b270 <xPortStartScheduler+0x130>)
 800b216:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b21a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b21c:	4b14      	ldr	r3, [pc, #80]	; (800b270 <xPortStartScheduler+0x130>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a13      	ldr	r2, [pc, #76]	; (800b270 <xPortStartScheduler+0x130>)
 800b222:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b226:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b228:	f000 f8d6 	bl	800b3d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b22c:	4b11      	ldr	r3, [pc, #68]	; (800b274 <xPortStartScheduler+0x134>)
 800b22e:	2200      	movs	r2, #0
 800b230:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b232:	f000 f8f5 	bl	800b420 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b236:	4b10      	ldr	r3, [pc, #64]	; (800b278 <xPortStartScheduler+0x138>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a0f      	ldr	r2, [pc, #60]	; (800b278 <xPortStartScheduler+0x138>)
 800b23c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b240:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b242:	f7ff ff69 	bl	800b118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b246:	f7ff fb93 	bl	800a970 <vTaskSwitchContext>
	prvTaskExitError();
 800b24a:	f7ff ff27 	bl	800b09c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3718      	adds	r7, #24
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	e000ed00 	.word	0xe000ed00
 800b25c:	410fc271 	.word	0x410fc271
 800b260:	410fc270 	.word	0x410fc270
 800b264:	e000e400 	.word	0xe000e400
 800b268:	20000d84 	.word	0x20000d84
 800b26c:	20000d88 	.word	0x20000d88
 800b270:	e000ed20 	.word	0xe000ed20
 800b274:	2000002c 	.word	0x2000002c
 800b278:	e000ef34 	.word	0xe000ef34

0800b27c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b294:	4b0e      	ldr	r3, [pc, #56]	; (800b2d0 <vPortEnterCritical+0x54>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3301      	adds	r3, #1
 800b29a:	4a0d      	ldr	r2, [pc, #52]	; (800b2d0 <vPortEnterCritical+0x54>)
 800b29c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b29e:	4b0c      	ldr	r3, [pc, #48]	; (800b2d0 <vPortEnterCritical+0x54>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d10e      	bne.n	800b2c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b2a6:	4b0b      	ldr	r3, [pc, #44]	; (800b2d4 <vPortEnterCritical+0x58>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d009      	beq.n	800b2c4 <vPortEnterCritical+0x48>
 800b2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	603b      	str	r3, [r7, #0]
 800b2c2:	e7fe      	b.n	800b2c2 <vPortEnterCritical+0x46>
	}
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	2000002c 	.word	0x2000002c
 800b2d4:	e000ed04 	.word	0xe000ed04

0800b2d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b2de:	4b11      	ldr	r3, [pc, #68]	; (800b324 <vPortExitCritical+0x4c>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d109      	bne.n	800b2fa <vPortExitCritical+0x22>
 800b2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ea:	f383 8811 	msr	BASEPRI, r3
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f3bf 8f4f 	dsb	sy
 800b2f6:	607b      	str	r3, [r7, #4]
 800b2f8:	e7fe      	b.n	800b2f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b2fa:	4b0a      	ldr	r3, [pc, #40]	; (800b324 <vPortExitCritical+0x4c>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	3b01      	subs	r3, #1
 800b300:	4a08      	ldr	r2, [pc, #32]	; (800b324 <vPortExitCritical+0x4c>)
 800b302:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b304:	4b07      	ldr	r3, [pc, #28]	; (800b324 <vPortExitCritical+0x4c>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d104      	bne.n	800b316 <vPortExitCritical+0x3e>
 800b30c:	2300      	movs	r3, #0
 800b30e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b316:	bf00      	nop
 800b318:	370c      	adds	r7, #12
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop
 800b324:	2000002c 	.word	0x2000002c
	...

0800b330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b330:	f3ef 8009 	mrs	r0, PSP
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	4b15      	ldr	r3, [pc, #84]	; (800b390 <pxCurrentTCBConst>)
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	f01e 0f10 	tst.w	lr, #16
 800b340:	bf08      	it	eq
 800b342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b34a:	6010      	str	r0, [r2, #0]
 800b34c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b350:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b354:	f380 8811 	msr	BASEPRI, r0
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	f7ff fb06 	bl	800a970 <vTaskSwitchContext>
 800b364:	f04f 0000 	mov.w	r0, #0
 800b368:	f380 8811 	msr	BASEPRI, r0
 800b36c:	bc09      	pop	{r0, r3}
 800b36e:	6819      	ldr	r1, [r3, #0]
 800b370:	6808      	ldr	r0, [r1, #0]
 800b372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b376:	f01e 0f10 	tst.w	lr, #16
 800b37a:	bf08      	it	eq
 800b37c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b380:	f380 8809 	msr	PSP, r0
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	f3af 8000 	nop.w

0800b390 <pxCurrentTCBConst>:
 800b390:	20000c58 	.word	0x20000c58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b394:	bf00      	nop
 800b396:	bf00      	nop

0800b398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b3b0:	f7ff fa26 	bl	800a800 <xTaskIncrementTick>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d003      	beq.n	800b3c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b3ba:	4b06      	ldr	r3, [pc, #24]	; (800b3d4 <SysTick_Handler+0x3c>)
 800b3bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b3cc:	bf00      	nop
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	e000ed04 	.word	0xe000ed04

0800b3d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b3d8:	b480      	push	{r7}
 800b3da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b3dc:	4b0b      	ldr	r3, [pc, #44]	; (800b40c <vPortSetupTimerInterrupt+0x34>)
 800b3de:	2200      	movs	r2, #0
 800b3e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b3e2:	4b0b      	ldr	r3, [pc, #44]	; (800b410 <vPortSetupTimerInterrupt+0x38>)
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b3e8:	4b0a      	ldr	r3, [pc, #40]	; (800b414 <vPortSetupTimerInterrupt+0x3c>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a0a      	ldr	r2, [pc, #40]	; (800b418 <vPortSetupTimerInterrupt+0x40>)
 800b3ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b3f2:	099b      	lsrs	r3, r3, #6
 800b3f4:	4a09      	ldr	r2, [pc, #36]	; (800b41c <vPortSetupTimerInterrupt+0x44>)
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b3fa:	4b04      	ldr	r3, [pc, #16]	; (800b40c <vPortSetupTimerInterrupt+0x34>)
 800b3fc:	2207      	movs	r2, #7
 800b3fe:	601a      	str	r2, [r3, #0]
}
 800b400:	bf00      	nop
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	e000e010 	.word	0xe000e010
 800b410:	e000e018 	.word	0xe000e018
 800b414:	20000000 	.word	0x20000000
 800b418:	10624dd3 	.word	0x10624dd3
 800b41c:	e000e014 	.word	0xe000e014

0800b420 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b420:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b430 <vPortEnableVFP+0x10>
 800b424:	6801      	ldr	r1, [r0, #0]
 800b426:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b42a:	6001      	str	r1, [r0, #0]
 800b42c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b42e:	bf00      	nop
 800b430:	e000ed88 	.word	0xe000ed88

0800b434 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b434:	b480      	push	{r7}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b43a:	f3ef 8305 	mrs	r3, IPSR
 800b43e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2b0f      	cmp	r3, #15
 800b444:	d913      	bls.n	800b46e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b446:	4a16      	ldr	r2, [pc, #88]	; (800b4a0 <vPortValidateInterruptPriority+0x6c>)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	4413      	add	r3, r2
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b450:	4b14      	ldr	r3, [pc, #80]	; (800b4a4 <vPortValidateInterruptPriority+0x70>)
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	7afa      	ldrb	r2, [r7, #11]
 800b456:	429a      	cmp	r2, r3
 800b458:	d209      	bcs.n	800b46e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45e:	f383 8811 	msr	BASEPRI, r3
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	607b      	str	r3, [r7, #4]
 800b46c:	e7fe      	b.n	800b46c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b46e:	4b0e      	ldr	r3, [pc, #56]	; (800b4a8 <vPortValidateInterruptPriority+0x74>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b476:	4b0d      	ldr	r3, [pc, #52]	; (800b4ac <vPortValidateInterruptPriority+0x78>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d909      	bls.n	800b492 <vPortValidateInterruptPriority+0x5e>
 800b47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	603b      	str	r3, [r7, #0]
 800b490:	e7fe      	b.n	800b490 <vPortValidateInterruptPriority+0x5c>
	}
 800b492:	bf00      	nop
 800b494:	3714      	adds	r7, #20
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	e000e3f0 	.word	0xe000e3f0
 800b4a4:	20000d84 	.word	0x20000d84
 800b4a8:	e000ed0c 	.word	0xe000ed0c
 800b4ac:	20000d88 	.word	0x20000d88

0800b4b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b08a      	sub	sp, #40	; 0x28
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b4bc:	f7ff f8e6 	bl	800a68c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b4c0:	4b57      	ldr	r3, [pc, #348]	; (800b620 <pvPortMalloc+0x170>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d101      	bne.n	800b4cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b4c8:	f000 f90c 	bl	800b6e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4cc:	4b55      	ldr	r3, [pc, #340]	; (800b624 <pvPortMalloc+0x174>)
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	4013      	ands	r3, r2
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f040 808c 	bne.w	800b5f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d01c      	beq.n	800b51a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b4e0:	2208      	movs	r2, #8
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f003 0307 	and.w	r3, r3, #7
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d013      	beq.n	800b51a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f023 0307 	bic.w	r3, r3, #7
 800b4f8:	3308      	adds	r3, #8
 800b4fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f003 0307 	and.w	r3, r3, #7
 800b502:	2b00      	cmp	r3, #0
 800b504:	d009      	beq.n	800b51a <pvPortMalloc+0x6a>
 800b506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50a:	f383 8811 	msr	BASEPRI, r3
 800b50e:	f3bf 8f6f 	isb	sy
 800b512:	f3bf 8f4f 	dsb	sy
 800b516:	617b      	str	r3, [r7, #20]
 800b518:	e7fe      	b.n	800b518 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d068      	beq.n	800b5f2 <pvPortMalloc+0x142>
 800b520:	4b41      	ldr	r3, [pc, #260]	; (800b628 <pvPortMalloc+0x178>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	429a      	cmp	r2, r3
 800b528:	d863      	bhi.n	800b5f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b52a:	4b40      	ldr	r3, [pc, #256]	; (800b62c <pvPortMalloc+0x17c>)
 800b52c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b52e:	4b3f      	ldr	r3, [pc, #252]	; (800b62c <pvPortMalloc+0x17c>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b534:	e004      	b.n	800b540 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b538:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	429a      	cmp	r2, r3
 800b548:	d903      	bls.n	800b552 <pvPortMalloc+0xa2>
 800b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1f1      	bne.n	800b536 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b552:	4b33      	ldr	r3, [pc, #204]	; (800b620 <pvPortMalloc+0x170>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b558:	429a      	cmp	r2, r3
 800b55a:	d04a      	beq.n	800b5f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b55c:	6a3b      	ldr	r3, [r7, #32]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2208      	movs	r2, #8
 800b562:	4413      	add	r3, r2
 800b564:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	6a3b      	ldr	r3, [r7, #32]
 800b56c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b570:	685a      	ldr	r2, [r3, #4]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	1ad2      	subs	r2, r2, r3
 800b576:	2308      	movs	r3, #8
 800b578:	005b      	lsls	r3, r3, #1
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d91e      	bls.n	800b5bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b57e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4413      	add	r3, r2
 800b584:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	f003 0307 	and.w	r3, r3, #7
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d009      	beq.n	800b5a4 <pvPortMalloc+0xf4>
 800b590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	613b      	str	r3, [r7, #16]
 800b5a2:	e7fe      	b.n	800b5a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	1ad2      	subs	r2, r2, r3
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5b6:	69b8      	ldr	r0, [r7, #24]
 800b5b8:	f000 f8f6 	bl	800b7a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5bc:	4b1a      	ldr	r3, [pc, #104]	; (800b628 <pvPortMalloc+0x178>)
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	1ad3      	subs	r3, r2, r3
 800b5c6:	4a18      	ldr	r2, [pc, #96]	; (800b628 <pvPortMalloc+0x178>)
 800b5c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5ca:	4b17      	ldr	r3, [pc, #92]	; (800b628 <pvPortMalloc+0x178>)
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	4b18      	ldr	r3, [pc, #96]	; (800b630 <pvPortMalloc+0x180>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d203      	bcs.n	800b5de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b5d6:	4b14      	ldr	r3, [pc, #80]	; (800b628 <pvPortMalloc+0x178>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a15      	ldr	r2, [pc, #84]	; (800b630 <pvPortMalloc+0x180>)
 800b5dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e0:	685a      	ldr	r2, [r3, #4]
 800b5e2:	4b10      	ldr	r3, [pc, #64]	; (800b624 <pvPortMalloc+0x174>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	431a      	orrs	r2, r3
 800b5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b5f2:	f7ff f859 	bl	800a6a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	f003 0307 	and.w	r3, r3, #7
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d009      	beq.n	800b614 <pvPortMalloc+0x164>
 800b600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b604:	f383 8811 	msr	BASEPRI, r3
 800b608:	f3bf 8f6f 	isb	sy
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	60fb      	str	r3, [r7, #12]
 800b612:	e7fe      	b.n	800b612 <pvPortMalloc+0x162>
	return pvReturn;
 800b614:	69fb      	ldr	r3, [r7, #28]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3728      	adds	r7, #40	; 0x28
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	20004994 	.word	0x20004994
 800b624:	200049a0 	.word	0x200049a0
 800b628:	20004998 	.word	0x20004998
 800b62c:	2000498c 	.word	0x2000498c
 800b630:	2000499c 	.word	0x2000499c

0800b634 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b086      	sub	sp, #24
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d046      	beq.n	800b6d4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b646:	2308      	movs	r3, #8
 800b648:	425b      	negs	r3, r3
 800b64a:	697a      	ldr	r2, [r7, #20]
 800b64c:	4413      	add	r3, r2
 800b64e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	685a      	ldr	r2, [r3, #4]
 800b658:	4b20      	ldr	r3, [pc, #128]	; (800b6dc <vPortFree+0xa8>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4013      	ands	r3, r2
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d109      	bne.n	800b676 <vPortFree+0x42>
 800b662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b666:	f383 8811 	msr	BASEPRI, r3
 800b66a:	f3bf 8f6f 	isb	sy
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	60fb      	str	r3, [r7, #12]
 800b674:	e7fe      	b.n	800b674 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d009      	beq.n	800b692 <vPortFree+0x5e>
 800b67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	60bb      	str	r3, [r7, #8]
 800b690:	e7fe      	b.n	800b690 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	685a      	ldr	r2, [r3, #4]
 800b696:	4b11      	ldr	r3, [pc, #68]	; (800b6dc <vPortFree+0xa8>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4013      	ands	r3, r2
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d019      	beq.n	800b6d4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d115      	bne.n	800b6d4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	685a      	ldr	r2, [r3, #4]
 800b6ac:	4b0b      	ldr	r3, [pc, #44]	; (800b6dc <vPortFree+0xa8>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	43db      	mvns	r3, r3
 800b6b2:	401a      	ands	r2, r3
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b6b8:	f7fe ffe8 	bl	800a68c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	685a      	ldr	r2, [r3, #4]
 800b6c0:	4b07      	ldr	r3, [pc, #28]	; (800b6e0 <vPortFree+0xac>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	4a06      	ldr	r2, [pc, #24]	; (800b6e0 <vPortFree+0xac>)
 800b6c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6ca:	6938      	ldr	r0, [r7, #16]
 800b6cc:	f000 f86c 	bl	800b7a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b6d0:	f7fe ffea 	bl	800a6a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b6d4:	bf00      	nop
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	200049a0 	.word	0x200049a0
 800b6e0:	20004998 	.word	0x20004998

0800b6e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b6ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b6ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b6f0:	4b27      	ldr	r3, [pc, #156]	; (800b790 <prvHeapInit+0xac>)
 800b6f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f003 0307 	and.w	r3, r3, #7
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00c      	beq.n	800b718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	3307      	adds	r3, #7
 800b702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f023 0307 	bic.w	r3, r3, #7
 800b70a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	1ad3      	subs	r3, r2, r3
 800b712:	4a1f      	ldr	r2, [pc, #124]	; (800b790 <prvHeapInit+0xac>)
 800b714:	4413      	add	r3, r2
 800b716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b71c:	4a1d      	ldr	r2, [pc, #116]	; (800b794 <prvHeapInit+0xb0>)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b722:	4b1c      	ldr	r3, [pc, #112]	; (800b794 <prvHeapInit+0xb0>)
 800b724:	2200      	movs	r2, #0
 800b726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	68ba      	ldr	r2, [r7, #8]
 800b72c:	4413      	add	r3, r2
 800b72e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b730:	2208      	movs	r2, #8
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	1a9b      	subs	r3, r3, r2
 800b736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f023 0307 	bic.w	r3, r3, #7
 800b73e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	4a15      	ldr	r2, [pc, #84]	; (800b798 <prvHeapInit+0xb4>)
 800b744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b746:	4b14      	ldr	r3, [pc, #80]	; (800b798 <prvHeapInit+0xb4>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2200      	movs	r2, #0
 800b74c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b74e:	4b12      	ldr	r3, [pc, #72]	; (800b798 <prvHeapInit+0xb4>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2200      	movs	r2, #0
 800b754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	1ad2      	subs	r2, r2, r3
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b764:	4b0c      	ldr	r3, [pc, #48]	; (800b798 <prvHeapInit+0xb4>)
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	4a0a      	ldr	r2, [pc, #40]	; (800b79c <prvHeapInit+0xb8>)
 800b772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	4a09      	ldr	r2, [pc, #36]	; (800b7a0 <prvHeapInit+0xbc>)
 800b77a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b77c:	4b09      	ldr	r3, [pc, #36]	; (800b7a4 <prvHeapInit+0xc0>)
 800b77e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b782:	601a      	str	r2, [r3, #0]
}
 800b784:	bf00      	nop
 800b786:	3714      	adds	r7, #20
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr
 800b790:	20000d8c 	.word	0x20000d8c
 800b794:	2000498c 	.word	0x2000498c
 800b798:	20004994 	.word	0x20004994
 800b79c:	2000499c 	.word	0x2000499c
 800b7a0:	20004998 	.word	0x20004998
 800b7a4:	200049a0 	.word	0x200049a0

0800b7a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b7b0:	4b28      	ldr	r3, [pc, #160]	; (800b854 <prvInsertBlockIntoFreeList+0xac>)
 800b7b2:	60fb      	str	r3, [r7, #12]
 800b7b4:	e002      	b.n	800b7bc <prvInsertBlockIntoFreeList+0x14>
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	60fb      	str	r3, [r7, #12]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d8f7      	bhi.n	800b7b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	68ba      	ldr	r2, [r7, #8]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d108      	bne.n	800b7ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	685a      	ldr	r2, [r3, #4]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	441a      	add	r2, r3
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	441a      	add	r2, r3
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d118      	bne.n	800b830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	4b15      	ldr	r3, [pc, #84]	; (800b858 <prvInsertBlockIntoFreeList+0xb0>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	429a      	cmp	r2, r3
 800b808:	d00d      	beq.n	800b826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	685a      	ldr	r2, [r3, #4]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	441a      	add	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	601a      	str	r2, [r3, #0]
 800b824:	e008      	b.n	800b838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b826:	4b0c      	ldr	r3, [pc, #48]	; (800b858 <prvInsertBlockIntoFreeList+0xb0>)
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	601a      	str	r2, [r3, #0]
 800b82e:	e003      	b.n	800b838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d002      	beq.n	800b846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b846:	bf00      	nop
 800b848:	3714      	adds	r7, #20
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	2000498c 	.word	0x2000498c
 800b858:	20004994 	.word	0x20004994

0800b85c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b860:	2201      	movs	r2, #1
 800b862:	490e      	ldr	r1, [pc, #56]	; (800b89c <MX_USB_HOST_Init+0x40>)
 800b864:	480e      	ldr	r0, [pc, #56]	; (800b8a0 <MX_USB_HOST_Init+0x44>)
 800b866:	f7fc f807 	bl	8007878 <USBH_Init>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d001      	beq.n	800b874 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b870:	f7f5 ff6a 	bl	8001748 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b874:	490b      	ldr	r1, [pc, #44]	; (800b8a4 <MX_USB_HOST_Init+0x48>)
 800b876:	480a      	ldr	r0, [pc, #40]	; (800b8a0 <MX_USB_HOST_Init+0x44>)
 800b878:	f7fc f8b4 	bl	80079e4 <USBH_RegisterClass>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d001      	beq.n	800b886 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b882:	f7f5 ff61 	bl	8001748 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b886:	4806      	ldr	r0, [pc, #24]	; (800b8a0 <MX_USB_HOST_Init+0x44>)
 800b888:	f7fc f938 	bl	8007afc <USBH_Start>
 800b88c:	4603      	mov	r3, r0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d001      	beq.n	800b896 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b892:	f7f5 ff59 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b896:	bf00      	nop
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	0800b8a9 	.word	0x0800b8a9
 800b8a0:	20004ab0 	.word	0x20004ab0
 800b8a4:	2000000c 	.word	0x2000000c

0800b8a8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b8b4:	78fb      	ldrb	r3, [r7, #3]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	2b04      	cmp	r3, #4
 800b8ba:	d819      	bhi.n	800b8f0 <USBH_UserProcess+0x48>
 800b8bc:	a201      	add	r2, pc, #4	; (adr r2, 800b8c4 <USBH_UserProcess+0x1c>)
 800b8be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c2:	bf00      	nop
 800b8c4:	0800b8f1 	.word	0x0800b8f1
 800b8c8:	0800b8e1 	.word	0x0800b8e1
 800b8cc:	0800b8f1 	.word	0x0800b8f1
 800b8d0:	0800b8e9 	.word	0x0800b8e9
 800b8d4:	0800b8d9 	.word	0x0800b8d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b8d8:	4b09      	ldr	r3, [pc, #36]	; (800b900 <USBH_UserProcess+0x58>)
 800b8da:	2203      	movs	r2, #3
 800b8dc:	701a      	strb	r2, [r3, #0]
  break;
 800b8de:	e008      	b.n	800b8f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b8e0:	4b07      	ldr	r3, [pc, #28]	; (800b900 <USBH_UserProcess+0x58>)
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	701a      	strb	r2, [r3, #0]
  break;
 800b8e6:	e004      	b.n	800b8f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b8e8:	4b05      	ldr	r3, [pc, #20]	; (800b900 <USBH_UserProcess+0x58>)
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	701a      	strb	r2, [r3, #0]
  break;
 800b8ee:	e000      	b.n	800b8f2 <USBH_UserProcess+0x4a>

  default:
  break;
 800b8f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b8f2:	bf00      	nop
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	200049a4 	.word	0x200049a4

0800b904 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b08a      	sub	sp, #40	; 0x28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b90c:	f107 0314 	add.w	r3, r7, #20
 800b910:	2200      	movs	r2, #0
 800b912:	601a      	str	r2, [r3, #0]
 800b914:	605a      	str	r2, [r3, #4]
 800b916:	609a      	str	r2, [r3, #8]
 800b918:	60da      	str	r2, [r3, #12]
 800b91a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b924:	d147      	bne.n	800b9b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b926:	2300      	movs	r3, #0
 800b928:	613b      	str	r3, [r7, #16]
 800b92a:	4b25      	ldr	r3, [pc, #148]	; (800b9c0 <HAL_HCD_MspInit+0xbc>)
 800b92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b92e:	4a24      	ldr	r2, [pc, #144]	; (800b9c0 <HAL_HCD_MspInit+0xbc>)
 800b930:	f043 0301 	orr.w	r3, r3, #1
 800b934:	6313      	str	r3, [r2, #48]	; 0x30
 800b936:	4b22      	ldr	r3, [pc, #136]	; (800b9c0 <HAL_HCD_MspInit+0xbc>)
 800b938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b93a:	f003 0301 	and.w	r3, r3, #1
 800b93e:	613b      	str	r3, [r7, #16]
 800b940:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b942:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b948:	2300      	movs	r3, #0
 800b94a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b94c:	2300      	movs	r3, #0
 800b94e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b950:	f107 0314 	add.w	r3, r7, #20
 800b954:	4619      	mov	r1, r3
 800b956:	481b      	ldr	r0, [pc, #108]	; (800b9c4 <HAL_HCD_MspInit+0xc0>)
 800b958:	f7f6 ff4a 	bl	80027f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b95c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b962:	2302      	movs	r3, #2
 800b964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b966:	2300      	movs	r3, #0
 800b968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b96a:	2303      	movs	r3, #3
 800b96c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b96e:	230a      	movs	r3, #10
 800b970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b972:	f107 0314 	add.w	r3, r7, #20
 800b976:	4619      	mov	r1, r3
 800b978:	4812      	ldr	r0, [pc, #72]	; (800b9c4 <HAL_HCD_MspInit+0xc0>)
 800b97a:	f7f6 ff39 	bl	80027f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b97e:	4b10      	ldr	r3, [pc, #64]	; (800b9c0 <HAL_HCD_MspInit+0xbc>)
 800b980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b982:	4a0f      	ldr	r2, [pc, #60]	; (800b9c0 <HAL_HCD_MspInit+0xbc>)
 800b984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b988:	6353      	str	r3, [r2, #52]	; 0x34
 800b98a:	2300      	movs	r3, #0
 800b98c:	60fb      	str	r3, [r7, #12]
 800b98e:	4b0c      	ldr	r3, [pc, #48]	; (800b9c0 <HAL_HCD_MspInit+0xbc>)
 800b990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b992:	4a0b      	ldr	r2, [pc, #44]	; (800b9c0 <HAL_HCD_MspInit+0xbc>)
 800b994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b998:	6453      	str	r3, [r2, #68]	; 0x44
 800b99a:	4b09      	ldr	r3, [pc, #36]	; (800b9c0 <HAL_HCD_MspInit+0xbc>)
 800b99c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b99e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9a2:	60fb      	str	r3, [r7, #12]
 800b9a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	2105      	movs	r1, #5
 800b9aa:	2043      	movs	r0, #67	; 0x43
 800b9ac:	f7f6 fedc 	bl	8002768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b9b0:	2043      	movs	r0, #67	; 0x43
 800b9b2:	f7f6 ff05 	bl	80027c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b9b6:	bf00      	nop
 800b9b8:	3728      	adds	r7, #40	; 0x28
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	40023800 	.word	0x40023800
 800b9c4:	40020000 	.word	0x40020000

0800b9c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fc fd3d 	bl	8008456 <USBH_LL_IncTimer>
}
 800b9dc:	bf00      	nop
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7fc fd81 	bl	80084fa <USBH_LL_Connect>
}
 800b9f8:	bf00      	nop
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7fc fd96 	bl	8008540 <USBH_LL_Disconnect>
}
 800ba14:	bf00      	nop
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	460b      	mov	r3, r1
 800ba26:	70fb      	strb	r3, [r7, #3]
 800ba28:	4613      	mov	r3, r2
 800ba2a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fc fdcb 	bl	80085ce <USBH_LL_NotifyURBChange>
#endif
}
 800ba38:	bf00      	nop
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fc fd2b 	bl	80084aa <USBH_LL_PortEnabled>
} 
 800ba54:	bf00      	nop
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fc fd37 	bl	80084de <USBH_LL_PortDisabled>
} 
 800ba70:	bf00      	nop
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d12a      	bne.n	800bae0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ba8a:	4a18      	ldr	r2, [pc, #96]	; (800baec <USBH_LL_Init+0x74>)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4a15      	ldr	r2, [pc, #84]	; (800baec <USBH_LL_Init+0x74>)
 800ba96:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ba9a:	4b14      	ldr	r3, [pc, #80]	; (800baec <USBH_LL_Init+0x74>)
 800ba9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800baa0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800baa2:	4b12      	ldr	r3, [pc, #72]	; (800baec <USBH_LL_Init+0x74>)
 800baa4:	2208      	movs	r2, #8
 800baa6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800baa8:	4b10      	ldr	r3, [pc, #64]	; (800baec <USBH_LL_Init+0x74>)
 800baaa:	2201      	movs	r2, #1
 800baac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800baae:	4b0f      	ldr	r3, [pc, #60]	; (800baec <USBH_LL_Init+0x74>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bab4:	4b0d      	ldr	r3, [pc, #52]	; (800baec <USBH_LL_Init+0x74>)
 800bab6:	2202      	movs	r2, #2
 800bab8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800baba:	4b0c      	ldr	r3, [pc, #48]	; (800baec <USBH_LL_Init+0x74>)
 800babc:	2200      	movs	r2, #0
 800babe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bac0:	480a      	ldr	r0, [pc, #40]	; (800baec <USBH_LL_Init+0x74>)
 800bac2:	f7f7 f997 	bl	8002df4 <HAL_HCD_Init>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d001      	beq.n	800bad0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bacc:	f7f5 fe3c 	bl	8001748 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bad0:	4806      	ldr	r0, [pc, #24]	; (800baec <USBH_LL_Init+0x74>)
 800bad2:	f7f7 fda7 	bl	8003624 <HAL_HCD_GetCurrentFrame>
 800bad6:	4603      	mov	r3, r0
 800bad8:	4619      	mov	r1, r3
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f7fc fcac 	bl	8008438 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	20004e94 	.word	0x20004e94

0800baf0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baf8:	2300      	movs	r3, #0
 800bafa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb06:	4618      	mov	r0, r3
 800bb08:	f7f7 fd14 	bl	8003534 <HAL_HCD_Start>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f000 f95c 	bl	800bdd0 <USBH_Get_USB_Status>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bb1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b084      	sub	sp, #16
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb32:	2300      	movs	r3, #0
 800bb34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7f7 fd1c 	bl	800357a <HAL_HCD_Stop>
 800bb42:	4603      	mov	r3, r0
 800bb44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb46:	7bfb      	ldrb	r3, [r7, #15]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f000 f941 	bl	800bdd0 <USBH_Get_USB_Status>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800bb52:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bb64:	2301      	movs	r3, #1
 800bb66:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7f7 fd66 	bl	8003640 <HAL_HCD_GetCurrentSpeed>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d007      	beq.n	800bb8a <USBH_LL_GetSpeed+0x2e>
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d302      	bcc.n	800bb84 <USBH_LL_GetSpeed+0x28>
 800bb7e:	2b02      	cmp	r3, #2
 800bb80:	d006      	beq.n	800bb90 <USBH_LL_GetSpeed+0x34>
 800bb82:	e008      	b.n	800bb96 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bb84:	2300      	movs	r3, #0
 800bb86:	73fb      	strb	r3, [r7, #15]
    break;
 800bb88:	e008      	b.n	800bb9c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb8e:	e005      	b.n	800bb9c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bb90:	2302      	movs	r3, #2
 800bb92:	73fb      	strb	r3, [r7, #15]
    break;
 800bb94:	e002      	b.n	800bb9c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800bb96:	2301      	movs	r3, #1
 800bb98:	73fb      	strb	r3, [r7, #15]
    break;
 800bb9a:	bf00      	nop
  }
  return  speed;
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b084      	sub	sp, #16
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7f7 fcf9 	bl	80035b4 <HAL_HCD_ResetPort>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800bbc6:	7bfb      	ldrb	r3, [r7, #15]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f000 f901 	bl	800bdd0 <USBH_Get_USB_Status>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bbd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3710      	adds	r7, #16
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bbee:	78fa      	ldrb	r2, [r7, #3]
 800bbf0:	4611      	mov	r1, r2
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7f7 fd01 	bl	80035fa <HAL_HCD_HC_GetXferCount>
 800bbf8:	4603      	mov	r3, r0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3708      	adds	r7, #8
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bc02:	b590      	push	{r4, r7, lr}
 800bc04:	b089      	sub	sp, #36	; 0x24
 800bc06:	af04      	add	r7, sp, #16
 800bc08:	6078      	str	r0, [r7, #4]
 800bc0a:	4608      	mov	r0, r1
 800bc0c:	4611      	mov	r1, r2
 800bc0e:	461a      	mov	r2, r3
 800bc10:	4603      	mov	r3, r0
 800bc12:	70fb      	strb	r3, [r7, #3]
 800bc14:	460b      	mov	r3, r1
 800bc16:	70bb      	strb	r3, [r7, #2]
 800bc18:	4613      	mov	r3, r2
 800bc1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc20:	2300      	movs	r3, #0
 800bc22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bc2a:	787c      	ldrb	r4, [r7, #1]
 800bc2c:	78ba      	ldrb	r2, [r7, #2]
 800bc2e:	78f9      	ldrb	r1, [r7, #3]
 800bc30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bc32:	9302      	str	r3, [sp, #8]
 800bc34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bc38:	9301      	str	r3, [sp, #4]
 800bc3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	4623      	mov	r3, r4
 800bc42:	f7f7 f945 	bl	8002ed0 <HAL_HCD_HC_Init>
 800bc46:	4603      	mov	r3, r0
 800bc48:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc4a:	7bfb      	ldrb	r3, [r7, #15]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f000 f8bf 	bl	800bdd0 <USBH_Get_USB_Status>
 800bc52:	4603      	mov	r3, r0
 800bc54:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bc56:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3714      	adds	r7, #20
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd90      	pop	{r4, r7, pc}

0800bc60 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc70:	2300      	movs	r3, #0
 800bc72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc7a:	78fa      	ldrb	r2, [r7, #3]
 800bc7c:	4611      	mov	r1, r2
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7f7 f9be 	bl	8003000 <HAL_HCD_HC_Halt>
 800bc84:	4603      	mov	r3, r0
 800bc86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc88:	7bfb      	ldrb	r3, [r7, #15]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f000 f8a0 	bl	800bdd0 <USBH_Get_USB_Status>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bc94:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bc9e:	b590      	push	{r4, r7, lr}
 800bca0:	b089      	sub	sp, #36	; 0x24
 800bca2:	af04      	add	r7, sp, #16
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	4608      	mov	r0, r1
 800bca8:	4611      	mov	r1, r2
 800bcaa:	461a      	mov	r2, r3
 800bcac:	4603      	mov	r3, r0
 800bcae:	70fb      	strb	r3, [r7, #3]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	70bb      	strb	r3, [r7, #2]
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bcc6:	787c      	ldrb	r4, [r7, #1]
 800bcc8:	78ba      	ldrb	r2, [r7, #2]
 800bcca:	78f9      	ldrb	r1, [r7, #3]
 800bccc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bcd0:	9303      	str	r3, [sp, #12]
 800bcd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bcd4:	9302      	str	r3, [sp, #8]
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd8:	9301      	str	r3, [sp, #4]
 800bcda:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	4623      	mov	r3, r4
 800bce2:	f7f7 f9b1 	bl	8003048 <HAL_HCD_HC_SubmitRequest>
 800bce6:	4603      	mov	r3, r0
 800bce8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bcea:	7bfb      	ldrb	r3, [r7, #15]
 800bcec:	4618      	mov	r0, r3
 800bcee:	f000 f86f 	bl	800bdd0 <USBH_Get_USB_Status>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bcf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3714      	adds	r7, #20
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd90      	pop	{r4, r7, pc}

0800bd00 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	460b      	mov	r3, r1
 800bd0a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd12:	78fa      	ldrb	r2, [r7, #3]
 800bd14:	4611      	mov	r1, r2
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7f7 fc5a 	bl	80035d0 <HAL_HCD_HC_GetURBState>
 800bd1c:	4603      	mov	r3, r0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3708      	adds	r7, #8
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b082      	sub	sp, #8
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
 800bd2e:	460b      	mov	r3, r1
 800bd30:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d103      	bne.n	800bd44 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bd3c:	78fb      	ldrb	r3, [r7, #3]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f000 f872 	bl	800be28 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bd44:	20c8      	movs	r0, #200	; 0xc8
 800bd46:	f7f6 f849 	bl	8001ddc <HAL_Delay>
  return USBH_OK;
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b085      	sub	sp, #20
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	70fb      	strb	r3, [r7, #3]
 800bd60:	4613      	mov	r3, r2
 800bd62:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd6a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bd6c:	78fa      	ldrb	r2, [r7, #3]
 800bd6e:	68f9      	ldr	r1, [r7, #12]
 800bd70:	4613      	mov	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4413      	add	r3, r2
 800bd76:	00db      	lsls	r3, r3, #3
 800bd78:	440b      	add	r3, r1
 800bd7a:	333b      	adds	r3, #59	; 0x3b
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00a      	beq.n	800bd98 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bd82:	78fa      	ldrb	r2, [r7, #3]
 800bd84:	68f9      	ldr	r1, [r7, #12]
 800bd86:	4613      	mov	r3, r2
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4413      	add	r3, r2
 800bd8c:	00db      	lsls	r3, r3, #3
 800bd8e:	440b      	add	r3, r1
 800bd90:	3350      	adds	r3, #80	; 0x50
 800bd92:	78ba      	ldrb	r2, [r7, #2]
 800bd94:	701a      	strb	r2, [r3, #0]
 800bd96:	e009      	b.n	800bdac <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bd98:	78fa      	ldrb	r2, [r7, #3]
 800bd9a:	68f9      	ldr	r1, [r7, #12]
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	4413      	add	r3, r2
 800bda2:	00db      	lsls	r3, r3, #3
 800bda4:	440b      	add	r3, r1
 800bda6:	3351      	adds	r3, #81	; 0x51
 800bda8:	78ba      	ldrb	r2, [r7, #2]
 800bdaa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3714      	adds	r7, #20
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr

0800bdba <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b082      	sub	sp, #8
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7f6 f80a 	bl	8001ddc <HAL_Delay>
}
 800bdc8:	bf00      	nop
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bdda:	2300      	movs	r3, #0
 800bddc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bdde:	79fb      	ldrb	r3, [r7, #7]
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d817      	bhi.n	800be14 <USBH_Get_USB_Status+0x44>
 800bde4:	a201      	add	r2, pc, #4	; (adr r2, 800bdec <USBH_Get_USB_Status+0x1c>)
 800bde6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdea:	bf00      	nop
 800bdec:	0800bdfd 	.word	0x0800bdfd
 800bdf0:	0800be03 	.word	0x0800be03
 800bdf4:	0800be09 	.word	0x0800be09
 800bdf8:	0800be0f 	.word	0x0800be0f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	73fb      	strb	r3, [r7, #15]
    break;
 800be00:	e00b      	b.n	800be1a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800be02:	2302      	movs	r3, #2
 800be04:	73fb      	strb	r3, [r7, #15]
    break;
 800be06:	e008      	b.n	800be1a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800be08:	2301      	movs	r3, #1
 800be0a:	73fb      	strb	r3, [r7, #15]
    break;
 800be0c:	e005      	b.n	800be1a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800be0e:	2302      	movs	r3, #2
 800be10:	73fb      	strb	r3, [r7, #15]
    break;
 800be12:	e002      	b.n	800be1a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800be14:	2302      	movs	r3, #2
 800be16:	73fb      	strb	r3, [r7, #15]
    break;
 800be18:	bf00      	nop
  }
  return usb_status;
 800be1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3714      	adds	r7, #20
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	4603      	mov	r3, r0
 800be30:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800be32:	79fb      	ldrb	r3, [r7, #7]
 800be34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800be36:	79fb      	ldrb	r3, [r7, #7]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d102      	bne.n	800be42 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800be3c:	2301      	movs	r3, #1
 800be3e:	73fb      	strb	r3, [r7, #15]
 800be40:	e001      	b.n	800be46 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800be42:	2300      	movs	r3, #0
 800be44:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800be46:	7bfb      	ldrb	r3, [r7, #15]
 800be48:	461a      	mov	r2, r3
 800be4a:	2101      	movs	r1, #1
 800be4c:	4803      	ldr	r0, [pc, #12]	; (800be5c <MX_DriverVbusFS+0x34>)
 800be4e:	f7f6 ff77 	bl	8002d40 <HAL_GPIO_WritePin>
}
 800be52:	bf00      	nop
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	40020800 	.word	0x40020800

0800be60 <__errno>:
 800be60:	4b01      	ldr	r3, [pc, #4]	; (800be68 <__errno+0x8>)
 800be62:	6818      	ldr	r0, [r3, #0]
 800be64:	4770      	bx	lr
 800be66:	bf00      	nop
 800be68:	20000030 	.word	0x20000030

0800be6c <__libc_init_array>:
 800be6c:	b570      	push	{r4, r5, r6, lr}
 800be6e:	4e0d      	ldr	r6, [pc, #52]	; (800bea4 <__libc_init_array+0x38>)
 800be70:	4c0d      	ldr	r4, [pc, #52]	; (800bea8 <__libc_init_array+0x3c>)
 800be72:	1ba4      	subs	r4, r4, r6
 800be74:	10a4      	asrs	r4, r4, #2
 800be76:	2500      	movs	r5, #0
 800be78:	42a5      	cmp	r5, r4
 800be7a:	d109      	bne.n	800be90 <__libc_init_array+0x24>
 800be7c:	4e0b      	ldr	r6, [pc, #44]	; (800beac <__libc_init_array+0x40>)
 800be7e:	4c0c      	ldr	r4, [pc, #48]	; (800beb0 <__libc_init_array+0x44>)
 800be80:	f004 f808 	bl	800fe94 <_init>
 800be84:	1ba4      	subs	r4, r4, r6
 800be86:	10a4      	asrs	r4, r4, #2
 800be88:	2500      	movs	r5, #0
 800be8a:	42a5      	cmp	r5, r4
 800be8c:	d105      	bne.n	800be9a <__libc_init_array+0x2e>
 800be8e:	bd70      	pop	{r4, r5, r6, pc}
 800be90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be94:	4798      	blx	r3
 800be96:	3501      	adds	r5, #1
 800be98:	e7ee      	b.n	800be78 <__libc_init_array+0xc>
 800be9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be9e:	4798      	blx	r3
 800bea0:	3501      	adds	r5, #1
 800bea2:	e7f2      	b.n	800be8a <__libc_init_array+0x1e>
 800bea4:	080103c8 	.word	0x080103c8
 800bea8:	080103c8 	.word	0x080103c8
 800beac:	080103c8 	.word	0x080103c8
 800beb0:	080103d0 	.word	0x080103d0

0800beb4 <malloc>:
 800beb4:	4b02      	ldr	r3, [pc, #8]	; (800bec0 <malloc+0xc>)
 800beb6:	4601      	mov	r1, r0
 800beb8:	6818      	ldr	r0, [r3, #0]
 800beba:	f000 b80b 	b.w	800bed4 <_malloc_r>
 800bebe:	bf00      	nop
 800bec0:	20000030 	.word	0x20000030

0800bec4 <free>:
 800bec4:	4b02      	ldr	r3, [pc, #8]	; (800bed0 <free+0xc>)
 800bec6:	4601      	mov	r1, r0
 800bec8:	6818      	ldr	r0, [r3, #0]
 800beca:	f002 bda7 	b.w	800ea1c <_free_r>
 800bece:	bf00      	nop
 800bed0:	20000030 	.word	0x20000030

0800bed4 <_malloc_r>:
 800bed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed8:	f101 050b 	add.w	r5, r1, #11
 800bedc:	2d16      	cmp	r5, #22
 800bede:	4606      	mov	r6, r0
 800bee0:	d906      	bls.n	800bef0 <_malloc_r+0x1c>
 800bee2:	f035 0507 	bics.w	r5, r5, #7
 800bee6:	d504      	bpl.n	800bef2 <_malloc_r+0x1e>
 800bee8:	230c      	movs	r3, #12
 800beea:	6033      	str	r3, [r6, #0]
 800beec:	2400      	movs	r4, #0
 800beee:	e1a8      	b.n	800c242 <_malloc_r+0x36e>
 800bef0:	2510      	movs	r5, #16
 800bef2:	428d      	cmp	r5, r1
 800bef4:	d3f8      	bcc.n	800bee8 <_malloc_r+0x14>
 800bef6:	4630      	mov	r0, r6
 800bef8:	f000 fa36 	bl	800c368 <__malloc_lock>
 800befc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800bf00:	4fc0      	ldr	r7, [pc, #768]	; (800c204 <_malloc_r+0x330>)
 800bf02:	d238      	bcs.n	800bf76 <_malloc_r+0xa2>
 800bf04:	f105 0208 	add.w	r2, r5, #8
 800bf08:	443a      	add	r2, r7
 800bf0a:	f1a2 0108 	sub.w	r1, r2, #8
 800bf0e:	6854      	ldr	r4, [r2, #4]
 800bf10:	428c      	cmp	r4, r1
 800bf12:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 800bf16:	d102      	bne.n	800bf1e <_malloc_r+0x4a>
 800bf18:	68d4      	ldr	r4, [r2, #12]
 800bf1a:	42a2      	cmp	r2, r4
 800bf1c:	d010      	beq.n	800bf40 <_malloc_r+0x6c>
 800bf1e:	6863      	ldr	r3, [r4, #4]
 800bf20:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800bf24:	f023 0303 	bic.w	r3, r3, #3
 800bf28:	60ca      	str	r2, [r1, #12]
 800bf2a:	4423      	add	r3, r4
 800bf2c:	6091      	str	r1, [r2, #8]
 800bf2e:	685a      	ldr	r2, [r3, #4]
 800bf30:	f042 0201 	orr.w	r2, r2, #1
 800bf34:	605a      	str	r2, [r3, #4]
 800bf36:	4630      	mov	r0, r6
 800bf38:	f000 fa1c 	bl	800c374 <__malloc_unlock>
 800bf3c:	3408      	adds	r4, #8
 800bf3e:	e180      	b.n	800c242 <_malloc_r+0x36e>
 800bf40:	3302      	adds	r3, #2
 800bf42:	4ab1      	ldr	r2, [pc, #708]	; (800c208 <_malloc_r+0x334>)
 800bf44:	693c      	ldr	r4, [r7, #16]
 800bf46:	4294      	cmp	r4, r2
 800bf48:	4611      	mov	r1, r2
 800bf4a:	d075      	beq.n	800c038 <_malloc_r+0x164>
 800bf4c:	6860      	ldr	r0, [r4, #4]
 800bf4e:	f020 0c03 	bic.w	ip, r0, #3
 800bf52:	ebac 0005 	sub.w	r0, ip, r5
 800bf56:	280f      	cmp	r0, #15
 800bf58:	dd48      	ble.n	800bfec <_malloc_r+0x118>
 800bf5a:	1963      	adds	r3, r4, r5
 800bf5c:	f045 0501 	orr.w	r5, r5, #1
 800bf60:	6065      	str	r5, [r4, #4]
 800bf62:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800bf66:	e9c3 2202 	strd	r2, r2, [r3, #8]
 800bf6a:	f040 0201 	orr.w	r2, r0, #1
 800bf6e:	605a      	str	r2, [r3, #4]
 800bf70:	f844 000c 	str.w	r0, [r4, ip]
 800bf74:	e7df      	b.n	800bf36 <_malloc_r+0x62>
 800bf76:	0a6b      	lsrs	r3, r5, #9
 800bf78:	d02a      	beq.n	800bfd0 <_malloc_r+0xfc>
 800bf7a:	2b04      	cmp	r3, #4
 800bf7c:	d812      	bhi.n	800bfa4 <_malloc_r+0xd0>
 800bf7e:	09ab      	lsrs	r3, r5, #6
 800bf80:	3338      	adds	r3, #56	; 0x38
 800bf82:	1c5a      	adds	r2, r3, #1
 800bf84:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800bf88:	f1a2 0c08 	sub.w	ip, r2, #8
 800bf8c:	6854      	ldr	r4, [r2, #4]
 800bf8e:	4564      	cmp	r4, ip
 800bf90:	d006      	beq.n	800bfa0 <_malloc_r+0xcc>
 800bf92:	6862      	ldr	r2, [r4, #4]
 800bf94:	f022 0203 	bic.w	r2, r2, #3
 800bf98:	1b50      	subs	r0, r2, r5
 800bf9a:	280f      	cmp	r0, #15
 800bf9c:	dd1c      	ble.n	800bfd8 <_malloc_r+0x104>
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	e7ce      	b.n	800bf42 <_malloc_r+0x6e>
 800bfa4:	2b14      	cmp	r3, #20
 800bfa6:	d801      	bhi.n	800bfac <_malloc_r+0xd8>
 800bfa8:	335b      	adds	r3, #91	; 0x5b
 800bfaa:	e7ea      	b.n	800bf82 <_malloc_r+0xae>
 800bfac:	2b54      	cmp	r3, #84	; 0x54
 800bfae:	d802      	bhi.n	800bfb6 <_malloc_r+0xe2>
 800bfb0:	0b2b      	lsrs	r3, r5, #12
 800bfb2:	336e      	adds	r3, #110	; 0x6e
 800bfb4:	e7e5      	b.n	800bf82 <_malloc_r+0xae>
 800bfb6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800bfba:	d802      	bhi.n	800bfc2 <_malloc_r+0xee>
 800bfbc:	0beb      	lsrs	r3, r5, #15
 800bfbe:	3377      	adds	r3, #119	; 0x77
 800bfc0:	e7df      	b.n	800bf82 <_malloc_r+0xae>
 800bfc2:	f240 5254 	movw	r2, #1364	; 0x554
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d804      	bhi.n	800bfd4 <_malloc_r+0x100>
 800bfca:	0cab      	lsrs	r3, r5, #18
 800bfcc:	337c      	adds	r3, #124	; 0x7c
 800bfce:	e7d8      	b.n	800bf82 <_malloc_r+0xae>
 800bfd0:	233f      	movs	r3, #63	; 0x3f
 800bfd2:	e7d6      	b.n	800bf82 <_malloc_r+0xae>
 800bfd4:	237e      	movs	r3, #126	; 0x7e
 800bfd6:	e7d4      	b.n	800bf82 <_malloc_r+0xae>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	68e1      	ldr	r1, [r4, #12]
 800bfdc:	db04      	blt.n	800bfe8 <_malloc_r+0x114>
 800bfde:	68a3      	ldr	r3, [r4, #8]
 800bfe0:	60d9      	str	r1, [r3, #12]
 800bfe2:	608b      	str	r3, [r1, #8]
 800bfe4:	18a3      	adds	r3, r4, r2
 800bfe6:	e7a2      	b.n	800bf2e <_malloc_r+0x5a>
 800bfe8:	460c      	mov	r4, r1
 800bfea:	e7d0      	b.n	800bf8e <_malloc_r+0xba>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800bff2:	db07      	blt.n	800c004 <_malloc_r+0x130>
 800bff4:	44a4      	add	ip, r4
 800bff6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800bffa:	f043 0301 	orr.w	r3, r3, #1
 800bffe:	f8cc 3004 	str.w	r3, [ip, #4]
 800c002:	e798      	b.n	800bf36 <_malloc_r+0x62>
 800c004:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f080 8099 	bcs.w	800c140 <_malloc_r+0x26c>
 800c00e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800c012:	ea4f 0eac 	mov.w	lr, ip, asr #2
 800c016:	2201      	movs	r2, #1
 800c018:	f10c 0c01 	add.w	ip, ip, #1
 800c01c:	fa02 f20e 	lsl.w	r2, r2, lr
 800c020:	4310      	orrs	r0, r2
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 800c028:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 800c02c:	3a08      	subs	r2, #8
 800c02e:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800c032:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800c036:	60c4      	str	r4, [r0, #12]
 800c038:	2001      	movs	r0, #1
 800c03a:	109a      	asrs	r2, r3, #2
 800c03c:	fa00 f202 	lsl.w	r2, r0, r2
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	4290      	cmp	r0, r2
 800c044:	d326      	bcc.n	800c094 <_malloc_r+0x1c0>
 800c046:	4210      	tst	r0, r2
 800c048:	d106      	bne.n	800c058 <_malloc_r+0x184>
 800c04a:	f023 0303 	bic.w	r3, r3, #3
 800c04e:	0052      	lsls	r2, r2, #1
 800c050:	4210      	tst	r0, r2
 800c052:	f103 0304 	add.w	r3, r3, #4
 800c056:	d0fa      	beq.n	800c04e <_malloc_r+0x17a>
 800c058:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 800c05c:	46e1      	mov	r9, ip
 800c05e:	4698      	mov	r8, r3
 800c060:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800c064:	454c      	cmp	r4, r9
 800c066:	f040 80af 	bne.w	800c1c8 <_malloc_r+0x2f4>
 800c06a:	f108 0801 	add.w	r8, r8, #1
 800c06e:	f018 0f03 	tst.w	r8, #3
 800c072:	f109 0908 	add.w	r9, r9, #8
 800c076:	d1f3      	bne.n	800c060 <_malloc_r+0x18c>
 800c078:	0798      	lsls	r0, r3, #30
 800c07a:	f040 80e8 	bne.w	800c24e <_malloc_r+0x37a>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	ea23 0302 	bic.w	r3, r3, r2
 800c084:	607b      	str	r3, [r7, #4]
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	0052      	lsls	r2, r2, #1
 800c08a:	4290      	cmp	r0, r2
 800c08c:	d302      	bcc.n	800c094 <_malloc_r+0x1c0>
 800c08e:	2a00      	cmp	r2, #0
 800c090:	f040 80ec 	bne.w	800c26c <_malloc_r+0x398>
 800c094:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800c098:	f8da 4004 	ldr.w	r4, [sl, #4]
 800c09c:	f024 0203 	bic.w	r2, r4, #3
 800c0a0:	42aa      	cmp	r2, r5
 800c0a2:	d303      	bcc.n	800c0ac <_malloc_r+0x1d8>
 800c0a4:	1b53      	subs	r3, r2, r5
 800c0a6:	2b0f      	cmp	r3, #15
 800c0a8:	f300 8140 	bgt.w	800c32c <_malloc_r+0x458>
 800c0ac:	4b57      	ldr	r3, [pc, #348]	; (800c20c <_malloc_r+0x338>)
 800c0ae:	9200      	str	r2, [sp, #0]
 800c0b0:	2008      	movs	r0, #8
 800c0b2:	681c      	ldr	r4, [r3, #0]
 800c0b4:	f000 f9ae 	bl	800c414 <sysconf>
 800c0b8:	4b55      	ldr	r3, [pc, #340]	; (800c210 <_malloc_r+0x33c>)
 800c0ba:	9a00      	ldr	r2, [sp, #0]
 800c0bc:	6819      	ldr	r1, [r3, #0]
 800c0be:	3410      	adds	r4, #16
 800c0c0:	3101      	adds	r1, #1
 800c0c2:	442c      	add	r4, r5
 800c0c4:	bf1f      	itttt	ne
 800c0c6:	f104 34ff 	addne.w	r4, r4, #4294967295
 800c0ca:	1824      	addne	r4, r4, r0
 800c0cc:	4241      	negne	r1, r0
 800c0ce:	400c      	andne	r4, r1
 800c0d0:	4680      	mov	r8, r0
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	e9cd 2300 	strd	r2, r3, [sp]
 800c0da:	f000 f98b 	bl	800c3f4 <_sbrk_r>
 800c0de:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c0e2:	4683      	mov	fp, r0
 800c0e4:	f000 80fb 	beq.w	800c2de <_malloc_r+0x40a>
 800c0e8:	9a00      	ldr	r2, [sp, #0]
 800c0ea:	9b01      	ldr	r3, [sp, #4]
 800c0ec:	eb0a 0102 	add.w	r1, sl, r2
 800c0f0:	4281      	cmp	r1, r0
 800c0f2:	d902      	bls.n	800c0fa <_malloc_r+0x226>
 800c0f4:	45ba      	cmp	sl, r7
 800c0f6:	f040 80f2 	bne.w	800c2de <_malloc_r+0x40a>
 800c0fa:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800c21c <_malloc_r+0x348>
 800c0fe:	f8d9 0000 	ldr.w	r0, [r9]
 800c102:	4559      	cmp	r1, fp
 800c104:	eb00 0e04 	add.w	lr, r0, r4
 800c108:	f8c9 e000 	str.w	lr, [r9]
 800c10c:	f108 3cff 	add.w	ip, r8, #4294967295
 800c110:	f040 80ae 	bne.w	800c270 <_malloc_r+0x39c>
 800c114:	ea11 0f0c 	tst.w	r1, ip
 800c118:	f040 80aa 	bne.w	800c270 <_malloc_r+0x39c>
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	4414      	add	r4, r2
 800c120:	f044 0401 	orr.w	r4, r4, #1
 800c124:	605c      	str	r4, [r3, #4]
 800c126:	4a3b      	ldr	r2, [pc, #236]	; (800c214 <_malloc_r+0x340>)
 800c128:	f8d9 3000 	ldr.w	r3, [r9]
 800c12c:	6811      	ldr	r1, [r2, #0]
 800c12e:	428b      	cmp	r3, r1
 800c130:	bf88      	it	hi
 800c132:	6013      	strhi	r3, [r2, #0]
 800c134:	4a38      	ldr	r2, [pc, #224]	; (800c218 <_malloc_r+0x344>)
 800c136:	6811      	ldr	r1, [r2, #0]
 800c138:	428b      	cmp	r3, r1
 800c13a:	bf88      	it	hi
 800c13c:	6013      	strhi	r3, [r2, #0]
 800c13e:	e0ce      	b.n	800c2de <_malloc_r+0x40a>
 800c140:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800c144:	2a04      	cmp	r2, #4
 800c146:	d818      	bhi.n	800c17a <_malloc_r+0x2a6>
 800c148:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800c14c:	3238      	adds	r2, #56	; 0x38
 800c14e:	f102 0e01 	add.w	lr, r2, #1
 800c152:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 800c156:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 800c15a:	45f0      	cmp	r8, lr
 800c15c:	d12b      	bne.n	800c1b6 <_malloc_r+0x2e2>
 800c15e:	1092      	asrs	r2, r2, #2
 800c160:	f04f 0c01 	mov.w	ip, #1
 800c164:	fa0c f202 	lsl.w	r2, ip, r2
 800c168:	4310      	orrs	r0, r2
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800c170:	f8c8 4008 	str.w	r4, [r8, #8]
 800c174:	f8ce 400c 	str.w	r4, [lr, #12]
 800c178:	e75e      	b.n	800c038 <_malloc_r+0x164>
 800c17a:	2a14      	cmp	r2, #20
 800c17c:	d801      	bhi.n	800c182 <_malloc_r+0x2ae>
 800c17e:	325b      	adds	r2, #91	; 0x5b
 800c180:	e7e5      	b.n	800c14e <_malloc_r+0x27a>
 800c182:	2a54      	cmp	r2, #84	; 0x54
 800c184:	d803      	bhi.n	800c18e <_malloc_r+0x2ba>
 800c186:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800c18a:	326e      	adds	r2, #110	; 0x6e
 800c18c:	e7df      	b.n	800c14e <_malloc_r+0x27a>
 800c18e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800c192:	d803      	bhi.n	800c19c <_malloc_r+0x2c8>
 800c194:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800c198:	3277      	adds	r2, #119	; 0x77
 800c19a:	e7d8      	b.n	800c14e <_malloc_r+0x27a>
 800c19c:	f240 5e54 	movw	lr, #1364	; 0x554
 800c1a0:	4572      	cmp	r2, lr
 800c1a2:	bf9a      	itte	ls
 800c1a4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800c1a8:	327c      	addls	r2, #124	; 0x7c
 800c1aa:	227e      	movhi	r2, #126	; 0x7e
 800c1ac:	e7cf      	b.n	800c14e <_malloc_r+0x27a>
 800c1ae:	f8de e008 	ldr.w	lr, [lr, #8]
 800c1b2:	45f0      	cmp	r8, lr
 800c1b4:	d005      	beq.n	800c1c2 <_malloc_r+0x2ee>
 800c1b6:	f8de 2004 	ldr.w	r2, [lr, #4]
 800c1ba:	f022 0203 	bic.w	r2, r2, #3
 800c1be:	4562      	cmp	r2, ip
 800c1c0:	d8f5      	bhi.n	800c1ae <_malloc_r+0x2da>
 800c1c2:	f8de 800c 	ldr.w	r8, [lr, #12]
 800c1c6:	e7d1      	b.n	800c16c <_malloc_r+0x298>
 800c1c8:	6860      	ldr	r0, [r4, #4]
 800c1ca:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800c1ce:	f020 0003 	bic.w	r0, r0, #3
 800c1d2:	eba0 0a05 	sub.w	sl, r0, r5
 800c1d6:	f1ba 0f0f 	cmp.w	sl, #15
 800c1da:	dd21      	ble.n	800c220 <_malloc_r+0x34c>
 800c1dc:	68a2      	ldr	r2, [r4, #8]
 800c1de:	1963      	adds	r3, r4, r5
 800c1e0:	f045 0501 	orr.w	r5, r5, #1
 800c1e4:	6065      	str	r5, [r4, #4]
 800c1e6:	f8c2 e00c 	str.w	lr, [r2, #12]
 800c1ea:	f8ce 2008 	str.w	r2, [lr, #8]
 800c1ee:	f04a 0201 	orr.w	r2, sl, #1
 800c1f2:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800c1f6:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800c1fa:	605a      	str	r2, [r3, #4]
 800c1fc:	f844 a000 	str.w	sl, [r4, r0]
 800c200:	e699      	b.n	800bf36 <_malloc_r+0x62>
 800c202:	bf00      	nop
 800c204:	20000460 	.word	0x20000460
 800c208:	20000468 	.word	0x20000468
 800c20c:	200049d8 	.word	0x200049d8
 800c210:	20000868 	.word	0x20000868
 800c214:	200049d0 	.word	0x200049d0
 800c218:	200049d4 	.word	0x200049d4
 800c21c:	200049a8 	.word	0x200049a8
 800c220:	f1ba 0f00 	cmp.w	sl, #0
 800c224:	db11      	blt.n	800c24a <_malloc_r+0x376>
 800c226:	4420      	add	r0, r4
 800c228:	6843      	ldr	r3, [r0, #4]
 800c22a:	f043 0301 	orr.w	r3, r3, #1
 800c22e:	6043      	str	r3, [r0, #4]
 800c230:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800c234:	4630      	mov	r0, r6
 800c236:	f8c3 e00c 	str.w	lr, [r3, #12]
 800c23a:	f8ce 3008 	str.w	r3, [lr, #8]
 800c23e:	f000 f899 	bl	800c374 <__malloc_unlock>
 800c242:	4620      	mov	r0, r4
 800c244:	b003      	add	sp, #12
 800c246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c24a:	4674      	mov	r4, lr
 800c24c:	e70a      	b.n	800c064 <_malloc_r+0x190>
 800c24e:	f1ac 0008 	sub.w	r0, ip, #8
 800c252:	f8dc c000 	ldr.w	ip, [ip]
 800c256:	4584      	cmp	ip, r0
 800c258:	f103 33ff 	add.w	r3, r3, #4294967295
 800c25c:	f43f af0c 	beq.w	800c078 <_malloc_r+0x1a4>
 800c260:	e711      	b.n	800c086 <_malloc_r+0x1b2>
 800c262:	3304      	adds	r3, #4
 800c264:	0052      	lsls	r2, r2, #1
 800c266:	4210      	tst	r0, r2
 800c268:	d0fb      	beq.n	800c262 <_malloc_r+0x38e>
 800c26a:	e6f5      	b.n	800c058 <_malloc_r+0x184>
 800c26c:	4643      	mov	r3, r8
 800c26e:	e7fa      	b.n	800c266 <_malloc_r+0x392>
 800c270:	6818      	ldr	r0, [r3, #0]
 800c272:	9200      	str	r2, [sp, #0]
 800c274:	3001      	adds	r0, #1
 800c276:	bf1b      	ittet	ne
 800c278:	ebab 0101 	subne.w	r1, fp, r1
 800c27c:	4471      	addne	r1, lr
 800c27e:	f8c3 b000 	streq.w	fp, [r3]
 800c282:	f8c9 1000 	strne.w	r1, [r9]
 800c286:	f01b 0307 	ands.w	r3, fp, #7
 800c28a:	bf1c      	itt	ne
 800c28c:	f1c3 0308 	rsbne	r3, r3, #8
 800c290:	449b      	addne	fp, r3
 800c292:	445c      	add	r4, fp
 800c294:	4498      	add	r8, r3
 800c296:	ea04 030c 	and.w	r3, r4, ip
 800c29a:	eba8 0803 	sub.w	r8, r8, r3
 800c29e:	4641      	mov	r1, r8
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	f000 f8a7 	bl	800c3f4 <_sbrk_r>
 800c2a6:	1c43      	adds	r3, r0, #1
 800c2a8:	bf04      	itt	eq
 800c2aa:	4658      	moveq	r0, fp
 800c2ac:	f04f 0800 	moveq.w	r8, #0
 800c2b0:	f8d9 3000 	ldr.w	r3, [r9]
 800c2b4:	f8c7 b008 	str.w	fp, [r7, #8]
 800c2b8:	eba0 000b 	sub.w	r0, r0, fp
 800c2bc:	4440      	add	r0, r8
 800c2be:	4443      	add	r3, r8
 800c2c0:	f040 0001 	orr.w	r0, r0, #1
 800c2c4:	45ba      	cmp	sl, r7
 800c2c6:	9a00      	ldr	r2, [sp, #0]
 800c2c8:	f8c9 3000 	str.w	r3, [r9]
 800c2cc:	f8cb 0004 	str.w	r0, [fp, #4]
 800c2d0:	f43f af29 	beq.w	800c126 <_malloc_r+0x252>
 800c2d4:	2a0f      	cmp	r2, #15
 800c2d6:	d810      	bhi.n	800c2fa <_malloc_r+0x426>
 800c2d8:	2301      	movs	r3, #1
 800c2da:	f8cb 3004 	str.w	r3, [fp, #4]
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	685a      	ldr	r2, [r3, #4]
 800c2e2:	f022 0203 	bic.w	r2, r2, #3
 800c2e6:	42aa      	cmp	r2, r5
 800c2e8:	eba2 0305 	sub.w	r3, r2, r5
 800c2ec:	d301      	bcc.n	800c2f2 <_malloc_r+0x41e>
 800c2ee:	2b0f      	cmp	r3, #15
 800c2f0:	dc1c      	bgt.n	800c32c <_malloc_r+0x458>
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	f000 f83e 	bl	800c374 <__malloc_unlock>
 800c2f8:	e5f8      	b.n	800beec <_malloc_r+0x18>
 800c2fa:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c2fe:	f1a2 040c 	sub.w	r4, r2, #12
 800c302:	f024 0407 	bic.w	r4, r4, #7
 800c306:	f003 0301 	and.w	r3, r3, #1
 800c30a:	4323      	orrs	r3, r4
 800c30c:	f8ca 3004 	str.w	r3, [sl, #4]
 800c310:	2205      	movs	r2, #5
 800c312:	eb0a 0304 	add.w	r3, sl, r4
 800c316:	2c0f      	cmp	r4, #15
 800c318:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800c31c:	f67f af03 	bls.w	800c126 <_malloc_r+0x252>
 800c320:	f10a 0108 	add.w	r1, sl, #8
 800c324:	4630      	mov	r0, r6
 800c326:	f002 fb79 	bl	800ea1c <_free_r>
 800c32a:	e6fc      	b.n	800c126 <_malloc_r+0x252>
 800c32c:	68bc      	ldr	r4, [r7, #8]
 800c32e:	f045 0201 	orr.w	r2, r5, #1
 800c332:	4425      	add	r5, r4
 800c334:	f043 0301 	orr.w	r3, r3, #1
 800c338:	6062      	str	r2, [r4, #4]
 800c33a:	60bd      	str	r5, [r7, #8]
 800c33c:	606b      	str	r3, [r5, #4]
 800c33e:	e5fa      	b.n	800bf36 <_malloc_r+0x62>

0800c340 <memcpy>:
 800c340:	b510      	push	{r4, lr}
 800c342:	1e43      	subs	r3, r0, #1
 800c344:	440a      	add	r2, r1
 800c346:	4291      	cmp	r1, r2
 800c348:	d100      	bne.n	800c34c <memcpy+0xc>
 800c34a:	bd10      	pop	{r4, pc}
 800c34c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c350:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c354:	e7f7      	b.n	800c346 <memcpy+0x6>

0800c356 <memset>:
 800c356:	4402      	add	r2, r0
 800c358:	4603      	mov	r3, r0
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d100      	bne.n	800c360 <memset+0xa>
 800c35e:	4770      	bx	lr
 800c360:	f803 1b01 	strb.w	r1, [r3], #1
 800c364:	e7f9      	b.n	800c35a <memset+0x4>
	...

0800c368 <__malloc_lock>:
 800c368:	4801      	ldr	r0, [pc, #4]	; (800c370 <__malloc_lock+0x8>)
 800c36a:	f002 bc53 	b.w	800ec14 <__retarget_lock_acquire_recursive>
 800c36e:	bf00      	nop
 800c370:	2000515c 	.word	0x2000515c

0800c374 <__malloc_unlock>:
 800c374:	4801      	ldr	r0, [pc, #4]	; (800c37c <__malloc_unlock+0x8>)
 800c376:	f002 bc4e 	b.w	800ec16 <__retarget_lock_release_recursive>
 800c37a:	bf00      	nop
 800c37c:	2000515c 	.word	0x2000515c

0800c380 <printf>:
 800c380:	b40f      	push	{r0, r1, r2, r3}
 800c382:	b507      	push	{r0, r1, r2, lr}
 800c384:	4906      	ldr	r1, [pc, #24]	; (800c3a0 <printf+0x20>)
 800c386:	ab04      	add	r3, sp, #16
 800c388:	6808      	ldr	r0, [r1, #0]
 800c38a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c38e:	6881      	ldr	r1, [r0, #8]
 800c390:	9301      	str	r3, [sp, #4]
 800c392:	f000 f869 	bl	800c468 <_vfprintf_r>
 800c396:	b003      	add	sp, #12
 800c398:	f85d eb04 	ldr.w	lr, [sp], #4
 800c39c:	b004      	add	sp, #16
 800c39e:	4770      	bx	lr
 800c3a0:	20000030 	.word	0x20000030

0800c3a4 <srand>:
 800c3a4:	4b03      	ldr	r3, [pc, #12]	; (800c3b4 <srand+0x10>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
 800c3ae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800c3b2:	4770      	bx	lr
 800c3b4:	20000030 	.word	0x20000030

0800c3b8 <rand>:
 800c3b8:	4b0b      	ldr	r3, [pc, #44]	; (800c3e8 <rand+0x30>)
 800c3ba:	480c      	ldr	r0, [pc, #48]	; (800c3ec <rand+0x34>)
 800c3bc:	6819      	ldr	r1, [r3, #0]
 800c3be:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 800c3c2:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
 800c3c6:	b530      	push	{r4, r5, lr}
 800c3c8:	4c09      	ldr	r4, [pc, #36]	; (800c3f0 <rand+0x38>)
 800c3ca:	4350      	muls	r0, r2
 800c3cc:	fb04 0003 	mla	r0, r4, r3, r0
 800c3d0:	fba2 2304 	umull	r2, r3, r2, r4
 800c3d4:	4403      	add	r3, r0
 800c3d6:	1c54      	adds	r4, r2, #1
 800c3d8:	f143 0500 	adc.w	r5, r3, #0
 800c3dc:	e9c1 452a 	strd	r4, r5, [r1, #168]	; 0xa8
 800c3e0:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800c3e4:	bd30      	pop	{r4, r5, pc}
 800c3e6:	bf00      	nop
 800c3e8:	20000030 	.word	0x20000030
 800c3ec:	5851f42d 	.word	0x5851f42d
 800c3f0:	4c957f2d 	.word	0x4c957f2d

0800c3f4 <_sbrk_r>:
 800c3f4:	b538      	push	{r3, r4, r5, lr}
 800c3f6:	4c06      	ldr	r4, [pc, #24]	; (800c410 <_sbrk_r+0x1c>)
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	4605      	mov	r5, r0
 800c3fc:	4608      	mov	r0, r1
 800c3fe:	6023      	str	r3, [r4, #0]
 800c400:	f7f5 fab8 	bl	8001974 <_sbrk>
 800c404:	1c43      	adds	r3, r0, #1
 800c406:	d102      	bne.n	800c40e <_sbrk_r+0x1a>
 800c408:	6823      	ldr	r3, [r4, #0]
 800c40a:	b103      	cbz	r3, 800c40e <_sbrk_r+0x1a>
 800c40c:	602b      	str	r3, [r5, #0]
 800c40e:	bd38      	pop	{r3, r4, r5, pc}
 800c410:	20005164 	.word	0x20005164

0800c414 <sysconf>:
 800c414:	2808      	cmp	r0, #8
 800c416:	b508      	push	{r3, lr}
 800c418:	d006      	beq.n	800c428 <sysconf+0x14>
 800c41a:	f7ff fd21 	bl	800be60 <__errno>
 800c41e:	2316      	movs	r3, #22
 800c420:	6003      	str	r3, [r0, #0]
 800c422:	f04f 30ff 	mov.w	r0, #4294967295
 800c426:	bd08      	pop	{r3, pc}
 800c428:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c42c:	e7fb      	b.n	800c426 <sysconf+0x12>
	...

0800c430 <time>:
 800c430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c432:	4b0b      	ldr	r3, [pc, #44]	; (800c460 <time+0x30>)
 800c434:	4604      	mov	r4, r0
 800c436:	2200      	movs	r2, #0
 800c438:	4669      	mov	r1, sp
 800c43a:	6818      	ldr	r0, [r3, #0]
 800c43c:	f002 fbc8 	bl	800ebd0 <_gettimeofday_r>
 800c440:	2800      	cmp	r0, #0
 800c442:	da05      	bge.n	800c450 <time+0x20>
 800c444:	f04f 32ff 	mov.w	r2, #4294967295
 800c448:	f04f 33ff 	mov.w	r3, #4294967295
 800c44c:	e9cd 2300 	strd	r2, r3, [sp]
 800c450:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c454:	b10c      	cbz	r4, 800c45a <time+0x2a>
 800c456:	e9c4 0100 	strd	r0, r1, [r4]
 800c45a:	b004      	add	sp, #16
 800c45c:	bd10      	pop	{r4, pc}
 800c45e:	bf00      	nop
 800c460:	20000030 	.word	0x20000030
 800c464:	00000000 	.word	0x00000000

0800c468 <_vfprintf_r>:
 800c468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46c:	b0d3      	sub	sp, #332	; 0x14c
 800c46e:	4688      	mov	r8, r1
 800c470:	4691      	mov	r9, r2
 800c472:	461c      	mov	r4, r3
 800c474:	461e      	mov	r6, r3
 800c476:	4683      	mov	fp, r0
 800c478:	f002 fbbc 	bl	800ebf4 <_localeconv_r>
 800c47c:	6803      	ldr	r3, [r0, #0]
 800c47e:	9316      	str	r3, [sp, #88]	; 0x58
 800c480:	4618      	mov	r0, r3
 800c482:	f7f3 fefd 	bl	8000280 <strlen>
 800c486:	900d      	str	r0, [sp, #52]	; 0x34
 800c488:	f1bb 0f00 	cmp.w	fp, #0
 800c48c:	d005      	beq.n	800c49a <_vfprintf_r+0x32>
 800c48e:	f8db 3038 	ldr.w	r3, [fp, #56]	; 0x38
 800c492:	b913      	cbnz	r3, 800c49a <_vfprintf_r+0x32>
 800c494:	4658      	mov	r0, fp
 800c496:	f002 fa31 	bl	800e8fc <__sinit>
 800c49a:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800c49e:	07d8      	lsls	r0, r3, #31
 800c4a0:	d407      	bmi.n	800c4b2 <_vfprintf_r+0x4a>
 800c4a2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800c4a6:	0599      	lsls	r1, r3, #22
 800c4a8:	d403      	bmi.n	800c4b2 <_vfprintf_r+0x4a>
 800c4aa:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800c4ae:	f002 fbb1 	bl	800ec14 <__retarget_lock_acquire_recursive>
 800c4b2:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 800c4b6:	049a      	lsls	r2, r3, #18
 800c4b8:	d409      	bmi.n	800c4ce <_vfprintf_r+0x66>
 800c4ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c4be:	f8a8 300c 	strh.w	r3, [r8, #12]
 800c4c2:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800c4c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c4ca:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 800c4ce:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800c4d2:	071f      	lsls	r7, r3, #28
 800c4d4:	d502      	bpl.n	800c4dc <_vfprintf_r+0x74>
 800c4d6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c4da:	b9a3      	cbnz	r3, 800c506 <_vfprintf_r+0x9e>
 800c4dc:	4641      	mov	r1, r8
 800c4de:	4658      	mov	r0, fp
 800c4e0:	f001 fa74 	bl	800d9cc <__swsetup_r>
 800c4e4:	b178      	cbz	r0, 800c506 <_vfprintf_r+0x9e>
 800c4e6:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800c4ea:	07dd      	lsls	r5, r3, #31
 800c4ec:	d407      	bmi.n	800c4fe <_vfprintf_r+0x96>
 800c4ee:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800c4f2:	059c      	lsls	r4, r3, #22
 800c4f4:	d403      	bmi.n	800c4fe <_vfprintf_r+0x96>
 800c4f6:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800c4fa:	f002 fb8c 	bl	800ec16 <__retarget_lock_release_recursive>
 800c4fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c502:	930e      	str	r3, [sp, #56]	; 0x38
 800c504:	e01a      	b.n	800c53c <_vfprintf_r+0xd4>
 800c506:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800c50a:	f003 021a 	and.w	r2, r3, #26
 800c50e:	2a0a      	cmp	r2, #10
 800c510:	d118      	bne.n	800c544 <_vfprintf_r+0xdc>
 800c512:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 800c516:	2a00      	cmp	r2, #0
 800c518:	db14      	blt.n	800c544 <_vfprintf_r+0xdc>
 800c51a:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 800c51e:	07d0      	lsls	r0, r2, #31
 800c520:	d405      	bmi.n	800c52e <_vfprintf_r+0xc6>
 800c522:	0599      	lsls	r1, r3, #22
 800c524:	d403      	bmi.n	800c52e <_vfprintf_r+0xc6>
 800c526:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800c52a:	f002 fb74 	bl	800ec16 <__retarget_lock_release_recursive>
 800c52e:	4623      	mov	r3, r4
 800c530:	464a      	mov	r2, r9
 800c532:	4641      	mov	r1, r8
 800c534:	4658      	mov	r0, fp
 800c536:	f001 fa09 	bl	800d94c <__sbprintf>
 800c53a:	900e      	str	r0, [sp, #56]	; 0x38
 800c53c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c53e:	b053      	add	sp, #332	; 0x14c
 800c540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c544:	ed9f 7bc8 	vldr	d7, [pc, #800]	; 800c868 <_vfprintf_r+0x400>
 800c548:	2300      	movs	r3, #0
 800c54a:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 800c54e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c552:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 800c556:	ac29      	add	r4, sp, #164	; 0xa4
 800c558:	9426      	str	r4, [sp, #152]	; 0x98
 800c55a:	9304      	str	r3, [sp, #16]
 800c55c:	9308      	str	r3, [sp, #32]
 800c55e:	9312      	str	r3, [sp, #72]	; 0x48
 800c560:	9319      	str	r3, [sp, #100]	; 0x64
 800c562:	930e      	str	r3, [sp, #56]	; 0x38
 800c564:	464d      	mov	r5, r9
 800c566:	462b      	mov	r3, r5
 800c568:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c56c:	b112      	cbz	r2, 800c574 <_vfprintf_r+0x10c>
 800c56e:	2a25      	cmp	r2, #37	; 0x25
 800c570:	f040 80e4 	bne.w	800c73c <_vfprintf_r+0x2d4>
 800c574:	ebb5 0709 	subs.w	r7, r5, r9
 800c578:	d00e      	beq.n	800c598 <_vfprintf_r+0x130>
 800c57a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800c57c:	443b      	add	r3, r7
 800c57e:	9328      	str	r3, [sp, #160]	; 0xa0
 800c580:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800c582:	3301      	adds	r3, #1
 800c584:	2b07      	cmp	r3, #7
 800c586:	e9c4 9700 	strd	r9, r7, [r4]
 800c58a:	9327      	str	r3, [sp, #156]	; 0x9c
 800c58c:	f300 80d8 	bgt.w	800c740 <_vfprintf_r+0x2d8>
 800c590:	3408      	adds	r4, #8
 800c592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c594:	443b      	add	r3, r7
 800c596:	930e      	str	r3, [sp, #56]	; 0x38
 800c598:	782b      	ldrb	r3, [r5, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f001 81c2 	beq.w	800d924 <_vfprintf_r+0x14bc>
 800c5a0:	1c6b      	adds	r3, r5, #1
 800c5a2:	930c      	str	r3, [sp, #48]	; 0x30
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800c5aa:	f04f 35ff 	mov.w	r5, #4294967295
 800c5ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5b0:	469a      	mov	sl, r3
 800c5b2:	270a      	movs	r7, #10
 800c5b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	9306      	str	r3, [sp, #24]
 800c5ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5bc:	3301      	adds	r3, #1
 800c5be:	930c      	str	r3, [sp, #48]	; 0x30
 800c5c0:	9b06      	ldr	r3, [sp, #24]
 800c5c2:	3b20      	subs	r3, #32
 800c5c4:	2b5a      	cmp	r3, #90	; 0x5a
 800c5c6:	f200 862f 	bhi.w	800d228 <_vfprintf_r+0xdc0>
 800c5ca:	a201      	add	r2, pc, #4	; (adr r2, 800c5d0 <_vfprintf_r+0x168>)
 800c5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d0:	0800c7d3 	.word	0x0800c7d3
 800c5d4:	0800d229 	.word	0x0800d229
 800c5d8:	0800d229 	.word	0x0800d229
 800c5dc:	0800c7e5 	.word	0x0800c7e5
 800c5e0:	0800d229 	.word	0x0800d229
 800c5e4:	0800d229 	.word	0x0800d229
 800c5e8:	0800d229 	.word	0x0800d229
 800c5ec:	0800c799 	.word	0x0800c799
 800c5f0:	0800d229 	.word	0x0800d229
 800c5f4:	0800d229 	.word	0x0800d229
 800c5f8:	0800c7eb 	.word	0x0800c7eb
 800c5fc:	0800c803 	.word	0x0800c803
 800c600:	0800d229 	.word	0x0800d229
 800c604:	0800c7fd 	.word	0x0800c7fd
 800c608:	0800c807 	.word	0x0800c807
 800c60c:	0800d229 	.word	0x0800d229
 800c610:	0800c83b 	.word	0x0800c83b
 800c614:	0800c841 	.word	0x0800c841
 800c618:	0800c841 	.word	0x0800c841
 800c61c:	0800c841 	.word	0x0800c841
 800c620:	0800c841 	.word	0x0800c841
 800c624:	0800c841 	.word	0x0800c841
 800c628:	0800c841 	.word	0x0800c841
 800c62c:	0800c841 	.word	0x0800c841
 800c630:	0800c841 	.word	0x0800c841
 800c634:	0800c841 	.word	0x0800c841
 800c638:	0800d229 	.word	0x0800d229
 800c63c:	0800d229 	.word	0x0800d229
 800c640:	0800d229 	.word	0x0800d229
 800c644:	0800d229 	.word	0x0800d229
 800c648:	0800d229 	.word	0x0800d229
 800c64c:	0800d229 	.word	0x0800d229
 800c650:	0800d229 	.word	0x0800d229
 800c654:	0800c93f 	.word	0x0800c93f
 800c658:	0800d229 	.word	0x0800d229
 800c65c:	0800c8a9 	.word	0x0800c8a9
 800c660:	0800c8cb 	.word	0x0800c8cb
 800c664:	0800c93f 	.word	0x0800c93f
 800c668:	0800c93f 	.word	0x0800c93f
 800c66c:	0800c93f 	.word	0x0800c93f
 800c670:	0800d229 	.word	0x0800d229
 800c674:	0800d229 	.word	0x0800d229
 800c678:	0800d229 	.word	0x0800d229
 800c67c:	0800d229 	.word	0x0800d229
 800c680:	0800c861 	.word	0x0800c861
 800c684:	0800d229 	.word	0x0800d229
 800c688:	0800d229 	.word	0x0800d229
 800c68c:	0800ce25 	.word	0x0800ce25
 800c690:	0800d229 	.word	0x0800d229
 800c694:	0800d229 	.word	0x0800d229
 800c698:	0800d229 	.word	0x0800d229
 800c69c:	0800ceb1 	.word	0x0800ceb1
 800c6a0:	0800d229 	.word	0x0800d229
 800c6a4:	0800d095 	.word	0x0800d095
 800c6a8:	0800d229 	.word	0x0800d229
 800c6ac:	0800d229 	.word	0x0800d229
 800c6b0:	0800c759 	.word	0x0800c759
 800c6b4:	0800d229 	.word	0x0800d229
 800c6b8:	0800d229 	.word	0x0800d229
 800c6bc:	0800d229 	.word	0x0800d229
 800c6c0:	0800d229 	.word	0x0800d229
 800c6c4:	0800d229 	.word	0x0800d229
 800c6c8:	0800d229 	.word	0x0800d229
 800c6cc:	0800d229 	.word	0x0800d229
 800c6d0:	0800d229 	.word	0x0800d229
 800c6d4:	0800c93f 	.word	0x0800c93f
 800c6d8:	0800d229 	.word	0x0800d229
 800c6dc:	0800c8a9 	.word	0x0800c8a9
 800c6e0:	0800c8cf 	.word	0x0800c8cf
 800c6e4:	0800c93f 	.word	0x0800c93f
 800c6e8:	0800c93f 	.word	0x0800c93f
 800c6ec:	0800c93f 	.word	0x0800c93f
 800c6f0:	0800c875 	.word	0x0800c875
 800c6f4:	0800c8cf 	.word	0x0800c8cf
 800c6f8:	0800c89d 	.word	0x0800c89d
 800c6fc:	0800d229 	.word	0x0800d229
 800c700:	0800c88f 	.word	0x0800c88f
 800c704:	0800d229 	.word	0x0800d229
 800c708:	0800cddf 	.word	0x0800cddf
 800c70c:	0800ce29 	.word	0x0800ce29
 800c710:	0800ce91 	.word	0x0800ce91
 800c714:	0800c89d 	.word	0x0800c89d
 800c718:	0800d229 	.word	0x0800d229
 800c71c:	0800ceb1 	.word	0x0800ceb1
 800c720:	0800c5b5 	.word	0x0800c5b5
 800c724:	0800d099 	.word	0x0800d099
 800c728:	0800d229 	.word	0x0800d229
 800c72c:	0800d229 	.word	0x0800d229
 800c730:	0800d0d7 	.word	0x0800d0d7
 800c734:	0800d229 	.word	0x0800d229
 800c738:	0800c5b5 	.word	0x0800c5b5
 800c73c:	461d      	mov	r5, r3
 800c73e:	e712      	b.n	800c566 <_vfprintf_r+0xfe>
 800c740:	aa26      	add	r2, sp, #152	; 0x98
 800c742:	4641      	mov	r1, r8
 800c744:	4658      	mov	r0, fp
 800c746:	f002 fe11 	bl	800f36c <__sprint_r>
 800c74a:	2800      	cmp	r0, #0
 800c74c:	f040 8161 	bne.w	800ca12 <_vfprintf_r+0x5aa>
 800c750:	ac29      	add	r4, sp, #164	; 0xa4
 800c752:	e71e      	b.n	800c592 <_vfprintf_r+0x12a>
 800c754:	461e      	mov	r6, r3
 800c756:	e72d      	b.n	800c5b4 <_vfprintf_r+0x14c>
 800c758:	4b45      	ldr	r3, [pc, #276]	; (800c870 <_vfprintf_r+0x408>)
 800c75a:	9318      	str	r3, [sp, #96]	; 0x60
 800c75c:	f01a 0f20 	tst.w	sl, #32
 800c760:	f000 84bc 	beq.w	800d0dc <_vfprintf_r+0xc74>
 800c764:	3607      	adds	r6, #7
 800c766:	f026 0607 	bic.w	r6, r6, #7
 800c76a:	f106 0308 	add.w	r3, r6, #8
 800c76e:	e9d6 6700 	ldrd	r6, r7, [r6]
 800c772:	9309      	str	r3, [sp, #36]	; 0x24
 800c774:	f01a 0f01 	tst.w	sl, #1
 800c778:	d00a      	beq.n	800c790 <_vfprintf_r+0x328>
 800c77a:	ea56 0307 	orrs.w	r3, r6, r7
 800c77e:	d007      	beq.n	800c790 <_vfprintf_r+0x328>
 800c780:	2330      	movs	r3, #48	; 0x30
 800c782:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800c786:	9b06      	ldr	r3, [sp, #24]
 800c788:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800c78c:	f04a 0a02 	orr.w	sl, sl, #2
 800c790:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800c794:	2302      	movs	r3, #2
 800c796:	e355      	b.n	800ce44 <_vfprintf_r+0x9dc>
 800c798:	4658      	mov	r0, fp
 800c79a:	f002 fa2b 	bl	800ebf4 <_localeconv_r>
 800c79e:	6843      	ldr	r3, [r0, #4]
 800c7a0:	9319      	str	r3, [sp, #100]	; 0x64
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7f3 fd6c 	bl	8000280 <strlen>
 800c7a8:	9012      	str	r0, [sp, #72]	; 0x48
 800c7aa:	4658      	mov	r0, fp
 800c7ac:	f002 fa22 	bl	800ebf4 <_localeconv_r>
 800c7b0:	6883      	ldr	r3, [r0, #8]
 800c7b2:	9308      	str	r3, [sp, #32]
 800c7b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	f43f aefc 	beq.w	800c5b4 <_vfprintf_r+0x14c>
 800c7bc:	9b08      	ldr	r3, [sp, #32]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f43f aef8 	beq.w	800c5b4 <_vfprintf_r+0x14c>
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f43f aef4 	beq.w	800c5b4 <_vfprintf_r+0x14c>
 800c7cc:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800c7d0:	e6f0      	b.n	800c5b4 <_vfprintf_r+0x14c>
 800c7d2:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	f47f aeec 	bne.w	800c5b4 <_vfprintf_r+0x14c>
 800c7dc:	2320      	movs	r3, #32
 800c7de:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800c7e2:	e6e7      	b.n	800c5b4 <_vfprintf_r+0x14c>
 800c7e4:	f04a 0a01 	orr.w	sl, sl, #1
 800c7e8:	e6e4      	b.n	800c5b4 <_vfprintf_r+0x14c>
 800c7ea:	6832      	ldr	r2, [r6, #0]
 800c7ec:	920f      	str	r2, [sp, #60]	; 0x3c
 800c7ee:	2a00      	cmp	r2, #0
 800c7f0:	f106 0304 	add.w	r3, r6, #4
 800c7f4:	daae      	bge.n	800c754 <_vfprintf_r+0x2ec>
 800c7f6:	4252      	negs	r2, r2
 800c7f8:	920f      	str	r2, [sp, #60]	; 0x3c
 800c7fa:	461e      	mov	r6, r3
 800c7fc:	f04a 0a04 	orr.w	sl, sl, #4
 800c800:	e6d8      	b.n	800c5b4 <_vfprintf_r+0x14c>
 800c802:	232b      	movs	r3, #43	; 0x2b
 800c804:	e7eb      	b.n	800c7de <_vfprintf_r+0x376>
 800c806:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c80a:	7812      	ldrb	r2, [r2, #0]
 800c80c:	9206      	str	r2, [sp, #24]
 800c80e:	2a2a      	cmp	r2, #42	; 0x2a
 800c810:	f103 0301 	add.w	r3, r3, #1
 800c814:	d10f      	bne.n	800c836 <_vfprintf_r+0x3ce>
 800c816:	6835      	ldr	r5, [r6, #0]
 800c818:	930c      	str	r3, [sp, #48]	; 0x30
 800c81a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800c81e:	3604      	adds	r6, #4
 800c820:	e6c8      	b.n	800c5b4 <_vfprintf_r+0x14c>
 800c822:	fb07 2505 	mla	r5, r7, r5, r2
 800c826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c82a:	9206      	str	r2, [sp, #24]
 800c82c:	9a06      	ldr	r2, [sp, #24]
 800c82e:	3a30      	subs	r2, #48	; 0x30
 800c830:	2a09      	cmp	r2, #9
 800c832:	d9f6      	bls.n	800c822 <_vfprintf_r+0x3ba>
 800c834:	e6c3      	b.n	800c5be <_vfprintf_r+0x156>
 800c836:	2500      	movs	r5, #0
 800c838:	e7f8      	b.n	800c82c <_vfprintf_r+0x3c4>
 800c83a:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800c83e:	e6b9      	b.n	800c5b4 <_vfprintf_r+0x14c>
 800c840:	2200      	movs	r2, #0
 800c842:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c844:	920f      	str	r2, [sp, #60]	; 0x3c
 800c846:	9a06      	ldr	r2, [sp, #24]
 800c848:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c84a:	3a30      	subs	r2, #48	; 0x30
 800c84c:	fb07 2201 	mla	r2, r7, r1, r2
 800c850:	920f      	str	r2, [sp, #60]	; 0x3c
 800c852:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c856:	9206      	str	r2, [sp, #24]
 800c858:	3a30      	subs	r2, #48	; 0x30
 800c85a:	2a09      	cmp	r2, #9
 800c85c:	d9f3      	bls.n	800c846 <_vfprintf_r+0x3de>
 800c85e:	e6ae      	b.n	800c5be <_vfprintf_r+0x156>
 800c860:	f04a 0a08 	orr.w	sl, sl, #8
 800c864:	e6a6      	b.n	800c5b4 <_vfprintf_r+0x14c>
 800c866:	bf00      	nop
	...
 800c870:	08010175 	.word	0x08010175
 800c874:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	2b68      	cmp	r3, #104	; 0x68
 800c87a:	bf01      	itttt	eq
 800c87c:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 800c87e:	3301      	addeq	r3, #1
 800c880:	930c      	streq	r3, [sp, #48]	; 0x30
 800c882:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800c886:	bf18      	it	ne
 800c888:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800c88c:	e692      	b.n	800c5b4 <_vfprintf_r+0x14c>
 800c88e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	2b6c      	cmp	r3, #108	; 0x6c
 800c894:	d105      	bne.n	800c8a2 <_vfprintf_r+0x43a>
 800c896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c898:	3301      	adds	r3, #1
 800c89a:	930c      	str	r3, [sp, #48]	; 0x30
 800c89c:	f04a 0a20 	orr.w	sl, sl, #32
 800c8a0:	e688      	b.n	800c5b4 <_vfprintf_r+0x14c>
 800c8a2:	f04a 0a10 	orr.w	sl, sl, #16
 800c8a6:	e685      	b.n	800c5b4 <_vfprintf_r+0x14c>
 800c8a8:	1d33      	adds	r3, r6, #4
 800c8aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	6833      	ldr	r3, [r6, #0]
 800c8b0:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800c8b4:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800c8b8:	9003      	str	r0, [sp, #12]
 800c8ba:	2501      	movs	r5, #1
 800c8bc:	9010      	str	r0, [sp, #64]	; 0x40
 800c8be:	4607      	mov	r7, r0
 800c8c0:	9007      	str	r0, [sp, #28]
 800c8c2:	4606      	mov	r6, r0
 800c8c4:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 800c8c8:	e30b      	b.n	800cee2 <_vfprintf_r+0xa7a>
 800c8ca:	f04a 0a10 	orr.w	sl, sl, #16
 800c8ce:	f01a 0f20 	tst.w	sl, #32
 800c8d2:	d021      	beq.n	800c918 <_vfprintf_r+0x4b0>
 800c8d4:	3607      	adds	r6, #7
 800c8d6:	f026 0607 	bic.w	r6, r6, #7
 800c8da:	f106 0308 	add.w	r3, r6, #8
 800c8de:	e9d6 6700 	ldrd	r6, r7, [r6]
 800c8e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c8e4:	2e00      	cmp	r6, #0
 800c8e6:	f177 0300 	sbcs.w	r3, r7, #0
 800c8ea:	da06      	bge.n	800c8fa <_vfprintf_r+0x492>
 800c8ec:	4276      	negs	r6, r6
 800c8ee:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800c8f2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800c8f6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800c8fa:	1c6b      	adds	r3, r5, #1
 800c8fc:	f040 8401 	bne.w	800d102 <_vfprintf_r+0xc9a>
 800c900:	2f00      	cmp	r7, #0
 800c902:	bf08      	it	eq
 800c904:	2e0a      	cmpeq	r6, #10
 800c906:	f080 8431 	bcs.w	800d16c <_vfprintf_r+0xd04>
 800c90a:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 800c90e:	3630      	adds	r6, #48	; 0x30
 800c910:	f809 6d01 	strb.w	r6, [r9, #-1]!
 800c914:	f000 bc18 	b.w	800d148 <_vfprintf_r+0xce0>
 800c918:	1d33      	adds	r3, r6, #4
 800c91a:	f01a 0f10 	tst.w	sl, #16
 800c91e:	9309      	str	r3, [sp, #36]	; 0x24
 800c920:	d002      	beq.n	800c928 <_vfprintf_r+0x4c0>
 800c922:	6836      	ldr	r6, [r6, #0]
 800c924:	17f7      	asrs	r7, r6, #31
 800c926:	e7dd      	b.n	800c8e4 <_vfprintf_r+0x47c>
 800c928:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c92c:	6836      	ldr	r6, [r6, #0]
 800c92e:	d001      	beq.n	800c934 <_vfprintf_r+0x4cc>
 800c930:	b236      	sxth	r6, r6
 800c932:	e7f7      	b.n	800c924 <_vfprintf_r+0x4bc>
 800c934:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800c938:	bf18      	it	ne
 800c93a:	b276      	sxtbne	r6, r6
 800c93c:	e7f2      	b.n	800c924 <_vfprintf_r+0x4bc>
 800c93e:	3607      	adds	r6, #7
 800c940:	f026 0607 	bic.w	r6, r6, #7
 800c944:	ed96 7b00 	vldr	d7, [r6]
 800c948:	f106 0308 	add.w	r3, r6, #8
 800c94c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c950:	9309      	str	r3, [sp, #36]	; 0x24
 800c952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c954:	931a      	str	r3, [sp, #104]	; 0x68
 800c956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c958:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c95c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c95e:	f04f 32ff 	mov.w	r2, #4294967295
 800c962:	4bb0      	ldr	r3, [pc, #704]	; (800cc24 <_vfprintf_r+0x7bc>)
 800c964:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800c968:	f7f4 f8e8 	bl	8000b3c <__aeabi_dcmpun>
 800c96c:	b9f8      	cbnz	r0, 800c9ae <_vfprintf_r+0x546>
 800c96e:	f04f 32ff 	mov.w	r2, #4294967295
 800c972:	4bac      	ldr	r3, [pc, #688]	; (800cc24 <_vfprintf_r+0x7bc>)
 800c974:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800c978:	f7f4 f8c2 	bl	8000b00 <__aeabi_dcmple>
 800c97c:	b9b8      	cbnz	r0, 800c9ae <_vfprintf_r+0x546>
 800c97e:	2200      	movs	r2, #0
 800c980:	2300      	movs	r3, #0
 800c982:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c986:	f7f4 f8b1 	bl	8000aec <__aeabi_dcmplt>
 800c98a:	b110      	cbz	r0, 800c992 <_vfprintf_r+0x52a>
 800c98c:	232d      	movs	r3, #45	; 0x2d
 800c98e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800c992:	4aa5      	ldr	r2, [pc, #660]	; (800cc28 <_vfprintf_r+0x7c0>)
 800c994:	4ba5      	ldr	r3, [pc, #660]	; (800cc2c <_vfprintf_r+0x7c4>)
 800c996:	9906      	ldr	r1, [sp, #24]
 800c998:	2947      	cmp	r1, #71	; 0x47
 800c99a:	bfcc      	ite	gt
 800c99c:	4691      	movgt	r9, r2
 800c99e:	4699      	movle	r9, r3
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800c9a6:	9303      	str	r3, [sp, #12]
 800c9a8:	2503      	movs	r5, #3
 800c9aa:	9310      	str	r3, [sp, #64]	; 0x40
 800c9ac:	e3d2      	b.n	800d154 <_vfprintf_r+0xcec>
 800c9ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c9b2:	4610      	mov	r0, r2
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	f7f4 f8c1 	bl	8000b3c <__aeabi_dcmpun>
 800c9ba:	b140      	cbz	r0, 800c9ce <_vfprintf_r+0x566>
 800c9bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9be:	4a9c      	ldr	r2, [pc, #624]	; (800cc30 <_vfprintf_r+0x7c8>)
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	bfbc      	itt	lt
 800c9c4:	232d      	movlt	r3, #45	; 0x2d
 800c9c6:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 800c9ca:	4b9a      	ldr	r3, [pc, #616]	; (800cc34 <_vfprintf_r+0x7cc>)
 800c9cc:	e7e3      	b.n	800c996 <_vfprintf_r+0x52e>
 800c9ce:	9b06      	ldr	r3, [sp, #24]
 800c9d0:	f023 0320 	bic.w	r3, r3, #32
 800c9d4:	2b41      	cmp	r3, #65	; 0x41
 800c9d6:	9307      	str	r3, [sp, #28]
 800c9d8:	d12d      	bne.n	800ca36 <_vfprintf_r+0x5ce>
 800c9da:	2330      	movs	r3, #48	; 0x30
 800c9dc:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800c9e0:	9b06      	ldr	r3, [sp, #24]
 800c9e2:	2b61      	cmp	r3, #97	; 0x61
 800c9e4:	bf14      	ite	ne
 800c9e6:	2358      	movne	r3, #88	; 0x58
 800c9e8:	2378      	moveq	r3, #120	; 0x78
 800c9ea:	2d63      	cmp	r5, #99	; 0x63
 800c9ec:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800c9f0:	f04a 0a02 	orr.w	sl, sl, #2
 800c9f4:	dd2a      	ble.n	800ca4c <_vfprintf_r+0x5e4>
 800c9f6:	1c69      	adds	r1, r5, #1
 800c9f8:	4658      	mov	r0, fp
 800c9fa:	f7ff fa6b 	bl	800bed4 <_malloc_r>
 800c9fe:	4681      	mov	r9, r0
 800ca00:	2800      	cmp	r0, #0
 800ca02:	f040 8121 	bne.w	800cc48 <_vfprintf_r+0x7e0>
 800ca06:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800ca0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca0e:	f8a8 300c 	strh.w	r3, [r8, #12]
 800ca12:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 800ca16:	07d8      	lsls	r0, r3, #31
 800ca18:	d407      	bmi.n	800ca2a <_vfprintf_r+0x5c2>
 800ca1a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800ca1e:	0599      	lsls	r1, r3, #22
 800ca20:	d403      	bmi.n	800ca2a <_vfprintf_r+0x5c2>
 800ca22:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800ca26:	f002 f8f6 	bl	800ec16 <__retarget_lock_release_recursive>
 800ca2a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800ca2e:	065a      	lsls	r2, r3, #25
 800ca30:	f57f ad84 	bpl.w	800c53c <_vfprintf_r+0xd4>
 800ca34:	e563      	b.n	800c4fe <_vfprintf_r+0x96>
 800ca36:	1c6a      	adds	r2, r5, #1
 800ca38:	f000 8108 	beq.w	800cc4c <_vfprintf_r+0x7e4>
 800ca3c:	9b07      	ldr	r3, [sp, #28]
 800ca3e:	2b47      	cmp	r3, #71	; 0x47
 800ca40:	d102      	bne.n	800ca48 <_vfprintf_r+0x5e0>
 800ca42:	2d00      	cmp	r5, #0
 800ca44:	f000 8105 	beq.w	800cc52 <_vfprintf_r+0x7ea>
 800ca48:	9003      	str	r0, [sp, #12]
 800ca4a:	e002      	b.n	800ca52 <_vfprintf_r+0x5ea>
 800ca4c:	9003      	str	r0, [sp, #12]
 800ca4e:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 800ca52:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 800ca56:	9310      	str	r3, [sp, #64]	; 0x40
 800ca58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	f280 80fc 	bge.w	800cc58 <_vfprintf_r+0x7f0>
 800ca60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca62:	9314      	str	r3, [sp, #80]	; 0x50
 800ca64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca66:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ca6a:	9315      	str	r3, [sp, #84]	; 0x54
 800ca6c:	232d      	movs	r3, #45	; 0x2d
 800ca6e:	9313      	str	r3, [sp, #76]	; 0x4c
 800ca70:	9b07      	ldr	r3, [sp, #28]
 800ca72:	2b41      	cmp	r3, #65	; 0x41
 800ca74:	f040 8104 	bne.w	800cc80 <_vfprintf_r+0x818>
 800ca78:	a820      	add	r0, sp, #128	; 0x80
 800ca7a:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800ca7e:	f002 fbe7 	bl	800f250 <frexp>
 800ca82:	2200      	movs	r2, #0
 800ca84:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ca88:	ec51 0b10 	vmov	r0, r1, d0
 800ca8c:	f7f3 fdbc 	bl	8000608 <__aeabi_dmul>
 800ca90:	2200      	movs	r2, #0
 800ca92:	2300      	movs	r3, #0
 800ca94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca98:	f7f4 f81e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca9c:	b108      	cbz	r0, 800caa2 <_vfprintf_r+0x63a>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	9320      	str	r3, [sp, #128]	; 0x80
 800caa2:	4f65      	ldr	r7, [pc, #404]	; (800cc38 <_vfprintf_r+0x7d0>)
 800caa4:	4b65      	ldr	r3, [pc, #404]	; (800cc3c <_vfprintf_r+0x7d4>)
 800caa6:	9a06      	ldr	r2, [sp, #24]
 800caa8:	2a61      	cmp	r2, #97	; 0x61
 800caaa:	bf08      	it	eq
 800caac:	461f      	moveq	r7, r3
 800caae:	9711      	str	r7, [sp, #68]	; 0x44
 800cab0:	464e      	mov	r6, r9
 800cab2:	1e6f      	subs	r7, r5, #1
 800cab4:	2200      	movs	r2, #0
 800cab6:	4b62      	ldr	r3, [pc, #392]	; (800cc40 <_vfprintf_r+0x7d8>)
 800cab8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cabc:	f7f3 fda4 	bl	8000608 <__aeabi_dmul>
 800cac0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cac4:	f7f4 f850 	bl	8000b68 <__aeabi_d2iz>
 800cac8:	901c      	str	r0, [sp, #112]	; 0x70
 800caca:	f7f3 fd33 	bl	8000534 <__aeabi_i2d>
 800cace:	4602      	mov	r2, r0
 800cad0:	460b      	mov	r3, r1
 800cad2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cad6:	f7f3 fbdf 	bl	8000298 <__aeabi_dsub>
 800cada:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cadc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cade:	971d      	str	r7, [sp, #116]	; 0x74
 800cae0:	5c9b      	ldrb	r3, [r3, r2]
 800cae2:	f806 3b01 	strb.w	r3, [r6], #1
 800cae6:	1c7b      	adds	r3, r7, #1
 800cae8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800caec:	d006      	beq.n	800cafc <_vfprintf_r+0x694>
 800caee:	2200      	movs	r2, #0
 800caf0:	2300      	movs	r3, #0
 800caf2:	3f01      	subs	r7, #1
 800caf4:	f7f3 fff0 	bl	8000ad8 <__aeabi_dcmpeq>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	d0db      	beq.n	800cab4 <_vfprintf_r+0x64c>
 800cafc:	2200      	movs	r2, #0
 800cafe:	4b51      	ldr	r3, [pc, #324]	; (800cc44 <_vfprintf_r+0x7dc>)
 800cb00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb04:	f7f4 f810 	bl	8000b28 <__aeabi_dcmpgt>
 800cb08:	b960      	cbnz	r0, 800cb24 <_vfprintf_r+0x6bc>
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	4b4d      	ldr	r3, [pc, #308]	; (800cc44 <_vfprintf_r+0x7dc>)
 800cb0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb12:	f7f3 ffe1 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	f000 80ad 	beq.w	800cc76 <_vfprintf_r+0x80e>
 800cb1c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cb1e:	07df      	lsls	r7, r3, #31
 800cb20:	f140 80a9 	bpl.w	800cc76 <_vfprintf_r+0x80e>
 800cb24:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb26:	9624      	str	r6, [sp, #144]	; 0x90
 800cb28:	7bd9      	ldrb	r1, [r3, #15]
 800cb2a:	2030      	movs	r0, #48	; 0x30
 800cb2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cb2e:	1e53      	subs	r3, r2, #1
 800cb30:	9324      	str	r3, [sp, #144]	; 0x90
 800cb32:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800cb36:	428b      	cmp	r3, r1
 800cb38:	f000 8094 	beq.w	800cc64 <_vfprintf_r+0x7fc>
 800cb3c:	2b39      	cmp	r3, #57	; 0x39
 800cb3e:	bf0b      	itete	eq
 800cb40:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 800cb42:	3301      	addne	r3, #1
 800cb44:	7a9b      	ldrbeq	r3, [r3, #10]
 800cb46:	b2db      	uxtbne	r3, r3
 800cb48:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cb4c:	4633      	mov	r3, r6
 800cb4e:	eba3 0309 	sub.w	r3, r3, r9
 800cb52:	9304      	str	r3, [sp, #16]
 800cb54:	9b07      	ldr	r3, [sp, #28]
 800cb56:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800cb58:	2b47      	cmp	r3, #71	; 0x47
 800cb5a:	f040 80d6 	bne.w	800cd0a <_vfprintf_r+0x8a2>
 800cb5e:	1cf0      	adds	r0, r6, #3
 800cb60:	db02      	blt.n	800cb68 <_vfprintf_r+0x700>
 800cb62:	42b5      	cmp	r5, r6
 800cb64:	f280 80fc 	bge.w	800cd60 <_vfprintf_r+0x8f8>
 800cb68:	9b06      	ldr	r3, [sp, #24]
 800cb6a:	3b02      	subs	r3, #2
 800cb6c:	9306      	str	r3, [sp, #24]
 800cb6e:	9906      	ldr	r1, [sp, #24]
 800cb70:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800cb74:	f021 0120 	bic.w	r1, r1, #32
 800cb78:	2941      	cmp	r1, #65	; 0x41
 800cb7a:	bf08      	it	eq
 800cb7c:	320f      	addeq	r2, #15
 800cb7e:	f106 33ff 	add.w	r3, r6, #4294967295
 800cb82:	bf06      	itte	eq
 800cb84:	b2d2      	uxtbeq	r2, r2
 800cb86:	2101      	moveq	r1, #1
 800cb88:	2100      	movne	r1, #0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	9320      	str	r3, [sp, #128]	; 0x80
 800cb8e:	bfb8      	it	lt
 800cb90:	f1c6 0301 	rsblt	r3, r6, #1
 800cb94:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 800cb98:	bfb4      	ite	lt
 800cb9a:	222d      	movlt	r2, #45	; 0x2d
 800cb9c:	222b      	movge	r2, #43	; 0x2b
 800cb9e:	2b09      	cmp	r3, #9
 800cba0:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 800cba4:	f340 80c8 	ble.w	800cd38 <_vfprintf_r+0x8d0>
 800cba8:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 800cbac:	250a      	movs	r5, #10
 800cbae:	fb93 f0f5 	sdiv	r0, r3, r5
 800cbb2:	fb05 3310 	mls	r3, r5, r0, r3
 800cbb6:	3330      	adds	r3, #48	; 0x30
 800cbb8:	2809      	cmp	r0, #9
 800cbba:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cbbe:	f102 31ff 	add.w	r1, r2, #4294967295
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	f300 80b1 	bgt.w	800cd2a <_vfprintf_r+0x8c2>
 800cbc8:	3330      	adds	r3, #48	; 0x30
 800cbca:	f801 3c01 	strb.w	r3, [r1, #-1]
 800cbce:	3a02      	subs	r2, #2
 800cbd0:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 800cbd4:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 800cbd8:	4282      	cmp	r2, r0
 800cbda:	4619      	mov	r1, r3
 800cbdc:	f0c0 80a7 	bcc.w	800cd2e <_vfprintf_r+0x8c6>
 800cbe0:	9a04      	ldr	r2, [sp, #16]
 800cbe2:	ab22      	add	r3, sp, #136	; 0x88
 800cbe4:	1acb      	subs	r3, r1, r3
 800cbe6:	2a01      	cmp	r2, #1
 800cbe8:	9317      	str	r3, [sp, #92]	; 0x5c
 800cbea:	eb03 0502 	add.w	r5, r3, r2
 800cbee:	dc02      	bgt.n	800cbf6 <_vfprintf_r+0x78e>
 800cbf0:	f01a 0f01 	tst.w	sl, #1
 800cbf4:	d001      	beq.n	800cbfa <_vfprintf_r+0x792>
 800cbf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbf8:	441d      	add	r5, r3
 800cbfa:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 800cbfe:	2700      	movs	r7, #0
 800cc00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc04:	9310      	str	r3, [sp, #64]	; 0x40
 800cc06:	9707      	str	r7, [sp, #28]
 800cc08:	463e      	mov	r6, r7
 800cc0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f000 8317 	beq.w	800d240 <_vfprintf_r+0xdd8>
 800cc12:	232d      	movs	r3, #45	; 0x2d
 800cc14:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800cc18:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	9310      	str	r3, [sp, #64]	; 0x40
 800cc20:	e15f      	b.n	800cee2 <_vfprintf_r+0xa7a>
 800cc22:	bf00      	nop
 800cc24:	7fefffff 	.word	0x7fefffff
 800cc28:	08010158 	.word	0x08010158
 800cc2c:	08010154 	.word	0x08010154
 800cc30:	08010160 	.word	0x08010160
 800cc34:	0801015c 	.word	0x0801015c
 800cc38:	08010175 	.word	0x08010175
 800cc3c:	08010164 	.word	0x08010164
 800cc40:	40300000 	.word	0x40300000
 800cc44:	3fe00000 	.word	0x3fe00000
 800cc48:	9003      	str	r0, [sp, #12]
 800cc4a:	e702      	b.n	800ca52 <_vfprintf_r+0x5ea>
 800cc4c:	9003      	str	r0, [sp, #12]
 800cc4e:	2506      	movs	r5, #6
 800cc50:	e6ff      	b.n	800ca52 <_vfprintf_r+0x5ea>
 800cc52:	9503      	str	r5, [sp, #12]
 800cc54:	2501      	movs	r5, #1
 800cc56:	e6fc      	b.n	800ca52 <_vfprintf_r+0x5ea>
 800cc58:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800cc62:	e704      	b.n	800ca6e <_vfprintf_r+0x606>
 800cc64:	f802 0c01 	strb.w	r0, [r2, #-1]
 800cc68:	e760      	b.n	800cb2c <_vfprintf_r+0x6c4>
 800cc6a:	f803 1b01 	strb.w	r1, [r3], #1
 800cc6e:	1af2      	subs	r2, r6, r3
 800cc70:	2a00      	cmp	r2, #0
 800cc72:	dafa      	bge.n	800cc6a <_vfprintf_r+0x802>
 800cc74:	e76b      	b.n	800cb4e <_vfprintf_r+0x6e6>
 800cc76:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cc78:	4633      	mov	r3, r6
 800cc7a:	2130      	movs	r1, #48	; 0x30
 800cc7c:	4416      	add	r6, r2
 800cc7e:	e7f6      	b.n	800cc6e <_vfprintf_r+0x806>
 800cc80:	9b07      	ldr	r3, [sp, #28]
 800cc82:	2b46      	cmp	r3, #70	; 0x46
 800cc84:	d004      	beq.n	800cc90 <_vfprintf_r+0x828>
 800cc86:	2b45      	cmp	r3, #69	; 0x45
 800cc88:	d13a      	bne.n	800cd00 <_vfprintf_r+0x898>
 800cc8a:	1c6e      	adds	r6, r5, #1
 800cc8c:	2102      	movs	r1, #2
 800cc8e:	e001      	b.n	800cc94 <_vfprintf_r+0x82c>
 800cc90:	462e      	mov	r6, r5
 800cc92:	2103      	movs	r1, #3
 800cc94:	ab24      	add	r3, sp, #144	; 0x90
 800cc96:	9301      	str	r3, [sp, #4]
 800cc98:	ab21      	add	r3, sp, #132	; 0x84
 800cc9a:	9300      	str	r3, [sp, #0]
 800cc9c:	4632      	mov	r2, r6
 800cc9e:	ab20      	add	r3, sp, #128	; 0x80
 800cca0:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800cca4:	4658      	mov	r0, fp
 800cca6:	f000 ff87 	bl	800dbb8 <_dtoa_r>
 800ccaa:	9b07      	ldr	r3, [sp, #28]
 800ccac:	2b47      	cmp	r3, #71	; 0x47
 800ccae:	4681      	mov	r9, r0
 800ccb0:	d102      	bne.n	800ccb8 <_vfprintf_r+0x850>
 800ccb2:	f01a 0f01 	tst.w	sl, #1
 800ccb6:	d026      	beq.n	800cd06 <_vfprintf_r+0x89e>
 800ccb8:	9b07      	ldr	r3, [sp, #28]
 800ccba:	2b46      	cmp	r3, #70	; 0x46
 800ccbc:	eb09 0706 	add.w	r7, r9, r6
 800ccc0:	d10f      	bne.n	800cce2 <_vfprintf_r+0x87a>
 800ccc2:	f899 3000 	ldrb.w	r3, [r9]
 800ccc6:	2b30      	cmp	r3, #48	; 0x30
 800ccc8:	d109      	bne.n	800ccde <_vfprintf_r+0x876>
 800ccca:	2200      	movs	r2, #0
 800cccc:	2300      	movs	r3, #0
 800ccce:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800ccd2:	f7f3 ff01 	bl	8000ad8 <__aeabi_dcmpeq>
 800ccd6:	b910      	cbnz	r0, 800ccde <_vfprintf_r+0x876>
 800ccd8:	f1c6 0601 	rsb	r6, r6, #1
 800ccdc:	9620      	str	r6, [sp, #128]	; 0x80
 800ccde:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cce0:	441f      	add	r7, r3
 800cce2:	2200      	movs	r2, #0
 800cce4:	2300      	movs	r3, #0
 800cce6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800ccea:	f7f3 fef5 	bl	8000ad8 <__aeabi_dcmpeq>
 800ccee:	b948      	cbnz	r0, 800cd04 <_vfprintf_r+0x89c>
 800ccf0:	2230      	movs	r2, #48	; 0x30
 800ccf2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ccf4:	429f      	cmp	r7, r3
 800ccf6:	d906      	bls.n	800cd06 <_vfprintf_r+0x89e>
 800ccf8:	1c59      	adds	r1, r3, #1
 800ccfa:	9124      	str	r1, [sp, #144]	; 0x90
 800ccfc:	701a      	strb	r2, [r3, #0]
 800ccfe:	e7f8      	b.n	800ccf2 <_vfprintf_r+0x88a>
 800cd00:	462e      	mov	r6, r5
 800cd02:	e7c3      	b.n	800cc8c <_vfprintf_r+0x824>
 800cd04:	9724      	str	r7, [sp, #144]	; 0x90
 800cd06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cd08:	e721      	b.n	800cb4e <_vfprintf_r+0x6e6>
 800cd0a:	9b07      	ldr	r3, [sp, #28]
 800cd0c:	2b46      	cmp	r3, #70	; 0x46
 800cd0e:	f47f af2e 	bne.w	800cb6e <_vfprintf_r+0x706>
 800cd12:	2e00      	cmp	r6, #0
 800cd14:	dd1d      	ble.n	800cd52 <_vfprintf_r+0x8ea>
 800cd16:	b915      	cbnz	r5, 800cd1e <_vfprintf_r+0x8b6>
 800cd18:	f01a 0f01 	tst.w	sl, #1
 800cd1c:	d034      	beq.n	800cd88 <_vfprintf_r+0x920>
 800cd1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd20:	18f3      	adds	r3, r6, r3
 800cd22:	441d      	add	r5, r3
 800cd24:	2366      	movs	r3, #102	; 0x66
 800cd26:	9306      	str	r3, [sp, #24]
 800cd28:	e033      	b.n	800cd92 <_vfprintf_r+0x92a>
 800cd2a:	460a      	mov	r2, r1
 800cd2c:	e73f      	b.n	800cbae <_vfprintf_r+0x746>
 800cd2e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800cd32:	f803 1b01 	strb.w	r1, [r3], #1
 800cd36:	e74f      	b.n	800cbd8 <_vfprintf_r+0x770>
 800cd38:	b941      	cbnz	r1, 800cd4c <_vfprintf_r+0x8e4>
 800cd3a:	2230      	movs	r2, #48	; 0x30
 800cd3c:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 800cd40:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 800cd44:	3330      	adds	r3, #48	; 0x30
 800cd46:	1c51      	adds	r1, r2, #1
 800cd48:	7013      	strb	r3, [r2, #0]
 800cd4a:	e749      	b.n	800cbe0 <_vfprintf_r+0x778>
 800cd4c:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 800cd50:	e7f8      	b.n	800cd44 <_vfprintf_r+0x8dc>
 800cd52:	b915      	cbnz	r5, 800cd5a <_vfprintf_r+0x8f2>
 800cd54:	f01a 0f01 	tst.w	sl, #1
 800cd58:	d018      	beq.n	800cd8c <_vfprintf_r+0x924>
 800cd5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	e7e0      	b.n	800cd22 <_vfprintf_r+0x8ba>
 800cd60:	9b04      	ldr	r3, [sp, #16]
 800cd62:	42b3      	cmp	r3, r6
 800cd64:	dc06      	bgt.n	800cd74 <_vfprintf_r+0x90c>
 800cd66:	f01a 0f01 	tst.w	sl, #1
 800cd6a:	d025      	beq.n	800cdb8 <_vfprintf_r+0x950>
 800cd6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd6e:	18f5      	adds	r5, r6, r3
 800cd70:	2367      	movs	r3, #103	; 0x67
 800cd72:	e7d8      	b.n	800cd26 <_vfprintf_r+0x8be>
 800cd74:	9b04      	ldr	r3, [sp, #16]
 800cd76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd78:	2e00      	cmp	r6, #0
 800cd7a:	eb03 0502 	add.w	r5, r3, r2
 800cd7e:	dcf7      	bgt.n	800cd70 <_vfprintf_r+0x908>
 800cd80:	f1c6 0301 	rsb	r3, r6, #1
 800cd84:	441d      	add	r5, r3
 800cd86:	e7f3      	b.n	800cd70 <_vfprintf_r+0x908>
 800cd88:	4635      	mov	r5, r6
 800cd8a:	e7cb      	b.n	800cd24 <_vfprintf_r+0x8bc>
 800cd8c:	2366      	movs	r3, #102	; 0x66
 800cd8e:	9306      	str	r3, [sp, #24]
 800cd90:	2501      	movs	r5, #1
 800cd92:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 800cd96:	9307      	str	r3, [sp, #28]
 800cd98:	d01f      	beq.n	800cdda <_vfprintf_r+0x972>
 800cd9a:	2700      	movs	r7, #0
 800cd9c:	2e00      	cmp	r6, #0
 800cd9e:	9707      	str	r7, [sp, #28]
 800cda0:	f77f af33 	ble.w	800cc0a <_vfprintf_r+0x7a2>
 800cda4:	9b08      	ldr	r3, [sp, #32]
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	2bff      	cmp	r3, #255	; 0xff
 800cdaa:	d107      	bne.n	800cdbc <_vfprintf_r+0x954>
 800cdac:	9b07      	ldr	r3, [sp, #28]
 800cdae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cdb0:	443b      	add	r3, r7
 800cdb2:	fb02 5503 	mla	r5, r2, r3, r5
 800cdb6:	e728      	b.n	800cc0a <_vfprintf_r+0x7a2>
 800cdb8:	4635      	mov	r5, r6
 800cdba:	e7d9      	b.n	800cd70 <_vfprintf_r+0x908>
 800cdbc:	42b3      	cmp	r3, r6
 800cdbe:	daf5      	bge.n	800cdac <_vfprintf_r+0x944>
 800cdc0:	1af6      	subs	r6, r6, r3
 800cdc2:	9b08      	ldr	r3, [sp, #32]
 800cdc4:	785b      	ldrb	r3, [r3, #1]
 800cdc6:	b133      	cbz	r3, 800cdd6 <_vfprintf_r+0x96e>
 800cdc8:	9b07      	ldr	r3, [sp, #28]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	9307      	str	r3, [sp, #28]
 800cdce:	9b08      	ldr	r3, [sp, #32]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	9308      	str	r3, [sp, #32]
 800cdd4:	e7e6      	b.n	800cda4 <_vfprintf_r+0x93c>
 800cdd6:	3701      	adds	r7, #1
 800cdd8:	e7e4      	b.n	800cda4 <_vfprintf_r+0x93c>
 800cdda:	9f07      	ldr	r7, [sp, #28]
 800cddc:	e715      	b.n	800cc0a <_vfprintf_r+0x7a2>
 800cdde:	4632      	mov	r2, r6
 800cde0:	f01a 0f20 	tst.w	sl, #32
 800cde4:	f852 3b04 	ldr.w	r3, [r2], #4
 800cde8:	9209      	str	r2, [sp, #36]	; 0x24
 800cdea:	d009      	beq.n	800ce00 <_vfprintf_r+0x998>
 800cdec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdee:	4610      	mov	r0, r2
 800cdf0:	17d1      	asrs	r1, r2, #31
 800cdf2:	e9c3 0100 	strd	r0, r1, [r3]
 800cdf6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cdf8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800cdfc:	f7ff bbb2 	b.w	800c564 <_vfprintf_r+0xfc>
 800ce00:	f01a 0f10 	tst.w	sl, #16
 800ce04:	d002      	beq.n	800ce0c <_vfprintf_r+0x9a4>
 800ce06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce08:	601a      	str	r2, [r3, #0]
 800ce0a:	e7f4      	b.n	800cdf6 <_vfprintf_r+0x98e>
 800ce0c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800ce10:	d002      	beq.n	800ce18 <_vfprintf_r+0x9b0>
 800ce12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce14:	801a      	strh	r2, [r3, #0]
 800ce16:	e7ee      	b.n	800cdf6 <_vfprintf_r+0x98e>
 800ce18:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800ce1c:	d0f3      	beq.n	800ce06 <_vfprintf_r+0x99e>
 800ce1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce20:	701a      	strb	r2, [r3, #0]
 800ce22:	e7e8      	b.n	800cdf6 <_vfprintf_r+0x98e>
 800ce24:	f04a 0a10 	orr.w	sl, sl, #16
 800ce28:	f01a 0f20 	tst.w	sl, #32
 800ce2c:	d01e      	beq.n	800ce6c <_vfprintf_r+0xa04>
 800ce2e:	3607      	adds	r6, #7
 800ce30:	f026 0607 	bic.w	r6, r6, #7
 800ce34:	f106 0308 	add.w	r3, r6, #8
 800ce38:	e9d6 6700 	ldrd	r6, r7, [r6]
 800ce3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce3e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800ce42:	2300      	movs	r3, #0
 800ce44:	2200      	movs	r2, #0
 800ce46:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 800ce4a:	1c6a      	adds	r2, r5, #1
 800ce4c:	f000 815c 	beq.w	800d108 <_vfprintf_r+0xca0>
 800ce50:	4652      	mov	r2, sl
 800ce52:	ea56 0107 	orrs.w	r1, r6, r7
 800ce56:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800ce5a:	f040 8155 	bne.w	800d108 <_vfprintf_r+0xca0>
 800ce5e:	2d00      	cmp	r5, #0
 800ce60:	f000 81d8 	beq.w	800d214 <_vfprintf_r+0xdac>
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	f040 8152 	bne.w	800d10e <_vfprintf_r+0xca6>
 800ce6a:	e54e      	b.n	800c90a <_vfprintf_r+0x4a2>
 800ce6c:	1d33      	adds	r3, r6, #4
 800ce6e:	f01a 0f10 	tst.w	sl, #16
 800ce72:	9309      	str	r3, [sp, #36]	; 0x24
 800ce74:	d001      	beq.n	800ce7a <_vfprintf_r+0xa12>
 800ce76:	6836      	ldr	r6, [r6, #0]
 800ce78:	e003      	b.n	800ce82 <_vfprintf_r+0xa1a>
 800ce7a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800ce7e:	d002      	beq.n	800ce86 <_vfprintf_r+0xa1e>
 800ce80:	8836      	ldrh	r6, [r6, #0]
 800ce82:	2700      	movs	r7, #0
 800ce84:	e7db      	b.n	800ce3e <_vfprintf_r+0x9d6>
 800ce86:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800ce8a:	d0f4      	beq.n	800ce76 <_vfprintf_r+0xa0e>
 800ce8c:	7836      	ldrb	r6, [r6, #0]
 800ce8e:	e7f8      	b.n	800ce82 <_vfprintf_r+0xa1a>
 800ce90:	1d33      	adds	r3, r6, #4
 800ce92:	9309      	str	r3, [sp, #36]	; 0x24
 800ce94:	f647 0330 	movw	r3, #30768	; 0x7830
 800ce98:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 800ce9c:	2278      	movs	r2, #120	; 0x78
 800ce9e:	4bb0      	ldr	r3, [pc, #704]	; (800d160 <_vfprintf_r+0xcf8>)
 800cea0:	9318      	str	r3, [sp, #96]	; 0x60
 800cea2:	6836      	ldr	r6, [r6, #0]
 800cea4:	9206      	str	r2, [sp, #24]
 800cea6:	2700      	movs	r7, #0
 800cea8:	f04a 0a02 	orr.w	sl, sl, #2
 800ceac:	2302      	movs	r3, #2
 800ceae:	e7c9      	b.n	800ce44 <_vfprintf_r+0x9dc>
 800ceb0:	1d33      	adds	r3, r6, #4
 800ceb2:	f8d6 9000 	ldr.w	r9, [r6]
 800ceb6:	9309      	str	r3, [sp, #36]	; 0x24
 800ceb8:	2600      	movs	r6, #0
 800ceba:	1c69      	adds	r1, r5, #1
 800cebc:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 800cec0:	f000 80e1 	beq.w	800d086 <_vfprintf_r+0xc1e>
 800cec4:	462a      	mov	r2, r5
 800cec6:	4631      	mov	r1, r6
 800cec8:	4648      	mov	r0, r9
 800ceca:	f7f3 f989 	bl	80001e0 <memchr>
 800cece:	9003      	str	r0, [sp, #12]
 800ced0:	2800      	cmp	r0, #0
 800ced2:	f000 81b9 	beq.w	800d248 <_vfprintf_r+0xde0>
 800ced6:	eba0 0509 	sub.w	r5, r0, r9
 800ceda:	9603      	str	r6, [sp, #12]
 800cedc:	9610      	str	r6, [sp, #64]	; 0x40
 800cede:	4637      	mov	r7, r6
 800cee0:	9607      	str	r6, [sp, #28]
 800cee2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cee4:	42ab      	cmp	r3, r5
 800cee6:	bfb8      	it	lt
 800cee8:	462b      	movlt	r3, r5
 800ceea:	9311      	str	r3, [sp, #68]	; 0x44
 800ceec:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800cef0:	b113      	cbz	r3, 800cef8 <_vfprintf_r+0xa90>
 800cef2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cef4:	3301      	adds	r3, #1
 800cef6:	9311      	str	r3, [sp, #68]	; 0x44
 800cef8:	f01a 0302 	ands.w	r3, sl, #2
 800cefc:	931c      	str	r3, [sp, #112]	; 0x70
 800cefe:	bf1e      	ittt	ne
 800cf00:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 800cf02:	3302      	addne	r3, #2
 800cf04:	9311      	strne	r3, [sp, #68]	; 0x44
 800cf06:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800cf0a:	931d      	str	r3, [sp, #116]	; 0x74
 800cf0c:	d122      	bne.n	800cf54 <_vfprintf_r+0xaec>
 800cf0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cf12:	1a9b      	subs	r3, r3, r2
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf18:	dd1c      	ble.n	800cf54 <_vfprintf_r+0xaec>
 800cf1a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cf1c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800cf20:	2810      	cmp	r0, #16
 800cf22:	4890      	ldr	r0, [pc, #576]	; (800d164 <_vfprintf_r+0xcfc>)
 800cf24:	6020      	str	r0, [r4, #0]
 800cf26:	f102 0201 	add.w	r2, r2, #1
 800cf2a:	f104 0108 	add.w	r1, r4, #8
 800cf2e:	f300 818e 	bgt.w	800d24e <_vfprintf_r+0xde6>
 800cf32:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cf34:	6060      	str	r0, [r4, #4]
 800cf36:	4403      	add	r3, r0
 800cf38:	2a07      	cmp	r2, #7
 800cf3a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800cf3e:	f340 819b 	ble.w	800d278 <_vfprintf_r+0xe10>
 800cf42:	aa26      	add	r2, sp, #152	; 0x98
 800cf44:	4641      	mov	r1, r8
 800cf46:	4658      	mov	r0, fp
 800cf48:	f002 fa10 	bl	800f36c <__sprint_r>
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	f040 84c7 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800cf52:	ac29      	add	r4, sp, #164	; 0xa4
 800cf54:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800cf58:	b173      	cbz	r3, 800cf78 <_vfprintf_r+0xb10>
 800cf5a:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 800cf5e:	6023      	str	r3, [r4, #0]
 800cf60:	2301      	movs	r3, #1
 800cf62:	6063      	str	r3, [r4, #4]
 800cf64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800cf66:	3301      	adds	r3, #1
 800cf68:	9328      	str	r3, [sp, #160]	; 0xa0
 800cf6a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	2b07      	cmp	r3, #7
 800cf70:	9327      	str	r3, [sp, #156]	; 0x9c
 800cf72:	f300 8183 	bgt.w	800d27c <_vfprintf_r+0xe14>
 800cf76:	3408      	adds	r4, #8
 800cf78:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cf7a:	b16b      	cbz	r3, 800cf98 <_vfprintf_r+0xb30>
 800cf7c:	ab1f      	add	r3, sp, #124	; 0x7c
 800cf7e:	6023      	str	r3, [r4, #0]
 800cf80:	2302      	movs	r3, #2
 800cf82:	6063      	str	r3, [r4, #4]
 800cf84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800cf86:	3302      	adds	r3, #2
 800cf88:	9328      	str	r3, [sp, #160]	; 0xa0
 800cf8a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	2b07      	cmp	r3, #7
 800cf90:	9327      	str	r3, [sp, #156]	; 0x9c
 800cf92:	f300 817d 	bgt.w	800d290 <_vfprintf_r+0xe28>
 800cf96:	3408      	adds	r4, #8
 800cf98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf9a:	2b80      	cmp	r3, #128	; 0x80
 800cf9c:	d122      	bne.n	800cfe4 <_vfprintf_r+0xb7c>
 800cf9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cfa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cfa2:	1a9b      	subs	r3, r3, r2
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	9313      	str	r3, [sp, #76]	; 0x4c
 800cfa8:	dd1c      	ble.n	800cfe4 <_vfprintf_r+0xb7c>
 800cfaa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cfac:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800cfb0:	2810      	cmp	r0, #16
 800cfb2:	486d      	ldr	r0, [pc, #436]	; (800d168 <_vfprintf_r+0xd00>)
 800cfb4:	6020      	str	r0, [r4, #0]
 800cfb6:	f102 0201 	add.w	r2, r2, #1
 800cfba:	f104 0108 	add.w	r1, r4, #8
 800cfbe:	f300 8171 	bgt.w	800d2a4 <_vfprintf_r+0xe3c>
 800cfc2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cfc4:	6060      	str	r0, [r4, #4]
 800cfc6:	4403      	add	r3, r0
 800cfc8:	2a07      	cmp	r2, #7
 800cfca:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800cfce:	f340 817e 	ble.w	800d2ce <_vfprintf_r+0xe66>
 800cfd2:	aa26      	add	r2, sp, #152	; 0x98
 800cfd4:	4641      	mov	r1, r8
 800cfd6:	4658      	mov	r0, fp
 800cfd8:	f002 f9c8 	bl	800f36c <__sprint_r>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	f040 847f 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800cfe2:	ac29      	add	r4, sp, #164	; 0xa4
 800cfe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cfe6:	1b5b      	subs	r3, r3, r5
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	9310      	str	r3, [sp, #64]	; 0x40
 800cfec:	dd1c      	ble.n	800d028 <_vfprintf_r+0xbc0>
 800cfee:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cff0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800cff4:	2810      	cmp	r0, #16
 800cff6:	485c      	ldr	r0, [pc, #368]	; (800d168 <_vfprintf_r+0xd00>)
 800cff8:	6020      	str	r0, [r4, #0]
 800cffa:	f102 0201 	add.w	r2, r2, #1
 800cffe:	f104 0108 	add.w	r1, r4, #8
 800d002:	f300 8166 	bgt.w	800d2d2 <_vfprintf_r+0xe6a>
 800d006:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d008:	6060      	str	r0, [r4, #4]
 800d00a:	4403      	add	r3, r0
 800d00c:	2a07      	cmp	r2, #7
 800d00e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800d012:	f340 8173 	ble.w	800d2fc <_vfprintf_r+0xe94>
 800d016:	aa26      	add	r2, sp, #152	; 0x98
 800d018:	4641      	mov	r1, r8
 800d01a:	4658      	mov	r0, fp
 800d01c:	f002 f9a6 	bl	800f36c <__sprint_r>
 800d020:	2800      	cmp	r0, #0
 800d022:	f040 845d 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d026:	ac29      	add	r4, sp, #164	; 0xa4
 800d028:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d02a:	9310      	str	r3, [sp, #64]	; 0x40
 800d02c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d030:	f040 8166 	bne.w	800d300 <_vfprintf_r+0xe98>
 800d034:	e9c4 9500 	strd	r9, r5, [r4]
 800d038:	441d      	add	r5, r3
 800d03a:	9528      	str	r5, [sp, #160]	; 0xa0
 800d03c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d03e:	3301      	adds	r3, #1
 800d040:	2b07      	cmp	r3, #7
 800d042:	9327      	str	r3, [sp, #156]	; 0x9c
 800d044:	f300 81a2 	bgt.w	800d38c <_vfprintf_r+0xf24>
 800d048:	3408      	adds	r4, #8
 800d04a:	f01a 0f04 	tst.w	sl, #4
 800d04e:	f040 8429 	bne.w	800d8a4 <_vfprintf_r+0x143c>
 800d052:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800d056:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d058:	428a      	cmp	r2, r1
 800d05a:	bfac      	ite	ge
 800d05c:	189b      	addge	r3, r3, r2
 800d05e:	185b      	addlt	r3, r3, r1
 800d060:	930e      	str	r3, [sp, #56]	; 0x38
 800d062:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d064:	b13b      	cbz	r3, 800d076 <_vfprintf_r+0xc0e>
 800d066:	aa26      	add	r2, sp, #152	; 0x98
 800d068:	4641      	mov	r1, r8
 800d06a:	4658      	mov	r0, fp
 800d06c:	f002 f97e 	bl	800f36c <__sprint_r>
 800d070:	2800      	cmp	r0, #0
 800d072:	f040 8435 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d076:	2300      	movs	r3, #0
 800d078:	9327      	str	r3, [sp, #156]	; 0x9c
 800d07a:	9b03      	ldr	r3, [sp, #12]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f040 844b 	bne.w	800d918 <_vfprintf_r+0x14b0>
 800d082:	ac29      	add	r4, sp, #164	; 0xa4
 800d084:	e6b7      	b.n	800cdf6 <_vfprintf_r+0x98e>
 800d086:	4648      	mov	r0, r9
 800d088:	f7f3 f8fa 	bl	8000280 <strlen>
 800d08c:	9603      	str	r6, [sp, #12]
 800d08e:	4605      	mov	r5, r0
 800d090:	4633      	mov	r3, r6
 800d092:	e48a      	b.n	800c9aa <_vfprintf_r+0x542>
 800d094:	f04a 0a10 	orr.w	sl, sl, #16
 800d098:	f01a 0f20 	tst.w	sl, #32
 800d09c:	d009      	beq.n	800d0b2 <_vfprintf_r+0xc4a>
 800d09e:	3607      	adds	r6, #7
 800d0a0:	f026 0607 	bic.w	r6, r6, #7
 800d0a4:	f106 0308 	add.w	r3, r6, #8
 800d0a8:	e9d6 6700 	ldrd	r6, r7, [r6]
 800d0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e6c8      	b.n	800ce44 <_vfprintf_r+0x9dc>
 800d0b2:	1d33      	adds	r3, r6, #4
 800d0b4:	f01a 0f10 	tst.w	sl, #16
 800d0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ba:	d001      	beq.n	800d0c0 <_vfprintf_r+0xc58>
 800d0bc:	6836      	ldr	r6, [r6, #0]
 800d0be:	e003      	b.n	800d0c8 <_vfprintf_r+0xc60>
 800d0c0:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800d0c4:	d002      	beq.n	800d0cc <_vfprintf_r+0xc64>
 800d0c6:	8836      	ldrh	r6, [r6, #0]
 800d0c8:	2700      	movs	r7, #0
 800d0ca:	e7f0      	b.n	800d0ae <_vfprintf_r+0xc46>
 800d0cc:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800d0d0:	d0f4      	beq.n	800d0bc <_vfprintf_r+0xc54>
 800d0d2:	7836      	ldrb	r6, [r6, #0]
 800d0d4:	e7f8      	b.n	800d0c8 <_vfprintf_r+0xc60>
 800d0d6:	4b22      	ldr	r3, [pc, #136]	; (800d160 <_vfprintf_r+0xcf8>)
 800d0d8:	f7ff bb3f 	b.w	800c75a <_vfprintf_r+0x2f2>
 800d0dc:	1d33      	adds	r3, r6, #4
 800d0de:	f01a 0f10 	tst.w	sl, #16
 800d0e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d0e4:	d001      	beq.n	800d0ea <_vfprintf_r+0xc82>
 800d0e6:	6836      	ldr	r6, [r6, #0]
 800d0e8:	e003      	b.n	800d0f2 <_vfprintf_r+0xc8a>
 800d0ea:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800d0ee:	d003      	beq.n	800d0f8 <_vfprintf_r+0xc90>
 800d0f0:	8836      	ldrh	r6, [r6, #0]
 800d0f2:	2700      	movs	r7, #0
 800d0f4:	f7ff bb3e 	b.w	800c774 <_vfprintf_r+0x30c>
 800d0f8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800d0fc:	d0f3      	beq.n	800d0e6 <_vfprintf_r+0xc7e>
 800d0fe:	7836      	ldrb	r6, [r6, #0]
 800d100:	e7f7      	b.n	800d0f2 <_vfprintf_r+0xc8a>
 800d102:	4652      	mov	r2, sl
 800d104:	2301      	movs	r3, #1
 800d106:	e6a4      	b.n	800ce52 <_vfprintf_r+0x9ea>
 800d108:	2b01      	cmp	r3, #1
 800d10a:	f43f abf9 	beq.w	800c900 <_vfprintf_r+0x498>
 800d10e:	2b02      	cmp	r3, #2
 800d110:	d06e      	beq.n	800d1f0 <_vfprintf_r+0xd88>
 800d112:	ab52      	add	r3, sp, #328	; 0x148
 800d114:	08f1      	lsrs	r1, r6, #3
 800d116:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800d11a:	08f8      	lsrs	r0, r7, #3
 800d11c:	f006 0207 	and.w	r2, r6, #7
 800d120:	4607      	mov	r7, r0
 800d122:	460e      	mov	r6, r1
 800d124:	3230      	adds	r2, #48	; 0x30
 800d126:	ea56 0107 	orrs.w	r1, r6, r7
 800d12a:	f103 39ff 	add.w	r9, r3, #4294967295
 800d12e:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d132:	d113      	bne.n	800d15c <_vfprintf_r+0xcf4>
 800d134:	f01a 0f01 	tst.w	sl, #1
 800d138:	d006      	beq.n	800d148 <_vfprintf_r+0xce0>
 800d13a:	2a30      	cmp	r2, #48	; 0x30
 800d13c:	d004      	beq.n	800d148 <_vfprintf_r+0xce0>
 800d13e:	2230      	movs	r2, #48	; 0x30
 800d140:	f809 2c01 	strb.w	r2, [r9, #-1]
 800d144:	f1a3 0902 	sub.w	r9, r3, #2
 800d148:	ab52      	add	r3, sp, #328	; 0x148
 800d14a:	9510      	str	r5, [sp, #64]	; 0x40
 800d14c:	eba3 0509 	sub.w	r5, r3, r9
 800d150:	2300      	movs	r3, #0
 800d152:	9303      	str	r3, [sp, #12]
 800d154:	461f      	mov	r7, r3
 800d156:	9307      	str	r3, [sp, #28]
 800d158:	461e      	mov	r6, r3
 800d15a:	e6c2      	b.n	800cee2 <_vfprintf_r+0xa7a>
 800d15c:	464b      	mov	r3, r9
 800d15e:	e7d9      	b.n	800d114 <_vfprintf_r+0xcac>
 800d160:	08010164 	.word	0x08010164
 800d164:	08010188 	.word	0x08010188
 800d168:	08010198 	.word	0x08010198
 800d16c:	2300      	movs	r3, #0
 800d16e:	9304      	str	r3, [sp, #16]
 800d170:	ab52      	add	r3, sp, #328	; 0x148
 800d172:	9303      	str	r3, [sp, #12]
 800d174:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 800d178:	9307      	str	r3, [sp, #28]
 800d17a:	9b03      	ldr	r3, [sp, #12]
 800d17c:	220a      	movs	r2, #10
 800d17e:	f103 39ff 	add.w	r9, r3, #4294967295
 800d182:	4630      	mov	r0, r6
 800d184:	2300      	movs	r3, #0
 800d186:	4639      	mov	r1, r7
 800d188:	f7f3 fd16 	bl	8000bb8 <__aeabi_uldivmod>
 800d18c:	9b03      	ldr	r3, [sp, #12]
 800d18e:	3230      	adds	r2, #48	; 0x30
 800d190:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d194:	9b04      	ldr	r3, [sp, #16]
 800d196:	3301      	adds	r3, #1
 800d198:	9304      	str	r3, [sp, #16]
 800d19a:	9b07      	ldr	r3, [sp, #28]
 800d19c:	b1d3      	cbz	r3, 800d1d4 <_vfprintf_r+0xd6c>
 800d19e:	9b08      	ldr	r3, [sp, #32]
 800d1a0:	9a04      	ldr	r2, [sp, #16]
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d115      	bne.n	800d1d4 <_vfprintf_r+0xd6c>
 800d1a8:	2aff      	cmp	r2, #255	; 0xff
 800d1aa:	d013      	beq.n	800d1d4 <_vfprintf_r+0xd6c>
 800d1ac:	2f00      	cmp	r7, #0
 800d1ae:	bf08      	it	eq
 800d1b0:	2e0a      	cmpeq	r6, #10
 800d1b2:	d30f      	bcc.n	800d1d4 <_vfprintf_r+0xd6c>
 800d1b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d1b6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800d1b8:	eba9 0903 	sub.w	r9, r9, r3
 800d1bc:	461a      	mov	r2, r3
 800d1be:	4648      	mov	r0, r9
 800d1c0:	f002 f8bf 	bl	800f342 <strncpy>
 800d1c4:	9b08      	ldr	r3, [sp, #32]
 800d1c6:	785b      	ldrb	r3, [r3, #1]
 800d1c8:	b11b      	cbz	r3, 800d1d2 <_vfprintf_r+0xd6a>
 800d1ca:	9b08      	ldr	r3, [sp, #32]
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	9308      	str	r3, [sp, #32]
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	9304      	str	r3, [sp, #16]
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	4639      	mov	r1, r7
 800d1da:	220a      	movs	r2, #10
 800d1dc:	f7f3 fcec 	bl	8000bb8 <__aeabi_uldivmod>
 800d1e0:	4606      	mov	r6, r0
 800d1e2:	460f      	mov	r7, r1
 800d1e4:	ea56 0307 	orrs.w	r3, r6, r7
 800d1e8:	d0ae      	beq.n	800d148 <_vfprintf_r+0xce0>
 800d1ea:	f8cd 900c 	str.w	r9, [sp, #12]
 800d1ee:	e7c4      	b.n	800d17a <_vfprintf_r+0xd12>
 800d1f0:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 800d1f4:	f006 030f 	and.w	r3, r6, #15
 800d1f8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d1fa:	5cd3      	ldrb	r3, [r2, r3]
 800d1fc:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800d200:	0933      	lsrs	r3, r6, #4
 800d202:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800d206:	093a      	lsrs	r2, r7, #4
 800d208:	461e      	mov	r6, r3
 800d20a:	4617      	mov	r7, r2
 800d20c:	ea56 0307 	orrs.w	r3, r6, r7
 800d210:	d1f0      	bne.n	800d1f4 <_vfprintf_r+0xd8c>
 800d212:	e799      	b.n	800d148 <_vfprintf_r+0xce0>
 800d214:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d195      	bne.n	800d148 <_vfprintf_r+0xce0>
 800d21c:	07d6      	lsls	r6, r2, #31
 800d21e:	bf44      	itt	mi
 800d220:	2330      	movmi	r3, #48	; 0x30
 800d222:	f809 3d01 	strbmi.w	r3, [r9, #-1]!
 800d226:	e78f      	b.n	800d148 <_vfprintf_r+0xce0>
 800d228:	9b06      	ldr	r3, [sp, #24]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	f000 837a 	beq.w	800d924 <_vfprintf_r+0x14bc>
 800d230:	2000      	movs	r0, #0
 800d232:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 800d236:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800d23a:	9609      	str	r6, [sp, #36]	; 0x24
 800d23c:	f7ff bb3c 	b.w	800c8b8 <_vfprintf_r+0x450>
 800d240:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800d244:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d246:	e4ea      	b.n	800cc1e <_vfprintf_r+0x7b6>
 800d248:	9b03      	ldr	r3, [sp, #12]
 800d24a:	f7ff bbae 	b.w	800c9aa <_vfprintf_r+0x542>
 800d24e:	2010      	movs	r0, #16
 800d250:	4403      	add	r3, r0
 800d252:	2a07      	cmp	r2, #7
 800d254:	6060      	str	r0, [r4, #4]
 800d256:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800d25a:	dd08      	ble.n	800d26e <_vfprintf_r+0xe06>
 800d25c:	aa26      	add	r2, sp, #152	; 0x98
 800d25e:	4641      	mov	r1, r8
 800d260:	4658      	mov	r0, fp
 800d262:	f002 f883 	bl	800f36c <__sprint_r>
 800d266:	2800      	cmp	r0, #0
 800d268:	f040 833a 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d26c:	a929      	add	r1, sp, #164	; 0xa4
 800d26e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d270:	3b10      	subs	r3, #16
 800d272:	9313      	str	r3, [sp, #76]	; 0x4c
 800d274:	460c      	mov	r4, r1
 800d276:	e650      	b.n	800cf1a <_vfprintf_r+0xab2>
 800d278:	460c      	mov	r4, r1
 800d27a:	e66b      	b.n	800cf54 <_vfprintf_r+0xaec>
 800d27c:	aa26      	add	r2, sp, #152	; 0x98
 800d27e:	4641      	mov	r1, r8
 800d280:	4658      	mov	r0, fp
 800d282:	f002 f873 	bl	800f36c <__sprint_r>
 800d286:	2800      	cmp	r0, #0
 800d288:	f040 832a 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d28c:	ac29      	add	r4, sp, #164	; 0xa4
 800d28e:	e673      	b.n	800cf78 <_vfprintf_r+0xb10>
 800d290:	aa26      	add	r2, sp, #152	; 0x98
 800d292:	4641      	mov	r1, r8
 800d294:	4658      	mov	r0, fp
 800d296:	f002 f869 	bl	800f36c <__sprint_r>
 800d29a:	2800      	cmp	r0, #0
 800d29c:	f040 8320 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d2a0:	ac29      	add	r4, sp, #164	; 0xa4
 800d2a2:	e679      	b.n	800cf98 <_vfprintf_r+0xb30>
 800d2a4:	2010      	movs	r0, #16
 800d2a6:	4403      	add	r3, r0
 800d2a8:	2a07      	cmp	r2, #7
 800d2aa:	6060      	str	r0, [r4, #4]
 800d2ac:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800d2b0:	dd08      	ble.n	800d2c4 <_vfprintf_r+0xe5c>
 800d2b2:	aa26      	add	r2, sp, #152	; 0x98
 800d2b4:	4641      	mov	r1, r8
 800d2b6:	4658      	mov	r0, fp
 800d2b8:	f002 f858 	bl	800f36c <__sprint_r>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	f040 830f 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d2c2:	a929      	add	r1, sp, #164	; 0xa4
 800d2c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d2c6:	3b10      	subs	r3, #16
 800d2c8:	9313      	str	r3, [sp, #76]	; 0x4c
 800d2ca:	460c      	mov	r4, r1
 800d2cc:	e66d      	b.n	800cfaa <_vfprintf_r+0xb42>
 800d2ce:	460c      	mov	r4, r1
 800d2d0:	e688      	b.n	800cfe4 <_vfprintf_r+0xb7c>
 800d2d2:	2010      	movs	r0, #16
 800d2d4:	4403      	add	r3, r0
 800d2d6:	2a07      	cmp	r2, #7
 800d2d8:	6060      	str	r0, [r4, #4]
 800d2da:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800d2de:	dd08      	ble.n	800d2f2 <_vfprintf_r+0xe8a>
 800d2e0:	aa26      	add	r2, sp, #152	; 0x98
 800d2e2:	4641      	mov	r1, r8
 800d2e4:	4658      	mov	r0, fp
 800d2e6:	f002 f841 	bl	800f36c <__sprint_r>
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	f040 82f8 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d2f0:	a929      	add	r1, sp, #164	; 0xa4
 800d2f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2f4:	3b10      	subs	r3, #16
 800d2f6:	9310      	str	r3, [sp, #64]	; 0x40
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	e678      	b.n	800cfee <_vfprintf_r+0xb86>
 800d2fc:	460c      	mov	r4, r1
 800d2fe:	e693      	b.n	800d028 <_vfprintf_r+0xbc0>
 800d300:	9b06      	ldr	r3, [sp, #24]
 800d302:	2b65      	cmp	r3, #101	; 0x65
 800d304:	f340 8234 	ble.w	800d770 <_vfprintf_r+0x1308>
 800d308:	2200      	movs	r2, #0
 800d30a:	2300      	movs	r3, #0
 800d30c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d310:	f7f3 fbe2 	bl	8000ad8 <__aeabi_dcmpeq>
 800d314:	2800      	cmp	r0, #0
 800d316:	d069      	beq.n	800d3ec <_vfprintf_r+0xf84>
 800d318:	4b6e      	ldr	r3, [pc, #440]	; (800d4d4 <_vfprintf_r+0x106c>)
 800d31a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d31c:	6023      	str	r3, [r4, #0]
 800d31e:	2301      	movs	r3, #1
 800d320:	441d      	add	r5, r3
 800d322:	6063      	str	r3, [r4, #4]
 800d324:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d326:	9528      	str	r5, [sp, #160]	; 0xa0
 800d328:	3301      	adds	r3, #1
 800d32a:	2b07      	cmp	r3, #7
 800d32c:	9327      	str	r3, [sp, #156]	; 0x9c
 800d32e:	dc37      	bgt.n	800d3a0 <_vfprintf_r+0xf38>
 800d330:	3408      	adds	r4, #8
 800d332:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d334:	9a04      	ldr	r2, [sp, #16]
 800d336:	4293      	cmp	r3, r2
 800d338:	db03      	blt.n	800d342 <_vfprintf_r+0xeda>
 800d33a:	f01a 0f01 	tst.w	sl, #1
 800d33e:	f43f ae84 	beq.w	800d04a <_vfprintf_r+0xbe2>
 800d342:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d344:	6023      	str	r3, [r4, #0]
 800d346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d348:	6063      	str	r3, [r4, #4]
 800d34a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d34c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d34e:	4413      	add	r3, r2
 800d350:	9328      	str	r3, [sp, #160]	; 0xa0
 800d352:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d354:	3301      	adds	r3, #1
 800d356:	2b07      	cmp	r3, #7
 800d358:	9327      	str	r3, [sp, #156]	; 0x9c
 800d35a:	dc2b      	bgt.n	800d3b4 <_vfprintf_r+0xf4c>
 800d35c:	3408      	adds	r4, #8
 800d35e:	9b04      	ldr	r3, [sp, #16]
 800d360:	1e5d      	subs	r5, r3, #1
 800d362:	2d00      	cmp	r5, #0
 800d364:	f77f ae71 	ble.w	800d04a <_vfprintf_r+0xbe2>
 800d368:	4e5b      	ldr	r6, [pc, #364]	; (800d4d8 <_vfprintf_r+0x1070>)
 800d36a:	2710      	movs	r7, #16
 800d36c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800d370:	2d10      	cmp	r5, #16
 800d372:	f103 0301 	add.w	r3, r3, #1
 800d376:	f104 0108 	add.w	r1, r4, #8
 800d37a:	6026      	str	r6, [r4, #0]
 800d37c:	dc24      	bgt.n	800d3c8 <_vfprintf_r+0xf60>
 800d37e:	6065      	str	r5, [r4, #4]
 800d380:	2b07      	cmp	r3, #7
 800d382:	4415      	add	r5, r2
 800d384:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800d388:	f340 8289 	ble.w	800d89e <_vfprintf_r+0x1436>
 800d38c:	aa26      	add	r2, sp, #152	; 0x98
 800d38e:	4641      	mov	r1, r8
 800d390:	4658      	mov	r0, fp
 800d392:	f001 ffeb 	bl	800f36c <__sprint_r>
 800d396:	2800      	cmp	r0, #0
 800d398:	f040 82a2 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d39c:	ac29      	add	r4, sp, #164	; 0xa4
 800d39e:	e654      	b.n	800d04a <_vfprintf_r+0xbe2>
 800d3a0:	aa26      	add	r2, sp, #152	; 0x98
 800d3a2:	4641      	mov	r1, r8
 800d3a4:	4658      	mov	r0, fp
 800d3a6:	f001 ffe1 	bl	800f36c <__sprint_r>
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	f040 8298 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d3b0:	ac29      	add	r4, sp, #164	; 0xa4
 800d3b2:	e7be      	b.n	800d332 <_vfprintf_r+0xeca>
 800d3b4:	aa26      	add	r2, sp, #152	; 0x98
 800d3b6:	4641      	mov	r1, r8
 800d3b8:	4658      	mov	r0, fp
 800d3ba:	f001 ffd7 	bl	800f36c <__sprint_r>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	f040 828e 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d3c4:	ac29      	add	r4, sp, #164	; 0xa4
 800d3c6:	e7ca      	b.n	800d35e <_vfprintf_r+0xef6>
 800d3c8:	3210      	adds	r2, #16
 800d3ca:	2b07      	cmp	r3, #7
 800d3cc:	6067      	str	r7, [r4, #4]
 800d3ce:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800d3d2:	dd08      	ble.n	800d3e6 <_vfprintf_r+0xf7e>
 800d3d4:	aa26      	add	r2, sp, #152	; 0x98
 800d3d6:	4641      	mov	r1, r8
 800d3d8:	4658      	mov	r0, fp
 800d3da:	f001 ffc7 	bl	800f36c <__sprint_r>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	f040 827e 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d3e4:	a929      	add	r1, sp, #164	; 0xa4
 800d3e6:	3d10      	subs	r5, #16
 800d3e8:	460c      	mov	r4, r1
 800d3ea:	e7bf      	b.n	800d36c <_vfprintf_r+0xf04>
 800d3ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	dc74      	bgt.n	800d4dc <_vfprintf_r+0x1074>
 800d3f2:	4b38      	ldr	r3, [pc, #224]	; (800d4d4 <_vfprintf_r+0x106c>)
 800d3f4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d3f6:	6023      	str	r3, [r4, #0]
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	441d      	add	r5, r3
 800d3fc:	6063      	str	r3, [r4, #4]
 800d3fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d400:	9528      	str	r5, [sp, #160]	; 0xa0
 800d402:	3301      	adds	r3, #1
 800d404:	2b07      	cmp	r3, #7
 800d406:	9327      	str	r3, [sp, #156]	; 0x9c
 800d408:	dc3e      	bgt.n	800d488 <_vfprintf_r+0x1020>
 800d40a:	3408      	adds	r4, #8
 800d40c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d40e:	b92b      	cbnz	r3, 800d41c <_vfprintf_r+0xfb4>
 800d410:	9b04      	ldr	r3, [sp, #16]
 800d412:	b91b      	cbnz	r3, 800d41c <_vfprintf_r+0xfb4>
 800d414:	f01a 0f01 	tst.w	sl, #1
 800d418:	f43f ae17 	beq.w	800d04a <_vfprintf_r+0xbe2>
 800d41c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d41e:	6023      	str	r3, [r4, #0]
 800d420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d422:	6063      	str	r3, [r4, #4]
 800d424:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d426:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d428:	4413      	add	r3, r2
 800d42a:	9328      	str	r3, [sp, #160]	; 0xa0
 800d42c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d42e:	3301      	adds	r3, #1
 800d430:	2b07      	cmp	r3, #7
 800d432:	9327      	str	r3, [sp, #156]	; 0x9c
 800d434:	dc32      	bgt.n	800d49c <_vfprintf_r+0x1034>
 800d436:	3408      	adds	r4, #8
 800d438:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800d43a:	2d00      	cmp	r5, #0
 800d43c:	da1b      	bge.n	800d476 <_vfprintf_r+0x100e>
 800d43e:	4e26      	ldr	r6, [pc, #152]	; (800d4d8 <_vfprintf_r+0x1070>)
 800d440:	426d      	negs	r5, r5
 800d442:	4623      	mov	r3, r4
 800d444:	2710      	movs	r7, #16
 800d446:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 800d44a:	2d10      	cmp	r5, #16
 800d44c:	f102 0201 	add.w	r2, r2, #1
 800d450:	f104 0408 	add.w	r4, r4, #8
 800d454:	601e      	str	r6, [r3, #0]
 800d456:	dc2b      	bgt.n	800d4b0 <_vfprintf_r+0x1048>
 800d458:	605d      	str	r5, [r3, #4]
 800d45a:	2a07      	cmp	r2, #7
 800d45c:	440d      	add	r5, r1
 800d45e:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 800d462:	dd08      	ble.n	800d476 <_vfprintf_r+0x100e>
 800d464:	aa26      	add	r2, sp, #152	; 0x98
 800d466:	4641      	mov	r1, r8
 800d468:	4658      	mov	r0, fp
 800d46a:	f001 ff7f 	bl	800f36c <__sprint_r>
 800d46e:	2800      	cmp	r0, #0
 800d470:	f040 8236 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d474:	ac29      	add	r4, sp, #164	; 0xa4
 800d476:	9b04      	ldr	r3, [sp, #16]
 800d478:	6063      	str	r3, [r4, #4]
 800d47a:	9a04      	ldr	r2, [sp, #16]
 800d47c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d47e:	f8c4 9000 	str.w	r9, [r4]
 800d482:	4413      	add	r3, r2
 800d484:	9328      	str	r3, [sp, #160]	; 0xa0
 800d486:	e5d9      	b.n	800d03c <_vfprintf_r+0xbd4>
 800d488:	aa26      	add	r2, sp, #152	; 0x98
 800d48a:	4641      	mov	r1, r8
 800d48c:	4658      	mov	r0, fp
 800d48e:	f001 ff6d 	bl	800f36c <__sprint_r>
 800d492:	2800      	cmp	r0, #0
 800d494:	f040 8224 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d498:	ac29      	add	r4, sp, #164	; 0xa4
 800d49a:	e7b7      	b.n	800d40c <_vfprintf_r+0xfa4>
 800d49c:	aa26      	add	r2, sp, #152	; 0x98
 800d49e:	4641      	mov	r1, r8
 800d4a0:	4658      	mov	r0, fp
 800d4a2:	f001 ff63 	bl	800f36c <__sprint_r>
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	f040 821a 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d4ac:	ac29      	add	r4, sp, #164	; 0xa4
 800d4ae:	e7c3      	b.n	800d438 <_vfprintf_r+0xfd0>
 800d4b0:	3110      	adds	r1, #16
 800d4b2:	2a07      	cmp	r2, #7
 800d4b4:	605f      	str	r7, [r3, #4]
 800d4b6:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 800d4ba:	dd08      	ble.n	800d4ce <_vfprintf_r+0x1066>
 800d4bc:	aa26      	add	r2, sp, #152	; 0x98
 800d4be:	4641      	mov	r1, r8
 800d4c0:	4658      	mov	r0, fp
 800d4c2:	f001 ff53 	bl	800f36c <__sprint_r>
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	f040 820a 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d4cc:	ac29      	add	r4, sp, #164	; 0xa4
 800d4ce:	3d10      	subs	r5, #16
 800d4d0:	4623      	mov	r3, r4
 800d4d2:	e7b8      	b.n	800d446 <_vfprintf_r+0xfde>
 800d4d4:	08010186 	.word	0x08010186
 800d4d8:	08010198 	.word	0x08010198
 800d4dc:	9b04      	ldr	r3, [sp, #16]
 800d4de:	42b3      	cmp	r3, r6
 800d4e0:	bfa8      	it	ge
 800d4e2:	4633      	movge	r3, r6
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	461d      	mov	r5, r3
 800d4e8:	dd0b      	ble.n	800d502 <_vfprintf_r+0x109a>
 800d4ea:	e9c4 9300 	strd	r9, r3, [r4]
 800d4ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d4f0:	442b      	add	r3, r5
 800d4f2:	9328      	str	r3, [sp, #160]	; 0xa0
 800d4f4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	2b07      	cmp	r3, #7
 800d4fa:	9327      	str	r3, [sp, #156]	; 0x9c
 800d4fc:	f300 8086 	bgt.w	800d60c <_vfprintf_r+0x11a4>
 800d500:	3408      	adds	r4, #8
 800d502:	2d00      	cmp	r5, #0
 800d504:	bfac      	ite	ge
 800d506:	1b75      	subge	r5, r6, r5
 800d508:	4635      	movlt	r5, r6
 800d50a:	2d00      	cmp	r5, #0
 800d50c:	dd19      	ble.n	800d542 <_vfprintf_r+0x10da>
 800d50e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800d512:	4896      	ldr	r0, [pc, #600]	; (800d76c <_vfprintf_r+0x1304>)
 800d514:	6020      	str	r0, [r4, #0]
 800d516:	2d10      	cmp	r5, #16
 800d518:	f103 0301 	add.w	r3, r3, #1
 800d51c:	f104 0108 	add.w	r1, r4, #8
 800d520:	dc7e      	bgt.n	800d620 <_vfprintf_r+0x11b8>
 800d522:	6065      	str	r5, [r4, #4]
 800d524:	2b07      	cmp	r3, #7
 800d526:	4415      	add	r5, r2
 800d528:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800d52c:	f340 808b 	ble.w	800d646 <_vfprintf_r+0x11de>
 800d530:	aa26      	add	r2, sp, #152	; 0x98
 800d532:	4641      	mov	r1, r8
 800d534:	4658      	mov	r0, fp
 800d536:	f001 ff19 	bl	800f36c <__sprint_r>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	f040 81d0 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d540:	ac29      	add	r4, sp, #164	; 0xa4
 800d542:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 800d546:	444e      	add	r6, r9
 800d548:	d009      	beq.n	800d55e <_vfprintf_r+0x10f6>
 800d54a:	9b07      	ldr	r3, [sp, #28]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d17c      	bne.n	800d64a <_vfprintf_r+0x11e2>
 800d550:	2f00      	cmp	r7, #0
 800d552:	d17c      	bne.n	800d64e <_vfprintf_r+0x11e6>
 800d554:	9b04      	ldr	r3, [sp, #16]
 800d556:	444b      	add	r3, r9
 800d558:	429e      	cmp	r6, r3
 800d55a:	bf28      	it	cs
 800d55c:	461e      	movcs	r6, r3
 800d55e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d560:	9a04      	ldr	r2, [sp, #16]
 800d562:	4293      	cmp	r3, r2
 800d564:	db02      	blt.n	800d56c <_vfprintf_r+0x1104>
 800d566:	f01a 0f01 	tst.w	sl, #1
 800d56a:	d00e      	beq.n	800d58a <_vfprintf_r+0x1122>
 800d56c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d56e:	6023      	str	r3, [r4, #0]
 800d570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d572:	6063      	str	r3, [r4, #4]
 800d574:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d576:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d578:	4413      	add	r3, r2
 800d57a:	9328      	str	r3, [sp, #160]	; 0xa0
 800d57c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d57e:	3301      	adds	r3, #1
 800d580:	2b07      	cmp	r3, #7
 800d582:	9327      	str	r3, [sp, #156]	; 0x9c
 800d584:	f300 80dd 	bgt.w	800d742 <_vfprintf_r+0x12da>
 800d588:	3408      	adds	r4, #8
 800d58a:	9b04      	ldr	r3, [sp, #16]
 800d58c:	9a04      	ldr	r2, [sp, #16]
 800d58e:	eb09 0503 	add.w	r5, r9, r3
 800d592:	1bab      	subs	r3, r5, r6
 800d594:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800d596:	1b55      	subs	r5, r2, r5
 800d598:	429d      	cmp	r5, r3
 800d59a:	bfa8      	it	ge
 800d59c:	461d      	movge	r5, r3
 800d59e:	2d00      	cmp	r5, #0
 800d5a0:	dd0b      	ble.n	800d5ba <_vfprintf_r+0x1152>
 800d5a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d5a4:	442b      	add	r3, r5
 800d5a6:	9328      	str	r3, [sp, #160]	; 0xa0
 800d5a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	2b07      	cmp	r3, #7
 800d5ae:	e9c4 6500 	strd	r6, r5, [r4]
 800d5b2:	9327      	str	r3, [sp, #156]	; 0x9c
 800d5b4:	f300 80cf 	bgt.w	800d756 <_vfprintf_r+0x12ee>
 800d5b8:	3408      	adds	r4, #8
 800d5ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d5bc:	9a04      	ldr	r2, [sp, #16]
 800d5be:	2d00      	cmp	r5, #0
 800d5c0:	eba2 0303 	sub.w	r3, r2, r3
 800d5c4:	bfac      	ite	ge
 800d5c6:	1b5d      	subge	r5, r3, r5
 800d5c8:	461d      	movlt	r5, r3
 800d5ca:	2d00      	cmp	r5, #0
 800d5cc:	f77f ad3d 	ble.w	800d04a <_vfprintf_r+0xbe2>
 800d5d0:	4e66      	ldr	r6, [pc, #408]	; (800d76c <_vfprintf_r+0x1304>)
 800d5d2:	2710      	movs	r7, #16
 800d5d4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800d5d8:	2d10      	cmp	r5, #16
 800d5da:	f103 0301 	add.w	r3, r3, #1
 800d5de:	f104 0108 	add.w	r1, r4, #8
 800d5e2:	6026      	str	r6, [r4, #0]
 800d5e4:	f77f aecb 	ble.w	800d37e <_vfprintf_r+0xf16>
 800d5e8:	3210      	adds	r2, #16
 800d5ea:	2b07      	cmp	r3, #7
 800d5ec:	6067      	str	r7, [r4, #4]
 800d5ee:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800d5f2:	dd08      	ble.n	800d606 <_vfprintf_r+0x119e>
 800d5f4:	aa26      	add	r2, sp, #152	; 0x98
 800d5f6:	4641      	mov	r1, r8
 800d5f8:	4658      	mov	r0, fp
 800d5fa:	f001 feb7 	bl	800f36c <__sprint_r>
 800d5fe:	2800      	cmp	r0, #0
 800d600:	f040 816e 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d604:	a929      	add	r1, sp, #164	; 0xa4
 800d606:	3d10      	subs	r5, #16
 800d608:	460c      	mov	r4, r1
 800d60a:	e7e3      	b.n	800d5d4 <_vfprintf_r+0x116c>
 800d60c:	aa26      	add	r2, sp, #152	; 0x98
 800d60e:	4641      	mov	r1, r8
 800d610:	4658      	mov	r0, fp
 800d612:	f001 feab 	bl	800f36c <__sprint_r>
 800d616:	2800      	cmp	r0, #0
 800d618:	f040 8162 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d61c:	ac29      	add	r4, sp, #164	; 0xa4
 800d61e:	e770      	b.n	800d502 <_vfprintf_r+0x109a>
 800d620:	2010      	movs	r0, #16
 800d622:	4402      	add	r2, r0
 800d624:	2b07      	cmp	r3, #7
 800d626:	6060      	str	r0, [r4, #4]
 800d628:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800d62c:	dd08      	ble.n	800d640 <_vfprintf_r+0x11d8>
 800d62e:	aa26      	add	r2, sp, #152	; 0x98
 800d630:	4641      	mov	r1, r8
 800d632:	4658      	mov	r0, fp
 800d634:	f001 fe9a 	bl	800f36c <__sprint_r>
 800d638:	2800      	cmp	r0, #0
 800d63a:	f040 8151 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d63e:	a929      	add	r1, sp, #164	; 0xa4
 800d640:	3d10      	subs	r5, #16
 800d642:	460c      	mov	r4, r1
 800d644:	e763      	b.n	800d50e <_vfprintf_r+0x10a6>
 800d646:	460c      	mov	r4, r1
 800d648:	e77b      	b.n	800d542 <_vfprintf_r+0x10da>
 800d64a:	2f00      	cmp	r7, #0
 800d64c:	d049      	beq.n	800d6e2 <_vfprintf_r+0x127a>
 800d64e:	3f01      	subs	r7, #1
 800d650:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d652:	6023      	str	r3, [r4, #0]
 800d654:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d656:	6063      	str	r3, [r4, #4]
 800d658:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d65a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d65c:	4413      	add	r3, r2
 800d65e:	9328      	str	r3, [sp, #160]	; 0xa0
 800d660:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d662:	3301      	adds	r3, #1
 800d664:	2b07      	cmp	r3, #7
 800d666:	9327      	str	r3, [sp, #156]	; 0x9c
 800d668:	dc42      	bgt.n	800d6f0 <_vfprintf_r+0x1288>
 800d66a:	3408      	adds	r4, #8
 800d66c:	9b04      	ldr	r3, [sp, #16]
 800d66e:	444b      	add	r3, r9
 800d670:	1b9a      	subs	r2, r3, r6
 800d672:	9b08      	ldr	r3, [sp, #32]
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	4293      	cmp	r3, r2
 800d678:	bfa8      	it	ge
 800d67a:	4613      	movge	r3, r2
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	461d      	mov	r5, r3
 800d680:	dd0a      	ble.n	800d698 <_vfprintf_r+0x1230>
 800d682:	e9c4 6300 	strd	r6, r3, [r4]
 800d686:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d688:	442b      	add	r3, r5
 800d68a:	9328      	str	r3, [sp, #160]	; 0xa0
 800d68c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d68e:	3301      	adds	r3, #1
 800d690:	2b07      	cmp	r3, #7
 800d692:	9327      	str	r3, [sp, #156]	; 0x9c
 800d694:	dc36      	bgt.n	800d704 <_vfprintf_r+0x129c>
 800d696:	3408      	adds	r4, #8
 800d698:	9b08      	ldr	r3, [sp, #32]
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	2d00      	cmp	r5, #0
 800d69e:	bfac      	ite	ge
 800d6a0:	1b5d      	subge	r5, r3, r5
 800d6a2:	461d      	movlt	r5, r3
 800d6a4:	2d00      	cmp	r5, #0
 800d6a6:	dd18      	ble.n	800d6da <_vfprintf_r+0x1272>
 800d6a8:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800d6ac:	482f      	ldr	r0, [pc, #188]	; (800d76c <_vfprintf_r+0x1304>)
 800d6ae:	6020      	str	r0, [r4, #0]
 800d6b0:	2d10      	cmp	r5, #16
 800d6b2:	f102 0201 	add.w	r2, r2, #1
 800d6b6:	f104 0108 	add.w	r1, r4, #8
 800d6ba:	dc2d      	bgt.n	800d718 <_vfprintf_r+0x12b0>
 800d6bc:	442b      	add	r3, r5
 800d6be:	2a07      	cmp	r2, #7
 800d6c0:	6065      	str	r5, [r4, #4]
 800d6c2:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800d6c6:	dd3a      	ble.n	800d73e <_vfprintf_r+0x12d6>
 800d6c8:	aa26      	add	r2, sp, #152	; 0x98
 800d6ca:	4641      	mov	r1, r8
 800d6cc:	4658      	mov	r0, fp
 800d6ce:	f001 fe4d 	bl	800f36c <__sprint_r>
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	f040 8104 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d6d8:	ac29      	add	r4, sp, #164	; 0xa4
 800d6da:	9b08      	ldr	r3, [sp, #32]
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	441e      	add	r6, r3
 800d6e0:	e733      	b.n	800d54a <_vfprintf_r+0x10e2>
 800d6e2:	9b08      	ldr	r3, [sp, #32]
 800d6e4:	3b01      	subs	r3, #1
 800d6e6:	9308      	str	r3, [sp, #32]
 800d6e8:	9b07      	ldr	r3, [sp, #28]
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	9307      	str	r3, [sp, #28]
 800d6ee:	e7af      	b.n	800d650 <_vfprintf_r+0x11e8>
 800d6f0:	aa26      	add	r2, sp, #152	; 0x98
 800d6f2:	4641      	mov	r1, r8
 800d6f4:	4658      	mov	r0, fp
 800d6f6:	f001 fe39 	bl	800f36c <__sprint_r>
 800d6fa:	2800      	cmp	r0, #0
 800d6fc:	f040 80f0 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d700:	ac29      	add	r4, sp, #164	; 0xa4
 800d702:	e7b3      	b.n	800d66c <_vfprintf_r+0x1204>
 800d704:	aa26      	add	r2, sp, #152	; 0x98
 800d706:	4641      	mov	r1, r8
 800d708:	4658      	mov	r0, fp
 800d70a:	f001 fe2f 	bl	800f36c <__sprint_r>
 800d70e:	2800      	cmp	r0, #0
 800d710:	f040 80e6 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d714:	ac29      	add	r4, sp, #164	; 0xa4
 800d716:	e7bf      	b.n	800d698 <_vfprintf_r+0x1230>
 800d718:	2010      	movs	r0, #16
 800d71a:	4403      	add	r3, r0
 800d71c:	2a07      	cmp	r2, #7
 800d71e:	6060      	str	r0, [r4, #4]
 800d720:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800d724:	dd08      	ble.n	800d738 <_vfprintf_r+0x12d0>
 800d726:	aa26      	add	r2, sp, #152	; 0x98
 800d728:	4641      	mov	r1, r8
 800d72a:	4658      	mov	r0, fp
 800d72c:	f001 fe1e 	bl	800f36c <__sprint_r>
 800d730:	2800      	cmp	r0, #0
 800d732:	f040 80d5 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d736:	a929      	add	r1, sp, #164	; 0xa4
 800d738:	3d10      	subs	r5, #16
 800d73a:	460c      	mov	r4, r1
 800d73c:	e7b4      	b.n	800d6a8 <_vfprintf_r+0x1240>
 800d73e:	460c      	mov	r4, r1
 800d740:	e7cb      	b.n	800d6da <_vfprintf_r+0x1272>
 800d742:	aa26      	add	r2, sp, #152	; 0x98
 800d744:	4641      	mov	r1, r8
 800d746:	4658      	mov	r0, fp
 800d748:	f001 fe10 	bl	800f36c <__sprint_r>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	f040 80c7 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d752:	ac29      	add	r4, sp, #164	; 0xa4
 800d754:	e719      	b.n	800d58a <_vfprintf_r+0x1122>
 800d756:	aa26      	add	r2, sp, #152	; 0x98
 800d758:	4641      	mov	r1, r8
 800d75a:	4658      	mov	r0, fp
 800d75c:	f001 fe06 	bl	800f36c <__sprint_r>
 800d760:	2800      	cmp	r0, #0
 800d762:	f040 80bd 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d766:	ac29      	add	r4, sp, #164	; 0xa4
 800d768:	e727      	b.n	800d5ba <_vfprintf_r+0x1152>
 800d76a:	bf00      	nop
 800d76c:	08010198 	.word	0x08010198
 800d770:	9a04      	ldr	r2, [sp, #16]
 800d772:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d774:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d776:	2a01      	cmp	r2, #1
 800d778:	f105 0501 	add.w	r5, r5, #1
 800d77c:	f103 0301 	add.w	r3, r3, #1
 800d780:	f104 0608 	add.w	r6, r4, #8
 800d784:	dc02      	bgt.n	800d78c <_vfprintf_r+0x1324>
 800d786:	f01a 0f01 	tst.w	sl, #1
 800d78a:	d07d      	beq.n	800d888 <_vfprintf_r+0x1420>
 800d78c:	2201      	movs	r2, #1
 800d78e:	2b07      	cmp	r3, #7
 800d790:	f8c4 9000 	str.w	r9, [r4]
 800d794:	6062      	str	r2, [r4, #4]
 800d796:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800d79a:	dd08      	ble.n	800d7ae <_vfprintf_r+0x1346>
 800d79c:	aa26      	add	r2, sp, #152	; 0x98
 800d79e:	4641      	mov	r1, r8
 800d7a0:	4658      	mov	r0, fp
 800d7a2:	f001 fde3 	bl	800f36c <__sprint_r>
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	f040 809a 	bne.w	800d8e0 <_vfprintf_r+0x1478>
 800d7ac:	ae29      	add	r6, sp, #164	; 0xa4
 800d7ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d7b0:	6033      	str	r3, [r6, #0]
 800d7b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7b4:	6073      	str	r3, [r6, #4]
 800d7b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d7b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d7ba:	4413      	add	r3, r2
 800d7bc:	9328      	str	r3, [sp, #160]	; 0xa0
 800d7be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	2b07      	cmp	r3, #7
 800d7c4:	9327      	str	r3, [sp, #156]	; 0x9c
 800d7c6:	dc31      	bgt.n	800d82c <_vfprintf_r+0x13c4>
 800d7c8:	3608      	adds	r6, #8
 800d7ca:	9b04      	ldr	r3, [sp, #16]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	1e5c      	subs	r4, r3, #1
 800d7d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	f7f3 f97f 	bl	8000ad8 <__aeabi_dcmpeq>
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	d12f      	bne.n	800d83e <_vfprintf_r+0x13d6>
 800d7de:	f109 0301 	add.w	r3, r9, #1
 800d7e2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800d7e4:	9904      	ldr	r1, [sp, #16]
 800d7e6:	e9c6 3400 	strd	r3, r4, [r6]
 800d7ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d7ec:	3201      	adds	r2, #1
 800d7ee:	3b01      	subs	r3, #1
 800d7f0:	440b      	add	r3, r1
 800d7f2:	2a07      	cmp	r2, #7
 800d7f4:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800d7f8:	dd4f      	ble.n	800d89a <_vfprintf_r+0x1432>
 800d7fa:	aa26      	add	r2, sp, #152	; 0x98
 800d7fc:	4641      	mov	r1, r8
 800d7fe:	4658      	mov	r0, fp
 800d800:	f001 fdb4 	bl	800f36c <__sprint_r>
 800d804:	2800      	cmp	r0, #0
 800d806:	d16b      	bne.n	800d8e0 <_vfprintf_r+0x1478>
 800d808:	ae29      	add	r6, sp, #164	; 0xa4
 800d80a:	ab22      	add	r3, sp, #136	; 0x88
 800d80c:	6033      	str	r3, [r6, #0]
 800d80e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d810:	6073      	str	r3, [r6, #4]
 800d812:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d814:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d816:	4413      	add	r3, r2
 800d818:	9328      	str	r3, [sp, #160]	; 0xa0
 800d81a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d81c:	3301      	adds	r3, #1
 800d81e:	2b07      	cmp	r3, #7
 800d820:	9327      	str	r3, [sp, #156]	; 0x9c
 800d822:	f73f adb3 	bgt.w	800d38c <_vfprintf_r+0xf24>
 800d826:	f106 0408 	add.w	r4, r6, #8
 800d82a:	e40e      	b.n	800d04a <_vfprintf_r+0xbe2>
 800d82c:	aa26      	add	r2, sp, #152	; 0x98
 800d82e:	4641      	mov	r1, r8
 800d830:	4658      	mov	r0, fp
 800d832:	f001 fd9b 	bl	800f36c <__sprint_r>
 800d836:	2800      	cmp	r0, #0
 800d838:	d152      	bne.n	800d8e0 <_vfprintf_r+0x1478>
 800d83a:	ae29      	add	r6, sp, #164	; 0xa4
 800d83c:	e7c5      	b.n	800d7ca <_vfprintf_r+0x1362>
 800d83e:	2c00      	cmp	r4, #0
 800d840:	dde3      	ble.n	800d80a <_vfprintf_r+0x13a2>
 800d842:	4d40      	ldr	r5, [pc, #256]	; (800d944 <_vfprintf_r+0x14dc>)
 800d844:	2710      	movs	r7, #16
 800d846:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800d84a:	2c10      	cmp	r4, #16
 800d84c:	f103 0301 	add.w	r3, r3, #1
 800d850:	f106 0108 	add.w	r1, r6, #8
 800d854:	6035      	str	r5, [r6, #0]
 800d856:	dc07      	bgt.n	800d868 <_vfprintf_r+0x1400>
 800d858:	6074      	str	r4, [r6, #4]
 800d85a:	2b07      	cmp	r3, #7
 800d85c:	4414      	add	r4, r2
 800d85e:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 800d862:	dcca      	bgt.n	800d7fa <_vfprintf_r+0x1392>
 800d864:	460e      	mov	r6, r1
 800d866:	e7d0      	b.n	800d80a <_vfprintf_r+0x13a2>
 800d868:	3210      	adds	r2, #16
 800d86a:	2b07      	cmp	r3, #7
 800d86c:	6077      	str	r7, [r6, #4]
 800d86e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800d872:	dd06      	ble.n	800d882 <_vfprintf_r+0x141a>
 800d874:	aa26      	add	r2, sp, #152	; 0x98
 800d876:	4641      	mov	r1, r8
 800d878:	4658      	mov	r0, fp
 800d87a:	f001 fd77 	bl	800f36c <__sprint_r>
 800d87e:	bb78      	cbnz	r0, 800d8e0 <_vfprintf_r+0x1478>
 800d880:	a929      	add	r1, sp, #164	; 0xa4
 800d882:	3c10      	subs	r4, #16
 800d884:	460e      	mov	r6, r1
 800d886:	e7de      	b.n	800d846 <_vfprintf_r+0x13de>
 800d888:	2201      	movs	r2, #1
 800d88a:	2b07      	cmp	r3, #7
 800d88c:	f8c4 9000 	str.w	r9, [r4]
 800d890:	6062      	str	r2, [r4, #4]
 800d892:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800d896:	ddb8      	ble.n	800d80a <_vfprintf_r+0x13a2>
 800d898:	e7af      	b.n	800d7fa <_vfprintf_r+0x1392>
 800d89a:	3608      	adds	r6, #8
 800d89c:	e7b5      	b.n	800d80a <_vfprintf_r+0x13a2>
 800d89e:	460c      	mov	r4, r1
 800d8a0:	f7ff bbd3 	b.w	800d04a <_vfprintf_r+0xbe2>
 800d8a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d8a8:	1a9d      	subs	r5, r3, r2
 800d8aa:	2d00      	cmp	r5, #0
 800d8ac:	f77f abd1 	ble.w	800d052 <_vfprintf_r+0xbea>
 800d8b0:	4e25      	ldr	r6, [pc, #148]	; (800d948 <_vfprintf_r+0x14e0>)
 800d8b2:	2710      	movs	r7, #16
 800d8b4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800d8b8:	2d10      	cmp	r5, #16
 800d8ba:	f103 0301 	add.w	r3, r3, #1
 800d8be:	6026      	str	r6, [r4, #0]
 800d8c0:	dc18      	bgt.n	800d8f4 <_vfprintf_r+0x148c>
 800d8c2:	6065      	str	r5, [r4, #4]
 800d8c4:	2b07      	cmp	r3, #7
 800d8c6:	4415      	add	r5, r2
 800d8c8:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800d8cc:	f77f abc1 	ble.w	800d052 <_vfprintf_r+0xbea>
 800d8d0:	aa26      	add	r2, sp, #152	; 0x98
 800d8d2:	4641      	mov	r1, r8
 800d8d4:	4658      	mov	r0, fp
 800d8d6:	f001 fd49 	bl	800f36c <__sprint_r>
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	f43f abb9 	beq.w	800d052 <_vfprintf_r+0xbea>
 800d8e0:	9b03      	ldr	r3, [sp, #12]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	f43f a895 	beq.w	800ca12 <_vfprintf_r+0x5aa>
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	4658      	mov	r0, fp
 800d8ec:	f001 f896 	bl	800ea1c <_free_r>
 800d8f0:	f7ff b88f 	b.w	800ca12 <_vfprintf_r+0x5aa>
 800d8f4:	3210      	adds	r2, #16
 800d8f6:	2b07      	cmp	r3, #7
 800d8f8:	6067      	str	r7, [r4, #4]
 800d8fa:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800d8fe:	dc02      	bgt.n	800d906 <_vfprintf_r+0x149e>
 800d900:	3408      	adds	r4, #8
 800d902:	3d10      	subs	r5, #16
 800d904:	e7d6      	b.n	800d8b4 <_vfprintf_r+0x144c>
 800d906:	aa26      	add	r2, sp, #152	; 0x98
 800d908:	4641      	mov	r1, r8
 800d90a:	4658      	mov	r0, fp
 800d90c:	f001 fd2e 	bl	800f36c <__sprint_r>
 800d910:	2800      	cmp	r0, #0
 800d912:	d1e5      	bne.n	800d8e0 <_vfprintf_r+0x1478>
 800d914:	ac29      	add	r4, sp, #164	; 0xa4
 800d916:	e7f4      	b.n	800d902 <_vfprintf_r+0x149a>
 800d918:	9903      	ldr	r1, [sp, #12]
 800d91a:	4658      	mov	r0, fp
 800d91c:	f001 f87e 	bl	800ea1c <_free_r>
 800d920:	f7ff bbaf 	b.w	800d082 <_vfprintf_r+0xc1a>
 800d924:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d926:	b91b      	cbnz	r3, 800d930 <_vfprintf_r+0x14c8>
 800d928:	2300      	movs	r3, #0
 800d92a:	9327      	str	r3, [sp, #156]	; 0x9c
 800d92c:	f7ff b871 	b.w	800ca12 <_vfprintf_r+0x5aa>
 800d930:	aa26      	add	r2, sp, #152	; 0x98
 800d932:	4641      	mov	r1, r8
 800d934:	4658      	mov	r0, fp
 800d936:	f001 fd19 	bl	800f36c <__sprint_r>
 800d93a:	2800      	cmp	r0, #0
 800d93c:	f47f a869 	bne.w	800ca12 <_vfprintf_r+0x5aa>
 800d940:	e7f2      	b.n	800d928 <_vfprintf_r+0x14c0>
 800d942:	bf00      	nop
 800d944:	08010198 	.word	0x08010198
 800d948:	08010188 	.word	0x08010188

0800d94c <__sbprintf>:
 800d94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d94e:	460c      	mov	r4, r1
 800d950:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800d954:	461f      	mov	r7, r3
 800d956:	8989      	ldrh	r1, [r1, #12]
 800d958:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d95a:	9319      	str	r3, [sp, #100]	; 0x64
 800d95c:	89e3      	ldrh	r3, [r4, #14]
 800d95e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d962:	f021 0102 	bic.w	r1, r1, #2
 800d966:	69e3      	ldr	r3, [r4, #28]
 800d968:	f8ad 100c 	strh.w	r1, [sp, #12]
 800d96c:	9307      	str	r3, [sp, #28]
 800d96e:	a91a      	add	r1, sp, #104	; 0x68
 800d970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d972:	9309      	str	r3, [sp, #36]	; 0x24
 800d974:	4615      	mov	r5, r2
 800d976:	2300      	movs	r3, #0
 800d978:	4606      	mov	r6, r0
 800d97a:	9100      	str	r1, [sp, #0]
 800d97c:	9104      	str	r1, [sp, #16]
 800d97e:	a816      	add	r0, sp, #88	; 0x58
 800d980:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d984:	9102      	str	r1, [sp, #8]
 800d986:	9105      	str	r1, [sp, #20]
 800d988:	9306      	str	r3, [sp, #24]
 800d98a:	f001 f941 	bl	800ec10 <__retarget_lock_init_recursive>
 800d98e:	462a      	mov	r2, r5
 800d990:	463b      	mov	r3, r7
 800d992:	4669      	mov	r1, sp
 800d994:	4630      	mov	r0, r6
 800d996:	f7fe fd67 	bl	800c468 <_vfprintf_r>
 800d99a:	1e05      	subs	r5, r0, #0
 800d99c:	db07      	blt.n	800d9ae <__sbprintf+0x62>
 800d99e:	4669      	mov	r1, sp
 800d9a0:	4630      	mov	r0, r6
 800d9a2:	f000 ff3f 	bl	800e824 <_fflush_r>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	bf18      	it	ne
 800d9aa:	f04f 35ff 	movne.w	r5, #4294967295
 800d9ae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d9b2:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d9b4:	065b      	lsls	r3, r3, #25
 800d9b6:	bf42      	ittt	mi
 800d9b8:	89a3      	ldrhmi	r3, [r4, #12]
 800d9ba:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800d9be:	81a3      	strhmi	r3, [r4, #12]
 800d9c0:	f001 f927 	bl	800ec12 <__retarget_lock_close_recursive>
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800d9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d9cc <__swsetup_r>:
 800d9cc:	b538      	push	{r3, r4, r5, lr}
 800d9ce:	4b2a      	ldr	r3, [pc, #168]	; (800da78 <__swsetup_r+0xac>)
 800d9d0:	4605      	mov	r5, r0
 800d9d2:	6818      	ldr	r0, [r3, #0]
 800d9d4:	460c      	mov	r4, r1
 800d9d6:	b118      	cbz	r0, 800d9e0 <__swsetup_r+0x14>
 800d9d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d9da:	b90b      	cbnz	r3, 800d9e0 <__swsetup_r+0x14>
 800d9dc:	f000 ff8e 	bl	800e8fc <__sinit>
 800d9e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9e4:	b29a      	uxth	r2, r3
 800d9e6:	0711      	lsls	r1, r2, #28
 800d9e8:	d422      	bmi.n	800da30 <__swsetup_r+0x64>
 800d9ea:	06d0      	lsls	r0, r2, #27
 800d9ec:	d407      	bmi.n	800d9fe <__swsetup_r+0x32>
 800d9ee:	2209      	movs	r2, #9
 800d9f0:	602a      	str	r2, [r5, #0]
 800d9f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9f6:	81a3      	strh	r3, [r4, #12]
 800d9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9fc:	e034      	b.n	800da68 <__swsetup_r+0x9c>
 800d9fe:	0751      	lsls	r1, r2, #29
 800da00:	d512      	bpl.n	800da28 <__swsetup_r+0x5c>
 800da02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800da04:	b141      	cbz	r1, 800da18 <__swsetup_r+0x4c>
 800da06:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800da0a:	4299      	cmp	r1, r3
 800da0c:	d002      	beq.n	800da14 <__swsetup_r+0x48>
 800da0e:	4628      	mov	r0, r5
 800da10:	f001 f804 	bl	800ea1c <_free_r>
 800da14:	2300      	movs	r3, #0
 800da16:	6323      	str	r3, [r4, #48]	; 0x30
 800da18:	89a3      	ldrh	r3, [r4, #12]
 800da1a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da1e:	81a3      	strh	r3, [r4, #12]
 800da20:	2300      	movs	r3, #0
 800da22:	6063      	str	r3, [r4, #4]
 800da24:	6923      	ldr	r3, [r4, #16]
 800da26:	6023      	str	r3, [r4, #0]
 800da28:	89a3      	ldrh	r3, [r4, #12]
 800da2a:	f043 0308 	orr.w	r3, r3, #8
 800da2e:	81a3      	strh	r3, [r4, #12]
 800da30:	6923      	ldr	r3, [r4, #16]
 800da32:	b94b      	cbnz	r3, 800da48 <__swsetup_r+0x7c>
 800da34:	89a3      	ldrh	r3, [r4, #12]
 800da36:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da3e:	d003      	beq.n	800da48 <__swsetup_r+0x7c>
 800da40:	4621      	mov	r1, r4
 800da42:	4628      	mov	r0, r5
 800da44:	f001 f914 	bl	800ec70 <__smakebuf_r>
 800da48:	89a2      	ldrh	r2, [r4, #12]
 800da4a:	f012 0301 	ands.w	r3, r2, #1
 800da4e:	d00c      	beq.n	800da6a <__swsetup_r+0x9e>
 800da50:	2300      	movs	r3, #0
 800da52:	60a3      	str	r3, [r4, #8]
 800da54:	6963      	ldr	r3, [r4, #20]
 800da56:	425b      	negs	r3, r3
 800da58:	61a3      	str	r3, [r4, #24]
 800da5a:	6923      	ldr	r3, [r4, #16]
 800da5c:	b953      	cbnz	r3, 800da74 <__swsetup_r+0xa8>
 800da5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da62:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800da66:	d1c4      	bne.n	800d9f2 <__swsetup_r+0x26>
 800da68:	bd38      	pop	{r3, r4, r5, pc}
 800da6a:	0792      	lsls	r2, r2, #30
 800da6c:	bf58      	it	pl
 800da6e:	6963      	ldrpl	r3, [r4, #20]
 800da70:	60a3      	str	r3, [r4, #8]
 800da72:	e7f2      	b.n	800da5a <__swsetup_r+0x8e>
 800da74:	2000      	movs	r0, #0
 800da76:	e7f7      	b.n	800da68 <__swsetup_r+0x9c>
 800da78:	20000030 	.word	0x20000030

0800da7c <register_fini>:
 800da7c:	4b02      	ldr	r3, [pc, #8]	; (800da88 <register_fini+0xc>)
 800da7e:	b113      	cbz	r3, 800da86 <register_fini+0xa>
 800da80:	4802      	ldr	r0, [pc, #8]	; (800da8c <register_fini+0x10>)
 800da82:	f000 b805 	b.w	800da90 <atexit>
 800da86:	4770      	bx	lr
 800da88:	00000000 	.word	0x00000000
 800da8c:	0800e94d 	.word	0x0800e94d

0800da90 <atexit>:
 800da90:	2300      	movs	r3, #0
 800da92:	4601      	mov	r1, r0
 800da94:	461a      	mov	r2, r3
 800da96:	4618      	mov	r0, r3
 800da98:	f001 bcac 	b.w	800f3f4 <__register_exitproc>

0800da9c <quorem>:
 800da9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa0:	6903      	ldr	r3, [r0, #16]
 800daa2:	690c      	ldr	r4, [r1, #16]
 800daa4:	42a3      	cmp	r3, r4
 800daa6:	4680      	mov	r8, r0
 800daa8:	f2c0 8082 	blt.w	800dbb0 <quorem+0x114>
 800daac:	3c01      	subs	r4, #1
 800daae:	f101 0714 	add.w	r7, r1, #20
 800dab2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800dab6:	f100 0614 	add.w	r6, r0, #20
 800daba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800dabe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800dac2:	eb06 030c 	add.w	r3, r6, ip
 800dac6:	3501      	adds	r5, #1
 800dac8:	eb07 090c 	add.w	r9, r7, ip
 800dacc:	9301      	str	r3, [sp, #4]
 800dace:	fbb0 f5f5 	udiv	r5, r0, r5
 800dad2:	b395      	cbz	r5, 800db3a <quorem+0x9e>
 800dad4:	f04f 0a00 	mov.w	sl, #0
 800dad8:	4638      	mov	r0, r7
 800dada:	46b6      	mov	lr, r6
 800dadc:	46d3      	mov	fp, sl
 800dade:	f850 2b04 	ldr.w	r2, [r0], #4
 800dae2:	b293      	uxth	r3, r2
 800dae4:	fb05 a303 	mla	r3, r5, r3, sl
 800dae8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800daec:	b29b      	uxth	r3, r3
 800daee:	ebab 0303 	sub.w	r3, fp, r3
 800daf2:	0c12      	lsrs	r2, r2, #16
 800daf4:	f8de b000 	ldr.w	fp, [lr]
 800daf8:	fb05 a202 	mla	r2, r5, r2, sl
 800dafc:	fa13 f38b 	uxtah	r3, r3, fp
 800db00:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800db04:	fa1f fb82 	uxth.w	fp, r2
 800db08:	f8de 2000 	ldr.w	r2, [lr]
 800db0c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800db10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db14:	b29b      	uxth	r3, r3
 800db16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db1a:	4581      	cmp	r9, r0
 800db1c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800db20:	f84e 3b04 	str.w	r3, [lr], #4
 800db24:	d2db      	bcs.n	800dade <quorem+0x42>
 800db26:	f856 300c 	ldr.w	r3, [r6, ip]
 800db2a:	b933      	cbnz	r3, 800db3a <quorem+0x9e>
 800db2c:	9b01      	ldr	r3, [sp, #4]
 800db2e:	3b04      	subs	r3, #4
 800db30:	429e      	cmp	r6, r3
 800db32:	461a      	mov	r2, r3
 800db34:	d330      	bcc.n	800db98 <quorem+0xfc>
 800db36:	f8c8 4010 	str.w	r4, [r8, #16]
 800db3a:	4640      	mov	r0, r8
 800db3c:	f001 fac2 	bl	800f0c4 <__mcmp>
 800db40:	2800      	cmp	r0, #0
 800db42:	db25      	blt.n	800db90 <quorem+0xf4>
 800db44:	3501      	adds	r5, #1
 800db46:	4630      	mov	r0, r6
 800db48:	f04f 0c00 	mov.w	ip, #0
 800db4c:	f857 2b04 	ldr.w	r2, [r7], #4
 800db50:	f8d0 e000 	ldr.w	lr, [r0]
 800db54:	b293      	uxth	r3, r2
 800db56:	ebac 0303 	sub.w	r3, ip, r3
 800db5a:	0c12      	lsrs	r2, r2, #16
 800db5c:	fa13 f38e 	uxtah	r3, r3, lr
 800db60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800db64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db68:	b29b      	uxth	r3, r3
 800db6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db6e:	45b9      	cmp	r9, r7
 800db70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800db74:	f840 3b04 	str.w	r3, [r0], #4
 800db78:	d2e8      	bcs.n	800db4c <quorem+0xb0>
 800db7a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800db7e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800db82:	b92a      	cbnz	r2, 800db90 <quorem+0xf4>
 800db84:	3b04      	subs	r3, #4
 800db86:	429e      	cmp	r6, r3
 800db88:	461a      	mov	r2, r3
 800db8a:	d30b      	bcc.n	800dba4 <quorem+0x108>
 800db8c:	f8c8 4010 	str.w	r4, [r8, #16]
 800db90:	4628      	mov	r0, r5
 800db92:	b003      	add	sp, #12
 800db94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db98:	6812      	ldr	r2, [r2, #0]
 800db9a:	3b04      	subs	r3, #4
 800db9c:	2a00      	cmp	r2, #0
 800db9e:	d1ca      	bne.n	800db36 <quorem+0x9a>
 800dba0:	3c01      	subs	r4, #1
 800dba2:	e7c5      	b.n	800db30 <quorem+0x94>
 800dba4:	6812      	ldr	r2, [r2, #0]
 800dba6:	3b04      	subs	r3, #4
 800dba8:	2a00      	cmp	r2, #0
 800dbaa:	d1ef      	bne.n	800db8c <quorem+0xf0>
 800dbac:	3c01      	subs	r4, #1
 800dbae:	e7ea      	b.n	800db86 <quorem+0xea>
 800dbb0:	2000      	movs	r0, #0
 800dbb2:	e7ee      	b.n	800db92 <quorem+0xf6>
 800dbb4:	0000      	movs	r0, r0
	...

0800dbb8 <_dtoa_r>:
 800dbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbbc:	b097      	sub	sp, #92	; 0x5c
 800dbbe:	ec57 6b10 	vmov	r6, r7, d0
 800dbc2:	9106      	str	r1, [sp, #24]
 800dbc4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800dbc6:	920b      	str	r2, [sp, #44]	; 0x2c
 800dbc8:	4604      	mov	r4, r0
 800dbca:	9312      	str	r3, [sp, #72]	; 0x48
 800dbcc:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800dbce:	e9cd 6700 	strd	r6, r7, [sp]
 800dbd2:	b141      	cbz	r1, 800dbe6 <_dtoa_r+0x2e>
 800dbd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dbd6:	604a      	str	r2, [r1, #4]
 800dbd8:	2301      	movs	r3, #1
 800dbda:	4093      	lsls	r3, r2
 800dbdc:	608b      	str	r3, [r1, #8]
 800dbde:	f001 f8ac 	bl	800ed3a <_Bfree>
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	6423      	str	r3, [r4, #64]	; 0x40
 800dbe6:	1e3b      	subs	r3, r7, #0
 800dbe8:	bfb9      	ittee	lt
 800dbea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dbee:	9301      	strlt	r3, [sp, #4]
 800dbf0:	2300      	movge	r3, #0
 800dbf2:	602b      	strge	r3, [r5, #0]
 800dbf4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dbf8:	4baf      	ldr	r3, [pc, #700]	; (800deb8 <_dtoa_r+0x300>)
 800dbfa:	bfbc      	itt	lt
 800dbfc:	2201      	movlt	r2, #1
 800dbfe:	602a      	strlt	r2, [r5, #0]
 800dc00:	ea33 0308 	bics.w	r3, r3, r8
 800dc04:	d116      	bne.n	800dc34 <_dtoa_r+0x7c>
 800dc06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dc08:	f242 730f 	movw	r3, #9999	; 0x270f
 800dc0c:	6013      	str	r3, [r2, #0]
 800dc0e:	9b00      	ldr	r3, [sp, #0]
 800dc10:	b923      	cbnz	r3, 800dc1c <_dtoa_r+0x64>
 800dc12:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800dc16:	2800      	cmp	r0, #0
 800dc18:	f000 8543 	beq.w	800e6a2 <_dtoa_r+0xaea>
 800dc1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc1e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800decc <_dtoa_r+0x314>
 800dc22:	b11b      	cbz	r3, 800dc2c <_dtoa_r+0x74>
 800dc24:	f10b 0303 	add.w	r3, fp, #3
 800dc28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dc2a:	6013      	str	r3, [r2, #0]
 800dc2c:	4658      	mov	r0, fp
 800dc2e:	b017      	add	sp, #92	; 0x5c
 800dc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc34:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	4630      	mov	r0, r6
 800dc3e:	4639      	mov	r1, r7
 800dc40:	f7f2 ff4a 	bl	8000ad8 <__aeabi_dcmpeq>
 800dc44:	4681      	mov	r9, r0
 800dc46:	b160      	cbz	r0, 800dc62 <_dtoa_r+0xaa>
 800dc48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	6013      	str	r3, [r2, #0]
 800dc4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f000 8522 	beq.w	800e69a <_dtoa_r+0xae2>
 800dc56:	4b99      	ldr	r3, [pc, #612]	; (800debc <_dtoa_r+0x304>)
 800dc58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dc5a:	f103 3bff 	add.w	fp, r3, #4294967295
 800dc5e:	6013      	str	r3, [r2, #0]
 800dc60:	e7e4      	b.n	800dc2c <_dtoa_r+0x74>
 800dc62:	aa14      	add	r2, sp, #80	; 0x50
 800dc64:	a915      	add	r1, sp, #84	; 0x54
 800dc66:	ec47 6b10 	vmov	d0, r6, r7
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f001 faa1 	bl	800f1b2 <__d2b>
 800dc70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800dc74:	9004      	str	r0, [sp, #16]
 800dc76:	2d00      	cmp	r5, #0
 800dc78:	d07c      	beq.n	800dd74 <_dtoa_r+0x1bc>
 800dc7a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dc7e:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800dc82:	46b2      	mov	sl, r6
 800dc84:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800dc88:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dc8c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800dc90:	2200      	movs	r2, #0
 800dc92:	4b8b      	ldr	r3, [pc, #556]	; (800dec0 <_dtoa_r+0x308>)
 800dc94:	4650      	mov	r0, sl
 800dc96:	4659      	mov	r1, fp
 800dc98:	f7f2 fafe 	bl	8000298 <__aeabi_dsub>
 800dc9c:	a380      	add	r3, pc, #512	; (adr r3, 800dea0 <_dtoa_r+0x2e8>)
 800dc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca2:	f7f2 fcb1 	bl	8000608 <__aeabi_dmul>
 800dca6:	a380      	add	r3, pc, #512	; (adr r3, 800dea8 <_dtoa_r+0x2f0>)
 800dca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcac:	f7f2 faf6 	bl	800029c <__adddf3>
 800dcb0:	4606      	mov	r6, r0
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	460f      	mov	r7, r1
 800dcb6:	f7f2 fc3d 	bl	8000534 <__aeabi_i2d>
 800dcba:	a37d      	add	r3, pc, #500	; (adr r3, 800deb0 <_dtoa_r+0x2f8>)
 800dcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc0:	f7f2 fca2 	bl	8000608 <__aeabi_dmul>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	4630      	mov	r0, r6
 800dcca:	4639      	mov	r1, r7
 800dccc:	f7f2 fae6 	bl	800029c <__adddf3>
 800dcd0:	4606      	mov	r6, r0
 800dcd2:	460f      	mov	r7, r1
 800dcd4:	f7f2 ff48 	bl	8000b68 <__aeabi_d2iz>
 800dcd8:	2200      	movs	r2, #0
 800dcda:	4682      	mov	sl, r0
 800dcdc:	2300      	movs	r3, #0
 800dcde:	4630      	mov	r0, r6
 800dce0:	4639      	mov	r1, r7
 800dce2:	f7f2 ff03 	bl	8000aec <__aeabi_dcmplt>
 800dce6:	b148      	cbz	r0, 800dcfc <_dtoa_r+0x144>
 800dce8:	4650      	mov	r0, sl
 800dcea:	f7f2 fc23 	bl	8000534 <__aeabi_i2d>
 800dcee:	4632      	mov	r2, r6
 800dcf0:	463b      	mov	r3, r7
 800dcf2:	f7f2 fef1 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcf6:	b908      	cbnz	r0, 800dcfc <_dtoa_r+0x144>
 800dcf8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dcfc:	f1ba 0f16 	cmp.w	sl, #22
 800dd00:	d859      	bhi.n	800ddb6 <_dtoa_r+0x1fe>
 800dd02:	4970      	ldr	r1, [pc, #448]	; (800dec4 <_dtoa_r+0x30c>)
 800dd04:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800dd08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd10:	f7f2 ff0a 	bl	8000b28 <__aeabi_dcmpgt>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d050      	beq.n	800ddba <_dtoa_r+0x202>
 800dd18:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dd22:	1b5d      	subs	r5, r3, r5
 800dd24:	f1b5 0801 	subs.w	r8, r5, #1
 800dd28:	bf49      	itett	mi
 800dd2a:	f1c5 0301 	rsbmi	r3, r5, #1
 800dd2e:	2300      	movpl	r3, #0
 800dd30:	9305      	strmi	r3, [sp, #20]
 800dd32:	f04f 0800 	movmi.w	r8, #0
 800dd36:	bf58      	it	pl
 800dd38:	9305      	strpl	r3, [sp, #20]
 800dd3a:	f1ba 0f00 	cmp.w	sl, #0
 800dd3e:	db3e      	blt.n	800ddbe <_dtoa_r+0x206>
 800dd40:	2300      	movs	r3, #0
 800dd42:	44d0      	add	r8, sl
 800dd44:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800dd48:	9307      	str	r3, [sp, #28]
 800dd4a:	9b06      	ldr	r3, [sp, #24]
 800dd4c:	2b09      	cmp	r3, #9
 800dd4e:	f200 808d 	bhi.w	800de6c <_dtoa_r+0x2b4>
 800dd52:	2b05      	cmp	r3, #5
 800dd54:	bfc4      	itt	gt
 800dd56:	3b04      	subgt	r3, #4
 800dd58:	9306      	strgt	r3, [sp, #24]
 800dd5a:	9b06      	ldr	r3, [sp, #24]
 800dd5c:	f1a3 0302 	sub.w	r3, r3, #2
 800dd60:	bfcc      	ite	gt
 800dd62:	2500      	movgt	r5, #0
 800dd64:	2501      	movle	r5, #1
 800dd66:	2b03      	cmp	r3, #3
 800dd68:	f200 808c 	bhi.w	800de84 <_dtoa_r+0x2cc>
 800dd6c:	e8df f003 	tbb	[pc, r3]
 800dd70:	6e317c7a 	.word	0x6e317c7a
 800dd74:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800dd78:	441d      	add	r5, r3
 800dd7a:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800dd7e:	2820      	cmp	r0, #32
 800dd80:	dd13      	ble.n	800ddaa <_dtoa_r+0x1f2>
 800dd82:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800dd86:	9b00      	ldr	r3, [sp, #0]
 800dd88:	fa08 f800 	lsl.w	r8, r8, r0
 800dd8c:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800dd90:	fa23 f000 	lsr.w	r0, r3, r0
 800dd94:	ea48 0000 	orr.w	r0, r8, r0
 800dd98:	f7f2 fbbc 	bl	8000514 <__aeabi_ui2d>
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	4682      	mov	sl, r0
 800dda0:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800dda4:	3d01      	subs	r5, #1
 800dda6:	9313      	str	r3, [sp, #76]	; 0x4c
 800dda8:	e772      	b.n	800dc90 <_dtoa_r+0xd8>
 800ddaa:	9b00      	ldr	r3, [sp, #0]
 800ddac:	f1c0 0020 	rsb	r0, r0, #32
 800ddb0:	fa03 f000 	lsl.w	r0, r3, r0
 800ddb4:	e7f0      	b.n	800dd98 <_dtoa_r+0x1e0>
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	e7b1      	b.n	800dd1e <_dtoa_r+0x166>
 800ddba:	900f      	str	r0, [sp, #60]	; 0x3c
 800ddbc:	e7b0      	b.n	800dd20 <_dtoa_r+0x168>
 800ddbe:	9b05      	ldr	r3, [sp, #20]
 800ddc0:	eba3 030a 	sub.w	r3, r3, sl
 800ddc4:	9305      	str	r3, [sp, #20]
 800ddc6:	f1ca 0300 	rsb	r3, sl, #0
 800ddca:	9307      	str	r3, [sp, #28]
 800ddcc:	2300      	movs	r3, #0
 800ddce:	930e      	str	r3, [sp, #56]	; 0x38
 800ddd0:	e7bb      	b.n	800dd4a <_dtoa_r+0x192>
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	930a      	str	r3, [sp, #40]	; 0x28
 800ddd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	dd56      	ble.n	800de8a <_dtoa_r+0x2d2>
 800dddc:	9302      	str	r3, [sp, #8]
 800ddde:	4699      	mov	r9, r3
 800dde0:	2200      	movs	r2, #0
 800dde2:	6462      	str	r2, [r4, #68]	; 0x44
 800dde4:	2204      	movs	r2, #4
 800dde6:	f102 0014 	add.w	r0, r2, #20
 800ddea:	4298      	cmp	r0, r3
 800ddec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ddee:	d951      	bls.n	800de94 <_dtoa_r+0x2dc>
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	f000 ff7d 	bl	800ecf0 <_Balloc>
 800ddf6:	f1b9 0f0e 	cmp.w	r9, #14
 800ddfa:	4683      	mov	fp, r0
 800ddfc:	6420      	str	r0, [r4, #64]	; 0x40
 800ddfe:	f200 80e8 	bhi.w	800dfd2 <_dtoa_r+0x41a>
 800de02:	2d00      	cmp	r5, #0
 800de04:	f000 80e5 	beq.w	800dfd2 <_dtoa_r+0x41a>
 800de08:	ed9d 7b00 	vldr	d7, [sp]
 800de0c:	f1ba 0f00 	cmp.w	sl, #0
 800de10:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800de14:	dd76      	ble.n	800df04 <_dtoa_r+0x34c>
 800de16:	4a2b      	ldr	r2, [pc, #172]	; (800dec4 <_dtoa_r+0x30c>)
 800de18:	f00a 030f 	and.w	r3, sl, #15
 800de1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800de20:	ed93 7b00 	vldr	d7, [r3]
 800de24:	ea4f 162a 	mov.w	r6, sl, asr #4
 800de28:	06f0      	lsls	r0, r6, #27
 800de2a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800de2e:	d567      	bpl.n	800df00 <_dtoa_r+0x348>
 800de30:	4b25      	ldr	r3, [pc, #148]	; (800dec8 <_dtoa_r+0x310>)
 800de32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800de36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800de3a:	f7f2 fd0f 	bl	800085c <__aeabi_ddiv>
 800de3e:	e9cd 0100 	strd	r0, r1, [sp]
 800de42:	f006 060f 	and.w	r6, r6, #15
 800de46:	2503      	movs	r5, #3
 800de48:	4f1f      	ldr	r7, [pc, #124]	; (800dec8 <_dtoa_r+0x310>)
 800de4a:	e04e      	b.n	800deea <_dtoa_r+0x332>
 800de4c:	2301      	movs	r3, #1
 800de4e:	930a      	str	r3, [sp, #40]	; 0x28
 800de50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de52:	4453      	add	r3, sl
 800de54:	f103 0901 	add.w	r9, r3, #1
 800de58:	9302      	str	r3, [sp, #8]
 800de5a:	464b      	mov	r3, r9
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	bfb8      	it	lt
 800de60:	2301      	movlt	r3, #1
 800de62:	e7bd      	b.n	800dde0 <_dtoa_r+0x228>
 800de64:	2300      	movs	r3, #0
 800de66:	e7b5      	b.n	800ddd4 <_dtoa_r+0x21c>
 800de68:	2300      	movs	r3, #0
 800de6a:	e7f0      	b.n	800de4e <_dtoa_r+0x296>
 800de6c:	2501      	movs	r5, #1
 800de6e:	2300      	movs	r3, #0
 800de70:	9306      	str	r3, [sp, #24]
 800de72:	950a      	str	r5, [sp, #40]	; 0x28
 800de74:	f04f 33ff 	mov.w	r3, #4294967295
 800de78:	9302      	str	r3, [sp, #8]
 800de7a:	4699      	mov	r9, r3
 800de7c:	2200      	movs	r2, #0
 800de7e:	2312      	movs	r3, #18
 800de80:	920b      	str	r2, [sp, #44]	; 0x2c
 800de82:	e7ad      	b.n	800dde0 <_dtoa_r+0x228>
 800de84:	2301      	movs	r3, #1
 800de86:	930a      	str	r3, [sp, #40]	; 0x28
 800de88:	e7f4      	b.n	800de74 <_dtoa_r+0x2bc>
 800de8a:	2301      	movs	r3, #1
 800de8c:	9302      	str	r3, [sp, #8]
 800de8e:	4699      	mov	r9, r3
 800de90:	461a      	mov	r2, r3
 800de92:	e7f5      	b.n	800de80 <_dtoa_r+0x2c8>
 800de94:	3101      	adds	r1, #1
 800de96:	6461      	str	r1, [r4, #68]	; 0x44
 800de98:	0052      	lsls	r2, r2, #1
 800de9a:	e7a4      	b.n	800dde6 <_dtoa_r+0x22e>
 800de9c:	f3af 8000 	nop.w
 800dea0:	636f4361 	.word	0x636f4361
 800dea4:	3fd287a7 	.word	0x3fd287a7
 800dea8:	8b60c8b3 	.word	0x8b60c8b3
 800deac:	3fc68a28 	.word	0x3fc68a28
 800deb0:	509f79fb 	.word	0x509f79fb
 800deb4:	3fd34413 	.word	0x3fd34413
 800deb8:	7ff00000 	.word	0x7ff00000
 800debc:	08010187 	.word	0x08010187
 800dec0:	3ff80000 	.word	0x3ff80000
 800dec4:	080101e0 	.word	0x080101e0
 800dec8:	080101b8 	.word	0x080101b8
 800decc:	080101b1 	.word	0x080101b1
 800ded0:	07f1      	lsls	r1, r6, #31
 800ded2:	d508      	bpl.n	800dee6 <_dtoa_r+0x32e>
 800ded4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ded8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dedc:	f7f2 fb94 	bl	8000608 <__aeabi_dmul>
 800dee0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dee4:	3501      	adds	r5, #1
 800dee6:	1076      	asrs	r6, r6, #1
 800dee8:	3708      	adds	r7, #8
 800deea:	2e00      	cmp	r6, #0
 800deec:	d1f0      	bne.n	800ded0 <_dtoa_r+0x318>
 800deee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800def2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800def6:	f7f2 fcb1 	bl	800085c <__aeabi_ddiv>
 800defa:	e9cd 0100 	strd	r0, r1, [sp]
 800defe:	e01a      	b.n	800df36 <_dtoa_r+0x37e>
 800df00:	2502      	movs	r5, #2
 800df02:	e7a1      	b.n	800de48 <_dtoa_r+0x290>
 800df04:	f000 80a0 	beq.w	800e048 <_dtoa_r+0x490>
 800df08:	f1ca 0600 	rsb	r6, sl, #0
 800df0c:	4b9f      	ldr	r3, [pc, #636]	; (800e18c <_dtoa_r+0x5d4>)
 800df0e:	4fa0      	ldr	r7, [pc, #640]	; (800e190 <_dtoa_r+0x5d8>)
 800df10:	f006 020f 	and.w	r2, r6, #15
 800df14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800df20:	f7f2 fb72 	bl	8000608 <__aeabi_dmul>
 800df24:	e9cd 0100 	strd	r0, r1, [sp]
 800df28:	1136      	asrs	r6, r6, #4
 800df2a:	2300      	movs	r3, #0
 800df2c:	2502      	movs	r5, #2
 800df2e:	2e00      	cmp	r6, #0
 800df30:	d17f      	bne.n	800e032 <_dtoa_r+0x47a>
 800df32:	2b00      	cmp	r3, #0
 800df34:	d1e1      	bne.n	800defa <_dtoa_r+0x342>
 800df36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df38:	2b00      	cmp	r3, #0
 800df3a:	f000 8087 	beq.w	800e04c <_dtoa_r+0x494>
 800df3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800df42:	2200      	movs	r2, #0
 800df44:	4b93      	ldr	r3, [pc, #588]	; (800e194 <_dtoa_r+0x5dc>)
 800df46:	4630      	mov	r0, r6
 800df48:	4639      	mov	r1, r7
 800df4a:	f7f2 fdcf 	bl	8000aec <__aeabi_dcmplt>
 800df4e:	2800      	cmp	r0, #0
 800df50:	d07c      	beq.n	800e04c <_dtoa_r+0x494>
 800df52:	f1b9 0f00 	cmp.w	r9, #0
 800df56:	d079      	beq.n	800e04c <_dtoa_r+0x494>
 800df58:	9b02      	ldr	r3, [sp, #8]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	dd35      	ble.n	800dfca <_dtoa_r+0x412>
 800df5e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800df62:	9308      	str	r3, [sp, #32]
 800df64:	4639      	mov	r1, r7
 800df66:	2200      	movs	r2, #0
 800df68:	4b8b      	ldr	r3, [pc, #556]	; (800e198 <_dtoa_r+0x5e0>)
 800df6a:	4630      	mov	r0, r6
 800df6c:	f7f2 fb4c 	bl	8000608 <__aeabi_dmul>
 800df70:	e9cd 0100 	strd	r0, r1, [sp]
 800df74:	9f02      	ldr	r7, [sp, #8]
 800df76:	3501      	adds	r5, #1
 800df78:	4628      	mov	r0, r5
 800df7a:	f7f2 fadb 	bl	8000534 <__aeabi_i2d>
 800df7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df82:	f7f2 fb41 	bl	8000608 <__aeabi_dmul>
 800df86:	2200      	movs	r2, #0
 800df88:	4b84      	ldr	r3, [pc, #528]	; (800e19c <_dtoa_r+0x5e4>)
 800df8a:	f7f2 f987 	bl	800029c <__adddf3>
 800df8e:	4605      	mov	r5, r0
 800df90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800df94:	2f00      	cmp	r7, #0
 800df96:	d15d      	bne.n	800e054 <_dtoa_r+0x49c>
 800df98:	2200      	movs	r2, #0
 800df9a:	4b81      	ldr	r3, [pc, #516]	; (800e1a0 <_dtoa_r+0x5e8>)
 800df9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfa0:	f7f2 f97a 	bl	8000298 <__aeabi_dsub>
 800dfa4:	462a      	mov	r2, r5
 800dfa6:	4633      	mov	r3, r6
 800dfa8:	e9cd 0100 	strd	r0, r1, [sp]
 800dfac:	f7f2 fdbc 	bl	8000b28 <__aeabi_dcmpgt>
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	f040 8288 	bne.w	800e4c6 <_dtoa_r+0x90e>
 800dfb6:	462a      	mov	r2, r5
 800dfb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800dfbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dfc0:	f7f2 fd94 	bl	8000aec <__aeabi_dcmplt>
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	f040 827c 	bne.w	800e4c2 <_dtoa_r+0x90a>
 800dfca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dfce:	e9cd 2300 	strd	r2, r3, [sp]
 800dfd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	f2c0 8150 	blt.w	800e27a <_dtoa_r+0x6c2>
 800dfda:	f1ba 0f0e 	cmp.w	sl, #14
 800dfde:	f300 814c 	bgt.w	800e27a <_dtoa_r+0x6c2>
 800dfe2:	4b6a      	ldr	r3, [pc, #424]	; (800e18c <_dtoa_r+0x5d4>)
 800dfe4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dfe8:	ed93 7b00 	vldr	d7, [r3]
 800dfec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dff4:	f280 80d8 	bge.w	800e1a8 <_dtoa_r+0x5f0>
 800dff8:	f1b9 0f00 	cmp.w	r9, #0
 800dffc:	f300 80d4 	bgt.w	800e1a8 <_dtoa_r+0x5f0>
 800e000:	f040 825e 	bne.w	800e4c0 <_dtoa_r+0x908>
 800e004:	2200      	movs	r2, #0
 800e006:	4b66      	ldr	r3, [pc, #408]	; (800e1a0 <_dtoa_r+0x5e8>)
 800e008:	ec51 0b17 	vmov	r0, r1, d7
 800e00c:	f7f2 fafc 	bl	8000608 <__aeabi_dmul>
 800e010:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e014:	f7f2 fd7e 	bl	8000b14 <__aeabi_dcmpge>
 800e018:	464f      	mov	r7, r9
 800e01a:	464e      	mov	r6, r9
 800e01c:	2800      	cmp	r0, #0
 800e01e:	f040 8234 	bne.w	800e48a <_dtoa_r+0x8d2>
 800e022:	2331      	movs	r3, #49	; 0x31
 800e024:	f10b 0501 	add.w	r5, fp, #1
 800e028:	f88b 3000 	strb.w	r3, [fp]
 800e02c:	f10a 0a01 	add.w	sl, sl, #1
 800e030:	e22f      	b.n	800e492 <_dtoa_r+0x8da>
 800e032:	07f2      	lsls	r2, r6, #31
 800e034:	d505      	bpl.n	800e042 <_dtoa_r+0x48a>
 800e036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e03a:	f7f2 fae5 	bl	8000608 <__aeabi_dmul>
 800e03e:	3501      	adds	r5, #1
 800e040:	2301      	movs	r3, #1
 800e042:	1076      	asrs	r6, r6, #1
 800e044:	3708      	adds	r7, #8
 800e046:	e772      	b.n	800df2e <_dtoa_r+0x376>
 800e048:	2502      	movs	r5, #2
 800e04a:	e774      	b.n	800df36 <_dtoa_r+0x37e>
 800e04c:	f8cd a020 	str.w	sl, [sp, #32]
 800e050:	464f      	mov	r7, r9
 800e052:	e791      	b.n	800df78 <_dtoa_r+0x3c0>
 800e054:	4b4d      	ldr	r3, [pc, #308]	; (800e18c <_dtoa_r+0x5d4>)
 800e056:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e05a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e060:	2b00      	cmp	r3, #0
 800e062:	d047      	beq.n	800e0f4 <_dtoa_r+0x53c>
 800e064:	4602      	mov	r2, r0
 800e066:	460b      	mov	r3, r1
 800e068:	2000      	movs	r0, #0
 800e06a:	494e      	ldr	r1, [pc, #312]	; (800e1a4 <_dtoa_r+0x5ec>)
 800e06c:	f7f2 fbf6 	bl	800085c <__aeabi_ddiv>
 800e070:	462a      	mov	r2, r5
 800e072:	4633      	mov	r3, r6
 800e074:	f7f2 f910 	bl	8000298 <__aeabi_dsub>
 800e078:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e07c:	465d      	mov	r5, fp
 800e07e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e082:	f7f2 fd71 	bl	8000b68 <__aeabi_d2iz>
 800e086:	4606      	mov	r6, r0
 800e088:	f7f2 fa54 	bl	8000534 <__aeabi_i2d>
 800e08c:	4602      	mov	r2, r0
 800e08e:	460b      	mov	r3, r1
 800e090:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e094:	f7f2 f900 	bl	8000298 <__aeabi_dsub>
 800e098:	3630      	adds	r6, #48	; 0x30
 800e09a:	f805 6b01 	strb.w	r6, [r5], #1
 800e09e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e0a2:	e9cd 0100 	strd	r0, r1, [sp]
 800e0a6:	f7f2 fd21 	bl	8000aec <__aeabi_dcmplt>
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d163      	bne.n	800e176 <_dtoa_r+0x5be>
 800e0ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0b2:	2000      	movs	r0, #0
 800e0b4:	4937      	ldr	r1, [pc, #220]	; (800e194 <_dtoa_r+0x5dc>)
 800e0b6:	f7f2 f8ef 	bl	8000298 <__aeabi_dsub>
 800e0ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e0be:	f7f2 fd15 	bl	8000aec <__aeabi_dcmplt>
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	f040 80b7 	bne.w	800e236 <_dtoa_r+0x67e>
 800e0c8:	eba5 030b 	sub.w	r3, r5, fp
 800e0cc:	429f      	cmp	r7, r3
 800e0ce:	f77f af7c 	ble.w	800dfca <_dtoa_r+0x412>
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	4b30      	ldr	r3, [pc, #192]	; (800e198 <_dtoa_r+0x5e0>)
 800e0d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e0da:	f7f2 fa95 	bl	8000608 <__aeabi_dmul>
 800e0de:	2200      	movs	r2, #0
 800e0e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e0e4:	4b2c      	ldr	r3, [pc, #176]	; (800e198 <_dtoa_r+0x5e0>)
 800e0e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0ea:	f7f2 fa8d 	bl	8000608 <__aeabi_dmul>
 800e0ee:	e9cd 0100 	strd	r0, r1, [sp]
 800e0f2:	e7c4      	b.n	800e07e <_dtoa_r+0x4c6>
 800e0f4:	462a      	mov	r2, r5
 800e0f6:	4633      	mov	r3, r6
 800e0f8:	f7f2 fa86 	bl	8000608 <__aeabi_dmul>
 800e0fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e100:	eb0b 0507 	add.w	r5, fp, r7
 800e104:	465e      	mov	r6, fp
 800e106:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e10a:	f7f2 fd2d 	bl	8000b68 <__aeabi_d2iz>
 800e10e:	4607      	mov	r7, r0
 800e110:	f7f2 fa10 	bl	8000534 <__aeabi_i2d>
 800e114:	3730      	adds	r7, #48	; 0x30
 800e116:	4602      	mov	r2, r0
 800e118:	460b      	mov	r3, r1
 800e11a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e11e:	f7f2 f8bb 	bl	8000298 <__aeabi_dsub>
 800e122:	f806 7b01 	strb.w	r7, [r6], #1
 800e126:	42ae      	cmp	r6, r5
 800e128:	e9cd 0100 	strd	r0, r1, [sp]
 800e12c:	f04f 0200 	mov.w	r2, #0
 800e130:	d126      	bne.n	800e180 <_dtoa_r+0x5c8>
 800e132:	4b1c      	ldr	r3, [pc, #112]	; (800e1a4 <_dtoa_r+0x5ec>)
 800e134:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e138:	f7f2 f8b0 	bl	800029c <__adddf3>
 800e13c:	4602      	mov	r2, r0
 800e13e:	460b      	mov	r3, r1
 800e140:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e144:	f7f2 fcf0 	bl	8000b28 <__aeabi_dcmpgt>
 800e148:	2800      	cmp	r0, #0
 800e14a:	d174      	bne.n	800e236 <_dtoa_r+0x67e>
 800e14c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e150:	2000      	movs	r0, #0
 800e152:	4914      	ldr	r1, [pc, #80]	; (800e1a4 <_dtoa_r+0x5ec>)
 800e154:	f7f2 f8a0 	bl	8000298 <__aeabi_dsub>
 800e158:	4602      	mov	r2, r0
 800e15a:	460b      	mov	r3, r1
 800e15c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e160:	f7f2 fcc4 	bl	8000aec <__aeabi_dcmplt>
 800e164:	2800      	cmp	r0, #0
 800e166:	f43f af30 	beq.w	800dfca <_dtoa_r+0x412>
 800e16a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e16e:	2b30      	cmp	r3, #48	; 0x30
 800e170:	f105 32ff 	add.w	r2, r5, #4294967295
 800e174:	d002      	beq.n	800e17c <_dtoa_r+0x5c4>
 800e176:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e17a:	e04a      	b.n	800e212 <_dtoa_r+0x65a>
 800e17c:	4615      	mov	r5, r2
 800e17e:	e7f4      	b.n	800e16a <_dtoa_r+0x5b2>
 800e180:	4b05      	ldr	r3, [pc, #20]	; (800e198 <_dtoa_r+0x5e0>)
 800e182:	f7f2 fa41 	bl	8000608 <__aeabi_dmul>
 800e186:	e9cd 0100 	strd	r0, r1, [sp]
 800e18a:	e7bc      	b.n	800e106 <_dtoa_r+0x54e>
 800e18c:	080101e0 	.word	0x080101e0
 800e190:	080101b8 	.word	0x080101b8
 800e194:	3ff00000 	.word	0x3ff00000
 800e198:	40240000 	.word	0x40240000
 800e19c:	401c0000 	.word	0x401c0000
 800e1a0:	40140000 	.word	0x40140000
 800e1a4:	3fe00000 	.word	0x3fe00000
 800e1a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e1ac:	465d      	mov	r5, fp
 800e1ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e1b2:	4630      	mov	r0, r6
 800e1b4:	4639      	mov	r1, r7
 800e1b6:	f7f2 fb51 	bl	800085c <__aeabi_ddiv>
 800e1ba:	f7f2 fcd5 	bl	8000b68 <__aeabi_d2iz>
 800e1be:	4680      	mov	r8, r0
 800e1c0:	f7f2 f9b8 	bl	8000534 <__aeabi_i2d>
 800e1c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e1c8:	f7f2 fa1e 	bl	8000608 <__aeabi_dmul>
 800e1cc:	4602      	mov	r2, r0
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	4639      	mov	r1, r7
 800e1d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e1d8:	f7f2 f85e 	bl	8000298 <__aeabi_dsub>
 800e1dc:	f805 6b01 	strb.w	r6, [r5], #1
 800e1e0:	eba5 060b 	sub.w	r6, r5, fp
 800e1e4:	45b1      	cmp	r9, r6
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	d139      	bne.n	800e260 <_dtoa_r+0x6a8>
 800e1ec:	f7f2 f856 	bl	800029c <__adddf3>
 800e1f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e1f4:	4606      	mov	r6, r0
 800e1f6:	460f      	mov	r7, r1
 800e1f8:	f7f2 fc96 	bl	8000b28 <__aeabi_dcmpgt>
 800e1fc:	b9c8      	cbnz	r0, 800e232 <_dtoa_r+0x67a>
 800e1fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e202:	4630      	mov	r0, r6
 800e204:	4639      	mov	r1, r7
 800e206:	f7f2 fc67 	bl	8000ad8 <__aeabi_dcmpeq>
 800e20a:	b110      	cbz	r0, 800e212 <_dtoa_r+0x65a>
 800e20c:	f018 0f01 	tst.w	r8, #1
 800e210:	d10f      	bne.n	800e232 <_dtoa_r+0x67a>
 800e212:	9904      	ldr	r1, [sp, #16]
 800e214:	4620      	mov	r0, r4
 800e216:	f000 fd90 	bl	800ed3a <_Bfree>
 800e21a:	2300      	movs	r3, #0
 800e21c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e21e:	702b      	strb	r3, [r5, #0]
 800e220:	f10a 0301 	add.w	r3, sl, #1
 800e224:	6013      	str	r3, [r2, #0]
 800e226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f43f acff 	beq.w	800dc2c <_dtoa_r+0x74>
 800e22e:	601d      	str	r5, [r3, #0]
 800e230:	e4fc      	b.n	800dc2c <_dtoa_r+0x74>
 800e232:	f8cd a020 	str.w	sl, [sp, #32]
 800e236:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e23a:	2a39      	cmp	r2, #57	; 0x39
 800e23c:	f105 33ff 	add.w	r3, r5, #4294967295
 800e240:	d108      	bne.n	800e254 <_dtoa_r+0x69c>
 800e242:	459b      	cmp	fp, r3
 800e244:	d10a      	bne.n	800e25c <_dtoa_r+0x6a4>
 800e246:	9b08      	ldr	r3, [sp, #32]
 800e248:	3301      	adds	r3, #1
 800e24a:	9308      	str	r3, [sp, #32]
 800e24c:	2330      	movs	r3, #48	; 0x30
 800e24e:	f88b 3000 	strb.w	r3, [fp]
 800e252:	465b      	mov	r3, fp
 800e254:	781a      	ldrb	r2, [r3, #0]
 800e256:	3201      	adds	r2, #1
 800e258:	701a      	strb	r2, [r3, #0]
 800e25a:	e78c      	b.n	800e176 <_dtoa_r+0x5be>
 800e25c:	461d      	mov	r5, r3
 800e25e:	e7ea      	b.n	800e236 <_dtoa_r+0x67e>
 800e260:	2200      	movs	r2, #0
 800e262:	4b9b      	ldr	r3, [pc, #620]	; (800e4d0 <_dtoa_r+0x918>)
 800e264:	f7f2 f9d0 	bl	8000608 <__aeabi_dmul>
 800e268:	2200      	movs	r2, #0
 800e26a:	2300      	movs	r3, #0
 800e26c:	4606      	mov	r6, r0
 800e26e:	460f      	mov	r7, r1
 800e270:	f7f2 fc32 	bl	8000ad8 <__aeabi_dcmpeq>
 800e274:	2800      	cmp	r0, #0
 800e276:	d09a      	beq.n	800e1ae <_dtoa_r+0x5f6>
 800e278:	e7cb      	b.n	800e212 <_dtoa_r+0x65a>
 800e27a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e27c:	2a00      	cmp	r2, #0
 800e27e:	f000 808b 	beq.w	800e398 <_dtoa_r+0x7e0>
 800e282:	9a06      	ldr	r2, [sp, #24]
 800e284:	2a01      	cmp	r2, #1
 800e286:	dc6e      	bgt.n	800e366 <_dtoa_r+0x7ae>
 800e288:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e28a:	2a00      	cmp	r2, #0
 800e28c:	d067      	beq.n	800e35e <_dtoa_r+0x7a6>
 800e28e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e292:	9f07      	ldr	r7, [sp, #28]
 800e294:	9d05      	ldr	r5, [sp, #20]
 800e296:	9a05      	ldr	r2, [sp, #20]
 800e298:	2101      	movs	r1, #1
 800e29a:	441a      	add	r2, r3
 800e29c:	4620      	mov	r0, r4
 800e29e:	9205      	str	r2, [sp, #20]
 800e2a0:	4498      	add	r8, r3
 800e2a2:	f000 fddc 	bl	800ee5e <__i2b>
 800e2a6:	4606      	mov	r6, r0
 800e2a8:	2d00      	cmp	r5, #0
 800e2aa:	dd0c      	ble.n	800e2c6 <_dtoa_r+0x70e>
 800e2ac:	f1b8 0f00 	cmp.w	r8, #0
 800e2b0:	dd09      	ble.n	800e2c6 <_dtoa_r+0x70e>
 800e2b2:	4545      	cmp	r5, r8
 800e2b4:	9a05      	ldr	r2, [sp, #20]
 800e2b6:	462b      	mov	r3, r5
 800e2b8:	bfa8      	it	ge
 800e2ba:	4643      	movge	r3, r8
 800e2bc:	1ad2      	subs	r2, r2, r3
 800e2be:	9205      	str	r2, [sp, #20]
 800e2c0:	1aed      	subs	r5, r5, r3
 800e2c2:	eba8 0803 	sub.w	r8, r8, r3
 800e2c6:	9b07      	ldr	r3, [sp, #28]
 800e2c8:	b1eb      	cbz	r3, 800e306 <_dtoa_r+0x74e>
 800e2ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d067      	beq.n	800e3a0 <_dtoa_r+0x7e8>
 800e2d0:	b18f      	cbz	r7, 800e2f6 <_dtoa_r+0x73e>
 800e2d2:	4631      	mov	r1, r6
 800e2d4:	463a      	mov	r2, r7
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f000 fe60 	bl	800ef9c <__pow5mult>
 800e2dc:	9a04      	ldr	r2, [sp, #16]
 800e2de:	4601      	mov	r1, r0
 800e2e0:	4606      	mov	r6, r0
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	f000 fdc4 	bl	800ee70 <__multiply>
 800e2e8:	9904      	ldr	r1, [sp, #16]
 800e2ea:	9008      	str	r0, [sp, #32]
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	f000 fd24 	bl	800ed3a <_Bfree>
 800e2f2:	9b08      	ldr	r3, [sp, #32]
 800e2f4:	9304      	str	r3, [sp, #16]
 800e2f6:	9b07      	ldr	r3, [sp, #28]
 800e2f8:	1bda      	subs	r2, r3, r7
 800e2fa:	d004      	beq.n	800e306 <_dtoa_r+0x74e>
 800e2fc:	9904      	ldr	r1, [sp, #16]
 800e2fe:	4620      	mov	r0, r4
 800e300:	f000 fe4c 	bl	800ef9c <__pow5mult>
 800e304:	9004      	str	r0, [sp, #16]
 800e306:	2101      	movs	r1, #1
 800e308:	4620      	mov	r0, r4
 800e30a:	f000 fda8 	bl	800ee5e <__i2b>
 800e30e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e310:	4607      	mov	r7, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	f000 81cf 	beq.w	800e6b6 <_dtoa_r+0xafe>
 800e318:	461a      	mov	r2, r3
 800e31a:	4601      	mov	r1, r0
 800e31c:	4620      	mov	r0, r4
 800e31e:	f000 fe3d 	bl	800ef9c <__pow5mult>
 800e322:	9b06      	ldr	r3, [sp, #24]
 800e324:	2b01      	cmp	r3, #1
 800e326:	4607      	mov	r7, r0
 800e328:	dc40      	bgt.n	800e3ac <_dtoa_r+0x7f4>
 800e32a:	9b00      	ldr	r3, [sp, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d139      	bne.n	800e3a4 <_dtoa_r+0x7ec>
 800e330:	9b01      	ldr	r3, [sp, #4]
 800e332:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e336:	2b00      	cmp	r3, #0
 800e338:	d136      	bne.n	800e3a8 <_dtoa_r+0x7f0>
 800e33a:	9b01      	ldr	r3, [sp, #4]
 800e33c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e340:	0d1b      	lsrs	r3, r3, #20
 800e342:	051b      	lsls	r3, r3, #20
 800e344:	b12b      	cbz	r3, 800e352 <_dtoa_r+0x79a>
 800e346:	9b05      	ldr	r3, [sp, #20]
 800e348:	3301      	adds	r3, #1
 800e34a:	9305      	str	r3, [sp, #20]
 800e34c:	f108 0801 	add.w	r8, r8, #1
 800e350:	2301      	movs	r3, #1
 800e352:	9307      	str	r3, [sp, #28]
 800e354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e356:	2b00      	cmp	r3, #0
 800e358:	d12a      	bne.n	800e3b0 <_dtoa_r+0x7f8>
 800e35a:	2001      	movs	r0, #1
 800e35c:	e030      	b.n	800e3c0 <_dtoa_r+0x808>
 800e35e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e360:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e364:	e795      	b.n	800e292 <_dtoa_r+0x6da>
 800e366:	9b07      	ldr	r3, [sp, #28]
 800e368:	f109 37ff 	add.w	r7, r9, #4294967295
 800e36c:	42bb      	cmp	r3, r7
 800e36e:	bfbf      	itttt	lt
 800e370:	9b07      	ldrlt	r3, [sp, #28]
 800e372:	9707      	strlt	r7, [sp, #28]
 800e374:	1afa      	sublt	r2, r7, r3
 800e376:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e378:	bfbb      	ittet	lt
 800e37a:	189b      	addlt	r3, r3, r2
 800e37c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e37e:	1bdf      	subge	r7, r3, r7
 800e380:	2700      	movlt	r7, #0
 800e382:	f1b9 0f00 	cmp.w	r9, #0
 800e386:	bfb5      	itete	lt
 800e388:	9b05      	ldrlt	r3, [sp, #20]
 800e38a:	9d05      	ldrge	r5, [sp, #20]
 800e38c:	eba3 0509 	sublt.w	r5, r3, r9
 800e390:	464b      	movge	r3, r9
 800e392:	bfb8      	it	lt
 800e394:	2300      	movlt	r3, #0
 800e396:	e77e      	b.n	800e296 <_dtoa_r+0x6de>
 800e398:	9f07      	ldr	r7, [sp, #28]
 800e39a:	9d05      	ldr	r5, [sp, #20]
 800e39c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e39e:	e783      	b.n	800e2a8 <_dtoa_r+0x6f0>
 800e3a0:	9a07      	ldr	r2, [sp, #28]
 800e3a2:	e7ab      	b.n	800e2fc <_dtoa_r+0x744>
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	e7d4      	b.n	800e352 <_dtoa_r+0x79a>
 800e3a8:	9b00      	ldr	r3, [sp, #0]
 800e3aa:	e7d2      	b.n	800e352 <_dtoa_r+0x79a>
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	9307      	str	r3, [sp, #28]
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e3b6:	6918      	ldr	r0, [r3, #16]
 800e3b8:	f000 fd03 	bl	800edc2 <__hi0bits>
 800e3bc:	f1c0 0020 	rsb	r0, r0, #32
 800e3c0:	4440      	add	r0, r8
 800e3c2:	f010 001f 	ands.w	r0, r0, #31
 800e3c6:	d047      	beq.n	800e458 <_dtoa_r+0x8a0>
 800e3c8:	f1c0 0320 	rsb	r3, r0, #32
 800e3cc:	2b04      	cmp	r3, #4
 800e3ce:	dd3b      	ble.n	800e448 <_dtoa_r+0x890>
 800e3d0:	9b05      	ldr	r3, [sp, #20]
 800e3d2:	f1c0 001c 	rsb	r0, r0, #28
 800e3d6:	4403      	add	r3, r0
 800e3d8:	9305      	str	r3, [sp, #20]
 800e3da:	4405      	add	r5, r0
 800e3dc:	4480      	add	r8, r0
 800e3de:	9b05      	ldr	r3, [sp, #20]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	dd05      	ble.n	800e3f0 <_dtoa_r+0x838>
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	9904      	ldr	r1, [sp, #16]
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	f000 fe17 	bl	800f01c <__lshift>
 800e3ee:	9004      	str	r0, [sp, #16]
 800e3f0:	f1b8 0f00 	cmp.w	r8, #0
 800e3f4:	dd05      	ble.n	800e402 <_dtoa_r+0x84a>
 800e3f6:	4639      	mov	r1, r7
 800e3f8:	4642      	mov	r2, r8
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f000 fe0e 	bl	800f01c <__lshift>
 800e400:	4607      	mov	r7, r0
 800e402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e404:	b353      	cbz	r3, 800e45c <_dtoa_r+0x8a4>
 800e406:	4639      	mov	r1, r7
 800e408:	9804      	ldr	r0, [sp, #16]
 800e40a:	f000 fe5b 	bl	800f0c4 <__mcmp>
 800e40e:	2800      	cmp	r0, #0
 800e410:	da24      	bge.n	800e45c <_dtoa_r+0x8a4>
 800e412:	2300      	movs	r3, #0
 800e414:	220a      	movs	r2, #10
 800e416:	9904      	ldr	r1, [sp, #16]
 800e418:	4620      	mov	r0, r4
 800e41a:	f000 fc97 	bl	800ed4c <__multadd>
 800e41e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e420:	9004      	str	r0, [sp, #16]
 800e422:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e426:	2b00      	cmp	r3, #0
 800e428:	f000 814c 	beq.w	800e6c4 <_dtoa_r+0xb0c>
 800e42c:	2300      	movs	r3, #0
 800e42e:	4631      	mov	r1, r6
 800e430:	220a      	movs	r2, #10
 800e432:	4620      	mov	r0, r4
 800e434:	f000 fc8a 	bl	800ed4c <__multadd>
 800e438:	9b02      	ldr	r3, [sp, #8]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	4606      	mov	r6, r0
 800e43e:	dc4f      	bgt.n	800e4e0 <_dtoa_r+0x928>
 800e440:	9b06      	ldr	r3, [sp, #24]
 800e442:	2b02      	cmp	r3, #2
 800e444:	dd4c      	ble.n	800e4e0 <_dtoa_r+0x928>
 800e446:	e011      	b.n	800e46c <_dtoa_r+0x8b4>
 800e448:	d0c9      	beq.n	800e3de <_dtoa_r+0x826>
 800e44a:	9a05      	ldr	r2, [sp, #20]
 800e44c:	331c      	adds	r3, #28
 800e44e:	441a      	add	r2, r3
 800e450:	9205      	str	r2, [sp, #20]
 800e452:	441d      	add	r5, r3
 800e454:	4498      	add	r8, r3
 800e456:	e7c2      	b.n	800e3de <_dtoa_r+0x826>
 800e458:	4603      	mov	r3, r0
 800e45a:	e7f6      	b.n	800e44a <_dtoa_r+0x892>
 800e45c:	f1b9 0f00 	cmp.w	r9, #0
 800e460:	dc38      	bgt.n	800e4d4 <_dtoa_r+0x91c>
 800e462:	9b06      	ldr	r3, [sp, #24]
 800e464:	2b02      	cmp	r3, #2
 800e466:	dd35      	ble.n	800e4d4 <_dtoa_r+0x91c>
 800e468:	f8cd 9008 	str.w	r9, [sp, #8]
 800e46c:	9b02      	ldr	r3, [sp, #8]
 800e46e:	b963      	cbnz	r3, 800e48a <_dtoa_r+0x8d2>
 800e470:	4639      	mov	r1, r7
 800e472:	2205      	movs	r2, #5
 800e474:	4620      	mov	r0, r4
 800e476:	f000 fc69 	bl	800ed4c <__multadd>
 800e47a:	4601      	mov	r1, r0
 800e47c:	4607      	mov	r7, r0
 800e47e:	9804      	ldr	r0, [sp, #16]
 800e480:	f000 fe20 	bl	800f0c4 <__mcmp>
 800e484:	2800      	cmp	r0, #0
 800e486:	f73f adcc 	bgt.w	800e022 <_dtoa_r+0x46a>
 800e48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e48c:	465d      	mov	r5, fp
 800e48e:	ea6f 0a03 	mvn.w	sl, r3
 800e492:	f04f 0900 	mov.w	r9, #0
 800e496:	4639      	mov	r1, r7
 800e498:	4620      	mov	r0, r4
 800e49a:	f000 fc4e 	bl	800ed3a <_Bfree>
 800e49e:	2e00      	cmp	r6, #0
 800e4a0:	f43f aeb7 	beq.w	800e212 <_dtoa_r+0x65a>
 800e4a4:	f1b9 0f00 	cmp.w	r9, #0
 800e4a8:	d005      	beq.n	800e4b6 <_dtoa_r+0x8fe>
 800e4aa:	45b1      	cmp	r9, r6
 800e4ac:	d003      	beq.n	800e4b6 <_dtoa_r+0x8fe>
 800e4ae:	4649      	mov	r1, r9
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	f000 fc42 	bl	800ed3a <_Bfree>
 800e4b6:	4631      	mov	r1, r6
 800e4b8:	4620      	mov	r0, r4
 800e4ba:	f000 fc3e 	bl	800ed3a <_Bfree>
 800e4be:	e6a8      	b.n	800e212 <_dtoa_r+0x65a>
 800e4c0:	2700      	movs	r7, #0
 800e4c2:	463e      	mov	r6, r7
 800e4c4:	e7e1      	b.n	800e48a <_dtoa_r+0x8d2>
 800e4c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e4ca:	463e      	mov	r6, r7
 800e4cc:	e5a9      	b.n	800e022 <_dtoa_r+0x46a>
 800e4ce:	bf00      	nop
 800e4d0:	40240000 	.word	0x40240000
 800e4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4d6:	f8cd 9008 	str.w	r9, [sp, #8]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	f000 80f9 	beq.w	800e6d2 <_dtoa_r+0xb1a>
 800e4e0:	2d00      	cmp	r5, #0
 800e4e2:	dd05      	ble.n	800e4f0 <_dtoa_r+0x938>
 800e4e4:	4631      	mov	r1, r6
 800e4e6:	462a      	mov	r2, r5
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	f000 fd97 	bl	800f01c <__lshift>
 800e4ee:	4606      	mov	r6, r0
 800e4f0:	9b07      	ldr	r3, [sp, #28]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d04c      	beq.n	800e590 <_dtoa_r+0x9d8>
 800e4f6:	6871      	ldr	r1, [r6, #4]
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	f000 fbf9 	bl	800ecf0 <_Balloc>
 800e4fe:	6932      	ldr	r2, [r6, #16]
 800e500:	3202      	adds	r2, #2
 800e502:	4605      	mov	r5, r0
 800e504:	0092      	lsls	r2, r2, #2
 800e506:	f106 010c 	add.w	r1, r6, #12
 800e50a:	300c      	adds	r0, #12
 800e50c:	f7fd ff18 	bl	800c340 <memcpy>
 800e510:	2201      	movs	r2, #1
 800e512:	4629      	mov	r1, r5
 800e514:	4620      	mov	r0, r4
 800e516:	f000 fd81 	bl	800f01c <__lshift>
 800e51a:	9b00      	ldr	r3, [sp, #0]
 800e51c:	f8cd b014 	str.w	fp, [sp, #20]
 800e520:	f003 0301 	and.w	r3, r3, #1
 800e524:	46b1      	mov	r9, r6
 800e526:	9307      	str	r3, [sp, #28]
 800e528:	4606      	mov	r6, r0
 800e52a:	4639      	mov	r1, r7
 800e52c:	9804      	ldr	r0, [sp, #16]
 800e52e:	f7ff fab5 	bl	800da9c <quorem>
 800e532:	4649      	mov	r1, r9
 800e534:	4605      	mov	r5, r0
 800e536:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e53a:	9804      	ldr	r0, [sp, #16]
 800e53c:	f000 fdc2 	bl	800f0c4 <__mcmp>
 800e540:	4632      	mov	r2, r6
 800e542:	9000      	str	r0, [sp, #0]
 800e544:	4639      	mov	r1, r7
 800e546:	4620      	mov	r0, r4
 800e548:	f000 fdd6 	bl	800f0f8 <__mdiff>
 800e54c:	68c3      	ldr	r3, [r0, #12]
 800e54e:	4602      	mov	r2, r0
 800e550:	bb03      	cbnz	r3, 800e594 <_dtoa_r+0x9dc>
 800e552:	4601      	mov	r1, r0
 800e554:	9008      	str	r0, [sp, #32]
 800e556:	9804      	ldr	r0, [sp, #16]
 800e558:	f000 fdb4 	bl	800f0c4 <__mcmp>
 800e55c:	9a08      	ldr	r2, [sp, #32]
 800e55e:	4603      	mov	r3, r0
 800e560:	4611      	mov	r1, r2
 800e562:	4620      	mov	r0, r4
 800e564:	9308      	str	r3, [sp, #32]
 800e566:	f000 fbe8 	bl	800ed3a <_Bfree>
 800e56a:	9b08      	ldr	r3, [sp, #32]
 800e56c:	b9a3      	cbnz	r3, 800e598 <_dtoa_r+0x9e0>
 800e56e:	9a06      	ldr	r2, [sp, #24]
 800e570:	b992      	cbnz	r2, 800e598 <_dtoa_r+0x9e0>
 800e572:	9a07      	ldr	r2, [sp, #28]
 800e574:	b982      	cbnz	r2, 800e598 <_dtoa_r+0x9e0>
 800e576:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e57a:	d029      	beq.n	800e5d0 <_dtoa_r+0xa18>
 800e57c:	9b00      	ldr	r3, [sp, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	dd01      	ble.n	800e586 <_dtoa_r+0x9ce>
 800e582:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e586:	9b05      	ldr	r3, [sp, #20]
 800e588:	1c5d      	adds	r5, r3, #1
 800e58a:	f883 8000 	strb.w	r8, [r3]
 800e58e:	e782      	b.n	800e496 <_dtoa_r+0x8de>
 800e590:	4630      	mov	r0, r6
 800e592:	e7c2      	b.n	800e51a <_dtoa_r+0x962>
 800e594:	2301      	movs	r3, #1
 800e596:	e7e3      	b.n	800e560 <_dtoa_r+0x9a8>
 800e598:	9a00      	ldr	r2, [sp, #0]
 800e59a:	2a00      	cmp	r2, #0
 800e59c:	db04      	blt.n	800e5a8 <_dtoa_r+0x9f0>
 800e59e:	d125      	bne.n	800e5ec <_dtoa_r+0xa34>
 800e5a0:	9a06      	ldr	r2, [sp, #24]
 800e5a2:	bb1a      	cbnz	r2, 800e5ec <_dtoa_r+0xa34>
 800e5a4:	9a07      	ldr	r2, [sp, #28]
 800e5a6:	bb0a      	cbnz	r2, 800e5ec <_dtoa_r+0xa34>
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	ddec      	ble.n	800e586 <_dtoa_r+0x9ce>
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	9904      	ldr	r1, [sp, #16]
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	f000 fd33 	bl	800f01c <__lshift>
 800e5b6:	4639      	mov	r1, r7
 800e5b8:	9004      	str	r0, [sp, #16]
 800e5ba:	f000 fd83 	bl	800f0c4 <__mcmp>
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	dc03      	bgt.n	800e5ca <_dtoa_r+0xa12>
 800e5c2:	d1e0      	bne.n	800e586 <_dtoa_r+0x9ce>
 800e5c4:	f018 0f01 	tst.w	r8, #1
 800e5c8:	d0dd      	beq.n	800e586 <_dtoa_r+0x9ce>
 800e5ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e5ce:	d1d8      	bne.n	800e582 <_dtoa_r+0x9ca>
 800e5d0:	9b05      	ldr	r3, [sp, #20]
 800e5d2:	9a05      	ldr	r2, [sp, #20]
 800e5d4:	1c5d      	adds	r5, r3, #1
 800e5d6:	2339      	movs	r3, #57	; 0x39
 800e5d8:	7013      	strb	r3, [r2, #0]
 800e5da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e5de:	2b39      	cmp	r3, #57	; 0x39
 800e5e0:	f105 32ff 	add.w	r2, r5, #4294967295
 800e5e4:	d04f      	beq.n	800e686 <_dtoa_r+0xace>
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	7013      	strb	r3, [r2, #0]
 800e5ea:	e754      	b.n	800e496 <_dtoa_r+0x8de>
 800e5ec:	9a05      	ldr	r2, [sp, #20]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	f102 0501 	add.w	r5, r2, #1
 800e5f4:	dd06      	ble.n	800e604 <_dtoa_r+0xa4c>
 800e5f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e5fa:	d0e9      	beq.n	800e5d0 <_dtoa_r+0xa18>
 800e5fc:	f108 0801 	add.w	r8, r8, #1
 800e600:	9b05      	ldr	r3, [sp, #20]
 800e602:	e7c2      	b.n	800e58a <_dtoa_r+0x9d2>
 800e604:	9a02      	ldr	r2, [sp, #8]
 800e606:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e60a:	eba5 030b 	sub.w	r3, r5, fp
 800e60e:	4293      	cmp	r3, r2
 800e610:	d021      	beq.n	800e656 <_dtoa_r+0xa9e>
 800e612:	2300      	movs	r3, #0
 800e614:	220a      	movs	r2, #10
 800e616:	9904      	ldr	r1, [sp, #16]
 800e618:	4620      	mov	r0, r4
 800e61a:	f000 fb97 	bl	800ed4c <__multadd>
 800e61e:	45b1      	cmp	r9, r6
 800e620:	9004      	str	r0, [sp, #16]
 800e622:	f04f 0300 	mov.w	r3, #0
 800e626:	f04f 020a 	mov.w	r2, #10
 800e62a:	4649      	mov	r1, r9
 800e62c:	4620      	mov	r0, r4
 800e62e:	d105      	bne.n	800e63c <_dtoa_r+0xa84>
 800e630:	f000 fb8c 	bl	800ed4c <__multadd>
 800e634:	4681      	mov	r9, r0
 800e636:	4606      	mov	r6, r0
 800e638:	9505      	str	r5, [sp, #20]
 800e63a:	e776      	b.n	800e52a <_dtoa_r+0x972>
 800e63c:	f000 fb86 	bl	800ed4c <__multadd>
 800e640:	4631      	mov	r1, r6
 800e642:	4681      	mov	r9, r0
 800e644:	2300      	movs	r3, #0
 800e646:	220a      	movs	r2, #10
 800e648:	4620      	mov	r0, r4
 800e64a:	f000 fb7f 	bl	800ed4c <__multadd>
 800e64e:	4606      	mov	r6, r0
 800e650:	e7f2      	b.n	800e638 <_dtoa_r+0xa80>
 800e652:	f04f 0900 	mov.w	r9, #0
 800e656:	2201      	movs	r2, #1
 800e658:	9904      	ldr	r1, [sp, #16]
 800e65a:	4620      	mov	r0, r4
 800e65c:	f000 fcde 	bl	800f01c <__lshift>
 800e660:	4639      	mov	r1, r7
 800e662:	9004      	str	r0, [sp, #16]
 800e664:	f000 fd2e 	bl	800f0c4 <__mcmp>
 800e668:	2800      	cmp	r0, #0
 800e66a:	dcb6      	bgt.n	800e5da <_dtoa_r+0xa22>
 800e66c:	d102      	bne.n	800e674 <_dtoa_r+0xabc>
 800e66e:	f018 0f01 	tst.w	r8, #1
 800e672:	d1b2      	bne.n	800e5da <_dtoa_r+0xa22>
 800e674:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e678:	2b30      	cmp	r3, #48	; 0x30
 800e67a:	f105 32ff 	add.w	r2, r5, #4294967295
 800e67e:	f47f af0a 	bne.w	800e496 <_dtoa_r+0x8de>
 800e682:	4615      	mov	r5, r2
 800e684:	e7f6      	b.n	800e674 <_dtoa_r+0xabc>
 800e686:	4593      	cmp	fp, r2
 800e688:	d105      	bne.n	800e696 <_dtoa_r+0xade>
 800e68a:	2331      	movs	r3, #49	; 0x31
 800e68c:	f10a 0a01 	add.w	sl, sl, #1
 800e690:	f88b 3000 	strb.w	r3, [fp]
 800e694:	e6ff      	b.n	800e496 <_dtoa_r+0x8de>
 800e696:	4615      	mov	r5, r2
 800e698:	e79f      	b.n	800e5da <_dtoa_r+0xa22>
 800e69a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e700 <_dtoa_r+0xb48>
 800e69e:	f7ff bac5 	b.w	800dc2c <_dtoa_r+0x74>
 800e6a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6a4:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800e704 <_dtoa_r+0xb4c>
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	f43f aabf 	beq.w	800dc2c <_dtoa_r+0x74>
 800e6ae:	f10b 0308 	add.w	r3, fp, #8
 800e6b2:	f7ff bab9 	b.w	800dc28 <_dtoa_r+0x70>
 800e6b6:	9b06      	ldr	r3, [sp, #24]
 800e6b8:	2b01      	cmp	r3, #1
 800e6ba:	f77f ae36 	ble.w	800e32a <_dtoa_r+0x772>
 800e6be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6c0:	9307      	str	r3, [sp, #28]
 800e6c2:	e64a      	b.n	800e35a <_dtoa_r+0x7a2>
 800e6c4:	9b02      	ldr	r3, [sp, #8]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	dc03      	bgt.n	800e6d2 <_dtoa_r+0xb1a>
 800e6ca:	9b06      	ldr	r3, [sp, #24]
 800e6cc:	2b02      	cmp	r3, #2
 800e6ce:	f73f aecd 	bgt.w	800e46c <_dtoa_r+0x8b4>
 800e6d2:	465d      	mov	r5, fp
 800e6d4:	4639      	mov	r1, r7
 800e6d6:	9804      	ldr	r0, [sp, #16]
 800e6d8:	f7ff f9e0 	bl	800da9c <quorem>
 800e6dc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e6e0:	f805 8b01 	strb.w	r8, [r5], #1
 800e6e4:	9a02      	ldr	r2, [sp, #8]
 800e6e6:	eba5 030b 	sub.w	r3, r5, fp
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	ddb1      	ble.n	800e652 <_dtoa_r+0xa9a>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	220a      	movs	r2, #10
 800e6f2:	9904      	ldr	r1, [sp, #16]
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	f000 fb29 	bl	800ed4c <__multadd>
 800e6fa:	9004      	str	r0, [sp, #16]
 800e6fc:	e7ea      	b.n	800e6d4 <_dtoa_r+0xb1c>
 800e6fe:	bf00      	nop
 800e700:	08010186 	.word	0x08010186
 800e704:	080101a8 	.word	0x080101a8

0800e708 <__sflush_r>:
 800e708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e70c:	b293      	uxth	r3, r2
 800e70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e712:	4605      	mov	r5, r0
 800e714:	0718      	lsls	r0, r3, #28
 800e716:	460c      	mov	r4, r1
 800e718:	d45f      	bmi.n	800e7da <__sflush_r+0xd2>
 800e71a:	684b      	ldr	r3, [r1, #4]
 800e71c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e720:	2b00      	cmp	r3, #0
 800e722:	818a      	strh	r2, [r1, #12]
 800e724:	dc05      	bgt.n	800e732 <__sflush_r+0x2a>
 800e726:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800e728:	2b00      	cmp	r3, #0
 800e72a:	dc02      	bgt.n	800e732 <__sflush_r+0x2a>
 800e72c:	2000      	movs	r0, #0
 800e72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e732:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e734:	2e00      	cmp	r6, #0
 800e736:	d0f9      	beq.n	800e72c <__sflush_r+0x24>
 800e738:	2300      	movs	r3, #0
 800e73a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e73e:	682f      	ldr	r7, [r5, #0]
 800e740:	69e1      	ldr	r1, [r4, #28]
 800e742:	602b      	str	r3, [r5, #0]
 800e744:	d036      	beq.n	800e7b4 <__sflush_r+0xac>
 800e746:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e748:	89a3      	ldrh	r3, [r4, #12]
 800e74a:	075a      	lsls	r2, r3, #29
 800e74c:	d505      	bpl.n	800e75a <__sflush_r+0x52>
 800e74e:	6863      	ldr	r3, [r4, #4]
 800e750:	1ac0      	subs	r0, r0, r3
 800e752:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e754:	b10b      	cbz	r3, 800e75a <__sflush_r+0x52>
 800e756:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e758:	1ac0      	subs	r0, r0, r3
 800e75a:	2300      	movs	r3, #0
 800e75c:	4602      	mov	r2, r0
 800e75e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e760:	69e1      	ldr	r1, [r4, #28]
 800e762:	4628      	mov	r0, r5
 800e764:	47b0      	blx	r6
 800e766:	1c43      	adds	r3, r0, #1
 800e768:	89a3      	ldrh	r3, [r4, #12]
 800e76a:	d106      	bne.n	800e77a <__sflush_r+0x72>
 800e76c:	6829      	ldr	r1, [r5, #0]
 800e76e:	291d      	cmp	r1, #29
 800e770:	d84c      	bhi.n	800e80c <__sflush_r+0x104>
 800e772:	4a2b      	ldr	r2, [pc, #172]	; (800e820 <__sflush_r+0x118>)
 800e774:	40ca      	lsrs	r2, r1
 800e776:	07d6      	lsls	r6, r2, #31
 800e778:	d548      	bpl.n	800e80c <__sflush_r+0x104>
 800e77a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e77e:	b21b      	sxth	r3, r3
 800e780:	2200      	movs	r2, #0
 800e782:	6062      	str	r2, [r4, #4]
 800e784:	04d9      	lsls	r1, r3, #19
 800e786:	6922      	ldr	r2, [r4, #16]
 800e788:	81a3      	strh	r3, [r4, #12]
 800e78a:	6022      	str	r2, [r4, #0]
 800e78c:	d504      	bpl.n	800e798 <__sflush_r+0x90>
 800e78e:	1c42      	adds	r2, r0, #1
 800e790:	d101      	bne.n	800e796 <__sflush_r+0x8e>
 800e792:	682b      	ldr	r3, [r5, #0]
 800e794:	b903      	cbnz	r3, 800e798 <__sflush_r+0x90>
 800e796:	6520      	str	r0, [r4, #80]	; 0x50
 800e798:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e79a:	602f      	str	r7, [r5, #0]
 800e79c:	2900      	cmp	r1, #0
 800e79e:	d0c5      	beq.n	800e72c <__sflush_r+0x24>
 800e7a0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e7a4:	4299      	cmp	r1, r3
 800e7a6:	d002      	beq.n	800e7ae <__sflush_r+0xa6>
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	f000 f937 	bl	800ea1c <_free_r>
 800e7ae:	2000      	movs	r0, #0
 800e7b0:	6320      	str	r0, [r4, #48]	; 0x30
 800e7b2:	e7bc      	b.n	800e72e <__sflush_r+0x26>
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	47b0      	blx	r6
 800e7ba:	1c41      	adds	r1, r0, #1
 800e7bc:	d1c4      	bne.n	800e748 <__sflush_r+0x40>
 800e7be:	682b      	ldr	r3, [r5, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d0c1      	beq.n	800e748 <__sflush_r+0x40>
 800e7c4:	2b1d      	cmp	r3, #29
 800e7c6:	d001      	beq.n	800e7cc <__sflush_r+0xc4>
 800e7c8:	2b16      	cmp	r3, #22
 800e7ca:	d101      	bne.n	800e7d0 <__sflush_r+0xc8>
 800e7cc:	602f      	str	r7, [r5, #0]
 800e7ce:	e7ad      	b.n	800e72c <__sflush_r+0x24>
 800e7d0:	89a3      	ldrh	r3, [r4, #12]
 800e7d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7d6:	81a3      	strh	r3, [r4, #12]
 800e7d8:	e7a9      	b.n	800e72e <__sflush_r+0x26>
 800e7da:	690f      	ldr	r7, [r1, #16]
 800e7dc:	2f00      	cmp	r7, #0
 800e7de:	d0a5      	beq.n	800e72c <__sflush_r+0x24>
 800e7e0:	079b      	lsls	r3, r3, #30
 800e7e2:	680e      	ldr	r6, [r1, #0]
 800e7e4:	bf08      	it	eq
 800e7e6:	694b      	ldreq	r3, [r1, #20]
 800e7e8:	600f      	str	r7, [r1, #0]
 800e7ea:	bf18      	it	ne
 800e7ec:	2300      	movne	r3, #0
 800e7ee:	eba6 0807 	sub.w	r8, r6, r7
 800e7f2:	608b      	str	r3, [r1, #8]
 800e7f4:	f1b8 0f00 	cmp.w	r8, #0
 800e7f8:	dd98      	ble.n	800e72c <__sflush_r+0x24>
 800e7fa:	4643      	mov	r3, r8
 800e7fc:	463a      	mov	r2, r7
 800e7fe:	69e1      	ldr	r1, [r4, #28]
 800e800:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e802:	4628      	mov	r0, r5
 800e804:	47b0      	blx	r6
 800e806:	2800      	cmp	r0, #0
 800e808:	dc06      	bgt.n	800e818 <__sflush_r+0x110>
 800e80a:	89a3      	ldrh	r3, [r4, #12]
 800e80c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e810:	81a3      	strh	r3, [r4, #12]
 800e812:	f04f 30ff 	mov.w	r0, #4294967295
 800e816:	e78a      	b.n	800e72e <__sflush_r+0x26>
 800e818:	4407      	add	r7, r0
 800e81a:	eba8 0800 	sub.w	r8, r8, r0
 800e81e:	e7e9      	b.n	800e7f4 <__sflush_r+0xec>
 800e820:	20400001 	.word	0x20400001

0800e824 <_fflush_r>:
 800e824:	b538      	push	{r3, r4, r5, lr}
 800e826:	460c      	mov	r4, r1
 800e828:	4605      	mov	r5, r0
 800e82a:	b118      	cbz	r0, 800e834 <_fflush_r+0x10>
 800e82c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800e82e:	b90b      	cbnz	r3, 800e834 <_fflush_r+0x10>
 800e830:	f000 f864 	bl	800e8fc <__sinit>
 800e834:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800e838:	b1b8      	cbz	r0, 800e86a <_fflush_r+0x46>
 800e83a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e83c:	07db      	lsls	r3, r3, #31
 800e83e:	d404      	bmi.n	800e84a <_fflush_r+0x26>
 800e840:	0581      	lsls	r1, r0, #22
 800e842:	d402      	bmi.n	800e84a <_fflush_r+0x26>
 800e844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e846:	f000 f9e5 	bl	800ec14 <__retarget_lock_acquire_recursive>
 800e84a:	4628      	mov	r0, r5
 800e84c:	4621      	mov	r1, r4
 800e84e:	f7ff ff5b 	bl	800e708 <__sflush_r>
 800e852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e854:	07da      	lsls	r2, r3, #31
 800e856:	4605      	mov	r5, r0
 800e858:	d405      	bmi.n	800e866 <_fflush_r+0x42>
 800e85a:	89a3      	ldrh	r3, [r4, #12]
 800e85c:	059b      	lsls	r3, r3, #22
 800e85e:	d402      	bmi.n	800e866 <_fflush_r+0x42>
 800e860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e862:	f000 f9d8 	bl	800ec16 <__retarget_lock_release_recursive>
 800e866:	4628      	mov	r0, r5
 800e868:	bd38      	pop	{r3, r4, r5, pc}
 800e86a:	4605      	mov	r5, r0
 800e86c:	e7fb      	b.n	800e866 <_fflush_r+0x42>
	...

0800e870 <std>:
 800e870:	2300      	movs	r3, #0
 800e872:	b510      	push	{r4, lr}
 800e874:	4604      	mov	r4, r0
 800e876:	e9c0 3300 	strd	r3, r3, [r0]
 800e87a:	6083      	str	r3, [r0, #8]
 800e87c:	8181      	strh	r1, [r0, #12]
 800e87e:	6643      	str	r3, [r0, #100]	; 0x64
 800e880:	81c2      	strh	r2, [r0, #14]
 800e882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e886:	6183      	str	r3, [r0, #24]
 800e888:	4619      	mov	r1, r3
 800e88a:	2208      	movs	r2, #8
 800e88c:	305c      	adds	r0, #92	; 0x5c
 800e88e:	f7fd fd62 	bl	800c356 <memset>
 800e892:	4b07      	ldr	r3, [pc, #28]	; (800e8b0 <std+0x40>)
 800e894:	6223      	str	r3, [r4, #32]
 800e896:	4b07      	ldr	r3, [pc, #28]	; (800e8b4 <std+0x44>)
 800e898:	6263      	str	r3, [r4, #36]	; 0x24
 800e89a:	4b07      	ldr	r3, [pc, #28]	; (800e8b8 <std+0x48>)
 800e89c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e89e:	4b07      	ldr	r3, [pc, #28]	; (800e8bc <std+0x4c>)
 800e8a0:	61e4      	str	r4, [r4, #28]
 800e8a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e8a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8ac:	f000 b9b0 	b.w	800ec10 <__retarget_lock_init_recursive>
 800e8b0:	0800f2bd 	.word	0x0800f2bd
 800e8b4:	0800f2df 	.word	0x0800f2df
 800e8b8:	0800f317 	.word	0x0800f317
 800e8bc:	0800f33b 	.word	0x0800f33b

0800e8c0 <_cleanup_r>:
 800e8c0:	4901      	ldr	r1, [pc, #4]	; (800e8c8 <_cleanup_r+0x8>)
 800e8c2:	f000 b967 	b.w	800eb94 <_fwalk_reent>
 800e8c6:	bf00      	nop
 800e8c8:	0800f51d 	.word	0x0800f51d

0800e8cc <__sfp_lock_acquire>:
 800e8cc:	4801      	ldr	r0, [pc, #4]	; (800e8d4 <__sfp_lock_acquire+0x8>)
 800e8ce:	f000 b9a1 	b.w	800ec14 <__retarget_lock_acquire_recursive>
 800e8d2:	bf00      	nop
 800e8d4:	20005160 	.word	0x20005160

0800e8d8 <__sfp_lock_release>:
 800e8d8:	4801      	ldr	r0, [pc, #4]	; (800e8e0 <__sfp_lock_release+0x8>)
 800e8da:	f000 b99c 	b.w	800ec16 <__retarget_lock_release_recursive>
 800e8de:	bf00      	nop
 800e8e0:	20005160 	.word	0x20005160

0800e8e4 <__sinit_lock_acquire>:
 800e8e4:	4801      	ldr	r0, [pc, #4]	; (800e8ec <__sinit_lock_acquire+0x8>)
 800e8e6:	f000 b995 	b.w	800ec14 <__retarget_lock_acquire_recursive>
 800e8ea:	bf00      	nop
 800e8ec:	2000515b 	.word	0x2000515b

0800e8f0 <__sinit_lock_release>:
 800e8f0:	4801      	ldr	r0, [pc, #4]	; (800e8f8 <__sinit_lock_release+0x8>)
 800e8f2:	f000 b990 	b.w	800ec16 <__retarget_lock_release_recursive>
 800e8f6:	bf00      	nop
 800e8f8:	2000515b 	.word	0x2000515b

0800e8fc <__sinit>:
 800e8fc:	b510      	push	{r4, lr}
 800e8fe:	4604      	mov	r4, r0
 800e900:	f7ff fff0 	bl	800e8e4 <__sinit_lock_acquire>
 800e904:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e906:	b11a      	cbz	r2, 800e910 <__sinit+0x14>
 800e908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e90c:	f7ff bff0 	b.w	800e8f0 <__sinit_lock_release>
 800e910:	4b0d      	ldr	r3, [pc, #52]	; (800e948 <__sinit+0x4c>)
 800e912:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e914:	2303      	movs	r3, #3
 800e916:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800e91a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800e91e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800e922:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800e926:	2104      	movs	r1, #4
 800e928:	6860      	ldr	r0, [r4, #4]
 800e92a:	f7ff ffa1 	bl	800e870 <std>
 800e92e:	2201      	movs	r2, #1
 800e930:	2109      	movs	r1, #9
 800e932:	68a0      	ldr	r0, [r4, #8]
 800e934:	f7ff ff9c 	bl	800e870 <std>
 800e938:	2202      	movs	r2, #2
 800e93a:	2112      	movs	r1, #18
 800e93c:	68e0      	ldr	r0, [r4, #12]
 800e93e:	f7ff ff97 	bl	800e870 <std>
 800e942:	2301      	movs	r3, #1
 800e944:	63a3      	str	r3, [r4, #56]	; 0x38
 800e946:	e7df      	b.n	800e908 <__sinit+0xc>
 800e948:	0800e8c1 	.word	0x0800e8c1

0800e94c <__libc_fini_array>:
 800e94c:	b538      	push	{r3, r4, r5, lr}
 800e94e:	4d07      	ldr	r5, [pc, #28]	; (800e96c <__libc_fini_array+0x20>)
 800e950:	4c07      	ldr	r4, [pc, #28]	; (800e970 <__libc_fini_array+0x24>)
 800e952:	1b64      	subs	r4, r4, r5
 800e954:	10a4      	asrs	r4, r4, #2
 800e956:	b91c      	cbnz	r4, 800e960 <__libc_fini_array+0x14>
 800e958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e95c:	f001 baa0 	b.w	800fea0 <_fini>
 800e960:	3c01      	subs	r4, #1
 800e962:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800e966:	4798      	blx	r3
 800e968:	e7f5      	b.n	800e956 <__libc_fini_array+0xa>
 800e96a:	bf00      	nop
 800e96c:	080103d0 	.word	0x080103d0
 800e970:	080103d4 	.word	0x080103d4

0800e974 <_malloc_trim_r>:
 800e974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e978:	4605      	mov	r5, r0
 800e97a:	2008      	movs	r0, #8
 800e97c:	460c      	mov	r4, r1
 800e97e:	f7fd fd49 	bl	800c414 <sysconf>
 800e982:	4f23      	ldr	r7, [pc, #140]	; (800ea10 <_malloc_trim_r+0x9c>)
 800e984:	4680      	mov	r8, r0
 800e986:	4628      	mov	r0, r5
 800e988:	f7fd fcee 	bl	800c368 <__malloc_lock>
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	685e      	ldr	r6, [r3, #4]
 800e990:	f026 0603 	bic.w	r6, r6, #3
 800e994:	1b34      	subs	r4, r6, r4
 800e996:	3c11      	subs	r4, #17
 800e998:	4444      	add	r4, r8
 800e99a:	fbb4 f4f8 	udiv	r4, r4, r8
 800e99e:	3c01      	subs	r4, #1
 800e9a0:	fb08 f404 	mul.w	r4, r8, r4
 800e9a4:	45a0      	cmp	r8, r4
 800e9a6:	dd05      	ble.n	800e9b4 <_malloc_trim_r+0x40>
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	f7fd fce3 	bl	800c374 <__malloc_unlock>
 800e9ae:	2000      	movs	r0, #0
 800e9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	4628      	mov	r0, r5
 800e9b8:	f7fd fd1c 	bl	800c3f4 <_sbrk_r>
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	4433      	add	r3, r6
 800e9c0:	4298      	cmp	r0, r3
 800e9c2:	d1f1      	bne.n	800e9a8 <_malloc_trim_r+0x34>
 800e9c4:	4261      	negs	r1, r4
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	f7fd fd14 	bl	800c3f4 <_sbrk_r>
 800e9cc:	3001      	adds	r0, #1
 800e9ce:	d110      	bne.n	800e9f2 <_malloc_trim_r+0x7e>
 800e9d0:	2100      	movs	r1, #0
 800e9d2:	4628      	mov	r0, r5
 800e9d4:	f7fd fd0e 	bl	800c3f4 <_sbrk_r>
 800e9d8:	68ba      	ldr	r2, [r7, #8]
 800e9da:	1a83      	subs	r3, r0, r2
 800e9dc:	2b0f      	cmp	r3, #15
 800e9de:	dde3      	ble.n	800e9a8 <_malloc_trim_r+0x34>
 800e9e0:	490c      	ldr	r1, [pc, #48]	; (800ea14 <_malloc_trim_r+0xa0>)
 800e9e2:	6809      	ldr	r1, [r1, #0]
 800e9e4:	1a40      	subs	r0, r0, r1
 800e9e6:	490c      	ldr	r1, [pc, #48]	; (800ea18 <_malloc_trim_r+0xa4>)
 800e9e8:	f043 0301 	orr.w	r3, r3, #1
 800e9ec:	6008      	str	r0, [r1, #0]
 800e9ee:	6053      	str	r3, [r2, #4]
 800e9f0:	e7da      	b.n	800e9a8 <_malloc_trim_r+0x34>
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	4a08      	ldr	r2, [pc, #32]	; (800ea18 <_malloc_trim_r+0xa4>)
 800e9f6:	1b36      	subs	r6, r6, r4
 800e9f8:	f046 0601 	orr.w	r6, r6, #1
 800e9fc:	605e      	str	r6, [r3, #4]
 800e9fe:	6813      	ldr	r3, [r2, #0]
 800ea00:	4628      	mov	r0, r5
 800ea02:	1b1c      	subs	r4, r3, r4
 800ea04:	6014      	str	r4, [r2, #0]
 800ea06:	f7fd fcb5 	bl	800c374 <__malloc_unlock>
 800ea0a:	2001      	movs	r0, #1
 800ea0c:	e7d0      	b.n	800e9b0 <_malloc_trim_r+0x3c>
 800ea0e:	bf00      	nop
 800ea10:	20000460 	.word	0x20000460
 800ea14:	20000868 	.word	0x20000868
 800ea18:	200049a8 	.word	0x200049a8

0800ea1c <_free_r>:
 800ea1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea20:	4604      	mov	r4, r0
 800ea22:	4688      	mov	r8, r1
 800ea24:	2900      	cmp	r1, #0
 800ea26:	f000 80ab 	beq.w	800eb80 <_free_r+0x164>
 800ea2a:	f7fd fc9d 	bl	800c368 <__malloc_lock>
 800ea2e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800ea32:	4d54      	ldr	r5, [pc, #336]	; (800eb84 <_free_r+0x168>)
 800ea34:	f022 0001 	bic.w	r0, r2, #1
 800ea38:	f1a8 0308 	sub.w	r3, r8, #8
 800ea3c:	181f      	adds	r7, r3, r0
 800ea3e:	68a9      	ldr	r1, [r5, #8]
 800ea40:	687e      	ldr	r6, [r7, #4]
 800ea42:	42b9      	cmp	r1, r7
 800ea44:	f026 0603 	bic.w	r6, r6, #3
 800ea48:	f002 0201 	and.w	r2, r2, #1
 800ea4c:	d11b      	bne.n	800ea86 <_free_r+0x6a>
 800ea4e:	4430      	add	r0, r6
 800ea50:	b93a      	cbnz	r2, 800ea62 <_free_r+0x46>
 800ea52:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800ea56:	1a9b      	subs	r3, r3, r2
 800ea58:	4410      	add	r0, r2
 800ea5a:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800ea5e:	60ca      	str	r2, [r1, #12]
 800ea60:	6091      	str	r1, [r2, #8]
 800ea62:	f040 0201 	orr.w	r2, r0, #1
 800ea66:	605a      	str	r2, [r3, #4]
 800ea68:	60ab      	str	r3, [r5, #8]
 800ea6a:	4b47      	ldr	r3, [pc, #284]	; (800eb88 <_free_r+0x16c>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4283      	cmp	r3, r0
 800ea70:	d804      	bhi.n	800ea7c <_free_r+0x60>
 800ea72:	4b46      	ldr	r3, [pc, #280]	; (800eb8c <_free_r+0x170>)
 800ea74:	4620      	mov	r0, r4
 800ea76:	6819      	ldr	r1, [r3, #0]
 800ea78:	f7ff ff7c 	bl	800e974 <_malloc_trim_r>
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea82:	f7fd bc77 	b.w	800c374 <__malloc_unlock>
 800ea86:	607e      	str	r6, [r7, #4]
 800ea88:	2a00      	cmp	r2, #0
 800ea8a:	d139      	bne.n	800eb00 <_free_r+0xe4>
 800ea8c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800ea90:	1a5b      	subs	r3, r3, r1
 800ea92:	4408      	add	r0, r1
 800ea94:	6899      	ldr	r1, [r3, #8]
 800ea96:	f105 0c08 	add.w	ip, r5, #8
 800ea9a:	4561      	cmp	r1, ip
 800ea9c:	d032      	beq.n	800eb04 <_free_r+0xe8>
 800ea9e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800eaa2:	f8c1 c00c 	str.w	ip, [r1, #12]
 800eaa6:	f8cc 1008 	str.w	r1, [ip, #8]
 800eaaa:	19b9      	adds	r1, r7, r6
 800eaac:	6849      	ldr	r1, [r1, #4]
 800eaae:	07c9      	lsls	r1, r1, #31
 800eab0:	d40a      	bmi.n	800eac8 <_free_r+0xac>
 800eab2:	4430      	add	r0, r6
 800eab4:	68b9      	ldr	r1, [r7, #8]
 800eab6:	bb3a      	cbnz	r2, 800eb08 <_free_r+0xec>
 800eab8:	4e35      	ldr	r6, [pc, #212]	; (800eb90 <_free_r+0x174>)
 800eaba:	42b1      	cmp	r1, r6
 800eabc:	d124      	bne.n	800eb08 <_free_r+0xec>
 800eabe:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800eac2:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800eac6:	2201      	movs	r2, #1
 800eac8:	f040 0101 	orr.w	r1, r0, #1
 800eacc:	6059      	str	r1, [r3, #4]
 800eace:	5018      	str	r0, [r3, r0]
 800ead0:	2a00      	cmp	r2, #0
 800ead2:	d1d3      	bne.n	800ea7c <_free_r+0x60>
 800ead4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800ead8:	d21a      	bcs.n	800eb10 <_free_r+0xf4>
 800eada:	08c0      	lsrs	r0, r0, #3
 800eadc:	1081      	asrs	r1, r0, #2
 800eade:	2201      	movs	r2, #1
 800eae0:	408a      	lsls	r2, r1
 800eae2:	6869      	ldr	r1, [r5, #4]
 800eae4:	3001      	adds	r0, #1
 800eae6:	430a      	orrs	r2, r1
 800eae8:	606a      	str	r2, [r5, #4]
 800eaea:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800eaee:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800eaf2:	3a08      	subs	r2, #8
 800eaf4:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800eaf8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800eafc:	60cb      	str	r3, [r1, #12]
 800eafe:	e7bd      	b.n	800ea7c <_free_r+0x60>
 800eb00:	2200      	movs	r2, #0
 800eb02:	e7d2      	b.n	800eaaa <_free_r+0x8e>
 800eb04:	2201      	movs	r2, #1
 800eb06:	e7d0      	b.n	800eaaa <_free_r+0x8e>
 800eb08:	68fe      	ldr	r6, [r7, #12]
 800eb0a:	60ce      	str	r6, [r1, #12]
 800eb0c:	60b1      	str	r1, [r6, #8]
 800eb0e:	e7db      	b.n	800eac8 <_free_r+0xac>
 800eb10:	0a42      	lsrs	r2, r0, #9
 800eb12:	2a04      	cmp	r2, #4
 800eb14:	d813      	bhi.n	800eb3e <_free_r+0x122>
 800eb16:	0982      	lsrs	r2, r0, #6
 800eb18:	3238      	adds	r2, #56	; 0x38
 800eb1a:	1c51      	adds	r1, r2, #1
 800eb1c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800eb20:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800eb24:	428e      	cmp	r6, r1
 800eb26:	d124      	bne.n	800eb72 <_free_r+0x156>
 800eb28:	2001      	movs	r0, #1
 800eb2a:	1092      	asrs	r2, r2, #2
 800eb2c:	fa00 f202 	lsl.w	r2, r0, r2
 800eb30:	6868      	ldr	r0, [r5, #4]
 800eb32:	4302      	orrs	r2, r0
 800eb34:	606a      	str	r2, [r5, #4]
 800eb36:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800eb3a:	60b3      	str	r3, [r6, #8]
 800eb3c:	e7de      	b.n	800eafc <_free_r+0xe0>
 800eb3e:	2a14      	cmp	r2, #20
 800eb40:	d801      	bhi.n	800eb46 <_free_r+0x12a>
 800eb42:	325b      	adds	r2, #91	; 0x5b
 800eb44:	e7e9      	b.n	800eb1a <_free_r+0xfe>
 800eb46:	2a54      	cmp	r2, #84	; 0x54
 800eb48:	d802      	bhi.n	800eb50 <_free_r+0x134>
 800eb4a:	0b02      	lsrs	r2, r0, #12
 800eb4c:	326e      	adds	r2, #110	; 0x6e
 800eb4e:	e7e4      	b.n	800eb1a <_free_r+0xfe>
 800eb50:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800eb54:	d802      	bhi.n	800eb5c <_free_r+0x140>
 800eb56:	0bc2      	lsrs	r2, r0, #15
 800eb58:	3277      	adds	r2, #119	; 0x77
 800eb5a:	e7de      	b.n	800eb1a <_free_r+0xfe>
 800eb5c:	f240 5154 	movw	r1, #1364	; 0x554
 800eb60:	428a      	cmp	r2, r1
 800eb62:	bf9a      	itte	ls
 800eb64:	0c82      	lsrls	r2, r0, #18
 800eb66:	327c      	addls	r2, #124	; 0x7c
 800eb68:	227e      	movhi	r2, #126	; 0x7e
 800eb6a:	e7d6      	b.n	800eb1a <_free_r+0xfe>
 800eb6c:	6889      	ldr	r1, [r1, #8]
 800eb6e:	428e      	cmp	r6, r1
 800eb70:	d004      	beq.n	800eb7c <_free_r+0x160>
 800eb72:	684a      	ldr	r2, [r1, #4]
 800eb74:	f022 0203 	bic.w	r2, r2, #3
 800eb78:	4282      	cmp	r2, r0
 800eb7a:	d8f7      	bhi.n	800eb6c <_free_r+0x150>
 800eb7c:	68ce      	ldr	r6, [r1, #12]
 800eb7e:	e7da      	b.n	800eb36 <_free_r+0x11a>
 800eb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb84:	20000460 	.word	0x20000460
 800eb88:	2000086c 	.word	0x2000086c
 800eb8c:	200049d8 	.word	0x200049d8
 800eb90:	20000468 	.word	0x20000468

0800eb94 <_fwalk_reent>:
 800eb94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb98:	4680      	mov	r8, r0
 800eb9a:	4689      	mov	r9, r1
 800eb9c:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800eba0:	2600      	movs	r6, #0
 800eba2:	b914      	cbnz	r4, 800ebaa <_fwalk_reent+0x16>
 800eba4:	4630      	mov	r0, r6
 800eba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebaa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ebae:	3f01      	subs	r7, #1
 800ebb0:	d501      	bpl.n	800ebb6 <_fwalk_reent+0x22>
 800ebb2:	6824      	ldr	r4, [r4, #0]
 800ebb4:	e7f5      	b.n	800eba2 <_fwalk_reent+0xe>
 800ebb6:	89ab      	ldrh	r3, [r5, #12]
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d907      	bls.n	800ebcc <_fwalk_reent+0x38>
 800ebbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	d003      	beq.n	800ebcc <_fwalk_reent+0x38>
 800ebc4:	4629      	mov	r1, r5
 800ebc6:	4640      	mov	r0, r8
 800ebc8:	47c8      	blx	r9
 800ebca:	4306      	orrs	r6, r0
 800ebcc:	3568      	adds	r5, #104	; 0x68
 800ebce:	e7ee      	b.n	800ebae <_fwalk_reent+0x1a>

0800ebd0 <_gettimeofday_r>:
 800ebd0:	b538      	push	{r3, r4, r5, lr}
 800ebd2:	4c07      	ldr	r4, [pc, #28]	; (800ebf0 <_gettimeofday_r+0x20>)
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	4605      	mov	r5, r0
 800ebd8:	4608      	mov	r0, r1
 800ebda:	4611      	mov	r1, r2
 800ebdc:	6023      	str	r3, [r4, #0]
 800ebde:	f001 f951 	bl	800fe84 <_gettimeofday>
 800ebe2:	1c43      	adds	r3, r0, #1
 800ebe4:	d102      	bne.n	800ebec <_gettimeofday_r+0x1c>
 800ebe6:	6823      	ldr	r3, [r4, #0]
 800ebe8:	b103      	cbz	r3, 800ebec <_gettimeofday_r+0x1c>
 800ebea:	602b      	str	r3, [r5, #0]
 800ebec:	bd38      	pop	{r3, r4, r5, pc}
 800ebee:	bf00      	nop
 800ebf0:	20005164 	.word	0x20005164

0800ebf4 <_localeconv_r>:
 800ebf4:	4b04      	ldr	r3, [pc, #16]	; (800ec08 <_localeconv_r+0x14>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ebfa:	4b04      	ldr	r3, [pc, #16]	; (800ec0c <_localeconv_r+0x18>)
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	bf08      	it	eq
 800ec00:	4618      	moveq	r0, r3
 800ec02:	30f0      	adds	r0, #240	; 0xf0
 800ec04:	4770      	bx	lr
 800ec06:	bf00      	nop
 800ec08:	20000030 	.word	0x20000030
 800ec0c:	20000874 	.word	0x20000874

0800ec10 <__retarget_lock_init_recursive>:
 800ec10:	4770      	bx	lr

0800ec12 <__retarget_lock_close_recursive>:
 800ec12:	4770      	bx	lr

0800ec14 <__retarget_lock_acquire_recursive>:
 800ec14:	4770      	bx	lr

0800ec16 <__retarget_lock_release_recursive>:
 800ec16:	4770      	bx	lr

0800ec18 <__swhatbuf_r>:
 800ec18:	b570      	push	{r4, r5, r6, lr}
 800ec1a:	460e      	mov	r6, r1
 800ec1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec20:	2900      	cmp	r1, #0
 800ec22:	b096      	sub	sp, #88	; 0x58
 800ec24:	4614      	mov	r4, r2
 800ec26:	461d      	mov	r5, r3
 800ec28:	da09      	bge.n	800ec3e <__swhatbuf_r+0x26>
 800ec2a:	89b3      	ldrh	r3, [r6, #12]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ec32:	602a      	str	r2, [r5, #0]
 800ec34:	d116      	bne.n	800ec64 <__swhatbuf_r+0x4c>
 800ec36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec3a:	6023      	str	r3, [r4, #0]
 800ec3c:	e015      	b.n	800ec6a <__swhatbuf_r+0x52>
 800ec3e:	466a      	mov	r2, sp
 800ec40:	f000 fd2e 	bl	800f6a0 <_fstat_r>
 800ec44:	2800      	cmp	r0, #0
 800ec46:	dbf0      	blt.n	800ec2a <__swhatbuf_r+0x12>
 800ec48:	9a01      	ldr	r2, [sp, #4]
 800ec4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ec4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ec52:	425a      	negs	r2, r3
 800ec54:	415a      	adcs	r2, r3
 800ec56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec5a:	602a      	str	r2, [r5, #0]
 800ec5c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ec60:	6023      	str	r3, [r4, #0]
 800ec62:	e002      	b.n	800ec6a <__swhatbuf_r+0x52>
 800ec64:	2340      	movs	r3, #64	; 0x40
 800ec66:	6023      	str	r3, [r4, #0]
 800ec68:	4610      	mov	r0, r2
 800ec6a:	b016      	add	sp, #88	; 0x58
 800ec6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ec70 <__smakebuf_r>:
 800ec70:	898b      	ldrh	r3, [r1, #12]
 800ec72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ec74:	079d      	lsls	r5, r3, #30
 800ec76:	4606      	mov	r6, r0
 800ec78:	460c      	mov	r4, r1
 800ec7a:	d507      	bpl.n	800ec8c <__smakebuf_r+0x1c>
 800ec7c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800ec80:	6023      	str	r3, [r4, #0]
 800ec82:	6123      	str	r3, [r4, #16]
 800ec84:	2301      	movs	r3, #1
 800ec86:	6163      	str	r3, [r4, #20]
 800ec88:	b002      	add	sp, #8
 800ec8a:	bd70      	pop	{r4, r5, r6, pc}
 800ec8c:	ab01      	add	r3, sp, #4
 800ec8e:	466a      	mov	r2, sp
 800ec90:	f7ff ffc2 	bl	800ec18 <__swhatbuf_r>
 800ec94:	9900      	ldr	r1, [sp, #0]
 800ec96:	4605      	mov	r5, r0
 800ec98:	4630      	mov	r0, r6
 800ec9a:	f7fd f91b 	bl	800bed4 <_malloc_r>
 800ec9e:	b948      	cbnz	r0, 800ecb4 <__smakebuf_r+0x44>
 800eca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eca4:	059a      	lsls	r2, r3, #22
 800eca6:	d4ef      	bmi.n	800ec88 <__smakebuf_r+0x18>
 800eca8:	f023 0303 	bic.w	r3, r3, #3
 800ecac:	f043 0302 	orr.w	r3, r3, #2
 800ecb0:	81a3      	strh	r3, [r4, #12]
 800ecb2:	e7e3      	b.n	800ec7c <__smakebuf_r+0xc>
 800ecb4:	4b0d      	ldr	r3, [pc, #52]	; (800ecec <__smakebuf_r+0x7c>)
 800ecb6:	63f3      	str	r3, [r6, #60]	; 0x3c
 800ecb8:	89a3      	ldrh	r3, [r4, #12]
 800ecba:	6020      	str	r0, [r4, #0]
 800ecbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecc0:	81a3      	strh	r3, [r4, #12]
 800ecc2:	9b00      	ldr	r3, [sp, #0]
 800ecc4:	6163      	str	r3, [r4, #20]
 800ecc6:	9b01      	ldr	r3, [sp, #4]
 800ecc8:	6120      	str	r0, [r4, #16]
 800ecca:	b15b      	cbz	r3, 800ece4 <__smakebuf_r+0x74>
 800eccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	f000 fe45 	bl	800f960 <_isatty_r>
 800ecd6:	b128      	cbz	r0, 800ece4 <__smakebuf_r+0x74>
 800ecd8:	89a3      	ldrh	r3, [r4, #12]
 800ecda:	f023 0303 	bic.w	r3, r3, #3
 800ecde:	f043 0301 	orr.w	r3, r3, #1
 800ece2:	81a3      	strh	r3, [r4, #12]
 800ece4:	89a3      	ldrh	r3, [r4, #12]
 800ece6:	431d      	orrs	r5, r3
 800ece8:	81a5      	strh	r5, [r4, #12]
 800ecea:	e7cd      	b.n	800ec88 <__smakebuf_r+0x18>
 800ecec:	0800e8c1 	.word	0x0800e8c1

0800ecf0 <_Balloc>:
 800ecf0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ecf2:	b570      	push	{r4, r5, r6, lr}
 800ecf4:	4605      	mov	r5, r0
 800ecf6:	460c      	mov	r4, r1
 800ecf8:	b17b      	cbz	r3, 800ed1a <_Balloc+0x2a>
 800ecfa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ecfc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ed00:	b9a0      	cbnz	r0, 800ed2c <_Balloc+0x3c>
 800ed02:	2101      	movs	r1, #1
 800ed04:	fa01 f604 	lsl.w	r6, r1, r4
 800ed08:	1d72      	adds	r2, r6, #5
 800ed0a:	0092      	lsls	r2, r2, #2
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	f000 fbc7 	bl	800f4a0 <_calloc_r>
 800ed12:	b148      	cbz	r0, 800ed28 <_Balloc+0x38>
 800ed14:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800ed18:	e00b      	b.n	800ed32 <_Balloc+0x42>
 800ed1a:	2221      	movs	r2, #33	; 0x21
 800ed1c:	2104      	movs	r1, #4
 800ed1e:	f000 fbbf 	bl	800f4a0 <_calloc_r>
 800ed22:	64e8      	str	r0, [r5, #76]	; 0x4c
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d1e8      	bne.n	800ecfa <_Balloc+0xa>
 800ed28:	2000      	movs	r0, #0
 800ed2a:	bd70      	pop	{r4, r5, r6, pc}
 800ed2c:	6802      	ldr	r2, [r0, #0]
 800ed2e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800ed32:	2300      	movs	r3, #0
 800ed34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ed38:	e7f7      	b.n	800ed2a <_Balloc+0x3a>

0800ed3a <_Bfree>:
 800ed3a:	b131      	cbz	r1, 800ed4a <_Bfree+0x10>
 800ed3c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ed3e:	684a      	ldr	r2, [r1, #4]
 800ed40:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ed44:	6008      	str	r0, [r1, #0]
 800ed46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ed4a:	4770      	bx	lr

0800ed4c <__multadd>:
 800ed4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed50:	690d      	ldr	r5, [r1, #16]
 800ed52:	461f      	mov	r7, r3
 800ed54:	4606      	mov	r6, r0
 800ed56:	460c      	mov	r4, r1
 800ed58:	f101 0c14 	add.w	ip, r1, #20
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	f8dc 0000 	ldr.w	r0, [ip]
 800ed62:	b281      	uxth	r1, r0
 800ed64:	fb02 7101 	mla	r1, r2, r1, r7
 800ed68:	0c0f      	lsrs	r7, r1, #16
 800ed6a:	0c00      	lsrs	r0, r0, #16
 800ed6c:	fb02 7000 	mla	r0, r2, r0, r7
 800ed70:	b289      	uxth	r1, r1
 800ed72:	3301      	adds	r3, #1
 800ed74:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ed78:	429d      	cmp	r5, r3
 800ed7a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ed7e:	f84c 1b04 	str.w	r1, [ip], #4
 800ed82:	dcec      	bgt.n	800ed5e <__multadd+0x12>
 800ed84:	b1d7      	cbz	r7, 800edbc <__multadd+0x70>
 800ed86:	68a3      	ldr	r3, [r4, #8]
 800ed88:	42ab      	cmp	r3, r5
 800ed8a:	dc12      	bgt.n	800edb2 <__multadd+0x66>
 800ed8c:	6861      	ldr	r1, [r4, #4]
 800ed8e:	4630      	mov	r0, r6
 800ed90:	3101      	adds	r1, #1
 800ed92:	f7ff ffad 	bl	800ecf0 <_Balloc>
 800ed96:	6922      	ldr	r2, [r4, #16]
 800ed98:	3202      	adds	r2, #2
 800ed9a:	f104 010c 	add.w	r1, r4, #12
 800ed9e:	4680      	mov	r8, r0
 800eda0:	0092      	lsls	r2, r2, #2
 800eda2:	300c      	adds	r0, #12
 800eda4:	f7fd facc 	bl	800c340 <memcpy>
 800eda8:	4621      	mov	r1, r4
 800edaa:	4630      	mov	r0, r6
 800edac:	f7ff ffc5 	bl	800ed3a <_Bfree>
 800edb0:	4644      	mov	r4, r8
 800edb2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800edb6:	3501      	adds	r5, #1
 800edb8:	615f      	str	r7, [r3, #20]
 800edba:	6125      	str	r5, [r4, #16]
 800edbc:	4620      	mov	r0, r4
 800edbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800edc2 <__hi0bits>:
 800edc2:	0c02      	lsrs	r2, r0, #16
 800edc4:	0412      	lsls	r2, r2, #16
 800edc6:	4603      	mov	r3, r0
 800edc8:	b9b2      	cbnz	r2, 800edf8 <__hi0bits+0x36>
 800edca:	0403      	lsls	r3, r0, #16
 800edcc:	2010      	movs	r0, #16
 800edce:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800edd2:	bf04      	itt	eq
 800edd4:	021b      	lsleq	r3, r3, #8
 800edd6:	3008      	addeq	r0, #8
 800edd8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800eddc:	bf04      	itt	eq
 800edde:	011b      	lsleq	r3, r3, #4
 800ede0:	3004      	addeq	r0, #4
 800ede2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ede6:	bf04      	itt	eq
 800ede8:	009b      	lsleq	r3, r3, #2
 800edea:	3002      	addeq	r0, #2
 800edec:	2b00      	cmp	r3, #0
 800edee:	db06      	blt.n	800edfe <__hi0bits+0x3c>
 800edf0:	005b      	lsls	r3, r3, #1
 800edf2:	d503      	bpl.n	800edfc <__hi0bits+0x3a>
 800edf4:	3001      	adds	r0, #1
 800edf6:	4770      	bx	lr
 800edf8:	2000      	movs	r0, #0
 800edfa:	e7e8      	b.n	800edce <__hi0bits+0xc>
 800edfc:	2020      	movs	r0, #32
 800edfe:	4770      	bx	lr

0800ee00 <__lo0bits>:
 800ee00:	6803      	ldr	r3, [r0, #0]
 800ee02:	f013 0207 	ands.w	r2, r3, #7
 800ee06:	4601      	mov	r1, r0
 800ee08:	d00b      	beq.n	800ee22 <__lo0bits+0x22>
 800ee0a:	07da      	lsls	r2, r3, #31
 800ee0c:	d423      	bmi.n	800ee56 <__lo0bits+0x56>
 800ee0e:	0798      	lsls	r0, r3, #30
 800ee10:	bf49      	itett	mi
 800ee12:	085b      	lsrmi	r3, r3, #1
 800ee14:	089b      	lsrpl	r3, r3, #2
 800ee16:	2001      	movmi	r0, #1
 800ee18:	600b      	strmi	r3, [r1, #0]
 800ee1a:	bf5c      	itt	pl
 800ee1c:	600b      	strpl	r3, [r1, #0]
 800ee1e:	2002      	movpl	r0, #2
 800ee20:	4770      	bx	lr
 800ee22:	b298      	uxth	r0, r3
 800ee24:	b9a8      	cbnz	r0, 800ee52 <__lo0bits+0x52>
 800ee26:	0c1b      	lsrs	r3, r3, #16
 800ee28:	2010      	movs	r0, #16
 800ee2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ee2e:	bf04      	itt	eq
 800ee30:	0a1b      	lsreq	r3, r3, #8
 800ee32:	3008      	addeq	r0, #8
 800ee34:	071a      	lsls	r2, r3, #28
 800ee36:	bf04      	itt	eq
 800ee38:	091b      	lsreq	r3, r3, #4
 800ee3a:	3004      	addeq	r0, #4
 800ee3c:	079a      	lsls	r2, r3, #30
 800ee3e:	bf04      	itt	eq
 800ee40:	089b      	lsreq	r3, r3, #2
 800ee42:	3002      	addeq	r0, #2
 800ee44:	07da      	lsls	r2, r3, #31
 800ee46:	d402      	bmi.n	800ee4e <__lo0bits+0x4e>
 800ee48:	085b      	lsrs	r3, r3, #1
 800ee4a:	d006      	beq.n	800ee5a <__lo0bits+0x5a>
 800ee4c:	3001      	adds	r0, #1
 800ee4e:	600b      	str	r3, [r1, #0]
 800ee50:	4770      	bx	lr
 800ee52:	4610      	mov	r0, r2
 800ee54:	e7e9      	b.n	800ee2a <__lo0bits+0x2a>
 800ee56:	2000      	movs	r0, #0
 800ee58:	4770      	bx	lr
 800ee5a:	2020      	movs	r0, #32
 800ee5c:	4770      	bx	lr

0800ee5e <__i2b>:
 800ee5e:	b510      	push	{r4, lr}
 800ee60:	460c      	mov	r4, r1
 800ee62:	2101      	movs	r1, #1
 800ee64:	f7ff ff44 	bl	800ecf0 <_Balloc>
 800ee68:	2201      	movs	r2, #1
 800ee6a:	6144      	str	r4, [r0, #20]
 800ee6c:	6102      	str	r2, [r0, #16]
 800ee6e:	bd10      	pop	{r4, pc}

0800ee70 <__multiply>:
 800ee70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee74:	4614      	mov	r4, r2
 800ee76:	690a      	ldr	r2, [r1, #16]
 800ee78:	6923      	ldr	r3, [r4, #16]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	bfb8      	it	lt
 800ee7e:	460b      	movlt	r3, r1
 800ee80:	4688      	mov	r8, r1
 800ee82:	bfbc      	itt	lt
 800ee84:	46a0      	movlt	r8, r4
 800ee86:	461c      	movlt	r4, r3
 800ee88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ee8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ee90:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ee98:	eb07 0609 	add.w	r6, r7, r9
 800ee9c:	42b3      	cmp	r3, r6
 800ee9e:	bfb8      	it	lt
 800eea0:	3101      	addlt	r1, #1
 800eea2:	f7ff ff25 	bl	800ecf0 <_Balloc>
 800eea6:	f100 0514 	add.w	r5, r0, #20
 800eeaa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800eeae:	462b      	mov	r3, r5
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	4573      	cmp	r3, lr
 800eeb4:	d316      	bcc.n	800eee4 <__multiply+0x74>
 800eeb6:	f104 0214 	add.w	r2, r4, #20
 800eeba:	f108 0114 	add.w	r1, r8, #20
 800eebe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800eec2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	9b00      	ldr	r3, [sp, #0]
 800eeca:	9201      	str	r2, [sp, #4]
 800eecc:	4293      	cmp	r3, r2
 800eece:	d80c      	bhi.n	800eeea <__multiply+0x7a>
 800eed0:	2e00      	cmp	r6, #0
 800eed2:	dd03      	ble.n	800eedc <__multiply+0x6c>
 800eed4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d05d      	beq.n	800ef98 <__multiply+0x128>
 800eedc:	6106      	str	r6, [r0, #16]
 800eede:	b003      	add	sp, #12
 800eee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eee4:	f843 2b04 	str.w	r2, [r3], #4
 800eee8:	e7e3      	b.n	800eeb2 <__multiply+0x42>
 800eeea:	f8b2 b000 	ldrh.w	fp, [r2]
 800eeee:	f1bb 0f00 	cmp.w	fp, #0
 800eef2:	d023      	beq.n	800ef3c <__multiply+0xcc>
 800eef4:	4689      	mov	r9, r1
 800eef6:	46ac      	mov	ip, r5
 800eef8:	f04f 0800 	mov.w	r8, #0
 800eefc:	f859 4b04 	ldr.w	r4, [r9], #4
 800ef00:	f8dc a000 	ldr.w	sl, [ip]
 800ef04:	b2a3      	uxth	r3, r4
 800ef06:	fa1f fa8a 	uxth.w	sl, sl
 800ef0a:	fb0b a303 	mla	r3, fp, r3, sl
 800ef0e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ef12:	f8dc 4000 	ldr.w	r4, [ip]
 800ef16:	4443      	add	r3, r8
 800ef18:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ef1c:	fb0b 840a 	mla	r4, fp, sl, r8
 800ef20:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ef24:	46e2      	mov	sl, ip
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ef2c:	454f      	cmp	r7, r9
 800ef2e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ef32:	f84a 3b04 	str.w	r3, [sl], #4
 800ef36:	d82b      	bhi.n	800ef90 <__multiply+0x120>
 800ef38:	f8cc 8004 	str.w	r8, [ip, #4]
 800ef3c:	9b01      	ldr	r3, [sp, #4]
 800ef3e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ef42:	3204      	adds	r2, #4
 800ef44:	f1ba 0f00 	cmp.w	sl, #0
 800ef48:	d020      	beq.n	800ef8c <__multiply+0x11c>
 800ef4a:	682b      	ldr	r3, [r5, #0]
 800ef4c:	4689      	mov	r9, r1
 800ef4e:	46a8      	mov	r8, r5
 800ef50:	f04f 0b00 	mov.w	fp, #0
 800ef54:	f8b9 c000 	ldrh.w	ip, [r9]
 800ef58:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ef5c:	fb0a 440c 	mla	r4, sl, ip, r4
 800ef60:	445c      	add	r4, fp
 800ef62:	46c4      	mov	ip, r8
 800ef64:	b29b      	uxth	r3, r3
 800ef66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ef6a:	f84c 3b04 	str.w	r3, [ip], #4
 800ef6e:	f859 3b04 	ldr.w	r3, [r9], #4
 800ef72:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ef76:	0c1b      	lsrs	r3, r3, #16
 800ef78:	fb0a b303 	mla	r3, sl, r3, fp
 800ef7c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ef80:	454f      	cmp	r7, r9
 800ef82:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ef86:	d805      	bhi.n	800ef94 <__multiply+0x124>
 800ef88:	f8c8 3004 	str.w	r3, [r8, #4]
 800ef8c:	3504      	adds	r5, #4
 800ef8e:	e79b      	b.n	800eec8 <__multiply+0x58>
 800ef90:	46d4      	mov	ip, sl
 800ef92:	e7b3      	b.n	800eefc <__multiply+0x8c>
 800ef94:	46e0      	mov	r8, ip
 800ef96:	e7dd      	b.n	800ef54 <__multiply+0xe4>
 800ef98:	3e01      	subs	r6, #1
 800ef9a:	e799      	b.n	800eed0 <__multiply+0x60>

0800ef9c <__pow5mult>:
 800ef9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efa0:	4615      	mov	r5, r2
 800efa2:	f012 0203 	ands.w	r2, r2, #3
 800efa6:	4606      	mov	r6, r0
 800efa8:	460f      	mov	r7, r1
 800efaa:	d007      	beq.n	800efbc <__pow5mult+0x20>
 800efac:	3a01      	subs	r2, #1
 800efae:	4c1a      	ldr	r4, [pc, #104]	; (800f018 <__pow5mult+0x7c>)
 800efb0:	2300      	movs	r3, #0
 800efb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800efb6:	f7ff fec9 	bl	800ed4c <__multadd>
 800efba:	4607      	mov	r7, r0
 800efbc:	10ad      	asrs	r5, r5, #2
 800efbe:	d027      	beq.n	800f010 <__pow5mult+0x74>
 800efc0:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800efc2:	b944      	cbnz	r4, 800efd6 <__pow5mult+0x3a>
 800efc4:	f240 2171 	movw	r1, #625	; 0x271
 800efc8:	4630      	mov	r0, r6
 800efca:	f7ff ff48 	bl	800ee5e <__i2b>
 800efce:	2300      	movs	r3, #0
 800efd0:	64b0      	str	r0, [r6, #72]	; 0x48
 800efd2:	4604      	mov	r4, r0
 800efd4:	6003      	str	r3, [r0, #0]
 800efd6:	f04f 0800 	mov.w	r8, #0
 800efda:	07eb      	lsls	r3, r5, #31
 800efdc:	d50a      	bpl.n	800eff4 <__pow5mult+0x58>
 800efde:	4639      	mov	r1, r7
 800efe0:	4622      	mov	r2, r4
 800efe2:	4630      	mov	r0, r6
 800efe4:	f7ff ff44 	bl	800ee70 <__multiply>
 800efe8:	4639      	mov	r1, r7
 800efea:	4681      	mov	r9, r0
 800efec:	4630      	mov	r0, r6
 800efee:	f7ff fea4 	bl	800ed3a <_Bfree>
 800eff2:	464f      	mov	r7, r9
 800eff4:	106d      	asrs	r5, r5, #1
 800eff6:	d00b      	beq.n	800f010 <__pow5mult+0x74>
 800eff8:	6820      	ldr	r0, [r4, #0]
 800effa:	b938      	cbnz	r0, 800f00c <__pow5mult+0x70>
 800effc:	4622      	mov	r2, r4
 800effe:	4621      	mov	r1, r4
 800f000:	4630      	mov	r0, r6
 800f002:	f7ff ff35 	bl	800ee70 <__multiply>
 800f006:	6020      	str	r0, [r4, #0]
 800f008:	f8c0 8000 	str.w	r8, [r0]
 800f00c:	4604      	mov	r4, r0
 800f00e:	e7e4      	b.n	800efda <__pow5mult+0x3e>
 800f010:	4638      	mov	r0, r7
 800f012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f016:	bf00      	nop
 800f018:	080102a8 	.word	0x080102a8

0800f01c <__lshift>:
 800f01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f020:	460c      	mov	r4, r1
 800f022:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f026:	6923      	ldr	r3, [r4, #16]
 800f028:	6849      	ldr	r1, [r1, #4]
 800f02a:	eb0a 0903 	add.w	r9, sl, r3
 800f02e:	68a3      	ldr	r3, [r4, #8]
 800f030:	4607      	mov	r7, r0
 800f032:	4616      	mov	r6, r2
 800f034:	f109 0501 	add.w	r5, r9, #1
 800f038:	42ab      	cmp	r3, r5
 800f03a:	db32      	blt.n	800f0a2 <__lshift+0x86>
 800f03c:	4638      	mov	r0, r7
 800f03e:	f7ff fe57 	bl	800ecf0 <_Balloc>
 800f042:	2300      	movs	r3, #0
 800f044:	4680      	mov	r8, r0
 800f046:	f100 0114 	add.w	r1, r0, #20
 800f04a:	461a      	mov	r2, r3
 800f04c:	4553      	cmp	r3, sl
 800f04e:	db2b      	blt.n	800f0a8 <__lshift+0x8c>
 800f050:	6920      	ldr	r0, [r4, #16]
 800f052:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f056:	f104 0314 	add.w	r3, r4, #20
 800f05a:	f016 021f 	ands.w	r2, r6, #31
 800f05e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f062:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f066:	d025      	beq.n	800f0b4 <__lshift+0x98>
 800f068:	f1c2 0e20 	rsb	lr, r2, #32
 800f06c:	2000      	movs	r0, #0
 800f06e:	681e      	ldr	r6, [r3, #0]
 800f070:	468a      	mov	sl, r1
 800f072:	4096      	lsls	r6, r2
 800f074:	4330      	orrs	r0, r6
 800f076:	f84a 0b04 	str.w	r0, [sl], #4
 800f07a:	f853 0b04 	ldr.w	r0, [r3], #4
 800f07e:	459c      	cmp	ip, r3
 800f080:	fa20 f00e 	lsr.w	r0, r0, lr
 800f084:	d814      	bhi.n	800f0b0 <__lshift+0x94>
 800f086:	6048      	str	r0, [r1, #4]
 800f088:	b108      	cbz	r0, 800f08e <__lshift+0x72>
 800f08a:	f109 0502 	add.w	r5, r9, #2
 800f08e:	3d01      	subs	r5, #1
 800f090:	4638      	mov	r0, r7
 800f092:	f8c8 5010 	str.w	r5, [r8, #16]
 800f096:	4621      	mov	r1, r4
 800f098:	f7ff fe4f 	bl	800ed3a <_Bfree>
 800f09c:	4640      	mov	r0, r8
 800f09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0a2:	3101      	adds	r1, #1
 800f0a4:	005b      	lsls	r3, r3, #1
 800f0a6:	e7c7      	b.n	800f038 <__lshift+0x1c>
 800f0a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	e7cd      	b.n	800f04c <__lshift+0x30>
 800f0b0:	4651      	mov	r1, sl
 800f0b2:	e7dc      	b.n	800f06e <__lshift+0x52>
 800f0b4:	3904      	subs	r1, #4
 800f0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0ba:	f841 2f04 	str.w	r2, [r1, #4]!
 800f0be:	459c      	cmp	ip, r3
 800f0c0:	d8f9      	bhi.n	800f0b6 <__lshift+0x9a>
 800f0c2:	e7e4      	b.n	800f08e <__lshift+0x72>

0800f0c4 <__mcmp>:
 800f0c4:	6903      	ldr	r3, [r0, #16]
 800f0c6:	690a      	ldr	r2, [r1, #16]
 800f0c8:	1a9b      	subs	r3, r3, r2
 800f0ca:	b530      	push	{r4, r5, lr}
 800f0cc:	d10c      	bne.n	800f0e8 <__mcmp+0x24>
 800f0ce:	0092      	lsls	r2, r2, #2
 800f0d0:	3014      	adds	r0, #20
 800f0d2:	3114      	adds	r1, #20
 800f0d4:	1884      	adds	r4, r0, r2
 800f0d6:	4411      	add	r1, r2
 800f0d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f0dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f0e0:	4295      	cmp	r5, r2
 800f0e2:	d003      	beq.n	800f0ec <__mcmp+0x28>
 800f0e4:	d305      	bcc.n	800f0f2 <__mcmp+0x2e>
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	bd30      	pop	{r4, r5, pc}
 800f0ec:	42a0      	cmp	r0, r4
 800f0ee:	d3f3      	bcc.n	800f0d8 <__mcmp+0x14>
 800f0f0:	e7fa      	b.n	800f0e8 <__mcmp+0x24>
 800f0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f6:	e7f7      	b.n	800f0e8 <__mcmp+0x24>

0800f0f8 <__mdiff>:
 800f0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0fc:	460d      	mov	r5, r1
 800f0fe:	4607      	mov	r7, r0
 800f100:	4611      	mov	r1, r2
 800f102:	4628      	mov	r0, r5
 800f104:	4614      	mov	r4, r2
 800f106:	f7ff ffdd 	bl	800f0c4 <__mcmp>
 800f10a:	1e06      	subs	r6, r0, #0
 800f10c:	d108      	bne.n	800f120 <__mdiff+0x28>
 800f10e:	4631      	mov	r1, r6
 800f110:	4638      	mov	r0, r7
 800f112:	f7ff fded 	bl	800ecf0 <_Balloc>
 800f116:	2301      	movs	r3, #1
 800f118:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f120:	bfa4      	itt	ge
 800f122:	4623      	movge	r3, r4
 800f124:	462c      	movge	r4, r5
 800f126:	4638      	mov	r0, r7
 800f128:	6861      	ldr	r1, [r4, #4]
 800f12a:	bfa6      	itte	ge
 800f12c:	461d      	movge	r5, r3
 800f12e:	2600      	movge	r6, #0
 800f130:	2601      	movlt	r6, #1
 800f132:	f7ff fddd 	bl	800ecf0 <_Balloc>
 800f136:	692b      	ldr	r3, [r5, #16]
 800f138:	60c6      	str	r6, [r0, #12]
 800f13a:	6926      	ldr	r6, [r4, #16]
 800f13c:	f105 0914 	add.w	r9, r5, #20
 800f140:	f104 0214 	add.w	r2, r4, #20
 800f144:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f148:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f14c:	f100 0514 	add.w	r5, r0, #20
 800f150:	f04f 0e00 	mov.w	lr, #0
 800f154:	f852 ab04 	ldr.w	sl, [r2], #4
 800f158:	f859 4b04 	ldr.w	r4, [r9], #4
 800f15c:	fa1e f18a 	uxtah	r1, lr, sl
 800f160:	b2a3      	uxth	r3, r4
 800f162:	1ac9      	subs	r1, r1, r3
 800f164:	0c23      	lsrs	r3, r4, #16
 800f166:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f16a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f16e:	b289      	uxth	r1, r1
 800f170:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f174:	45c8      	cmp	r8, r9
 800f176:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f17a:	4694      	mov	ip, r2
 800f17c:	f845 3b04 	str.w	r3, [r5], #4
 800f180:	d8e8      	bhi.n	800f154 <__mdiff+0x5c>
 800f182:	45bc      	cmp	ip, r7
 800f184:	d304      	bcc.n	800f190 <__mdiff+0x98>
 800f186:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f18a:	b183      	cbz	r3, 800f1ae <__mdiff+0xb6>
 800f18c:	6106      	str	r6, [r0, #16]
 800f18e:	e7c5      	b.n	800f11c <__mdiff+0x24>
 800f190:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f194:	fa1e f381 	uxtah	r3, lr, r1
 800f198:	141a      	asrs	r2, r3, #16
 800f19a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f1a8:	f845 3b04 	str.w	r3, [r5], #4
 800f1ac:	e7e9      	b.n	800f182 <__mdiff+0x8a>
 800f1ae:	3e01      	subs	r6, #1
 800f1b0:	e7e9      	b.n	800f186 <__mdiff+0x8e>

0800f1b2 <__d2b>:
 800f1b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f1b6:	460e      	mov	r6, r1
 800f1b8:	2101      	movs	r1, #1
 800f1ba:	ec59 8b10 	vmov	r8, r9, d0
 800f1be:	4615      	mov	r5, r2
 800f1c0:	f7ff fd96 	bl	800ecf0 <_Balloc>
 800f1c4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f1c8:	4607      	mov	r7, r0
 800f1ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f1ce:	bb34      	cbnz	r4, 800f21e <__d2b+0x6c>
 800f1d0:	9301      	str	r3, [sp, #4]
 800f1d2:	f1b8 0300 	subs.w	r3, r8, #0
 800f1d6:	d027      	beq.n	800f228 <__d2b+0x76>
 800f1d8:	a802      	add	r0, sp, #8
 800f1da:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f1de:	f7ff fe0f 	bl	800ee00 <__lo0bits>
 800f1e2:	9900      	ldr	r1, [sp, #0]
 800f1e4:	b1f0      	cbz	r0, 800f224 <__d2b+0x72>
 800f1e6:	9a01      	ldr	r2, [sp, #4]
 800f1e8:	f1c0 0320 	rsb	r3, r0, #32
 800f1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800f1f0:	430b      	orrs	r3, r1
 800f1f2:	40c2      	lsrs	r2, r0
 800f1f4:	617b      	str	r3, [r7, #20]
 800f1f6:	9201      	str	r2, [sp, #4]
 800f1f8:	9b01      	ldr	r3, [sp, #4]
 800f1fa:	61bb      	str	r3, [r7, #24]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	bf14      	ite	ne
 800f200:	2102      	movne	r1, #2
 800f202:	2101      	moveq	r1, #1
 800f204:	6139      	str	r1, [r7, #16]
 800f206:	b1c4      	cbz	r4, 800f23a <__d2b+0x88>
 800f208:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f20c:	4404      	add	r4, r0
 800f20e:	6034      	str	r4, [r6, #0]
 800f210:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f214:	6028      	str	r0, [r5, #0]
 800f216:	4638      	mov	r0, r7
 800f218:	b003      	add	sp, #12
 800f21a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f21e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f222:	e7d5      	b.n	800f1d0 <__d2b+0x1e>
 800f224:	6179      	str	r1, [r7, #20]
 800f226:	e7e7      	b.n	800f1f8 <__d2b+0x46>
 800f228:	a801      	add	r0, sp, #4
 800f22a:	f7ff fde9 	bl	800ee00 <__lo0bits>
 800f22e:	9b01      	ldr	r3, [sp, #4]
 800f230:	617b      	str	r3, [r7, #20]
 800f232:	2101      	movs	r1, #1
 800f234:	6139      	str	r1, [r7, #16]
 800f236:	3020      	adds	r0, #32
 800f238:	e7e5      	b.n	800f206 <__d2b+0x54>
 800f23a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f23e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f242:	6030      	str	r0, [r6, #0]
 800f244:	6918      	ldr	r0, [r3, #16]
 800f246:	f7ff fdbc 	bl	800edc2 <__hi0bits>
 800f24a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f24e:	e7e1      	b.n	800f214 <__d2b+0x62>

0800f250 <frexp>:
 800f250:	b570      	push	{r4, r5, r6, lr}
 800f252:	2100      	movs	r1, #0
 800f254:	ec55 4b10 	vmov	r4, r5, d0
 800f258:	6001      	str	r1, [r0, #0]
 800f25a:	4916      	ldr	r1, [pc, #88]	; (800f2b4 <frexp+0x64>)
 800f25c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f260:	428b      	cmp	r3, r1
 800f262:	4606      	mov	r6, r0
 800f264:	462a      	mov	r2, r5
 800f266:	dc22      	bgt.n	800f2ae <frexp+0x5e>
 800f268:	ee10 1a10 	vmov	r1, s0
 800f26c:	4319      	orrs	r1, r3
 800f26e:	d01e      	beq.n	800f2ae <frexp+0x5e>
 800f270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f274:	da0d      	bge.n	800f292 <frexp+0x42>
 800f276:	2200      	movs	r2, #0
 800f278:	4b0f      	ldr	r3, [pc, #60]	; (800f2b8 <frexp+0x68>)
 800f27a:	ee10 0a10 	vmov	r0, s0
 800f27e:	4629      	mov	r1, r5
 800f280:	f7f1 f9c2 	bl	8000608 <__aeabi_dmul>
 800f284:	460a      	mov	r2, r1
 800f286:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f28a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800f28e:	4604      	mov	r4, r0
 800f290:	6031      	str	r1, [r6, #0]
 800f292:	6831      	ldr	r1, [r6, #0]
 800f294:	151b      	asrs	r3, r3, #20
 800f296:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800f29a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f29e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800f2a2:	440b      	add	r3, r1
 800f2a4:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800f2a8:	6033      	str	r3, [r6, #0]
 800f2aa:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800f2ae:	ec45 4b10 	vmov	d0, r4, r5
 800f2b2:	bd70      	pop	{r4, r5, r6, pc}
 800f2b4:	7fefffff 	.word	0x7fefffff
 800f2b8:	43500000 	.word	0x43500000

0800f2bc <__sread>:
 800f2bc:	b510      	push	{r4, lr}
 800f2be:	460c      	mov	r4, r1
 800f2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2c4:	f000 fba8 	bl	800fa18 <_read_r>
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	bfab      	itete	ge
 800f2cc:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800f2ce:	89a3      	ldrhlt	r3, [r4, #12]
 800f2d0:	181b      	addge	r3, r3, r0
 800f2d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f2d6:	bfac      	ite	ge
 800f2d8:	6523      	strge	r3, [r4, #80]	; 0x50
 800f2da:	81a3      	strhlt	r3, [r4, #12]
 800f2dc:	bd10      	pop	{r4, pc}

0800f2de <__swrite>:
 800f2de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2e2:	461f      	mov	r7, r3
 800f2e4:	898b      	ldrh	r3, [r1, #12]
 800f2e6:	05db      	lsls	r3, r3, #23
 800f2e8:	4605      	mov	r5, r0
 800f2ea:	460c      	mov	r4, r1
 800f2ec:	4616      	mov	r6, r2
 800f2ee:	d505      	bpl.n	800f2fc <__swrite+0x1e>
 800f2f0:	2302      	movs	r3, #2
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2f8:	f000 fb50 	bl	800f99c <_lseek_r>
 800f2fc:	89a3      	ldrh	r3, [r4, #12]
 800f2fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f306:	81a3      	strh	r3, [r4, #12]
 800f308:	4632      	mov	r2, r6
 800f30a:	463b      	mov	r3, r7
 800f30c:	4628      	mov	r0, r5
 800f30e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f312:	f000 b85d 	b.w	800f3d0 <_write_r>

0800f316 <__sseek>:
 800f316:	b510      	push	{r4, lr}
 800f318:	460c      	mov	r4, r1
 800f31a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f31e:	f000 fb3d 	bl	800f99c <_lseek_r>
 800f322:	1c43      	adds	r3, r0, #1
 800f324:	89a3      	ldrh	r3, [r4, #12]
 800f326:	bf15      	itete	ne
 800f328:	6520      	strne	r0, [r4, #80]	; 0x50
 800f32a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f32e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f332:	81a3      	strheq	r3, [r4, #12]
 800f334:	bf18      	it	ne
 800f336:	81a3      	strhne	r3, [r4, #12]
 800f338:	bd10      	pop	{r4, pc}

0800f33a <__sclose>:
 800f33a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f33e:	f000 b8dd 	b.w	800f4fc <_close_r>

0800f342 <strncpy>:
 800f342:	b570      	push	{r4, r5, r6, lr}
 800f344:	3901      	subs	r1, #1
 800f346:	4604      	mov	r4, r0
 800f348:	b902      	cbnz	r2, 800f34c <strncpy+0xa>
 800f34a:	bd70      	pop	{r4, r5, r6, pc}
 800f34c:	4623      	mov	r3, r4
 800f34e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800f352:	f803 5b01 	strb.w	r5, [r3], #1
 800f356:	1e56      	subs	r6, r2, #1
 800f358:	b92d      	cbnz	r5, 800f366 <strncpy+0x24>
 800f35a:	4414      	add	r4, r2
 800f35c:	42a3      	cmp	r3, r4
 800f35e:	d0f4      	beq.n	800f34a <strncpy+0x8>
 800f360:	f803 5b01 	strb.w	r5, [r3], #1
 800f364:	e7fa      	b.n	800f35c <strncpy+0x1a>
 800f366:	461c      	mov	r4, r3
 800f368:	4632      	mov	r2, r6
 800f36a:	e7ed      	b.n	800f348 <strncpy+0x6>

0800f36c <__sprint_r>:
 800f36c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f370:	6893      	ldr	r3, [r2, #8]
 800f372:	4680      	mov	r8, r0
 800f374:	460f      	mov	r7, r1
 800f376:	4614      	mov	r4, r2
 800f378:	b91b      	cbnz	r3, 800f382 <__sprint_r+0x16>
 800f37a:	6053      	str	r3, [r2, #4]
 800f37c:	4618      	mov	r0, r3
 800f37e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f382:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f384:	049d      	lsls	r5, r3, #18
 800f386:	d520      	bpl.n	800f3ca <__sprint_r+0x5e>
 800f388:	6815      	ldr	r5, [r2, #0]
 800f38a:	68a0      	ldr	r0, [r4, #8]
 800f38c:	3508      	adds	r5, #8
 800f38e:	b918      	cbnz	r0, 800f398 <__sprint_r+0x2c>
 800f390:	2300      	movs	r3, #0
 800f392:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800f396:	e7f2      	b.n	800f37e <__sprint_r+0x12>
 800f398:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800f39c:	f04f 0900 	mov.w	r9, #0
 800f3a0:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800f3a4:	45ca      	cmp	sl, r9
 800f3a6:	dc05      	bgt.n	800f3b4 <__sprint_r+0x48>
 800f3a8:	68a3      	ldr	r3, [r4, #8]
 800f3aa:	f026 0603 	bic.w	r6, r6, #3
 800f3ae:	1b9e      	subs	r6, r3, r6
 800f3b0:	60a6      	str	r6, [r4, #8]
 800f3b2:	e7ea      	b.n	800f38a <__sprint_r+0x1e>
 800f3b4:	463a      	mov	r2, r7
 800f3b6:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800f3ba:	4640      	mov	r0, r8
 800f3bc:	f000 f946 	bl	800f64c <_fputwc_r>
 800f3c0:	1c43      	adds	r3, r0, #1
 800f3c2:	d0e5      	beq.n	800f390 <__sprint_r+0x24>
 800f3c4:	f109 0901 	add.w	r9, r9, #1
 800f3c8:	e7ec      	b.n	800f3a4 <__sprint_r+0x38>
 800f3ca:	f000 f97b 	bl	800f6c4 <__sfvwrite_r>
 800f3ce:	e7df      	b.n	800f390 <__sprint_r+0x24>

0800f3d0 <_write_r>:
 800f3d0:	b538      	push	{r3, r4, r5, lr}
 800f3d2:	4c07      	ldr	r4, [pc, #28]	; (800f3f0 <_write_r+0x20>)
 800f3d4:	4605      	mov	r5, r0
 800f3d6:	4608      	mov	r0, r1
 800f3d8:	4611      	mov	r1, r2
 800f3da:	2200      	movs	r2, #0
 800f3dc:	6022      	str	r2, [r4, #0]
 800f3de:	461a      	mov	r2, r3
 800f3e0:	f7f1 ff72 	bl	80012c8 <_write>
 800f3e4:	1c43      	adds	r3, r0, #1
 800f3e6:	d102      	bne.n	800f3ee <_write_r+0x1e>
 800f3e8:	6823      	ldr	r3, [r4, #0]
 800f3ea:	b103      	cbz	r3, 800f3ee <_write_r+0x1e>
 800f3ec:	602b      	str	r3, [r5, #0]
 800f3ee:	bd38      	pop	{r3, r4, r5, pc}
 800f3f0:	20005164 	.word	0x20005164

0800f3f4 <__register_exitproc>:
 800f3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3f8:	4c26      	ldr	r4, [pc, #152]	; (800f494 <__register_exitproc+0xa0>)
 800f3fa:	4606      	mov	r6, r0
 800f3fc:	6820      	ldr	r0, [r4, #0]
 800f3fe:	4698      	mov	r8, r3
 800f400:	460f      	mov	r7, r1
 800f402:	4691      	mov	r9, r2
 800f404:	f7ff fc06 	bl	800ec14 <__retarget_lock_acquire_recursive>
 800f408:	4b23      	ldr	r3, [pc, #140]	; (800f498 <__register_exitproc+0xa4>)
 800f40a:	681d      	ldr	r5, [r3, #0]
 800f40c:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800f410:	b918      	cbnz	r0, 800f41a <__register_exitproc+0x26>
 800f412:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800f416:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800f41a:	6843      	ldr	r3, [r0, #4]
 800f41c:	2b1f      	cmp	r3, #31
 800f41e:	dd19      	ble.n	800f454 <__register_exitproc+0x60>
 800f420:	4b1e      	ldr	r3, [pc, #120]	; (800f49c <__register_exitproc+0xa8>)
 800f422:	b933      	cbnz	r3, 800f432 <__register_exitproc+0x3e>
 800f424:	6820      	ldr	r0, [r4, #0]
 800f426:	f7ff fbf6 	bl	800ec16 <__retarget_lock_release_recursive>
 800f42a:	f04f 30ff 	mov.w	r0, #4294967295
 800f42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f432:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800f436:	f7fc fd3d 	bl	800beb4 <malloc>
 800f43a:	2800      	cmp	r0, #0
 800f43c:	d0f2      	beq.n	800f424 <__register_exitproc+0x30>
 800f43e:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800f442:	6003      	str	r3, [r0, #0]
 800f444:	2200      	movs	r2, #0
 800f446:	6042      	str	r2, [r0, #4]
 800f448:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800f44c:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800f450:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800f454:	6843      	ldr	r3, [r0, #4]
 800f456:	b19e      	cbz	r6, 800f480 <__register_exitproc+0x8c>
 800f458:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800f45c:	2201      	movs	r2, #1
 800f45e:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800f462:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800f466:	409a      	lsls	r2, r3
 800f468:	4311      	orrs	r1, r2
 800f46a:	2e02      	cmp	r6, #2
 800f46c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800f470:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800f474:	bf02      	ittt	eq
 800f476:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800f47a:	430a      	orreq	r2, r1
 800f47c:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800f480:	1c5a      	adds	r2, r3, #1
 800f482:	3302      	adds	r3, #2
 800f484:	6042      	str	r2, [r0, #4]
 800f486:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800f48a:	6820      	ldr	r0, [r4, #0]
 800f48c:	f7ff fbc3 	bl	800ec16 <__retarget_lock_release_recursive>
 800f490:	2000      	movs	r0, #0
 800f492:	e7cc      	b.n	800f42e <__register_exitproc+0x3a>
 800f494:	20000870 	.word	0x20000870
 800f498:	08010150 	.word	0x08010150
 800f49c:	0800beb5 	.word	0x0800beb5

0800f4a0 <_calloc_r>:
 800f4a0:	b510      	push	{r4, lr}
 800f4a2:	4351      	muls	r1, r2
 800f4a4:	f7fc fd16 	bl	800bed4 <_malloc_r>
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	b198      	cbz	r0, 800f4d4 <_calloc_r+0x34>
 800f4ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800f4b0:	f022 0203 	bic.w	r2, r2, #3
 800f4b4:	3a04      	subs	r2, #4
 800f4b6:	2a24      	cmp	r2, #36	; 0x24
 800f4b8:	d81b      	bhi.n	800f4f2 <_calloc_r+0x52>
 800f4ba:	2a13      	cmp	r2, #19
 800f4bc:	d917      	bls.n	800f4ee <_calloc_r+0x4e>
 800f4be:	2100      	movs	r1, #0
 800f4c0:	2a1b      	cmp	r2, #27
 800f4c2:	e9c0 1100 	strd	r1, r1, [r0]
 800f4c6:	d807      	bhi.n	800f4d8 <_calloc_r+0x38>
 800f4c8:	f100 0308 	add.w	r3, r0, #8
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	e9c3 2200 	strd	r2, r2, [r3]
 800f4d2:	609a      	str	r2, [r3, #8]
 800f4d4:	4620      	mov	r0, r4
 800f4d6:	bd10      	pop	{r4, pc}
 800f4d8:	2a24      	cmp	r2, #36	; 0x24
 800f4da:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800f4de:	bf11      	iteee	ne
 800f4e0:	f100 0310 	addne.w	r3, r0, #16
 800f4e4:	6101      	streq	r1, [r0, #16]
 800f4e6:	f100 0318 	addeq.w	r3, r0, #24
 800f4ea:	6141      	streq	r1, [r0, #20]
 800f4ec:	e7ee      	b.n	800f4cc <_calloc_r+0x2c>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	e7ec      	b.n	800f4cc <_calloc_r+0x2c>
 800f4f2:	2100      	movs	r1, #0
 800f4f4:	f7fc ff2f 	bl	800c356 <memset>
 800f4f8:	e7ec      	b.n	800f4d4 <_calloc_r+0x34>
	...

0800f4fc <_close_r>:
 800f4fc:	b538      	push	{r3, r4, r5, lr}
 800f4fe:	4c06      	ldr	r4, [pc, #24]	; (800f518 <_close_r+0x1c>)
 800f500:	2300      	movs	r3, #0
 800f502:	4605      	mov	r5, r0
 800f504:	4608      	mov	r0, r1
 800f506:	6023      	str	r3, [r4, #0]
 800f508:	f7f2 f9ff 	bl	800190a <_close>
 800f50c:	1c43      	adds	r3, r0, #1
 800f50e:	d102      	bne.n	800f516 <_close_r+0x1a>
 800f510:	6823      	ldr	r3, [r4, #0]
 800f512:	b103      	cbz	r3, 800f516 <_close_r+0x1a>
 800f514:	602b      	str	r3, [r5, #0]
 800f516:	bd38      	pop	{r3, r4, r5, pc}
 800f518:	20005164 	.word	0x20005164

0800f51c <_fclose_r>:
 800f51c:	b570      	push	{r4, r5, r6, lr}
 800f51e:	4606      	mov	r6, r0
 800f520:	460c      	mov	r4, r1
 800f522:	b911      	cbnz	r1, 800f52a <_fclose_r+0xe>
 800f524:	2500      	movs	r5, #0
 800f526:	4628      	mov	r0, r5
 800f528:	bd70      	pop	{r4, r5, r6, pc}
 800f52a:	b118      	cbz	r0, 800f534 <_fclose_r+0x18>
 800f52c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f52e:	b90b      	cbnz	r3, 800f534 <_fclose_r+0x18>
 800f530:	f7ff f9e4 	bl	800e8fc <__sinit>
 800f534:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f536:	07d8      	lsls	r0, r3, #31
 800f538:	d405      	bmi.n	800f546 <_fclose_r+0x2a>
 800f53a:	89a3      	ldrh	r3, [r4, #12]
 800f53c:	0599      	lsls	r1, r3, #22
 800f53e:	d402      	bmi.n	800f546 <_fclose_r+0x2a>
 800f540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f542:	f7ff fb67 	bl	800ec14 <__retarget_lock_acquire_recursive>
 800f546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f54a:	b93b      	cbnz	r3, 800f55c <_fclose_r+0x40>
 800f54c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f54e:	f015 0501 	ands.w	r5, r5, #1
 800f552:	d1e7      	bne.n	800f524 <_fclose_r+0x8>
 800f554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f556:	f7ff fb5e 	bl	800ec16 <__retarget_lock_release_recursive>
 800f55a:	e7e4      	b.n	800f526 <_fclose_r+0xa>
 800f55c:	4621      	mov	r1, r4
 800f55e:	4630      	mov	r0, r6
 800f560:	f7ff f8d2 	bl	800e708 <__sflush_r>
 800f564:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f566:	4605      	mov	r5, r0
 800f568:	b133      	cbz	r3, 800f578 <_fclose_r+0x5c>
 800f56a:	69e1      	ldr	r1, [r4, #28]
 800f56c:	4630      	mov	r0, r6
 800f56e:	4798      	blx	r3
 800f570:	2800      	cmp	r0, #0
 800f572:	bfb8      	it	lt
 800f574:	f04f 35ff 	movlt.w	r5, #4294967295
 800f578:	89a3      	ldrh	r3, [r4, #12]
 800f57a:	061a      	lsls	r2, r3, #24
 800f57c:	d503      	bpl.n	800f586 <_fclose_r+0x6a>
 800f57e:	6921      	ldr	r1, [r4, #16]
 800f580:	4630      	mov	r0, r6
 800f582:	f7ff fa4b 	bl	800ea1c <_free_r>
 800f586:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f588:	b141      	cbz	r1, 800f59c <_fclose_r+0x80>
 800f58a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800f58e:	4299      	cmp	r1, r3
 800f590:	d002      	beq.n	800f598 <_fclose_r+0x7c>
 800f592:	4630      	mov	r0, r6
 800f594:	f7ff fa42 	bl	800ea1c <_free_r>
 800f598:	2300      	movs	r3, #0
 800f59a:	6323      	str	r3, [r4, #48]	; 0x30
 800f59c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f59e:	b121      	cbz	r1, 800f5aa <_fclose_r+0x8e>
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	f7ff fa3b 	bl	800ea1c <_free_r>
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	6463      	str	r3, [r4, #68]	; 0x44
 800f5aa:	f7ff f98f 	bl	800e8cc <__sfp_lock_acquire>
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	81a3      	strh	r3, [r4, #12]
 800f5b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5b4:	07db      	lsls	r3, r3, #31
 800f5b6:	d402      	bmi.n	800f5be <_fclose_r+0xa2>
 800f5b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5ba:	f7ff fb2c 	bl	800ec16 <__retarget_lock_release_recursive>
 800f5be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5c0:	f7ff fb27 	bl	800ec12 <__retarget_lock_close_recursive>
 800f5c4:	f7ff f988 	bl	800e8d8 <__sfp_lock_release>
 800f5c8:	e7ad      	b.n	800f526 <_fclose_r+0xa>

0800f5ca <__fputwc>:
 800f5ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f5ce:	4680      	mov	r8, r0
 800f5d0:	460e      	mov	r6, r1
 800f5d2:	4614      	mov	r4, r2
 800f5d4:	f000 f9d4 	bl	800f980 <__locale_mb_cur_max>
 800f5d8:	2801      	cmp	r0, #1
 800f5da:	d11c      	bne.n	800f616 <__fputwc+0x4c>
 800f5dc:	1e73      	subs	r3, r6, #1
 800f5de:	2bfe      	cmp	r3, #254	; 0xfe
 800f5e0:	d819      	bhi.n	800f616 <__fputwc+0x4c>
 800f5e2:	f88d 6004 	strb.w	r6, [sp, #4]
 800f5e6:	4605      	mov	r5, r0
 800f5e8:	2700      	movs	r7, #0
 800f5ea:	f10d 0904 	add.w	r9, sp, #4
 800f5ee:	42af      	cmp	r7, r5
 800f5f0:	d020      	beq.n	800f634 <__fputwc+0x6a>
 800f5f2:	68a3      	ldr	r3, [r4, #8]
 800f5f4:	f817 1009 	ldrb.w	r1, [r7, r9]
 800f5f8:	3b01      	subs	r3, #1
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	60a3      	str	r3, [r4, #8]
 800f5fe:	da04      	bge.n	800f60a <__fputwc+0x40>
 800f600:	69a2      	ldr	r2, [r4, #24]
 800f602:	4293      	cmp	r3, r2
 800f604:	db1a      	blt.n	800f63c <__fputwc+0x72>
 800f606:	290a      	cmp	r1, #10
 800f608:	d018      	beq.n	800f63c <__fputwc+0x72>
 800f60a:	6823      	ldr	r3, [r4, #0]
 800f60c:	1c5a      	adds	r2, r3, #1
 800f60e:	6022      	str	r2, [r4, #0]
 800f610:	7019      	strb	r1, [r3, #0]
 800f612:	3701      	adds	r7, #1
 800f614:	e7eb      	b.n	800f5ee <__fputwc+0x24>
 800f616:	4632      	mov	r2, r6
 800f618:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800f61c:	a901      	add	r1, sp, #4
 800f61e:	4640      	mov	r0, r8
 800f620:	f000 fbfe 	bl	800fe20 <_wcrtomb_r>
 800f624:	1c42      	adds	r2, r0, #1
 800f626:	4605      	mov	r5, r0
 800f628:	d1de      	bne.n	800f5e8 <__fputwc+0x1e>
 800f62a:	89a3      	ldrh	r3, [r4, #12]
 800f62c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f630:	81a3      	strh	r3, [r4, #12]
 800f632:	4606      	mov	r6, r0
 800f634:	4630      	mov	r0, r6
 800f636:	b003      	add	sp, #12
 800f638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f63c:	4622      	mov	r2, r4
 800f63e:	4640      	mov	r0, r8
 800f640:	f000 fba4 	bl	800fd8c <__swbuf_r>
 800f644:	1c43      	adds	r3, r0, #1
 800f646:	d1e4      	bne.n	800f612 <__fputwc+0x48>
 800f648:	4606      	mov	r6, r0
 800f64a:	e7f3      	b.n	800f634 <__fputwc+0x6a>

0800f64c <_fputwc_r>:
 800f64c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800f64e:	07db      	lsls	r3, r3, #31
 800f650:	b570      	push	{r4, r5, r6, lr}
 800f652:	4605      	mov	r5, r0
 800f654:	460e      	mov	r6, r1
 800f656:	4614      	mov	r4, r2
 800f658:	d405      	bmi.n	800f666 <_fputwc_r+0x1a>
 800f65a:	8993      	ldrh	r3, [r2, #12]
 800f65c:	0598      	lsls	r0, r3, #22
 800f65e:	d402      	bmi.n	800f666 <_fputwc_r+0x1a>
 800f660:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800f662:	f7ff fad7 	bl	800ec14 <__retarget_lock_acquire_recursive>
 800f666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f66a:	0499      	lsls	r1, r3, #18
 800f66c:	d406      	bmi.n	800f67c <_fputwc_r+0x30>
 800f66e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f672:	81a3      	strh	r3, [r4, #12]
 800f674:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f676:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f67a:	6663      	str	r3, [r4, #100]	; 0x64
 800f67c:	4622      	mov	r2, r4
 800f67e:	4628      	mov	r0, r5
 800f680:	4631      	mov	r1, r6
 800f682:	f7ff ffa2 	bl	800f5ca <__fputwc>
 800f686:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f688:	07da      	lsls	r2, r3, #31
 800f68a:	4605      	mov	r5, r0
 800f68c:	d405      	bmi.n	800f69a <_fputwc_r+0x4e>
 800f68e:	89a3      	ldrh	r3, [r4, #12]
 800f690:	059b      	lsls	r3, r3, #22
 800f692:	d402      	bmi.n	800f69a <_fputwc_r+0x4e>
 800f694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f696:	f7ff fabe 	bl	800ec16 <__retarget_lock_release_recursive>
 800f69a:	4628      	mov	r0, r5
 800f69c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f6a0 <_fstat_r>:
 800f6a0:	b538      	push	{r3, r4, r5, lr}
 800f6a2:	4c07      	ldr	r4, [pc, #28]	; (800f6c0 <_fstat_r+0x20>)
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	4605      	mov	r5, r0
 800f6a8:	4608      	mov	r0, r1
 800f6aa:	4611      	mov	r1, r2
 800f6ac:	6023      	str	r3, [r4, #0]
 800f6ae:	f7f2 f938 	bl	8001922 <_fstat>
 800f6b2:	1c43      	adds	r3, r0, #1
 800f6b4:	d102      	bne.n	800f6bc <_fstat_r+0x1c>
 800f6b6:	6823      	ldr	r3, [r4, #0]
 800f6b8:	b103      	cbz	r3, 800f6bc <_fstat_r+0x1c>
 800f6ba:	602b      	str	r3, [r5, #0]
 800f6bc:	bd38      	pop	{r3, r4, r5, pc}
 800f6be:	bf00      	nop
 800f6c0:	20005164 	.word	0x20005164

0800f6c4 <__sfvwrite_r>:
 800f6c4:	6893      	ldr	r3, [r2, #8]
 800f6c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ca:	4680      	mov	r8, r0
 800f6cc:	460c      	mov	r4, r1
 800f6ce:	4691      	mov	r9, r2
 800f6d0:	b91b      	cbnz	r3, 800f6da <__sfvwrite_r+0x16>
 800f6d2:	2000      	movs	r0, #0
 800f6d4:	b003      	add	sp, #12
 800f6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6da:	898b      	ldrh	r3, [r1, #12]
 800f6dc:	0718      	lsls	r0, r3, #28
 800f6de:	d54f      	bpl.n	800f780 <__sfvwrite_r+0xbc>
 800f6e0:	690b      	ldr	r3, [r1, #16]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d04c      	beq.n	800f780 <__sfvwrite_r+0xbc>
 800f6e6:	89a5      	ldrh	r5, [r4, #12]
 800f6e8:	f8d9 6000 	ldr.w	r6, [r9]
 800f6ec:	f015 0702 	ands.w	r7, r5, #2
 800f6f0:	d169      	bne.n	800f7c6 <__sfvwrite_r+0x102>
 800f6f2:	f015 0501 	ands.w	r5, r5, #1
 800f6f6:	f000 809a 	beq.w	800f82e <__sfvwrite_r+0x16a>
 800f6fa:	4638      	mov	r0, r7
 800f6fc:	46ba      	mov	sl, r7
 800f6fe:	46bb      	mov	fp, r7
 800f700:	f1bb 0f00 	cmp.w	fp, #0
 800f704:	f000 8103 	beq.w	800f90e <__sfvwrite_r+0x24a>
 800f708:	b950      	cbnz	r0, 800f720 <__sfvwrite_r+0x5c>
 800f70a:	465a      	mov	r2, fp
 800f70c:	210a      	movs	r1, #10
 800f70e:	4650      	mov	r0, sl
 800f710:	f7f0 fd66 	bl	80001e0 <memchr>
 800f714:	2800      	cmp	r0, #0
 800f716:	f000 80ff 	beq.w	800f918 <__sfvwrite_r+0x254>
 800f71a:	3001      	adds	r0, #1
 800f71c:	eba0 070a 	sub.w	r7, r0, sl
 800f720:	6820      	ldr	r0, [r4, #0]
 800f722:	6921      	ldr	r1, [r4, #16]
 800f724:	6962      	ldr	r2, [r4, #20]
 800f726:	455f      	cmp	r7, fp
 800f728:	463b      	mov	r3, r7
 800f72a:	bf28      	it	cs
 800f72c:	465b      	movcs	r3, fp
 800f72e:	4288      	cmp	r0, r1
 800f730:	f240 80f5 	bls.w	800f91e <__sfvwrite_r+0x25a>
 800f734:	68a5      	ldr	r5, [r4, #8]
 800f736:	4415      	add	r5, r2
 800f738:	42ab      	cmp	r3, r5
 800f73a:	f340 80f0 	ble.w	800f91e <__sfvwrite_r+0x25a>
 800f73e:	4651      	mov	r1, sl
 800f740:	462a      	mov	r2, r5
 800f742:	f000 f94f 	bl	800f9e4 <memmove>
 800f746:	6823      	ldr	r3, [r4, #0]
 800f748:	442b      	add	r3, r5
 800f74a:	6023      	str	r3, [r4, #0]
 800f74c:	4621      	mov	r1, r4
 800f74e:	4640      	mov	r0, r8
 800f750:	f7ff f868 	bl	800e824 <_fflush_r>
 800f754:	2800      	cmp	r0, #0
 800f756:	d165      	bne.n	800f824 <__sfvwrite_r+0x160>
 800f758:	1b7f      	subs	r7, r7, r5
 800f75a:	f040 80fa 	bne.w	800f952 <__sfvwrite_r+0x28e>
 800f75e:	4621      	mov	r1, r4
 800f760:	4640      	mov	r0, r8
 800f762:	f7ff f85f 	bl	800e824 <_fflush_r>
 800f766:	2800      	cmp	r0, #0
 800f768:	d15c      	bne.n	800f824 <__sfvwrite_r+0x160>
 800f76a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f76e:	44aa      	add	sl, r5
 800f770:	ebab 0b05 	sub.w	fp, fp, r5
 800f774:	1b5d      	subs	r5, r3, r5
 800f776:	f8c9 5008 	str.w	r5, [r9, #8]
 800f77a:	2d00      	cmp	r5, #0
 800f77c:	d1c0      	bne.n	800f700 <__sfvwrite_r+0x3c>
 800f77e:	e7a8      	b.n	800f6d2 <__sfvwrite_r+0xe>
 800f780:	4621      	mov	r1, r4
 800f782:	4640      	mov	r0, r8
 800f784:	f7fe f922 	bl	800d9cc <__swsetup_r>
 800f788:	2800      	cmp	r0, #0
 800f78a:	d0ac      	beq.n	800f6e6 <__sfvwrite_r+0x22>
 800f78c:	f04f 30ff 	mov.w	r0, #4294967295
 800f790:	e7a0      	b.n	800f6d4 <__sfvwrite_r+0x10>
 800f792:	e9d6 a700 	ldrd	sl, r7, [r6]
 800f796:	3608      	adds	r6, #8
 800f798:	2f00      	cmp	r7, #0
 800f79a:	d0fa      	beq.n	800f792 <__sfvwrite_r+0xce>
 800f79c:	455f      	cmp	r7, fp
 800f79e:	463b      	mov	r3, r7
 800f7a0:	4652      	mov	r2, sl
 800f7a2:	bf28      	it	cs
 800f7a4:	465b      	movcs	r3, fp
 800f7a6:	69e1      	ldr	r1, [r4, #28]
 800f7a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f7aa:	4640      	mov	r0, r8
 800f7ac:	47a8      	blx	r5
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	dd38      	ble.n	800f824 <__sfvwrite_r+0x160>
 800f7b2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f7b6:	4482      	add	sl, r0
 800f7b8:	1a3f      	subs	r7, r7, r0
 800f7ba:	1a18      	subs	r0, r3, r0
 800f7bc:	f8c9 0008 	str.w	r0, [r9, #8]
 800f7c0:	2800      	cmp	r0, #0
 800f7c2:	d1e9      	bne.n	800f798 <__sfvwrite_r+0xd4>
 800f7c4:	e785      	b.n	800f6d2 <__sfvwrite_r+0xe>
 800f7c6:	f04f 0a00 	mov.w	sl, #0
 800f7ca:	4657      	mov	r7, sl
 800f7cc:	f8df b18c 	ldr.w	fp, [pc, #396]	; 800f95c <__sfvwrite_r+0x298>
 800f7d0:	e7e2      	b.n	800f798 <__sfvwrite_r+0xd4>
 800f7d2:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800f7d6:	3608      	adds	r6, #8
 800f7d8:	f1ba 0f00 	cmp.w	sl, #0
 800f7dc:	d0f9      	beq.n	800f7d2 <__sfvwrite_r+0x10e>
 800f7de:	89a2      	ldrh	r2, [r4, #12]
 800f7e0:	68a3      	ldr	r3, [r4, #8]
 800f7e2:	6820      	ldr	r0, [r4, #0]
 800f7e4:	0591      	lsls	r1, r2, #22
 800f7e6:	d564      	bpl.n	800f8b2 <__sfvwrite_r+0x1ee>
 800f7e8:	4553      	cmp	r3, sl
 800f7ea:	d836      	bhi.n	800f85a <__sfvwrite_r+0x196>
 800f7ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f7f0:	d033      	beq.n	800f85a <__sfvwrite_r+0x196>
 800f7f2:	6921      	ldr	r1, [r4, #16]
 800f7f4:	6967      	ldr	r7, [r4, #20]
 800f7f6:	eba0 0b01 	sub.w	fp, r0, r1
 800f7fa:	2302      	movs	r3, #2
 800f7fc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800f800:	fb97 f7f3 	sdiv	r7, r7, r3
 800f804:	f10b 0301 	add.w	r3, fp, #1
 800f808:	4453      	add	r3, sl
 800f80a:	429f      	cmp	r7, r3
 800f80c:	bf38      	it	cc
 800f80e:	461f      	movcc	r7, r3
 800f810:	0553      	lsls	r3, r2, #21
 800f812:	d53e      	bpl.n	800f892 <__sfvwrite_r+0x1ce>
 800f814:	4639      	mov	r1, r7
 800f816:	4640      	mov	r0, r8
 800f818:	f7fc fb5c 	bl	800bed4 <_malloc_r>
 800f81c:	b948      	cbnz	r0, 800f832 <__sfvwrite_r+0x16e>
 800f81e:	230c      	movs	r3, #12
 800f820:	f8c8 3000 	str.w	r3, [r8]
 800f824:	89a3      	ldrh	r3, [r4, #12]
 800f826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f82a:	81a3      	strh	r3, [r4, #12]
 800f82c:	e7ae      	b.n	800f78c <__sfvwrite_r+0xc8>
 800f82e:	46aa      	mov	sl, r5
 800f830:	e7d2      	b.n	800f7d8 <__sfvwrite_r+0x114>
 800f832:	465a      	mov	r2, fp
 800f834:	6921      	ldr	r1, [r4, #16]
 800f836:	9001      	str	r0, [sp, #4]
 800f838:	f7fc fd82 	bl	800c340 <memcpy>
 800f83c:	89a2      	ldrh	r2, [r4, #12]
 800f83e:	9b01      	ldr	r3, [sp, #4]
 800f840:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800f844:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f848:	81a2      	strh	r2, [r4, #12]
 800f84a:	6123      	str	r3, [r4, #16]
 800f84c:	6167      	str	r7, [r4, #20]
 800f84e:	445b      	add	r3, fp
 800f850:	eba7 070b 	sub.w	r7, r7, fp
 800f854:	6023      	str	r3, [r4, #0]
 800f856:	60a7      	str	r7, [r4, #8]
 800f858:	4653      	mov	r3, sl
 800f85a:	4553      	cmp	r3, sl
 800f85c:	bf28      	it	cs
 800f85e:	4653      	movcs	r3, sl
 800f860:	461a      	mov	r2, r3
 800f862:	4629      	mov	r1, r5
 800f864:	6820      	ldr	r0, [r4, #0]
 800f866:	9301      	str	r3, [sp, #4]
 800f868:	f000 f8bc 	bl	800f9e4 <memmove>
 800f86c:	68a2      	ldr	r2, [r4, #8]
 800f86e:	9b01      	ldr	r3, [sp, #4]
 800f870:	1ad2      	subs	r2, r2, r3
 800f872:	60a2      	str	r2, [r4, #8]
 800f874:	6822      	ldr	r2, [r4, #0]
 800f876:	4413      	add	r3, r2
 800f878:	4657      	mov	r7, sl
 800f87a:	6023      	str	r3, [r4, #0]
 800f87c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f880:	443d      	add	r5, r7
 800f882:	ebaa 0a07 	sub.w	sl, sl, r7
 800f886:	1bdf      	subs	r7, r3, r7
 800f888:	f8c9 7008 	str.w	r7, [r9, #8]
 800f88c:	2f00      	cmp	r7, #0
 800f88e:	d1a3      	bne.n	800f7d8 <__sfvwrite_r+0x114>
 800f890:	e71f      	b.n	800f6d2 <__sfvwrite_r+0xe>
 800f892:	463a      	mov	r2, r7
 800f894:	4640      	mov	r0, r8
 800f896:	f000 f8d1 	bl	800fa3c <_realloc_r>
 800f89a:	4603      	mov	r3, r0
 800f89c:	2800      	cmp	r0, #0
 800f89e:	d1d4      	bne.n	800f84a <__sfvwrite_r+0x186>
 800f8a0:	6921      	ldr	r1, [r4, #16]
 800f8a2:	4640      	mov	r0, r8
 800f8a4:	f7ff f8ba 	bl	800ea1c <_free_r>
 800f8a8:	89a3      	ldrh	r3, [r4, #12]
 800f8aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8ae:	81a3      	strh	r3, [r4, #12]
 800f8b0:	e7b5      	b.n	800f81e <__sfvwrite_r+0x15a>
 800f8b2:	6922      	ldr	r2, [r4, #16]
 800f8b4:	4282      	cmp	r2, r0
 800f8b6:	d302      	bcc.n	800f8be <__sfvwrite_r+0x1fa>
 800f8b8:	6962      	ldr	r2, [r4, #20]
 800f8ba:	4552      	cmp	r2, sl
 800f8bc:	d916      	bls.n	800f8ec <__sfvwrite_r+0x228>
 800f8be:	4553      	cmp	r3, sl
 800f8c0:	bf28      	it	cs
 800f8c2:	4653      	movcs	r3, sl
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	4629      	mov	r1, r5
 800f8c8:	461f      	mov	r7, r3
 800f8ca:	f000 f88b 	bl	800f9e4 <memmove>
 800f8ce:	68a3      	ldr	r3, [r4, #8]
 800f8d0:	6822      	ldr	r2, [r4, #0]
 800f8d2:	1bdb      	subs	r3, r3, r7
 800f8d4:	443a      	add	r2, r7
 800f8d6:	60a3      	str	r3, [r4, #8]
 800f8d8:	6022      	str	r2, [r4, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d1ce      	bne.n	800f87c <__sfvwrite_r+0x1b8>
 800f8de:	4621      	mov	r1, r4
 800f8e0:	4640      	mov	r0, r8
 800f8e2:	f7fe ff9f 	bl	800e824 <_fflush_r>
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	d0c8      	beq.n	800f87c <__sfvwrite_r+0x1b8>
 800f8ea:	e79b      	b.n	800f824 <__sfvwrite_r+0x160>
 800f8ec:	4b1a      	ldr	r3, [pc, #104]	; (800f958 <__sfvwrite_r+0x294>)
 800f8ee:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800f8f0:	69e1      	ldr	r1, [r4, #28]
 800f8f2:	459a      	cmp	sl, r3
 800f8f4:	bf94      	ite	ls
 800f8f6:	4653      	movls	r3, sl
 800f8f8:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 800f8fc:	4640      	mov	r0, r8
 800f8fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800f902:	4353      	muls	r3, r2
 800f904:	462a      	mov	r2, r5
 800f906:	47b8      	blx	r7
 800f908:	1e07      	subs	r7, r0, #0
 800f90a:	dcb7      	bgt.n	800f87c <__sfvwrite_r+0x1b8>
 800f90c:	e78a      	b.n	800f824 <__sfvwrite_r+0x160>
 800f90e:	e9d6 ab00 	ldrd	sl, fp, [r6]
 800f912:	2000      	movs	r0, #0
 800f914:	3608      	adds	r6, #8
 800f916:	e6f3      	b.n	800f700 <__sfvwrite_r+0x3c>
 800f918:	f10b 0701 	add.w	r7, fp, #1
 800f91c:	e700      	b.n	800f720 <__sfvwrite_r+0x5c>
 800f91e:	429a      	cmp	r2, r3
 800f920:	dc09      	bgt.n	800f936 <__sfvwrite_r+0x272>
 800f922:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f924:	69e1      	ldr	r1, [r4, #28]
 800f926:	4613      	mov	r3, r2
 800f928:	4640      	mov	r0, r8
 800f92a:	4652      	mov	r2, sl
 800f92c:	47a8      	blx	r5
 800f92e:	1e05      	subs	r5, r0, #0
 800f930:	f73f af12 	bgt.w	800f758 <__sfvwrite_r+0x94>
 800f934:	e776      	b.n	800f824 <__sfvwrite_r+0x160>
 800f936:	461a      	mov	r2, r3
 800f938:	4651      	mov	r1, sl
 800f93a:	9301      	str	r3, [sp, #4]
 800f93c:	f000 f852 	bl	800f9e4 <memmove>
 800f940:	9b01      	ldr	r3, [sp, #4]
 800f942:	68a2      	ldr	r2, [r4, #8]
 800f944:	1ad2      	subs	r2, r2, r3
 800f946:	60a2      	str	r2, [r4, #8]
 800f948:	6822      	ldr	r2, [r4, #0]
 800f94a:	441a      	add	r2, r3
 800f94c:	6022      	str	r2, [r4, #0]
 800f94e:	461d      	mov	r5, r3
 800f950:	e702      	b.n	800f758 <__sfvwrite_r+0x94>
 800f952:	2001      	movs	r0, #1
 800f954:	e709      	b.n	800f76a <__sfvwrite_r+0xa6>
 800f956:	bf00      	nop
 800f958:	7ffffffe 	.word	0x7ffffffe
 800f95c:	7ffffc00 	.word	0x7ffffc00

0800f960 <_isatty_r>:
 800f960:	b538      	push	{r3, r4, r5, lr}
 800f962:	4c06      	ldr	r4, [pc, #24]	; (800f97c <_isatty_r+0x1c>)
 800f964:	2300      	movs	r3, #0
 800f966:	4605      	mov	r5, r0
 800f968:	4608      	mov	r0, r1
 800f96a:	6023      	str	r3, [r4, #0]
 800f96c:	f7f1 ffe9 	bl	8001942 <_isatty>
 800f970:	1c43      	adds	r3, r0, #1
 800f972:	d102      	bne.n	800f97a <_isatty_r+0x1a>
 800f974:	6823      	ldr	r3, [r4, #0]
 800f976:	b103      	cbz	r3, 800f97a <_isatty_r+0x1a>
 800f978:	602b      	str	r3, [r5, #0]
 800f97a:	bd38      	pop	{r3, r4, r5, pc}
 800f97c:	20005164 	.word	0x20005164

0800f980 <__locale_mb_cur_max>:
 800f980:	4b04      	ldr	r3, [pc, #16]	; (800f994 <__locale_mb_cur_max+0x14>)
 800f982:	4a05      	ldr	r2, [pc, #20]	; (800f998 <__locale_mb_cur_max+0x18>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f988:	2b00      	cmp	r3, #0
 800f98a:	bf08      	it	eq
 800f98c:	4613      	moveq	r3, r2
 800f98e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800f992:	4770      	bx	lr
 800f994:	20000030 	.word	0x20000030
 800f998:	20000874 	.word	0x20000874

0800f99c <_lseek_r>:
 800f99c:	b538      	push	{r3, r4, r5, lr}
 800f99e:	4c07      	ldr	r4, [pc, #28]	; (800f9bc <_lseek_r+0x20>)
 800f9a0:	4605      	mov	r5, r0
 800f9a2:	4608      	mov	r0, r1
 800f9a4:	4611      	mov	r1, r2
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	6022      	str	r2, [r4, #0]
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	f7f1 ffd4 	bl	8001958 <_lseek>
 800f9b0:	1c43      	adds	r3, r0, #1
 800f9b2:	d102      	bne.n	800f9ba <_lseek_r+0x1e>
 800f9b4:	6823      	ldr	r3, [r4, #0]
 800f9b6:	b103      	cbz	r3, 800f9ba <_lseek_r+0x1e>
 800f9b8:	602b      	str	r3, [r5, #0]
 800f9ba:	bd38      	pop	{r3, r4, r5, pc}
 800f9bc:	20005164 	.word	0x20005164

0800f9c0 <__ascii_mbtowc>:
 800f9c0:	b082      	sub	sp, #8
 800f9c2:	b901      	cbnz	r1, 800f9c6 <__ascii_mbtowc+0x6>
 800f9c4:	a901      	add	r1, sp, #4
 800f9c6:	b142      	cbz	r2, 800f9da <__ascii_mbtowc+0x1a>
 800f9c8:	b14b      	cbz	r3, 800f9de <__ascii_mbtowc+0x1e>
 800f9ca:	7813      	ldrb	r3, [r2, #0]
 800f9cc:	600b      	str	r3, [r1, #0]
 800f9ce:	7812      	ldrb	r2, [r2, #0]
 800f9d0:	1c10      	adds	r0, r2, #0
 800f9d2:	bf18      	it	ne
 800f9d4:	2001      	movne	r0, #1
 800f9d6:	b002      	add	sp, #8
 800f9d8:	4770      	bx	lr
 800f9da:	4610      	mov	r0, r2
 800f9dc:	e7fb      	b.n	800f9d6 <__ascii_mbtowc+0x16>
 800f9de:	f06f 0001 	mvn.w	r0, #1
 800f9e2:	e7f8      	b.n	800f9d6 <__ascii_mbtowc+0x16>

0800f9e4 <memmove>:
 800f9e4:	4288      	cmp	r0, r1
 800f9e6:	b510      	push	{r4, lr}
 800f9e8:	eb01 0302 	add.w	r3, r1, r2
 800f9ec:	d807      	bhi.n	800f9fe <memmove+0x1a>
 800f9ee:	1e42      	subs	r2, r0, #1
 800f9f0:	4299      	cmp	r1, r3
 800f9f2:	d00a      	beq.n	800fa0a <memmove+0x26>
 800f9f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9f8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f9fc:	e7f8      	b.n	800f9f0 <memmove+0xc>
 800f9fe:	4283      	cmp	r3, r0
 800fa00:	d9f5      	bls.n	800f9ee <memmove+0xa>
 800fa02:	1881      	adds	r1, r0, r2
 800fa04:	1ad2      	subs	r2, r2, r3
 800fa06:	42d3      	cmn	r3, r2
 800fa08:	d100      	bne.n	800fa0c <memmove+0x28>
 800fa0a:	bd10      	pop	{r4, pc}
 800fa0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa10:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fa14:	e7f7      	b.n	800fa06 <memmove+0x22>
	...

0800fa18 <_read_r>:
 800fa18:	b538      	push	{r3, r4, r5, lr}
 800fa1a:	4c07      	ldr	r4, [pc, #28]	; (800fa38 <_read_r+0x20>)
 800fa1c:	4605      	mov	r5, r0
 800fa1e:	4608      	mov	r0, r1
 800fa20:	4611      	mov	r1, r2
 800fa22:	2200      	movs	r2, #0
 800fa24:	6022      	str	r2, [r4, #0]
 800fa26:	461a      	mov	r2, r3
 800fa28:	f7f1 ff52 	bl	80018d0 <_read>
 800fa2c:	1c43      	adds	r3, r0, #1
 800fa2e:	d102      	bne.n	800fa36 <_read_r+0x1e>
 800fa30:	6823      	ldr	r3, [r4, #0]
 800fa32:	b103      	cbz	r3, 800fa36 <_read_r+0x1e>
 800fa34:	602b      	str	r3, [r5, #0]
 800fa36:	bd38      	pop	{r3, r4, r5, pc}
 800fa38:	20005164 	.word	0x20005164

0800fa3c <_realloc_r>:
 800fa3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa40:	4682      	mov	sl, r0
 800fa42:	460c      	mov	r4, r1
 800fa44:	b929      	cbnz	r1, 800fa52 <_realloc_r+0x16>
 800fa46:	4611      	mov	r1, r2
 800fa48:	b003      	add	sp, #12
 800fa4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa4e:	f7fc ba41 	b.w	800bed4 <_malloc_r>
 800fa52:	9201      	str	r2, [sp, #4]
 800fa54:	f7fc fc88 	bl	800c368 <__malloc_lock>
 800fa58:	9a01      	ldr	r2, [sp, #4]
 800fa5a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800fa5e:	f102 080b 	add.w	r8, r2, #11
 800fa62:	f1b8 0f16 	cmp.w	r8, #22
 800fa66:	f1a4 0908 	sub.w	r9, r4, #8
 800fa6a:	f025 0603 	bic.w	r6, r5, #3
 800fa6e:	d90b      	bls.n	800fa88 <_realloc_r+0x4c>
 800fa70:	f038 0807 	bics.w	r8, r8, #7
 800fa74:	d50a      	bpl.n	800fa8c <_realloc_r+0x50>
 800fa76:	230c      	movs	r3, #12
 800fa78:	f8ca 3000 	str.w	r3, [sl]
 800fa7c:	f04f 0b00 	mov.w	fp, #0
 800fa80:	4658      	mov	r0, fp
 800fa82:	b003      	add	sp, #12
 800fa84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa88:	f04f 0810 	mov.w	r8, #16
 800fa8c:	4590      	cmp	r8, r2
 800fa8e:	d3f2      	bcc.n	800fa76 <_realloc_r+0x3a>
 800fa90:	45b0      	cmp	r8, r6
 800fa92:	f340 8170 	ble.w	800fd76 <_realloc_r+0x33a>
 800fa96:	49a9      	ldr	r1, [pc, #676]	; (800fd3c <_realloc_r+0x300>)
 800fa98:	9101      	str	r1, [sp, #4]
 800fa9a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800fa9e:	eb09 0306 	add.w	r3, r9, r6
 800faa2:	459c      	cmp	ip, r3
 800faa4:	6858      	ldr	r0, [r3, #4]
 800faa6:	d005      	beq.n	800fab4 <_realloc_r+0x78>
 800faa8:	f020 0101 	bic.w	r1, r0, #1
 800faac:	4419      	add	r1, r3
 800faae:	6849      	ldr	r1, [r1, #4]
 800fab0:	07cf      	lsls	r7, r1, #31
 800fab2:	d447      	bmi.n	800fb44 <_realloc_r+0x108>
 800fab4:	f020 0003 	bic.w	r0, r0, #3
 800fab8:	459c      	cmp	ip, r3
 800faba:	eb06 0700 	add.w	r7, r6, r0
 800fabe:	d119      	bne.n	800faf4 <_realloc_r+0xb8>
 800fac0:	f108 0110 	add.w	r1, r8, #16
 800fac4:	42b9      	cmp	r1, r7
 800fac6:	dc3f      	bgt.n	800fb48 <_realloc_r+0x10c>
 800fac8:	eb09 0308 	add.w	r3, r9, r8
 800facc:	9a01      	ldr	r2, [sp, #4]
 800face:	eba7 0708 	sub.w	r7, r7, r8
 800fad2:	f047 0701 	orr.w	r7, r7, #1
 800fad6:	6093      	str	r3, [r2, #8]
 800fad8:	605f      	str	r7, [r3, #4]
 800fada:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fade:	f003 0301 	and.w	r3, r3, #1
 800fae2:	ea43 0308 	orr.w	r3, r3, r8
 800fae6:	f844 3c04 	str.w	r3, [r4, #-4]
 800faea:	4650      	mov	r0, sl
 800faec:	f7fc fc42 	bl	800c374 <__malloc_unlock>
 800faf0:	46a3      	mov	fp, r4
 800faf2:	e7c5      	b.n	800fa80 <_realloc_r+0x44>
 800faf4:	45b8      	cmp	r8, r7
 800faf6:	dc27      	bgt.n	800fb48 <_realloc_r+0x10c>
 800faf8:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800fafc:	60da      	str	r2, [r3, #12]
 800fafe:	6093      	str	r3, [r2, #8]
 800fb00:	eba7 0008 	sub.w	r0, r7, r8
 800fb04:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800fb08:	280f      	cmp	r0, #15
 800fb0a:	f002 0201 	and.w	r2, r2, #1
 800fb0e:	eb09 0307 	add.w	r3, r9, r7
 800fb12:	f240 8132 	bls.w	800fd7a <_realloc_r+0x33e>
 800fb16:	eb09 0108 	add.w	r1, r9, r8
 800fb1a:	ea48 0202 	orr.w	r2, r8, r2
 800fb1e:	f040 0001 	orr.w	r0, r0, #1
 800fb22:	f8c9 2004 	str.w	r2, [r9, #4]
 800fb26:	6048      	str	r0, [r1, #4]
 800fb28:	685a      	ldr	r2, [r3, #4]
 800fb2a:	f042 0201 	orr.w	r2, r2, #1
 800fb2e:	605a      	str	r2, [r3, #4]
 800fb30:	3108      	adds	r1, #8
 800fb32:	4650      	mov	r0, sl
 800fb34:	f7fe ff72 	bl	800ea1c <_free_r>
 800fb38:	4650      	mov	r0, sl
 800fb3a:	f7fc fc1b 	bl	800c374 <__malloc_unlock>
 800fb3e:	f109 0b08 	add.w	fp, r9, #8
 800fb42:	e79d      	b.n	800fa80 <_realloc_r+0x44>
 800fb44:	2000      	movs	r0, #0
 800fb46:	4603      	mov	r3, r0
 800fb48:	07e9      	lsls	r1, r5, #31
 800fb4a:	f100 80c6 	bmi.w	800fcda <_realloc_r+0x29e>
 800fb4e:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800fb52:	eba9 0505 	sub.w	r5, r9, r5
 800fb56:	6869      	ldr	r1, [r5, #4]
 800fb58:	f021 0103 	bic.w	r1, r1, #3
 800fb5c:	eb01 0b06 	add.w	fp, r1, r6
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	f000 8086 	beq.w	800fc72 <_realloc_r+0x236>
 800fb66:	459c      	cmp	ip, r3
 800fb68:	eb00 070b 	add.w	r7, r0, fp
 800fb6c:	d149      	bne.n	800fc02 <_realloc_r+0x1c6>
 800fb6e:	f108 0310 	add.w	r3, r8, #16
 800fb72:	42bb      	cmp	r3, r7
 800fb74:	dc7d      	bgt.n	800fc72 <_realloc_r+0x236>
 800fb76:	46ab      	mov	fp, r5
 800fb78:	68eb      	ldr	r3, [r5, #12]
 800fb7a:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800fb7e:	60d3      	str	r3, [r2, #12]
 800fb80:	609a      	str	r2, [r3, #8]
 800fb82:	1f32      	subs	r2, r6, #4
 800fb84:	2a24      	cmp	r2, #36	; 0x24
 800fb86:	d837      	bhi.n	800fbf8 <_realloc_r+0x1bc>
 800fb88:	2a13      	cmp	r2, #19
 800fb8a:	d933      	bls.n	800fbf4 <_realloc_r+0x1b8>
 800fb8c:	6823      	ldr	r3, [r4, #0]
 800fb8e:	60ab      	str	r3, [r5, #8]
 800fb90:	6863      	ldr	r3, [r4, #4]
 800fb92:	60eb      	str	r3, [r5, #12]
 800fb94:	2a1b      	cmp	r2, #27
 800fb96:	d81b      	bhi.n	800fbd0 <_realloc_r+0x194>
 800fb98:	3408      	adds	r4, #8
 800fb9a:	f105 0310 	add.w	r3, r5, #16
 800fb9e:	6822      	ldr	r2, [r4, #0]
 800fba0:	601a      	str	r2, [r3, #0]
 800fba2:	6862      	ldr	r2, [r4, #4]
 800fba4:	605a      	str	r2, [r3, #4]
 800fba6:	68a2      	ldr	r2, [r4, #8]
 800fba8:	609a      	str	r2, [r3, #8]
 800fbaa:	eb05 0308 	add.w	r3, r5, r8
 800fbae:	9a01      	ldr	r2, [sp, #4]
 800fbb0:	eba7 0708 	sub.w	r7, r7, r8
 800fbb4:	f047 0701 	orr.w	r7, r7, #1
 800fbb8:	6093      	str	r3, [r2, #8]
 800fbba:	605f      	str	r7, [r3, #4]
 800fbbc:	686b      	ldr	r3, [r5, #4]
 800fbbe:	f003 0301 	and.w	r3, r3, #1
 800fbc2:	ea43 0308 	orr.w	r3, r3, r8
 800fbc6:	606b      	str	r3, [r5, #4]
 800fbc8:	4650      	mov	r0, sl
 800fbca:	f7fc fbd3 	bl	800c374 <__malloc_unlock>
 800fbce:	e757      	b.n	800fa80 <_realloc_r+0x44>
 800fbd0:	68a3      	ldr	r3, [r4, #8]
 800fbd2:	612b      	str	r3, [r5, #16]
 800fbd4:	68e3      	ldr	r3, [r4, #12]
 800fbd6:	616b      	str	r3, [r5, #20]
 800fbd8:	2a24      	cmp	r2, #36	; 0x24
 800fbda:	bf01      	itttt	eq
 800fbdc:	6923      	ldreq	r3, [r4, #16]
 800fbde:	61ab      	streq	r3, [r5, #24]
 800fbe0:	6962      	ldreq	r2, [r4, #20]
 800fbe2:	61ea      	streq	r2, [r5, #28]
 800fbe4:	bf19      	ittee	ne
 800fbe6:	3410      	addne	r4, #16
 800fbe8:	f105 0318 	addne.w	r3, r5, #24
 800fbec:	f105 0320 	addeq.w	r3, r5, #32
 800fbf0:	3418      	addeq	r4, #24
 800fbf2:	e7d4      	b.n	800fb9e <_realloc_r+0x162>
 800fbf4:	465b      	mov	r3, fp
 800fbf6:	e7d2      	b.n	800fb9e <_realloc_r+0x162>
 800fbf8:	4621      	mov	r1, r4
 800fbfa:	4658      	mov	r0, fp
 800fbfc:	f7ff fef2 	bl	800f9e4 <memmove>
 800fc00:	e7d3      	b.n	800fbaa <_realloc_r+0x16e>
 800fc02:	45b8      	cmp	r8, r7
 800fc04:	dc35      	bgt.n	800fc72 <_realloc_r+0x236>
 800fc06:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800fc0a:	4628      	mov	r0, r5
 800fc0c:	60da      	str	r2, [r3, #12]
 800fc0e:	6093      	str	r3, [r2, #8]
 800fc10:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800fc14:	68eb      	ldr	r3, [r5, #12]
 800fc16:	60d3      	str	r3, [r2, #12]
 800fc18:	609a      	str	r2, [r3, #8]
 800fc1a:	1f32      	subs	r2, r6, #4
 800fc1c:	2a24      	cmp	r2, #36	; 0x24
 800fc1e:	d824      	bhi.n	800fc6a <_realloc_r+0x22e>
 800fc20:	2a13      	cmp	r2, #19
 800fc22:	d908      	bls.n	800fc36 <_realloc_r+0x1fa>
 800fc24:	6823      	ldr	r3, [r4, #0]
 800fc26:	60ab      	str	r3, [r5, #8]
 800fc28:	6863      	ldr	r3, [r4, #4]
 800fc2a:	60eb      	str	r3, [r5, #12]
 800fc2c:	2a1b      	cmp	r2, #27
 800fc2e:	d80a      	bhi.n	800fc46 <_realloc_r+0x20a>
 800fc30:	3408      	adds	r4, #8
 800fc32:	f105 0010 	add.w	r0, r5, #16
 800fc36:	6823      	ldr	r3, [r4, #0]
 800fc38:	6003      	str	r3, [r0, #0]
 800fc3a:	6863      	ldr	r3, [r4, #4]
 800fc3c:	6043      	str	r3, [r0, #4]
 800fc3e:	68a3      	ldr	r3, [r4, #8]
 800fc40:	6083      	str	r3, [r0, #8]
 800fc42:	46a9      	mov	r9, r5
 800fc44:	e75c      	b.n	800fb00 <_realloc_r+0xc4>
 800fc46:	68a3      	ldr	r3, [r4, #8]
 800fc48:	612b      	str	r3, [r5, #16]
 800fc4a:	68e3      	ldr	r3, [r4, #12]
 800fc4c:	616b      	str	r3, [r5, #20]
 800fc4e:	2a24      	cmp	r2, #36	; 0x24
 800fc50:	bf01      	itttt	eq
 800fc52:	6923      	ldreq	r3, [r4, #16]
 800fc54:	61ab      	streq	r3, [r5, #24]
 800fc56:	6963      	ldreq	r3, [r4, #20]
 800fc58:	61eb      	streq	r3, [r5, #28]
 800fc5a:	bf19      	ittee	ne
 800fc5c:	3410      	addne	r4, #16
 800fc5e:	f105 0018 	addne.w	r0, r5, #24
 800fc62:	f105 0020 	addeq.w	r0, r5, #32
 800fc66:	3418      	addeq	r4, #24
 800fc68:	e7e5      	b.n	800fc36 <_realloc_r+0x1fa>
 800fc6a:	4621      	mov	r1, r4
 800fc6c:	f7ff feba 	bl	800f9e4 <memmove>
 800fc70:	e7e7      	b.n	800fc42 <_realloc_r+0x206>
 800fc72:	45d8      	cmp	r8, fp
 800fc74:	dc31      	bgt.n	800fcda <_realloc_r+0x29e>
 800fc76:	4628      	mov	r0, r5
 800fc78:	68eb      	ldr	r3, [r5, #12]
 800fc7a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800fc7e:	60d3      	str	r3, [r2, #12]
 800fc80:	609a      	str	r2, [r3, #8]
 800fc82:	1f32      	subs	r2, r6, #4
 800fc84:	2a24      	cmp	r2, #36	; 0x24
 800fc86:	d824      	bhi.n	800fcd2 <_realloc_r+0x296>
 800fc88:	2a13      	cmp	r2, #19
 800fc8a:	d908      	bls.n	800fc9e <_realloc_r+0x262>
 800fc8c:	6823      	ldr	r3, [r4, #0]
 800fc8e:	60ab      	str	r3, [r5, #8]
 800fc90:	6863      	ldr	r3, [r4, #4]
 800fc92:	60eb      	str	r3, [r5, #12]
 800fc94:	2a1b      	cmp	r2, #27
 800fc96:	d80a      	bhi.n	800fcae <_realloc_r+0x272>
 800fc98:	3408      	adds	r4, #8
 800fc9a:	f105 0010 	add.w	r0, r5, #16
 800fc9e:	6823      	ldr	r3, [r4, #0]
 800fca0:	6003      	str	r3, [r0, #0]
 800fca2:	6863      	ldr	r3, [r4, #4]
 800fca4:	6043      	str	r3, [r0, #4]
 800fca6:	68a3      	ldr	r3, [r4, #8]
 800fca8:	6083      	str	r3, [r0, #8]
 800fcaa:	465f      	mov	r7, fp
 800fcac:	e7c9      	b.n	800fc42 <_realloc_r+0x206>
 800fcae:	68a3      	ldr	r3, [r4, #8]
 800fcb0:	612b      	str	r3, [r5, #16]
 800fcb2:	68e3      	ldr	r3, [r4, #12]
 800fcb4:	616b      	str	r3, [r5, #20]
 800fcb6:	2a24      	cmp	r2, #36	; 0x24
 800fcb8:	bf01      	itttt	eq
 800fcba:	6923      	ldreq	r3, [r4, #16]
 800fcbc:	61ab      	streq	r3, [r5, #24]
 800fcbe:	6963      	ldreq	r3, [r4, #20]
 800fcc0:	61eb      	streq	r3, [r5, #28]
 800fcc2:	bf19      	ittee	ne
 800fcc4:	3410      	addne	r4, #16
 800fcc6:	f105 0018 	addne.w	r0, r5, #24
 800fcca:	f105 0020 	addeq.w	r0, r5, #32
 800fcce:	3418      	addeq	r4, #24
 800fcd0:	e7e5      	b.n	800fc9e <_realloc_r+0x262>
 800fcd2:	4621      	mov	r1, r4
 800fcd4:	f7ff fe86 	bl	800f9e4 <memmove>
 800fcd8:	e7e7      	b.n	800fcaa <_realloc_r+0x26e>
 800fcda:	4611      	mov	r1, r2
 800fcdc:	4650      	mov	r0, sl
 800fcde:	f7fc f8f9 	bl	800bed4 <_malloc_r>
 800fce2:	4683      	mov	fp, r0
 800fce4:	2800      	cmp	r0, #0
 800fce6:	f43f af6f 	beq.w	800fbc8 <_realloc_r+0x18c>
 800fcea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fcee:	f023 0301 	bic.w	r3, r3, #1
 800fcf2:	444b      	add	r3, r9
 800fcf4:	f1a0 0208 	sub.w	r2, r0, #8
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	d105      	bne.n	800fd08 <_realloc_r+0x2cc>
 800fcfc:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800fd00:	f027 0703 	bic.w	r7, r7, #3
 800fd04:	4437      	add	r7, r6
 800fd06:	e6fb      	b.n	800fb00 <_realloc_r+0xc4>
 800fd08:	1f32      	subs	r2, r6, #4
 800fd0a:	2a24      	cmp	r2, #36	; 0x24
 800fd0c:	d82f      	bhi.n	800fd6e <_realloc_r+0x332>
 800fd0e:	2a13      	cmp	r2, #19
 800fd10:	d92a      	bls.n	800fd68 <_realloc_r+0x32c>
 800fd12:	6823      	ldr	r3, [r4, #0]
 800fd14:	6003      	str	r3, [r0, #0]
 800fd16:	6863      	ldr	r3, [r4, #4]
 800fd18:	6043      	str	r3, [r0, #4]
 800fd1a:	2a1b      	cmp	r2, #27
 800fd1c:	d810      	bhi.n	800fd40 <_realloc_r+0x304>
 800fd1e:	f104 0208 	add.w	r2, r4, #8
 800fd22:	f100 0308 	add.w	r3, r0, #8
 800fd26:	6811      	ldr	r1, [r2, #0]
 800fd28:	6019      	str	r1, [r3, #0]
 800fd2a:	6851      	ldr	r1, [r2, #4]
 800fd2c:	6059      	str	r1, [r3, #4]
 800fd2e:	6892      	ldr	r2, [r2, #8]
 800fd30:	609a      	str	r2, [r3, #8]
 800fd32:	4621      	mov	r1, r4
 800fd34:	4650      	mov	r0, sl
 800fd36:	f7fe fe71 	bl	800ea1c <_free_r>
 800fd3a:	e745      	b.n	800fbc8 <_realloc_r+0x18c>
 800fd3c:	20000460 	.word	0x20000460
 800fd40:	68a3      	ldr	r3, [r4, #8]
 800fd42:	6083      	str	r3, [r0, #8]
 800fd44:	68e3      	ldr	r3, [r4, #12]
 800fd46:	60c3      	str	r3, [r0, #12]
 800fd48:	2a24      	cmp	r2, #36	; 0x24
 800fd4a:	bf01      	itttt	eq
 800fd4c:	6923      	ldreq	r3, [r4, #16]
 800fd4e:	6103      	streq	r3, [r0, #16]
 800fd50:	6961      	ldreq	r1, [r4, #20]
 800fd52:	6141      	streq	r1, [r0, #20]
 800fd54:	bf19      	ittee	ne
 800fd56:	f104 0210 	addne.w	r2, r4, #16
 800fd5a:	f100 0310 	addne.w	r3, r0, #16
 800fd5e:	f104 0218 	addeq.w	r2, r4, #24
 800fd62:	f100 0318 	addeq.w	r3, r0, #24
 800fd66:	e7de      	b.n	800fd26 <_realloc_r+0x2ea>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	4622      	mov	r2, r4
 800fd6c:	e7db      	b.n	800fd26 <_realloc_r+0x2ea>
 800fd6e:	4621      	mov	r1, r4
 800fd70:	f7ff fe38 	bl	800f9e4 <memmove>
 800fd74:	e7dd      	b.n	800fd32 <_realloc_r+0x2f6>
 800fd76:	4637      	mov	r7, r6
 800fd78:	e6c2      	b.n	800fb00 <_realloc_r+0xc4>
 800fd7a:	4317      	orrs	r7, r2
 800fd7c:	f8c9 7004 	str.w	r7, [r9, #4]
 800fd80:	685a      	ldr	r2, [r3, #4]
 800fd82:	f042 0201 	orr.w	r2, r2, #1
 800fd86:	605a      	str	r2, [r3, #4]
 800fd88:	e6d6      	b.n	800fb38 <_realloc_r+0xfc>
 800fd8a:	bf00      	nop

0800fd8c <__swbuf_r>:
 800fd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd8e:	460d      	mov	r5, r1
 800fd90:	4614      	mov	r4, r2
 800fd92:	4606      	mov	r6, r0
 800fd94:	b118      	cbz	r0, 800fd9e <__swbuf_r+0x12>
 800fd96:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800fd98:	b90b      	cbnz	r3, 800fd9e <__swbuf_r+0x12>
 800fd9a:	f7fe fdaf 	bl	800e8fc <__sinit>
 800fd9e:	69a3      	ldr	r3, [r4, #24]
 800fda0:	60a3      	str	r3, [r4, #8]
 800fda2:	89a3      	ldrh	r3, [r4, #12]
 800fda4:	0719      	lsls	r1, r3, #28
 800fda6:	d528      	bpl.n	800fdfa <__swbuf_r+0x6e>
 800fda8:	6923      	ldr	r3, [r4, #16]
 800fdaa:	b333      	cbz	r3, 800fdfa <__swbuf_r+0x6e>
 800fdac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdb0:	b2ed      	uxtb	r5, r5
 800fdb2:	049a      	lsls	r2, r3, #18
 800fdb4:	462f      	mov	r7, r5
 800fdb6:	d52a      	bpl.n	800fe0e <__swbuf_r+0x82>
 800fdb8:	6923      	ldr	r3, [r4, #16]
 800fdba:	6820      	ldr	r0, [r4, #0]
 800fdbc:	1ac0      	subs	r0, r0, r3
 800fdbe:	6963      	ldr	r3, [r4, #20]
 800fdc0:	4283      	cmp	r3, r0
 800fdc2:	dc04      	bgt.n	800fdce <__swbuf_r+0x42>
 800fdc4:	4621      	mov	r1, r4
 800fdc6:	4630      	mov	r0, r6
 800fdc8:	f7fe fd2c 	bl	800e824 <_fflush_r>
 800fdcc:	b9d8      	cbnz	r0, 800fe06 <__swbuf_r+0x7a>
 800fdce:	68a3      	ldr	r3, [r4, #8]
 800fdd0:	3b01      	subs	r3, #1
 800fdd2:	60a3      	str	r3, [r4, #8]
 800fdd4:	6823      	ldr	r3, [r4, #0]
 800fdd6:	1c5a      	adds	r2, r3, #1
 800fdd8:	6022      	str	r2, [r4, #0]
 800fdda:	701d      	strb	r5, [r3, #0]
 800fddc:	6963      	ldr	r3, [r4, #20]
 800fdde:	3001      	adds	r0, #1
 800fde0:	4283      	cmp	r3, r0
 800fde2:	d004      	beq.n	800fdee <__swbuf_r+0x62>
 800fde4:	89a3      	ldrh	r3, [r4, #12]
 800fde6:	07db      	lsls	r3, r3, #31
 800fde8:	d50f      	bpl.n	800fe0a <__swbuf_r+0x7e>
 800fdea:	2d0a      	cmp	r5, #10
 800fdec:	d10d      	bne.n	800fe0a <__swbuf_r+0x7e>
 800fdee:	4621      	mov	r1, r4
 800fdf0:	4630      	mov	r0, r6
 800fdf2:	f7fe fd17 	bl	800e824 <_fflush_r>
 800fdf6:	b140      	cbz	r0, 800fe0a <__swbuf_r+0x7e>
 800fdf8:	e005      	b.n	800fe06 <__swbuf_r+0x7a>
 800fdfa:	4621      	mov	r1, r4
 800fdfc:	4630      	mov	r0, r6
 800fdfe:	f7fd fde5 	bl	800d9cc <__swsetup_r>
 800fe02:	2800      	cmp	r0, #0
 800fe04:	d0d2      	beq.n	800fdac <__swbuf_r+0x20>
 800fe06:	f04f 37ff 	mov.w	r7, #4294967295
 800fe0a:	4638      	mov	r0, r7
 800fe0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fe12:	81a3      	strh	r3, [r4, #12]
 800fe14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fe1a:	6663      	str	r3, [r4, #100]	; 0x64
 800fe1c:	e7cc      	b.n	800fdb8 <__swbuf_r+0x2c>
	...

0800fe20 <_wcrtomb_r>:
 800fe20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe22:	4c0f      	ldr	r4, [pc, #60]	; (800fe60 <_wcrtomb_r+0x40>)
 800fe24:	6824      	ldr	r4, [r4, #0]
 800fe26:	b085      	sub	sp, #20
 800fe28:	4605      	mov	r5, r0
 800fe2a:	461e      	mov	r6, r3
 800fe2c:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800fe2e:	b981      	cbnz	r1, 800fe52 <_wcrtomb_r+0x32>
 800fe30:	4a0c      	ldr	r2, [pc, #48]	; (800fe64 <_wcrtomb_r+0x44>)
 800fe32:	2c00      	cmp	r4, #0
 800fe34:	bf08      	it	eq
 800fe36:	4614      	moveq	r4, r2
 800fe38:	460a      	mov	r2, r1
 800fe3a:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800fe3e:	a901      	add	r1, sp, #4
 800fe40:	47a0      	blx	r4
 800fe42:	1c43      	adds	r3, r0, #1
 800fe44:	bf01      	itttt	eq
 800fe46:	2300      	moveq	r3, #0
 800fe48:	6033      	streq	r3, [r6, #0]
 800fe4a:	238a      	moveq	r3, #138	; 0x8a
 800fe4c:	602b      	streq	r3, [r5, #0]
 800fe4e:	b005      	add	sp, #20
 800fe50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe52:	4f04      	ldr	r7, [pc, #16]	; (800fe64 <_wcrtomb_r+0x44>)
 800fe54:	2c00      	cmp	r4, #0
 800fe56:	bf08      	it	eq
 800fe58:	463c      	moveq	r4, r7
 800fe5a:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800fe5e:	e7ef      	b.n	800fe40 <_wcrtomb_r+0x20>
 800fe60:	20000030 	.word	0x20000030
 800fe64:	20000874 	.word	0x20000874

0800fe68 <__ascii_wctomb>:
 800fe68:	b149      	cbz	r1, 800fe7e <__ascii_wctomb+0x16>
 800fe6a:	2aff      	cmp	r2, #255	; 0xff
 800fe6c:	bf85      	ittet	hi
 800fe6e:	238a      	movhi	r3, #138	; 0x8a
 800fe70:	6003      	strhi	r3, [r0, #0]
 800fe72:	700a      	strbls	r2, [r1, #0]
 800fe74:	f04f 30ff 	movhi.w	r0, #4294967295
 800fe78:	bf98      	it	ls
 800fe7a:	2001      	movls	r0, #1
 800fe7c:	4770      	bx	lr
 800fe7e:	4608      	mov	r0, r1
 800fe80:	4770      	bx	lr
	...

0800fe84 <_gettimeofday>:
 800fe84:	4b02      	ldr	r3, [pc, #8]	; (800fe90 <_gettimeofday+0xc>)
 800fe86:	2258      	movs	r2, #88	; 0x58
 800fe88:	601a      	str	r2, [r3, #0]
 800fe8a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe8e:	4770      	bx	lr
 800fe90:	20005164 	.word	0x20005164

0800fe94 <_init>:
 800fe94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe96:	bf00      	nop
 800fe98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe9a:	bc08      	pop	{r3}
 800fe9c:	469e      	mov	lr, r3
 800fe9e:	4770      	bx	lr

0800fea0 <_fini>:
 800fea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fea2:	bf00      	nop
 800fea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fea6:	bc08      	pop	{r3}
 800fea8:	469e      	mov	lr, r3
 800feaa:	4770      	bx	lr
